declare namespace cocoascript {
  /**
   * A discrete gesture recognizer that interprets pointer movement over a view.
   * doc://com.apple.documentation/documentation/uikit/uihovergesturerecognizer
   */
  interface UIHoverGestureRecognizer extends UIGestureRecognizer {
    //
    alloc():cocoascript.UIHoverGestureRecognizer;
    //
    init():cocoascript.UIHoverGestureRecognizer;
  }
}

declare const UIHoverGestureRecognizer: cocoascript.UIHoverGestureRecognizer;
declare namespace cocoascript {
  /**
   * A representation of the current device.
   * doc://com.apple.documentation/documentation/uikit/uidevice
   */
  interface UIDevice extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620014-currentdevice
    currentDevice(): cocoascript.UIDevice;
    setCurrentDevice(): void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620036-multitaskingsupported
    multitaskingSupported(): cocoascript.BOOL;
    setMultitaskingSupported(): void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620015-name
    name(): cocoascript.NSString;
    setName(): void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620054-systemname
    systemName(): cocoascript.NSString;
    setSystemName(): void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620043-systemversion
    systemVersion(): cocoascript.NSString;
    setSystemVersion(): void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620044-model
    model(): cocoascript.NSString;
    setModel(): void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620029-localizedmodel
    localizedModel(): cocoascript.NSString;
    setLocalizedModel(): void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620037-userinterfaceidiom
    userInterfaceIdiom(): cocoascript.UIUserInterfaceIdiom;
    setUserInterfaceIdiom(): void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620059-identifierforvendor
    identifierForVendor(): cocoascript.NSUUID;
    setIdentifierForVendor(): void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620053-orientation
    orientation(): cocoascript.UIDeviceOrientation;
    setOrientation(): void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620055-generatesdeviceorientationnotifi
    generatesDeviceOrientationNotifications(): cocoascript.BOOL;
    setGeneratesDeviceOrientationNotifications(): void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620041-begingeneratingdeviceorientation
    beginGeneratingDeviceOrientationNotifications():void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620033-endgeneratingdeviceorientationno
    endGeneratingDeviceOrientationNotifications():void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620042-batterylevel
    batteryLevel(): number;
    setBatteryLevel(): void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620045-batterymonitoringenabled
    batteryMonitoringEnabled(): cocoascript.BOOL;
    setBatteryMonitoringEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620051-batterystate
    batteryState(): cocoascript.UIDeviceBatteryState;
    setBatteryState(): void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620017-proximitymonitoringenabled
    proximityMonitoringEnabled(): cocoascript.BOOL;
    setProximityMonitoringEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620058-proximitystate
    proximityState(): cocoascript.BOOL;
    setProximityState(): void;
    // doc://com.apple.documentation/documentation/uikit/uidevice/1620050-playinputclick
    playInputClick():void;
    //
    alloc():cocoascript.UIDevice;
    //
    init():cocoascript.UIDevice;
  }
}

declare const UIDevice: cocoascript.UIDevice;
declare const UI_USER_INTERFACE_IDIOM: void;
declare namespace cocoascript {
  /**
   * An object from a data set type stored in an asset catalog.
   * doc://com.apple.documentation/documentation/uikit/nsdataasset
   */
  interface NSDataAsset extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nsdataasset/1403439-initwithname
    initWithName(name: cocoascript.NSDataAssetName):cocoascript.NSDataAsset;
    // doc://com.apple.documentation/documentation/uikit/nsdataasset/1403436-initwithname
    initWithName_bundle(name: cocoascript.NSDataAssetName, bundle: cocoascript.NSBundle):cocoascript.NSDataAsset;
    // doc://com.apple.documentation/documentation/uikit/nsdataasset/1403437-data
    data(): cocoascript.NSData;
    setData(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdataasset/1403435-name
    name(): cocoascript.NSDataAssetName;
    setName(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdataasset/1403434-typeidentifier
    typeIdentifier(): cocoascript.NSString;
    setTypeIdentifier(): void;
    //
    alloc():cocoascript.NSDataAsset;
    //
    init():cocoascript.NSDataAsset;
  }
}

declare const NSDataAsset: cocoascript.NSDataAsset;
declare namespace cocoascript {
  /**
   * The relationship between two user interface objects that must be satisfied by the constraint-based layout system.
   * doc://com.apple.documentation/documentation/uikit/nslayoutconstraint
   */
  interface NSLayoutConstraint extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nslayoutconstraint/1527000-active
    active(): cocoascript.BOOL;
    setActive(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutconstraint/1526860-firstitem
    firstItem(): cocoascript.id;
    setFirstItem(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutconstraint/1525204-firstattribute
    firstAttribute(): cocoascript.NSLayoutAttribute;
    setFirstAttribute(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutconstraint/1526549-relation
    relation(): cocoascript.NSLayoutRelation;
    setRelation(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutconstraint/1526868-seconditem
    secondItem(): cocoascript.id;
    setSecondItem(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutconstraint/1526941-secondattribute
    secondAttribute(): cocoascript.NSLayoutAttribute;
    setSecondAttribute(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutconstraint/1526920-multiplier
    multiplier(): cocoascript.CGFloat;
    setMultiplier(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutconstraint/1526928-constant
    constant(): cocoascript.CGFloat;
    setConstant(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutconstraint/1644261-firstanchor
    firstAnchor(): cocoascript.NSLayoutAnchor;
    setFirstAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutconstraint/1644260-secondanchor
    secondAnchor(): cocoascript.NSLayoutAnchor;
    setSecondAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutconstraint/1526946-priority
    priority(): cocoascript.UILayoutPriority;
    setPriority(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutconstraint/1526879-identifier
    identifier(): cocoascript.NSString;
    setIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutconstraint/1525647-shouldbearchived
    shouldBeArchived(): cocoascript.BOOL;
    setShouldBeArchived(): void;
    //
    alloc():cocoascript.NSLayoutConstraint;
    //
    init():cocoascript.NSLayoutConstraint;
  }
}

declare const NSLayoutConstraint: cocoascript.NSLayoutConstraint;
declare namespace cocoascript {
  /**
   * A factory class for creating size-based layout constraint objects using a fluent API.
   * doc://com.apple.documentation/documentation/uikit/nslayoutdimension
   */
  interface NSLayoutDimension extends NSLayoutAnchor {
    // doc://com.apple.documentation/documentation/uikit/nslayoutdimension/1500951-constraintequaltoanchor
    constraintEqualToAnchor_multiplier(anchor: cocoascript.NSLayoutDimension, m: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutdimension/1500934-constraintequaltoanchor
    constraintEqualToAnchor_multiplier_constant(anchor: cocoascript.NSLayoutDimension, m: cocoascript.CGFloat, c: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutdimension/1500941-constraintequaltoconstant
    constraintEqualToConstant(c: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutdimension/1500961-constraintgreaterthanorequaltoan
    constraintGreaterThanOrEqualToAnchor_multiplier(anchor: cocoascript.NSLayoutDimension, m: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutdimension/1500965-constraintgreaterthanorequaltoan
    constraintGreaterThanOrEqualToAnchor_multiplier_constant(anchor: cocoascript.NSLayoutDimension, m: cocoascript.CGFloat, c: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutdimension/1500939-constraintgreaterthanorequaltoco
    constraintGreaterThanOrEqualToConstant(c: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutdimension/1500943-constraintlessthanorequaltoancho
    constraintLessThanOrEqualToAnchor_multiplier(anchor: cocoascript.NSLayoutDimension, m: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutdimension/1500957-constraintlessthanorequaltoancho
    constraintLessThanOrEqualToAnchor_multiplier_constant(anchor: cocoascript.NSLayoutDimension, m: cocoascript.CGFloat, c: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutdimension/1500963-constraintlessthanorequaltoconst
    constraintLessThanOrEqualToConstant(c: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    //
    alloc():cocoascript.NSLayoutDimension;
    //
    init():cocoascript.NSLayoutDimension;
  }
}

declare const NSLayoutDimension: cocoascript.NSLayoutDimension;
declare namespace cocoascript {
  /**
   * A factory class for creating layout constraint objects using a fluent API.
   * doc://com.apple.documentation/documentation/uikit/nslayoutanchor
   */
  interface NSLayoutAnchor extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nslayoutanchor/1500946-constraintequaltoanchor
    constraintEqualToAnchor(anchor: cocoascript.NSLayoutAnchor):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutanchor/1500937-constraintequaltoanchor
    constraintEqualToAnchor_constant(anchor: cocoascript.NSLayoutAnchor, c: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutanchor/1500936-constraintgreaterthanorequaltoan
    constraintGreaterThanOrEqualToAnchor(anchor: cocoascript.NSLayoutAnchor):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutanchor/1500948-constraintgreaterthanorequaltoan
    constraintGreaterThanOrEqualToAnchor_constant(anchor: cocoascript.NSLayoutAnchor, c: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutanchor/1500953-constraintlessthanorequaltoancho
    constraintLessThanOrEqualToAnchor(anchor: cocoascript.NSLayoutAnchor):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutanchor/1500959-constraintlessthanorequaltoancho
    constraintLessThanOrEqualToAnchor_constant(anchor: cocoascript.NSLayoutAnchor, c: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/appkit/nslayoutanchor/2870023-constraintsaffectinglayout
    constraintsAffectingLayout(): cocoascript.NSLayoutConstraint;
    setConstraintsAffectingLayout(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutanchor/2870024-hasambiguouslayout
    hasAmbiguousLayout(): cocoascript.BOOL;
    setHasAmbiguousLayout(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutanchor/2870022-name
    name(): cocoascript.NSString;
    setName(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutanchor/2870025-item
    item(): cocoascript.id;
    setItem(): void;
    //
    alloc():cocoascript.NSLayoutAnchor;
    //
    init():cocoascript.NSLayoutAnchor;
  }
}

declare const NSLayoutAnchor: cocoascript.NSLayoutAnchor;
declare namespace cocoascript {
  /**
   * A factory class for creating horizontal layout constraint objects using a fluent API.
   * doc://com.apple.documentation/documentation/uikit/nslayoutxaxisanchor
   */
  interface NSLayoutXAxisAnchor extends NSLayoutAnchor {
    // doc://com.apple.documentation/documentation/uikit/nslayoutxaxisanchor/2866112-constraintequaltosystemspacingaf
    constraintEqualToSystemSpacingAfterAnchor_multiplier(anchor: cocoascript.NSLayoutXAxisAnchor, multiplier: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutxaxisanchor/2865871-constraintgreaterthanorequaltosy
    constraintGreaterThanOrEqualToSystemSpacingAfterAnchor_multiplier(anchor: cocoascript.NSLayoutXAxisAnchor, multiplier: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutxaxisanchor/2866018-constraintlessthanorequaltosyste
    constraintLessThanOrEqualToSystemSpacingAfterAnchor_multiplier(anchor: cocoascript.NSLayoutXAxisAnchor, multiplier: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutxaxisanchor/2866024-anchorwithoffsettoanchor
    anchorWithOffsetToAnchor(otherAnchor: cocoascript.NSLayoutXAxisAnchor):cocoascript.NSLayoutDimension;
    //
    alloc():cocoascript.NSLayoutXAxisAnchor;
    //
    init():cocoascript.NSLayoutXAxisAnchor;
  }
}

declare const NSLayoutXAxisAnchor: cocoascript.NSLayoutXAxisAnchor;
declare namespace cocoascript {
  /**
   * A factory class for creating vertical layout constraint objects using a fluent API.
   * doc://com.apple.documentation/documentation/uikit/nslayoutyaxisanchor
   */
  interface NSLayoutYAxisAnchor extends NSLayoutAnchor {
    // doc://com.apple.documentation/documentation/uikit/nslayoutyaxisanchor/2866022-constraintequaltosystemspacingbe
    constraintEqualToSystemSpacingBelowAnchor_multiplier(anchor: cocoascript.NSLayoutYAxisAnchor, multiplier: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutyaxisanchor/2866086-constraintgreaterthanorequaltosy
    constraintGreaterThanOrEqualToSystemSpacingBelowAnchor_multiplier(anchor: cocoascript.NSLayoutYAxisAnchor, multiplier: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutyaxisanchor/2865829-constraintlessthanorequaltosyste
    constraintLessThanOrEqualToSystemSpacingBelowAnchor_multiplier(anchor: cocoascript.NSLayoutYAxisAnchor, multiplier: cocoascript.CGFloat):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutyaxisanchor/2865935-anchorwithoffsettoanchor
    anchorWithOffsetToAnchor(otherAnchor: cocoascript.NSLayoutYAxisAnchor):cocoascript.NSLayoutDimension;
    //
    alloc():cocoascript.NSLayoutYAxisAnchor;
    //
    init():cocoascript.NSLayoutYAxisAnchor;
  }
}

declare const NSLayoutYAxisAnchor: cocoascript.NSLayoutYAxisAnchor;
declare namespace cocoascript {
  /**
   * An object that manages metrics for drawing attributed strings.
   * doc://com.apple.documentation/documentation/uikit/nsstringdrawingcontext
   */
  interface NSStringDrawingContext extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nsstringdrawingcontext/1534020-minimumscalefactor
    minimumScaleFactor(): cocoascript.CGFloat;
    setMinimumScaleFactor(): void;
    // doc://com.apple.documentation/documentation/uikit/nsstringdrawingcontext/1531498-actualscalefactor
    actualScaleFactor(): cocoascript.CGFloat;
    setActualScaleFactor(): void;
    // doc://com.apple.documentation/documentation/uikit/nsstringdrawingcontext/1530525-totalbounds
    totalBounds(): cocoascript.CGRect;
    setTotalBounds(): void;
    // doc://com.apple.documentation/documentation/uikit/nsstringdrawingcontext/1624043-minimumtrackingadjustment
    minimumTrackingAdjustment(): cocoascript.CGFloat;
    setMinimumTrackingAdjustment(): void;
    // doc://com.apple.documentation/documentation/uikit/nsstringdrawingcontext/1624042-actualtrackingadjustment
    actualTrackingAdjustment(): cocoascript.CGFloat;
    setActualTrackingAdjustment(): void;
    //
    alloc():cocoascript.NSStringDrawingContext;
    //
    init():cocoascript.NSStringDrawingContext;
  }
}

declare const NSStringDrawingContext: cocoascript.NSStringDrawingContext;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nsstringdrawingoptions
  type NSStringDrawingOptions = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * An encapsulation of the attributes that create a drop shadow during drawing operations.
   * doc://com.apple.documentation/documentation/uikit/nsshadow
   */
  interface NSShadow extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nsshadow/1429853-init
    init():cocoascript.NSShadow;
    // doc://com.apple.documentation/documentation/uikit/nsshadow/1623903-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.NSShadow;
    // doc://com.apple.documentation/documentation/uikit/nsshadow/1429851-shadowoffset
    shadowOffset(): cocoascript.CGSize;
    setShadowOffset(): void;
    // doc://com.apple.documentation/documentation/uikit/nsshadow/1429846-shadowblurradius
    shadowBlurRadius(): cocoascript.CGFloat;
    setShadowBlurRadius(): void;
    // doc://com.apple.documentation/documentation/uikit/nsshadow/1429855-shadowcolor
    shadowColor(): cocoascript.id;
    setShadowColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsshadow/1429857-set
    set():void;
    //
    alloc():cocoascript.NSShadow;
    //
    init():cocoascript.NSShadow;
  }
}

declare const NSShadow: cocoascript.NSShadow;
declare namespace cocoascript {
  /**
   * The fundamental storage mechanism of TextKit.
   * doc://com.apple.documentation/documentation/uikit/nstextstorage
   */
  interface NSTextStorage extends NSMutableAttributedString {
    // doc://com.apple.documentation/documentation/uikit/nstextstorage/1532704-delegate
    delegate(): cocoascript.NSTextStorageDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextstorage/1527938-layoutmanagers
    layoutManagers(): cocoascript.NSLayoutManager;
    setLayoutManagers(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextstorage/1533459-addlayoutmanager
    addLayoutManager(aLayoutManager: cocoascript.NSLayoutManager):void;
    // doc://com.apple.documentation/documentation/uikit/nstextstorage/1528755-removelayoutmanager
    removeLayoutManager(aLayoutManager: cocoascript.NSLayoutManager):void;
    // doc://com.apple.documentation/documentation/uikit/nstextstorage/1529793-edited
    edited_range_changeInLength(editedMask: cocoascript.NSTextStorageEditActions, editedRange: cocoascript.NSRange, delta: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/nstextstorage/1525980-processediting
    processEditing():void;
    // doc://com.apple.documentation/documentation/uikit/nstextstorage/1534025-invalidateattributesinrange
    invalidateAttributesInRange(range: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/nstextstorage/1533947-ensureattributesarefixedinrange
    ensureAttributesAreFixedInRange(range: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/nstextstorage/1532043-fixesattributeslazily
    fixesAttributesLazily(): cocoascript.BOOL;
    setFixesAttributesLazily(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextstorage/1525323-editedmask
    editedMask(): cocoascript.NSTextStorageEditActions;
    setEditedMask(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextstorage/1524379-editedrange
    editedRange(): cocoascript.NSRange;
    setEditedRange(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextstorage/1528400-changeinlength
    changeInLength(): cocoascript.NSInteger;
    setChangeInLength(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextstorage/1532095-attributeruns
    attributeRuns(): cocoascript.NSTextStorage;
    setAttributeRuns(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextstorage/1525943-paragraphs
    paragraphs(): cocoascript.NSTextStorage;
    setParagraphs(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextstorage/1524565-words
    words(): cocoascript.NSTextStorage;
    setWords(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextstorage/1535788-characters
    characters(): cocoascript.NSTextStorage;
    setCharacters(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextstorage/1535365-font
    font(): cocoascript.NSFont;
    setFont(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextstorage/1527175-foregroundcolor
    foregroundColor(): cocoascript.NSColor;
    setForegroundColor(): void;
    //
    alloc():cocoascript.NSTextStorage;
    //
    init():cocoascript.NSTextStorage;
  }
}

declare const NSTextStorage: cocoascript.NSTextStorage;
declare namespace cocoascript {
  /**
   * An object that coordinates the layout and display of text characters.
   * doc://com.apple.documentation/documentation/uikit/nslayoutmanager
   */
  interface NSLayoutManager extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402975-init
    init():cocoascript.NSLayoutManager;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403043-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.NSLayoutManager;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402920-delegate
    delegate(): cocoascript.NSLayoutManagerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403015-textstorage
    textStorage(): cocoascript.NSTextStorage;
    setTextStorage(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403227-replacetextstorage
    replaceTextStorage(newTextStorage: cocoascript.NSTextStorage):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403197-allowsnoncontiguouslayout
    allowsNonContiguousLayout(): cocoascript.BOOL;
    setAllowsNonContiguousLayout(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403207-hasnoncontiguouslayout
    hasNonContiguousLayout(): cocoascript.BOOL;
    setHasNonContiguousLayout(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403254-showsinvisiblecharacters
    showsInvisibleCharacters(): cocoascript.BOOL;
    setShowsInvisibleCharacters(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402912-showscontrolcharacters
    showsControlCharacters(): cocoascript.BOOL;
    setShowsControlCharacters(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403156-usesfontleading
    usesFontLeading(): cocoascript.BOOL;
    setUsesFontLeading(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1402952-backgroundlayoutenabled
    backgroundLayoutEnabled(): cocoascript.BOOL;
    setBackgroundLayoutEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/3021179-limitslayoutforsuspiciouscontent
    limitsLayoutForSuspiciousContents(): cocoascript.BOOL;
    setLimitsLayoutForSuspiciousContents(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/3180380-usesdefaulthyphenation
    usesDefaultHyphenation(): cocoascript.BOOL;
    setUsesDefaultHyphenation(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403144-textcontainers
    textContainers(): cocoascript.NSTextContainer;
    setTextContainers(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402946-addtextcontainer
    addTextContainer(container: cocoascript.NSTextContainer):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403010-inserttextcontainer
    insertTextContainer_atIndex(container: cocoascript.NSTextContainer, index: cocoascript.NSUInteger):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403017-removetextcontaineratindex
    removeTextContainerAtIndex(index: cocoascript.NSUInteger):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403241-settextcontainer
    setTextContainer_forGlyphRange(container: cocoascript.NSTextContainer, glyphRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403091-textcontainerchangedgeometry
    textContainerChangedGeometry(container: cocoascript.NSTextContainer):void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403229-textcontainerchangedtextview
    textContainerChangedTextView(container: cocoascript.NSTextContainer):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403110-textcontainerforglyphatindex
    textContainerForGlyphAtIndex_effectiveRange(glyphIndex: cocoascript.NSUInteger, effectiveGlyphRange: cocoascript.NSRangePointer):cocoascript.NSTextContainer;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403055-textcontainerforglyphatindex
    textContainerForGlyphAtIndex_effectiveRange_withoutAdditionalLayout(glyphIndex: cocoascript.NSUInteger, effectiveGlyphRange: cocoascript.NSRangePointer, flag: cocoascript.BOOL):cocoascript.NSTextContainer;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402980-usedrectfortextcontainer
    usedRectForTextContainer(container: cocoascript.NSTextContainer):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402924-invalidatedisplayforcharacterran
    invalidateDisplayForCharacterRange(charRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403118-invalidatedisplayforglyphrange
    invalidateDisplayForGlyphRange(glyphRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403171-invalidateglyphsforcharacterrang
    invalidateGlyphsForCharacterRange_changeInLength_actualCharacterRange(charRange: cocoascript.NSRange, delta: cocoascript.NSInteger, actualCharRange: cocoascript.NSRangePointer):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403248-invalidatelayoutforcharacterrang
    invalidateLayoutForCharacterRange_actualCharacterRange(charRange: cocoascript.NSRange, actualCharRange: cocoascript.NSRangePointer):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403065-processeditingfortextstorage
    processEditingForTextStorage_edited_range_changeInLength_invalidatedRange(textStorage: cocoascript.NSTextStorage, editMask: cocoascript.NSTextStorageEditActions, newCharRange: cocoascript.NSRange, delta: cocoascript.NSInteger, invalidatedCharRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403189-ensureglyphsforcharacterrange
    ensureGlyphsForCharacterRange(charRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403219-ensureglyphsforglyphrange
    ensureGlyphsForGlyphRange(glyphRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402962-ensurelayoutforboundingrect
    ensureLayoutForBoundingRect_inTextContainer(bounds: cocoascript.CGRect, container: cocoascript.NSTextContainer):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402986-ensurelayoutforcharacterrange
    ensureLayoutForCharacterRange(charRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402939-ensurelayoutforglyphrange
    ensureLayoutForGlyphRange(glyphRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402967-ensurelayoutfortextcontainer
    ensureLayoutForTextContainer(container: cocoascript.NSTextContainer):void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403069-glyphgenerator
    glyphGenerator(): cocoascript.NSGlyphGenerator;
    setGlyphGenerator(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403104-getglyphsinrange
    getGlyphsInRange_glyphs_properties_characterIndexes_bidiLevels(glyphRange: cocoascript.NSRange, glyphBuffer: cocoascript.CGGlyph, props: cocoascript.NSGlyphProperty, charIndexBuffer: cocoascript.NSUInteger, bidiLevelBuffer: cocoascript.unsigned):cocoascript.NSUInteger;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403039-cgglyphatindex
    CGGlyphAtIndex(glyphIndex: cocoascript.NSUInteger):cocoascript.CGGlyph;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403132-cgglyphatindex
    CGGlyphAtIndex_isValidIndex(glyphIndex: cocoascript.NSUInteger, isValidIndex: cocoascript.BOOL):cocoascript.CGGlyph;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403030-setglyphs
    setGlyphs_properties_characterIndexes_font_forGlyphRange(glyphs: cocoascript.CGGlyph, props: cocoascript.NSGlyphProperty, charIndexes: cocoascript.NSUInteger, aFont: cocoascript.UIFont, glyphRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402944-characterindexforglyphatindex
    characterIndexForGlyphAtIndex(glyphIndex: cocoascript.NSUInteger):cocoascript.NSUInteger;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403001-glyphindexforcharacteratindex
    glyphIndexForCharacterAtIndex(charIndex: cocoascript.NSUInteger):cocoascript.NSUInteger;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402950-isvalidglyphindex
    isValidGlyphIndex(glyphIndex: cocoascript.NSUInteger):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402937-numberofglyphs
    numberOfGlyphs(): cocoascript.NSUInteger;
    setNumberOfGlyphs(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403014-propertyforglyphatindex
    propertyForGlyphAtIndex(glyphIndex: cocoascript.NSUInteger):cocoascript.NSGlyphProperty;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403047-setattachmentsize
    setAttachmentSize_forGlyphRange(attachmentSize: cocoascript.CGSize, glyphRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402964-setdrawsoutsidelinefragment
    setDrawsOutsideLineFragment_forGlyphAtIndex(flag: cocoascript.BOOL, glyphIndex: cocoascript.NSUInteger):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403071-setextralinefragmentrect
    setExtraLineFragmentRect_usedRect_textContainer(fragmentRect: cocoascript.CGRect, usedRect: cocoascript.CGRect, container: cocoascript.NSTextContainer):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402935-setlinefragmentrect
    setLineFragmentRect_forGlyphRange_usedRect(fragmentRect: cocoascript.CGRect, glyphRange: cocoascript.NSRange, usedRect: cocoascript.CGRect):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402982-setlocation
    setLocation_forStartOfGlyphRange(location: cocoascript.CGPoint, glyphRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403078-setnotshownattribute
    setNotShownAttribute_forGlyphAtIndex(flag: cocoascript.BOOL, glyphIndex: cocoascript.NSUInteger):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403099-attachmentsizeforglyphatindex
    attachmentSizeForGlyphAtIndex(glyphIndex: cocoascript.NSUInteger):cocoascript.CGSize;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403003-drawsoutsidelinefragmentforglyph
    drawsOutsideLineFragmentForGlyphAtIndex(glyphIndex: cocoascript.NSUInteger):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403175-extralinefragmentrect
    extraLineFragmentRect(): cocoascript.CGRect;
    setExtraLineFragmentRect(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403165-extralinefragmenttextcontainer
    extraLineFragmentTextContainer(): cocoascript.NSTextContainer;
    setExtraLineFragmentTextContainer(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402988-extralinefragmentusedrect
    extraLineFragmentUsedRect(): cocoascript.CGRect;
    setExtraLineFragmentUsedRect(): void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403067-firstunlaidcharacterindex
    firstUnlaidCharacterIndex():cocoascript.NSUInteger;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403245-firstunlaidglyphindex
    firstUnlaidGlyphIndex():cocoascript.NSUInteger;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403187-getfirstunlaidcharacterindex
    getFirstUnlaidCharacterIndex_glyphIndex(charIndex: cocoascript.NSUInteger, glyphIndex: cocoascript.NSUInteger):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403140-linefragmentrectforglyphatindex
    lineFragmentRectForGlyphAtIndex_effectiveRange(glyphIndex: cocoascript.NSUInteger, effectiveGlyphRange: cocoascript.NSRangePointer):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403116-linefragmentrectforglyphatindex
    lineFragmentRectForGlyphAtIndex_effectiveRange_withoutAdditionalLayout(glyphIndex: cocoascript.NSUInteger, effectiveGlyphRange: cocoascript.NSRangePointer, flag: cocoascript.BOOL):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403193-linefragmentusedrectforglyphatin
    lineFragmentUsedRectForGlyphAtIndex_effectiveRange(glyphIndex: cocoascript.NSUInteger, effectiveGlyphRange: cocoascript.NSRangePointer):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403035-linefragmentusedrectforglyphatin
    lineFragmentUsedRectForGlyphAtIndex_effectiveRange_withoutAdditionalLayout(glyphIndex: cocoascript.NSUInteger, effectiveGlyphRange: cocoascript.NSRangePointer, flag: cocoascript.BOOL):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403239-locationforglyphatindex
    locationForGlyphAtIndex(glyphIndex: cocoascript.NSUInteger):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402931-notshownattributeforglyphatindex
    notShownAttributeForGlyphAtIndex(glyphIndex: cocoascript.NSUInteger):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403203-truncatedglyphrangeinlinefragmen
    truncatedGlyphRangeInLineFragmentForGlyphAtIndex(glyphIndex: cocoascript.NSUInteger):cocoascript.NSRange;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403255-boundingrectforglyphrange
    boundingRectForGlyphRange_inTextContainer(glyphRange: cocoascript.NSRange, container: cocoascript.NSTextContainer):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403028-characterindexforpoint
    characterIndexForPoint_inTextContainer_fractionOfDistanceBetweenInsertionPoints(point: cocoascript.CGPoint, container: cocoascript.NSTextContainer, partialFraction: cocoascript.CGFloat):cocoascript.NSUInteger;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403225-characterrangeforglyphrange
    characterRangeForGlyphRange_actualGlyphRange(glyphRange: cocoascript.NSRange, actualGlyphRange: cocoascript.NSRangePointer):cocoascript.NSRange;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403021-enumerateenclosingrectsforglyphr
    enumerateEnclosingRectsForGlyphRange_withinSelectedGlyphRange_inTextContainer_usingBlock(glyphRange: cocoascript.NSRange, selectedRange: cocoascript.NSRange, textContainer: cocoascript.NSTextContainer, block: cocoascript.CGRect):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403160-enumeratelinefragmentsforglyphra
    enumerateLineFragmentsForGlyphRange_usingBlock(glyphRange: cocoascript.NSRange, block: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403097-fractionofdistancethroughglyphfo
    fractionOfDistanceThroughGlyphForPoint_inTextContainer(point: cocoascript.CGPoint, container: cocoascript.NSTextContainer):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403012-getlinefragmentinsertionpointsfo
    getLineFragmentInsertionPointsForCharacterAtIndex_alternatePositions_inDisplayOrder_positions_characterIndexes(charIndex: cocoascript.NSUInteger, aFlag: cocoascript.BOOL, dFlag: cocoascript.BOOL, positions: cocoascript.CGFloat, charIndexes: cocoascript.NSUInteger):cocoascript.NSUInteger;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403112-glyphindexforpoint
    glyphIndexForPoint_inTextContainer(point: cocoascript.CGPoint, container: cocoascript.NSTextContainer):cocoascript.NSUInteger;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402933-glyphindexforpoint
    glyphIndexForPoint_inTextContainer_fractionOfDistanceThroughGlyph(point: cocoascript.CGPoint, container: cocoascript.NSTextContainer, partialFraction: cocoascript.CGFloat):cocoascript.NSUInteger;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403053-glyphrangeforboundingrect
    glyphRangeForBoundingRect_inTextContainer(bounds: cocoascript.CGRect, container: cocoascript.NSTextContainer):cocoascript.NSRange;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403183-glyphrangeforboundingrectwithout
    glyphRangeForBoundingRectWithoutAdditionalLayout_inTextContainer(bounds: cocoascript.CGRect, container: cocoascript.NSTextContainer):cocoascript.NSRange;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403041-glyphrangefortextcontainer
    glyphRangeForTextContainer(container: cocoascript.NSTextContainer):cocoascript.NSRange;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402999-glyphrangeforcharacterrange
    glyphRangeForCharacterRange_actualCharacterRange(charRange: cocoascript.NSRange, actualCharRange: cocoascript.NSRangePointer):cocoascript.NSRange;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403152-rangeofnominallyspacedglyphscont
    rangeOfNominallySpacedGlyphsContainingIndex(glyphIndex: cocoascript.NSUInteger):cocoascript.NSRange;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1402949-drawbackgroundforglyphrange
    drawBackgroundForGlyphRange_atPoint(glyphsToShow: cocoascript.NSRange, origin: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403158-drawglyphsforglyphrange
    drawGlyphsForGlyphRange_atPoint(glyphsToShow: cocoascript.NSRange, origin: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403169-drawstrikethroughforglyphrange
    drawStrikethroughForGlyphRange_strikethroughType_baselineOffset_lineFragmentRect_lineFragmentGlyphRange_containerOrigin(glyphRange: cocoascript.NSRange, strikethroughVal: cocoascript.NSUnderlineStyle, baselineOffset: cocoascript.CGFloat, lineRect: cocoascript.CGRect, lineGlyphRange: cocoascript.NSRange, containerOrigin: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403079-drawunderlineforglyphrange
    drawUnderlineForGlyphRange_underlineType_baselineOffset_lineFragmentRect_lineFragmentGlyphRange_containerOrigin(glyphRange: cocoascript.NSRange, underlineVal: cocoascript.NSUnderlineStyle, baselineOffset: cocoascript.CGFloat, lineRect: cocoascript.CGRect, lineGlyphRange: cocoascript.NSRange, containerOrigin: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403161-fillbackgroundrectarray
    fillBackgroundRectArray_count_forCharacterRange_color(rectArray: cocoascript.CGRect, rectCount: cocoascript.NSUInteger, charRange: cocoascript.NSRange, color: cocoascript.UIColor):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/3180379-showcgglyphs
    showCGGlyphs_positions_count_font_textMatrix_attributes_inContext(glyphs: cocoascript.CGGlyph, positions: cocoascript.CGPoint, glyphCount: cocoascript.NSInteger, font: cocoascript.UIFont, textMatrix: cocoascript.CGAffineTransform, attributes: cocoascript.NSLayoutManager, CGContext: cocoascript.CGContextRef):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403009-strikethroughglyphrange
    strikethroughGlyphRange_strikethroughType_lineFragmentRect_lineFragmentGlyphRange_containerOrigin(glyphRange: cocoascript.NSRange, strikethroughVal: cocoascript.NSUnderlineStyle, lineRect: cocoascript.CGRect, lineGlyphRange: cocoascript.NSRange, containerOrigin: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanager/1403114-underlineglyphrange
    underlineGlyphRange_underlineType_lineFragmentRect_lineFragmentGlyphRange_containerOrigin(glyphRange: cocoascript.NSRange, underlineVal: cocoascript.NSUnderlineStyle, lineRect: cocoascript.CGRect, lineGlyphRange: cocoascript.NSRange, containerOrigin: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1402929-setlayoutrect
    setLayoutRect_forTextBlock_glyphRange(rect: cocoascript.NSRect, block: cocoascript.NSTextBlock, glyphRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403201-layoutrectfortextblock
    layoutRectForTextBlock_glyphRange(block: cocoascript.NSTextBlock, glyphRange: cocoascript.NSRange):cocoascript.NSRect;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1402991-setboundsrect
    setBoundsRect_forTextBlock_glyphRange(rect: cocoascript.NSRect, block: cocoascript.NSTextBlock, glyphRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403138-boundsrectfortextblock
    boundsRectForTextBlock_glyphRange(block: cocoascript.NSTextBlock, glyphRange: cocoascript.NSRange):cocoascript.NSRect;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403102-layoutrectfortextblock
    layoutRectForTextBlock_atIndex_effectiveRange(block: cocoascript.NSTextBlock, glyphIndex: cocoascript.NSUInteger, effectiveGlyphRange: cocoascript.NSRangePointer):cocoascript.NSRect;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1402956-boundsrectfortextblock
    boundsRectForTextBlock_atIndex_effectiveRange(block: cocoascript.NSTextBlock, glyphIndex: cocoascript.NSUInteger, effectiveGlyphRange: cocoascript.NSRangePointer):cocoascript.NSRect;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403045-defaultattachmentscaling
    defaultAttachmentScaling(): cocoascript.NSImageScaling;
    setDefaultAttachmentScaling(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1402965-showattachmentcell
    showAttachmentCell_inRect_characterIndex(cell: cocoascript.NSCell, rect: cocoascript.NSRect, attachmentIndex: cocoascript.NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403130-ruleraccessoryviewfortextview
    rulerAccessoryViewForTextView_paragraphStyle_ruler_enabled(view: cocoascript.NSTextView, style: cocoascript.NSParagraphStyle, ruler: cocoascript.NSRulerView, isEnabled: cocoascript.BOOL):cocoascript.NSView;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403163-rulermarkersfortextview
    rulerMarkersForTextView_paragraphStyle_ruler(view: cocoascript.NSTextView, style: cocoascript.NSParagraphStyle, ruler: cocoascript.NSRulerView):cocoascript.NSRulerMarker;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403026-layoutmanagerownsfirstresponderi
    layoutManagerOwnsFirstResponderInWindow(window: cocoascript.NSWindow):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1402995-firsttextview
    firstTextView(): cocoascript.NSTextView;
    setFirstTextView(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403089-textviewforbeginningofselection
    textViewForBeginningOfSelection(): cocoascript.NSTextView;
    setTextViewForBeginningOfSelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403205-typesetter
    typesetter(): cocoascript.NSTypesetter;
    setTypesetter(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403199-typesetterbehavior
    typesetterBehavior(): cocoascript.NSTypesetterBehavior;
    setTypesetterBehavior(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403007-defaultlineheightforfont
    defaultLineHeightForFont(theFont: cocoascript.NSFont):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403058-defaultbaselineoffsetforfont
    defaultBaselineOffsetForFont(theFont: cocoascript.NSFont):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403250-addtemporaryattributes
    addTemporaryAttributes_forCharacterRange(attrs: cocoascript.NSLayoutManager, charRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403005-addtemporaryattribute
    addTemporaryAttribute_value_forCharacterRange(attrName: cocoascript.NSAttributedStringKey, value: cocoascript.NSLayoutManager, charRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403037-settemporaryattributes
    setTemporaryAttributes_forCharacterRange(attrs: cocoascript.NSLayoutManager, charRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403087-removetemporaryattribute
    removeTemporaryAttribute_forCharacterRange(attrName: cocoascript.NSAttributedStringKey, charRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1402969-temporaryattribute
    temporaryAttribute_atCharacterIndex_effectiveRange(attrName: cocoascript.NSAttributedStringKey, location: cocoascript.NSUInteger, range: cocoascript.NSRangePointer):cocoascript.NSLayoutManager;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403223-temporaryattribute
    temporaryAttribute_atCharacterIndex_longestEffectiveRange_inRange(attrName: cocoascript.NSAttributedStringKey, location: cocoascript.NSUInteger, range: cocoascript.NSRangePointer, rangeLimit: cocoascript.NSRange):cocoascript.NSLayoutManager;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403033-temporaryattributesatcharacterin
    temporaryAttributesAtCharacterIndex_effectiveRange(charIndex: cocoascript.NSUInteger, effectiveCharRange: cocoascript.NSRangePointer):cocoascript.NSLayoutManager;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanager/1403060-temporaryattributesatcharacterin
    temporaryAttributesAtCharacterIndex_longestEffectiveRange_inRange(location: cocoascript.NSUInteger, range: cocoascript.NSRangePointer, rangeLimit: cocoascript.NSRange):cocoascript.NSLayoutManager;
    //
    alloc():cocoascript.NSLayoutManager;
    //
    init():cocoascript.NSLayoutManager;
  }
}

declare const NSLayoutManager: cocoascript.NSLayoutManager;
declare namespace cocoascript {
  /**
   * A region where text layout occurs.
   * doc://com.apple.documentation/documentation/uikit/nstextcontainer
   */
  interface NSTextContainer extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nstextcontainer/1444529-initwithsize
    initWithSize(size: cocoascript.CGSize):cocoascript.NSTextContainer;
    // doc://com.apple.documentation/documentation/uikit/nstextcontainer/1444573-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.NSTextContainer;
    // doc://com.apple.documentation/documentation/uikit/nstextcontainer/1444517-layoutmanager
    layoutManager(): cocoascript.NSLayoutManager;
    setLayoutManager(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextcontainer/1444545-replacelayoutmanager
    replaceLayoutManager(newLayoutManager: cocoascript.NSLayoutManager):void;
    // doc://com.apple.documentation/documentation/appkit/nstextcontainer/1444537-textview
    textView(): cocoascript.NSTextView;
    setTextView(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextcontainer/1444553-size
    size(): cocoascript.CGSize;
    setSize(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextcontainer/1444569-exclusionpaths
    exclusionPaths(): cocoascript.UIBezierPath;
    setExclusionPaths(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextcontainer/1444519-linebreakmode
    lineBreakMode(): cocoascript.NSLineBreakMode;
    setLineBreakMode(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextcontainer/1444563-widthtrackstextview
    widthTracksTextView(): cocoascript.BOOL;
    setWidthTracksTextView(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextcontainer/1444559-heighttrackstextview
    heightTracksTextView(): cocoascript.BOOL;
    setHeightTracksTextView(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextcontainer/1444531-maximumnumberoflines
    maximumNumberOfLines(): cocoascript.NSUInteger;
    setMaximumNumberOfLines(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextcontainer/1444527-linefragmentpadding
    lineFragmentPadding(): cocoascript.CGFloat;
    setLineFragmentPadding(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextcontainer/1444555-linefragmentrectforproposedrect
    lineFragmentRectForProposedRect_atIndex_writingDirection_remainingRect(proposedRect: cocoascript.CGRect, characterIndex: cocoascript.NSUInteger, baseWritingDirection: cocoascript.NSWritingDirection, remainingRect: cocoascript.CGRect):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/nstextcontainer/1444525-simplerectangulartextcontainer
    simpleRectangularTextContainer(): cocoascript.BOOL;
    setSimpleRectangularTextContainer(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextcontainer/1444543-initwithcontainersize
    initWithContainerSize(aContainerSize: cocoascript.NSSize):cocoascript.NSTextContainer;
    // doc://com.apple.documentation/documentation/appkit/nstextcontainer/1444571-linefragmentrectforproposedrect
    lineFragmentRectForProposedRect_sweepDirection_movementDirection_remainingRect(proposedRect: cocoascript.NSRect, sweepDirection: cocoascript.NSLineSweepDirection, movementDirection: cocoascript.NSLineMovementDirection, remainingRect: cocoascript.NSRectPointer):cocoascript.NSRect;
    // doc://com.apple.documentation/documentation/appkit/nstextcontainer/1444567-containspoint
    containsPoint(point: cocoascript.NSPoint):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextcontainer/1444551-containersize
    containerSize(): cocoascript.NSSize;
    setContainerSize(): void;
    //
    alloc():cocoascript.NSTextContainer;
    //
    init():cocoascript.NSTextContainer;
  }
}

declare const NSTextContainer: cocoascript.NSTextContainer;
declare namespace cocoascript {
  /**
   * The optional methods that delegates of text storage objects implement to handle text-edit processing.
   * doc://com.apple.documentation/documentation/uikit/nstextstoragedelegate
   */
  interface NSTextStorageDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nstextstoragedelegate/1534795-textstorage
    textStorage_willProcessEditing_range_changeInLength(textStorage: cocoascript.NSTextStorage, editedMask: cocoascript.NSTextStorageEditActions, editedRange: cocoascript.NSRange, delta: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/nstextstoragedelegate/1534375-textstorage
    textStorage_didProcessEditing_range_changeInLength(textStorage: cocoascript.NSTextStorage, editedMask: cocoascript.NSTextStorageEditActions, editedRange: cocoascript.NSRange, delta: cocoascript.NSInteger):void;
  }
}
declare namespace cocoascript {
  /**
   * A set of optional methods that delegates of layout manager objects implement.
   * doc://com.apple.documentation/documentation/uikit/nslayoutmanagerdelegate
   */
  interface NSLayoutManagerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanagerdelegate/1402993-layoutmanagerdidinvalidatelayout
    layoutManagerDidInvalidateLayout(sender: cocoascript.NSLayoutManager):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanagerdelegate/1403073-layoutmanager
    layoutManager_shouldGenerateGlyphs_properties_characterIndexes_font_forGlyphRange(layoutManager: cocoascript.NSLayoutManager, glyphs: cocoascript.CGGlyph, props: cocoascript.NSGlyphProperty, charIndexes: cocoascript.NSUInteger, aFont: cocoascript.UIFont, glyphRange: cocoascript.NSRange):cocoascript.NSUInteger;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanagerdelegate/1403167-layoutmanager
    layoutManager_shouldUseAction_forControlCharacterAtIndex(layoutManager: cocoascript.NSLayoutManager, action: cocoascript.NSControlCharacterAction, charIndex: cocoascript.NSUInteger):cocoascript.NSControlCharacterAction;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanagerdelegate/1402926-layoutmanager
    layoutManager_didCompleteLayoutForTextContainer_atEnd(layoutManager: cocoascript.NSLayoutManager, textContainer: cocoascript.NSTextContainer, layoutFinishedFlag: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanagerdelegate/1403049-layoutmanager
    layoutManager_textContainer_didChangeGeometryFromSize(layoutManager: cocoascript.NSLayoutManager, textContainer: cocoascript.NSTextContainer, oldSize: cocoascript.CGSize):void;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanagerdelegate/1403128-layoutmanager
    layoutManager_shouldBreakLineByHyphenatingBeforeCharacterAtIndex(layoutManager: cocoascript.NSLayoutManager, charIndex: cocoascript.NSUInteger):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanagerdelegate/1403051-layoutmanager
    layoutManager_shouldBreakLineByWordBeforeCharacterAtIndex(layoutManager: cocoascript.NSLayoutManager, charIndex: cocoascript.NSUInteger):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanagerdelegate/1402948-layoutmanager
    layoutManager_lineSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(layoutManager: cocoascript.NSLayoutManager, glyphIndex: cocoascript.NSUInteger, rect: cocoascript.CGRect):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanagerdelegate/1403076-layoutmanager
    layoutManager_paragraphSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(layoutManager: cocoascript.NSLayoutManager, glyphIndex: cocoascript.NSUInteger, rect: cocoascript.CGRect):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanagerdelegate/1403177-layoutmanager
    layoutManager_paragraphSpacingBeforeGlyphAtIndex_withProposedLineFragmentRect(layoutManager: cocoascript.NSLayoutManager, glyphIndex: cocoascript.NSUInteger, rect: cocoascript.CGRect):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanagerdelegate/1402922-layoutmanager
    layoutManager_boundingBoxForControlGlyphAtIndex_forTextContainer_proposedLineFragment_glyphPosition_characterIndex(layoutManager: cocoascript.NSLayoutManager, glyphIndex: cocoascript.NSUInteger, textContainer: cocoascript.NSTextContainer, proposedRect: cocoascript.CGRect, glyphPosition: cocoascript.CGPoint, charIndex: cocoascript.NSUInteger):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/nslayoutmanagerdelegate/1403122-layoutmanager
    layoutManager_shouldSetLineFragmentRect_lineFragmentUsedRect_baselineOffset_inTextContainer_forGlyphRange(layoutManager: cocoascript.NSLayoutManager, lineFragmentRect: cocoascript.CGRect, lineFragmentUsedRect: cocoascript.CGRect, baselineOffset: cocoascript.CGFloat, textContainer: cocoascript.NSTextContainer, glyphRange: cocoascript.NSRange):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/appkit/nslayoutmanagerdelegate/1403085-layoutmanager
    layoutManager_shouldUseTemporaryAttributes_forDrawingToScreen_atCharacterIndex_effectiveRange(layoutManager: cocoascript.NSLayoutManager, attrs: cocoascript.NSLayoutManagerDelegate, toScreen: cocoascript.BOOL, charIndex: cocoascript.NSUInteger, effectiveCharRange: cocoascript.NSRangePointer):cocoascript.NSLayoutManagerDelegate;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that define the orientation of text for an object.
   * doc://com.apple.documentation/documentation/uikit/nstextlayoutorientationprovider
   */
  interface NSTextLayoutOrientationProvider {
    // doc://com.apple.documentation/documentation/uikit/nstextlayoutorientationprovider/1402990-layoutorientation
    layoutOrientation(): cocoascript.NSTextLayoutOrientation;
    setLayoutOrientation(): void;
  }
}
declare namespace cocoascript {
  /**
   * The paragraph or ruler attributes for an attributed string.
   * doc://com.apple.documentation/documentation/uikit/nsparagraphstyle
   */
  interface NSParagraphStyle extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/1532681-defaultparagraphstyle
    defaultParagraphStyle(): cocoascript.NSParagraphStyle;
    setDefaultParagraphStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/1532321-alignment
    alignment(): cocoascript.NSTextAlignment;
    setAlignment(): void;
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/1527764-firstlineheadindent
    firstLineHeadIndent(): cocoascript.CGFloat;
    setFirstLineHeadIndent(): void;
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/1530760-headindent
    headIndent(): cocoascript.CGFloat;
    setHeadIndent(): void;
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/1525556-tailindent
    tailIndent(): cocoascript.CGFloat;
    setTailIndent(): void;
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/1528614-lineheightmultiple
    lineHeightMultiple(): cocoascript.CGFloat;
    setLineHeightMultiple(): void;
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/1533343-maximumlineheight
    maximumLineHeight(): cocoascript.CGFloat;
    setMaximumLineHeight(): void;
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/1535639-minimumlineheight
    minimumLineHeight(): cocoascript.CGFloat;
    setMinimumLineHeight(): void;
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/1524635-linespacing
    lineSpacing(): cocoascript.CGFloat;
    setLineSpacing(): void;
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/1530912-paragraphspacing
    paragraphSpacing(): cocoascript.CGFloat;
    setParagraphSpacing(): void;
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/1533011-paragraphspacingbefore
    paragraphSpacingBefore(): cocoascript.CGFloat;
    setParagraphSpacingBefore(): void;
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/1532841-tabstops
    tabStops(): cocoascript.NSTextTab;
    setTabStops(): void;
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/1535614-defaulttabinterval
    defaultTabInterval(): cocoascript.CGFloat;
    setDefaultTabInterval(): void;
    // doc://com.apple.documentation/documentation/appkit/nsparagraphstyle/1528053-textblocks
    textBlocks(): cocoascript.NSTextBlock;
    setTextBlocks(): void;
    // doc://com.apple.documentation/documentation/appkit/nsparagraphstyle/1534193-textlists
    textLists(): cocoascript.NSTextList;
    setTextLists(): void;
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/1529937-linebreakmode
    lineBreakMode(): cocoascript.NSLineBreakMode;
    setLineBreakMode(): void;
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/1529275-hyphenationfactor
    hyphenationFactor(): number;
    setHyphenationFactor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsparagraphstyle/1529278-tighteningfactorfortruncation
    tighteningFactorForTruncation(): number;
    setTighteningFactorForTruncation(): void;
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/1528994-allowsdefaulttighteningfortrunca
    allowsDefaultTighteningForTruncation(): cocoascript.BOOL;
    setAllowsDefaultTighteningForTruncation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsparagraphstyle/1535869-headerlevel
    headerLevel(): cocoascript.NSInteger;
    setHeaderLevel(): void;
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/1527354-basewritingdirection
    baseWritingDirection(): cocoascript.NSWritingDirection;
    setBaseWritingDirection(): void;
    // doc://com.apple.documentation/documentation/uikit/nsparagraphstyle/3667463-linebreakstrategy
    lineBreakStrategy(): cocoascript.NSLineBreakStrategy;
    setLineBreakStrategy(): void;
    //
    alloc():cocoascript.NSParagraphStyle;
    //
    init():cocoascript.NSParagraphStyle;
  }
}

declare const NSParagraphStyle: cocoascript.NSParagraphStyle;
declare namespace cocoascript {
  /**
   * An object for changing the values of the subattributes in a paragraph style attribute.
   * doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle
   */
  interface NSMutableParagraphStyle extends NSParagraphStyle {
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1533980-setparagraphstyle
    setParagraphStyle(obj: cocoascript.NSParagraphStyle):void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1534368-alignment
    alignment(): cocoascript.NSTextAlignment;
    setAlignment(): void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1528392-firstlineheadindent
    firstLineHeadIndent(): cocoascript.CGFloat;
    setFirstLineHeadIndent(): void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1525135-headindent
    headIndent(): cocoascript.CGFloat;
    setHeadIndent(): void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1531666-tailindent
    tailIndent(): cocoascript.CGFloat;
    setTailIndent(): void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1524596-lineheightmultiple
    lineHeightMultiple(): cocoascript.CGFloat;
    setLineHeightMultiple(): void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1524351-maximumlineheight
    maximumLineHeight(): cocoascript.CGFloat;
    setMaximumLineHeight(): void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1531118-minimumlineheight
    minimumLineHeight(): cocoascript.CGFloat;
    setMinimumLineHeight(): void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1528742-linespacing
    lineSpacing(): cocoascript.CGFloat;
    setLineSpacing(): void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1532528-paragraphspacing
    paragraphSpacing(): cocoascript.CGFloat;
    setParagraphSpacing(): void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1527729-paragraphspacingbefore
    paragraphSpacingBefore(): cocoascript.CGFloat;
    setParagraphSpacingBefore(): void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1534601-basewritingdirection
    baseWritingDirection(): cocoascript.NSWritingDirection;
    setBaseWritingDirection(): void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1525051-addtabstop
    addTabStop(anObject: cocoascript.NSTextTab):void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1535084-removetabstop
    removeTabStop(anObject: cocoascript.NSTextTab):void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1531988-tabstops
    tabStops(): cocoascript.NSTextTab;
    setTabStops(): void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1529861-defaulttabinterval
    defaultTabInterval(): cocoascript.CGFloat;
    setDefaultTabInterval(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmutableparagraphstyle/1535855-textblocks
    textBlocks(): cocoascript.NSTextBlock;
    setTextBlocks(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmutableparagraphstyle/1524648-textlists
    textLists(): cocoascript.NSTextList;
    setTextLists(): void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1535126-linebreakmode
    lineBreakMode(): cocoascript.NSLineBreakMode;
    setLineBreakMode(): void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1535553-hyphenationfactor
    hyphenationFactor(): number;
    setHyphenationFactor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmutableparagraphstyle/1531383-tighteningfactorfortruncation
    tighteningFactorForTruncation(): number;
    setTighteningFactorForTruncation(): void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/1534136-allowsdefaulttighteningfortrunca
    allowsDefaultTighteningForTruncation(): cocoascript.BOOL;
    setAllowsDefaultTighteningForTruncation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmutableparagraphstyle/1533962-headerlevel
    headerLevel(): cocoascript.NSInteger;
    setHeaderLevel(): void;
    // doc://com.apple.documentation/documentation/uikit/nsmutableparagraphstyle/3667462-linebreakstrategy
    lineBreakStrategy(): cocoascript.NSLineBreakStrategy;
    setLineBreakStrategy(): void;
    //
    alloc():cocoascript.NSMutableParagraphStyle;
    //
    init():cocoascript.NSMutableParagraphStyle;
  }
}

declare const NSMutableParagraphStyle: cocoascript.NSMutableParagraphStyle;
declare namespace cocoascript {
  /**
   * A tab in a paragraph.
   * doc://com.apple.documentation/documentation/uikit/nstexttab
   */
  interface NSTextTab extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nstexttab/1526080-initwithtextalignment
    initWithTextAlignment_location_options(alignment: cocoascript.NSTextAlignment, loc: cocoascript.CGFloat, options: cocoascript.NSTextTab):cocoascript.NSTextTab;
    // doc://com.apple.documentation/documentation/uikit/nstexttab/1527968-location
    location(): cocoascript.CGFloat;
    setLocation(): void;
    // doc://com.apple.documentation/documentation/uikit/nstexttab/1527212-alignment
    alignment(): cocoascript.NSTextAlignment;
    setAlignment(): void;
    // doc://com.apple.documentation/documentation/uikit/nstexttab/1534965-options
    options(): cocoascript.id;
    setOptions(): void;
    // doc://com.apple.documentation/documentation/appkit/nstexttab/1526556-initwithtype
    initWithType_location(type: cocoascript.NSTextTabType, loc: cocoascript.CGFloat):cocoascript.NSTextTab;
    // doc://com.apple.documentation/documentation/appkit/nstexttab/1527842-tabstoptype
    tabStopType(): cocoascript.NSTextTabType;
    setTabStopType(): void;
    //
    alloc():cocoascript.NSTextTab;
    //
    init():cocoascript.NSTextTab;
  }
}

declare const NSTextTab: cocoascript.NSTextTab;
declare namespace cocoascript {
  /**
   * The values for the attachment attributes of attributed strings and related objects.
   * doc://com.apple.documentation/documentation/uikit/nstextattachment
   */
  interface NSTextAttachment extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstextattachment/1508373-initwithfilewrapper
    initWithFileWrapper(fileWrapper: cocoascript.NSFileWrapper):cocoascript.NSTextAttachment;
    // doc://com.apple.documentation/documentation/uikit/nstextattachment/1508374-initwithdata
    initWithData_ofType(contentData: cocoascript.NSData, uti: cocoascript.NSString):cocoascript.NSTextAttachment;
    // doc://com.apple.documentation/documentation/uikit/nstextattachment/1508394-bounds
    bounds(): cocoascript.CGRect;
    setBounds(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextattachment/1508401-contents
    contents(): cocoascript.NSData;
    setContents(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextattachment/1508416-filetype
    fileType(): cocoascript.NSString;
    setFileType(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextattachment/1508378-image
    image(): cocoascript.UIImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/uikit/nstextattachment/1508398-filewrapper
    fileWrapper(): cocoascript.NSFileWrapper;
    setFileWrapper(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextattachment/1508413-attachmentcell
    attachmentCell(): cocoascript.NSTextAttachmentCell;
    setAttachmentCell(): void;
    //
    alloc():cocoascript.NSTextAttachment;
    //
    init():cocoascript.NSTextAttachment;
  }
}

declare const NSTextAttachment: cocoascript.NSTextAttachment;
declare namespace cocoascript {
  /**
   * A set of methods that defines the interface to text attachment objects from a layout manager.
   * doc://com.apple.documentation/documentation/uikit/nstextattachmentcontainer
   */
  interface NSTextAttachmentContainer extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nstextattachmentcontainer/1508382-attachmentboundsfortextcontainer
    attachmentBoundsForTextContainer_proposedLineFragment_glyphPosition_characterIndex(textContainer: cocoascript.NSTextContainer, lineFrag: cocoascript.CGRect, position: cocoascript.CGPoint, charIndex: cocoascript.NSUInteger):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/nstextattachmentcontainer/1508386-imageforbounds
    imageForBounds_textContainer_characterIndex(imageBounds: cocoascript.CGRect, textContainer: cocoascript.NSTextContainer, charIndex: cocoascript.NSUInteger):cocoascript.UIImage;
  }
}
declare const NSWritingDirectionAttributeName: cocoascript.NSAttributedStringKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nslinebreakstrategy
  type NSLineBreakStrategy = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * A collection of methods that give controls an easy way to adopt automatic adjustment to content category changes.
   * doc://com.apple.documentation/documentation/uikit/uicontentsizecategoryadjusting
   */
  interface UIContentSizeCategoryAdjusting extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicontentsizecategoryadjusting/1771731-adjustsfontforcontentsizecategor
    adjustsFontForContentSizeCategory(): cocoascript.BOOL;
    setAdjustsFontForContentSizeCategory(): void;
  }
}
declare namespace cocoascript {
  /**
   * A control that executes your custom code in response to user interactions.
   * doc://com.apple.documentation/documentation/uikit/uibutton
   */
  interface UIButton extends UIControl {
    // doc://com.apple.documentation/documentation/uikit/uibutton/3600348-initwithframe
    initWithFrame(frame: cocoascript.CGRect):cocoascript.UIButton;
    // doc://com.apple.documentation/documentation/uikit/uibutton/3600349-initwithframe
    initWithFrame_primaryAction(frame: cocoascript.CGRect, primaryAction: cocoascript.UIAction):cocoascript.UIButton;
    // doc://com.apple.documentation/documentation/uikit/uibutton/3600347-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIButton;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1623992-titlelabel
    titleLabel(): cocoascript.UILabel;
    setTitleLabel(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624022-titleforstate
    titleForState(state: cocoascript.UIControlState):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624018-settitle
    setTitle_forState(title: cocoascript.NSString, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1623991-attributedtitleforstate
    attributedTitleForState(state: cocoascript.UIControlState):cocoascript.NSAttributedString;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624012-setattributedtitle
    setAttributedTitle_forState(title: cocoascript.NSAttributedString, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624017-titlecolorforstate
    titleColorForState(state: cocoascript.UIControlState):cocoascript.UIColor;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1623993-settitlecolor
    setTitleColor_forState(color: cocoascript.UIColor, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624009-titleshadowcolorforstate
    titleShadowColorForState(state: cocoascript.UIControlState):cocoascript.UIColor;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1623994-settitleshadowcolor
    setTitleShadowColor_forState(color: cocoascript.UIColor, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624004-reversestitleshadowwhenhighlight
    reversesTitleShadowWhenHighlighted(): cocoascript.BOOL;
    setReversesTitleShadowWhenHighlighted(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624031-adjustsimagewhenhighlighted
    adjustsImageWhenHighlighted(): cocoascript.BOOL;
    setAdjustsImageWhenHighlighted(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624020-adjustsimagewhendisabled
    adjustsImageWhenDisabled(): cocoascript.BOOL;
    setAdjustsImageWhenDisabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1623996-showstouchwhenhighlighted
    showsTouchWhenHighlighted(): cocoascript.BOOL;
    setShowsTouchWhenHighlighted(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624030-backgroundimageforstate
    backgroundImageForState(state: cocoascript.UIControlState):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624026-imageforstate
    imageForState(state: cocoascript.UIControlState):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624016-setbackgroundimage
    setBackgroundImage_forState(image: cocoascript.UIImage, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1623997-setimage
    setImage_forState(image: cocoascript.UIImage, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/3295914-preferredsymbolconfigurationfori
    preferredSymbolConfigurationForImageInState(state: cocoascript.UIControlState):cocoascript.UIImageSymbolConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uibutton/3295915-setpreferredsymbolconfiguration
    setPreferredSymbolConfiguration_forImageInState(configuration: cocoascript.UIImageSymbolConfiguration, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624025-tintcolor
    tintColor(): cocoascript.UIColor;
    setTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624036-contentedgeinsets
    contentEdgeInsets(): cocoascript.UIEdgeInsets;
    setContentEdgeInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624010-titleedgeinsets
    titleEdgeInsets(): cocoascript.UIEdgeInsets;
    setTitleEdgeInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624034-imageedgeinsets
    imageEdgeInsets(): cocoascript.UIEdgeInsets;
    setImageEdgeInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624011-buttontype
    buttonType(): cocoascript.UIButtonType;
    setButtonType(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624032-currenttitle
    currentTitle(): cocoascript.NSString;
    setCurrentTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624002-currentattributedtitle
    currentAttributedTitle(): cocoascript.NSAttributedString;
    setCurrentAttributedTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624006-currenttitlecolor
    currentTitleColor(): cocoascript.UIColor;
    setCurrentTitleColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624019-currenttitleshadowcolor
    currentTitleShadowColor(): cocoascript.UIColor;
    setCurrentTitleShadowColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1623998-currentimage
    currentImage(): cocoascript.UIImage;
    setCurrentImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624035-currentbackgroundimage
    currentBackgroundImage(): cocoascript.UIImage;
    setCurrentBackgroundImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/3295913-currentpreferredsymbolconfigurat
    currentPreferredSymbolConfiguration(): cocoascript.UIImageSymbolConfiguration;
    setCurrentPreferredSymbolConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624033-imageview
    imageView(): cocoascript.UIImageView;
    setImageView(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624015-backgroundrectforbounds
    backgroundRectForBounds(bounds: cocoascript.CGRect):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624027-contentrectforbounds
    contentRectForBounds(bounds: cocoascript.CGRect):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624001-titlerectforcontentrect
    titleRectForContentRect(contentRect: cocoascript.CGRect):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624007-imagerectforcontentrect
    imageRectForContentRect(contentRect: cocoascript.CGRect):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uibutton/3538957-pointerinteractionenabled
    pointerInteractionEnabled(): cocoascript.BOOL;
    setPointerInteractionEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/3538958-pointerstyleprovider
    pointerStyleProvider(): cocoascript.UIButtonPointerStyleProvider;
    setPointerStyleProvider(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/3612050-role
    role(): cocoascript.UIButtonRole;
    setRole(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/3601189-menu
    menu(): cocoascript.UIMenu;
    setMenu(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624005-font
    font(): cocoascript.UIFont;
    setFont(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1623995-linebreakmode
    lineBreakMode(): cocoascript.NSLineBreakMode;
    setLineBreakMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uibutton/1624008-titleshadowoffset
    titleShadowOffset(): cocoascript.CGSize;
    setTitleShadowOffset(): void;
    //
    alloc():cocoascript.UIButton;
    //
    init():cocoascript.UIButton;
  }
}

declare const UIButton: cocoascript.UIButton;
declare namespace cocoascript {
  /**
   * A control that offers a binary choice, such as on/off.
   * doc://com.apple.documentation/documentation/uikit/uiswitch
   */
  interface UISwitch extends UIControl {
    // doc://com.apple.documentation/documentation/uikit/uiswitch/1623682-initwithframe
    initWithFrame(frame: cocoascript.CGRect):cocoascript.UISwitch;
    // doc://com.apple.documentation/documentation/uikit/uiswitch/1623685-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UISwitch;
    // doc://com.apple.documentation/documentation/uikit/uiswitch/1623690-on
    on(): cocoascript.BOOL;
    setOn(): void;
    // doc://com.apple.documentation/documentation/uikit/uiswitch/1623686-seton
    setOn_animated(on: cocoascript.BOOL, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiswitch/3621874-preferredstyle
    preferredStyle(): cocoascript.UISwitchStyle;
    setPreferredStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiswitch/3621875-style
    style(): cocoascript.UISwitchStyle;
    setStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiswitch/3621876-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiswitch/1623687-ontintcolor
    onTintColor(): cocoascript.UIColor;
    setOnTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiswitch/1623684-thumbtintcolor
    thumbTintColor(): cocoascript.UIColor;
    setThumbTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiswitch/1623689-onimage
    onImage(): cocoascript.UIImage;
    setOnImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiswitch/1623683-offimage
    offImage(): cocoascript.UIImage;
    setOffImage(): void;
    //
    alloc():cocoascript.UISwitch;
    //
    init():cocoascript.UISwitch;
  }
}

declare const UISwitch: cocoascript.UISwitch;
declare namespace cocoascript {
  /**
   * A control that displays a horizontal series of dots, each of which corresponds to a page in the app’s document or other data-model entity.
   * doc://com.apple.documentation/documentation/uikit/uipagecontrol
   */
  interface UIPageControl extends UIControl {
    // doc://com.apple.documentation/documentation/uikit/uipagecontrol/1621234-currentpage
    currentPage(): cocoascript.NSInteger;
    setCurrentPage(): void;
    // doc://com.apple.documentation/documentation/uikit/uipagecontrol/1621232-numberofpages
    numberOfPages(): cocoascript.NSInteger;
    setNumberOfPages(): void;
    // doc://com.apple.documentation/documentation/uikit/uipagecontrol/1621238-hidesforsinglepage
    hidesForSinglePage(): cocoascript.BOOL;
    setHidesForSinglePage(): void;
    // doc://com.apple.documentation/documentation/uikit/uipagecontrol/1621239-pageindicatortintcolor
    pageIndicatorTintColor(): cocoascript.UIColor;
    setPageIndicatorTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uipagecontrol/1621233-currentpageindicatortintcolor
    currentPageIndicatorTintColor(): cocoascript.UIColor;
    setCurrentPageIndicatorTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uipagecontrol/1621230-deferscurrentpagedisplay
    defersCurrentPageDisplay(): cocoascript.BOOL;
    setDefersCurrentPageDisplay(): void;
    // doc://com.apple.documentation/documentation/uikit/uipagecontrol/1621235-updatecurrentpagedisplay
    updateCurrentPageDisplay():void;
    // doc://com.apple.documentation/documentation/uikit/uipagecontrol/1621237-sizefornumberofpages
    sizeForNumberOfPages(pageCount: cocoascript.NSInteger):cocoascript.CGSize;
    // doc://com.apple.documentation/documentation/uikit/uipagecontrol/3577676-backgroundstyle
    backgroundStyle(): cocoascript.UIPageControlBackgroundStyle;
    setBackgroundStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uipagecontrol/3577675-allowscontinuousinteraction
    allowsContinuousInteraction(): cocoascript.BOOL;
    setAllowsContinuousInteraction(): void;
    // doc://com.apple.documentation/documentation/uikit/uipagecontrol/3577678-interactionstate
    interactionState(): cocoascript.UIPageControlInteractionState;
    setInteractionState(): void;
    // doc://com.apple.documentation/documentation/uikit/uipagecontrol/3577679-preferredindicatorimage
    preferredIndicatorImage(): cocoascript.UIImage;
    setPreferredIndicatorImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uipagecontrol/3577680-setindicatorimage
    setIndicatorImage_forPage(image: cocoascript.UIImage, page: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uipagecontrol/3577677-indicatorimageforpage
    indicatorImageForPage(page: cocoascript.NSInteger):cocoascript.UIImage;
    //
    alloc():cocoascript.UIPageControl;
    //
    init():cocoascript.UIPageControl;
  }
}

declare const UIPageControl: cocoascript.UIPageControl;
declare namespace cocoascript {
  /**
   * A standard control that can initiate the refreshing of a scroll view’s contents.
   * doc://com.apple.documentation/documentation/uikit/uirefreshcontrol
   */
  interface UIRefreshControl extends UIControl {
    // doc://com.apple.documentation/documentation/uikit/uirefreshcontrol/1624846-init
    init():cocoascript.UIRefreshControl;
    // doc://com.apple.documentation/documentation/uikit/uirefreshcontrol/1624847-tintcolor
    tintColor(): cocoascript.UIColor;
    setTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uirefreshcontrol/1624845-attributedtitle
    attributedTitle(): cocoascript.NSAttributedString;
    setAttributedTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uirefreshcontrol/1624842-beginrefreshing
    beginRefreshing():void;
    // doc://com.apple.documentation/documentation/uikit/uirefreshcontrol/1624848-endrefreshing
    endRefreshing():void;
    // doc://com.apple.documentation/documentation/uikit/uirefreshcontrol/1624844-refreshing
    refreshing(): cocoascript.BOOL;
    setRefreshing(): void;
    //
    alloc():cocoascript.UIRefreshControl;
    //
    init():cocoascript.UIRefreshControl;
  }
}

declare const UIRefreshControl: cocoascript.UIRefreshControl;
declare namespace cocoascript {
  /**
   * A control for incrementing or decrementing a value.
   * doc://com.apple.documentation/documentation/uikit/uistepper
   */
  interface UIStepper extends UIControl {
    // doc://com.apple.documentation/documentation/uikit/uistepper/1624082-continuous
    continuous(): cocoascript.BOOL;
    setContinuous(): void;
    // doc://com.apple.documentation/documentation/uikit/uistepper/1624079-autorepeat
    autorepeat(): cocoascript.BOOL;
    setAutorepeat(): void;
    // doc://com.apple.documentation/documentation/uikit/uistepper/1624068-wraps
    wraps(): cocoascript.BOOL;
    setWraps(): void;
    // doc://com.apple.documentation/documentation/uikit/uistepper/1624078-minimumvalue
    minimumValue(): number;
    setMinimumValue(): void;
    // doc://com.apple.documentation/documentation/uikit/uistepper/1624075-maximumvalue
    maximumValue(): number;
    setMaximumValue(): void;
    // doc://com.apple.documentation/documentation/uikit/uistepper/1624083-stepvalue
    stepValue(): number;
    setStepValue(): void;
    // doc://com.apple.documentation/documentation/uikit/uistepper/1624076-value
    value(): number;
    setValue(): void;
    // doc://com.apple.documentation/documentation/uikit/uistepper/1624069-backgroundimageforstate
    backgroundImageForState(state: cocoascript.UIControlState):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uistepper/1624081-setbackgroundimage
    setBackgroundImage_forState(image: cocoascript.UIImage, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uistepper/1624077-decrementimageforstate
    decrementImageForState(state: cocoascript.UIControlState):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uistepper/1624074-setdecrementimage
    setDecrementImage_forState(image: cocoascript.UIImage, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uistepper/1624072-dividerimageforleftsegmentstate
    dividerImageForLeftSegmentState_rightSegmentState(state: cocoascript.UIControlState, state: cocoascript.UIControlState):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uistepper/1624071-setdividerimage
    setDividerImage_forLeftSegmentState_rightSegmentState(image: cocoascript.UIImage, leftState: cocoascript.UIControlState, rightState: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uistepper/1624080-incrementimageforstate
    incrementImageForState(state: cocoascript.UIControlState):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uistepper/1624070-setincrementimage
    setIncrementImage_forState(image: cocoascript.UIImage, state: cocoascript.UIControlState):void;
    //
    alloc():cocoascript.UIStepper;
    //
    init():cocoascript.UIStepper;
  }
}

declare const UIStepper: cocoascript.UIStepper;
declare namespace cocoascript {
  /**
   * An object that specifies a key press perform on a hardware keyboard and the resulting action.
   * doc://com.apple.documentation/documentation/uikit/uikeycommand
   */
  interface UIKeyCommand extends UICommand {
    // doc://com.apple.documentation/documentation/uikit/uikeycommand/1621100-init
    init():cocoascript.UIKeyCommand;
    // doc://com.apple.documentation/documentation/uikit/uikeycommand/1621115-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIKeyCommand;
    // doc://com.apple.documentation/documentation/uikit/uikeycommand/3335197-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uikeycommand/3335190-image
    image(): cocoascript.UIImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uikeycommand/1621143-input
    input(): cocoascript.NSString;
    setInput(): void;
    // doc://com.apple.documentation/documentation/uikit/uikeycommand/3175393-action
    action(): cocoascript.SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/uikit/uikeycommand/1621140-modifierflags
    modifierFlags(): cocoascript.UIKeyModifierFlags;
    setModifierFlags(): void;
    // doc://com.apple.documentation/documentation/uikit/uikeycommand/1621094-discoverabilitytitle
    discoverabilityTitle(): cocoascript.NSString;
    setDiscoverabilityTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uikeycommand/3335189-attributes
    attributes(): cocoascript.UIMenuElementAttributes;
    setAttributes(): void;
    // doc://com.apple.documentation/documentation/uikit/uikeycommand/3335196-state
    state(): cocoascript.UIMenuElementState;
    setState(): void;
    // doc://com.apple.documentation/documentation/uikit/uikeycommand/3335188-alternates
    alternates(): cocoascript.UICommandAlternate;
    setAlternates(): void;
    // doc://com.apple.documentation/documentation/uikit/uikeycommand/3335195-propertylist
    propertyList(): cocoascript.id;
    setPropertyList(): void;
    //
    alloc():cocoascript.UIKeyCommand;
    //
    init():cocoascript.UIKeyCommand;
  }
}

declare const UIKeyCommand: cocoascript.UIKeyCommand;
declare const UICommandTagShare: cocoascript.NSString;
declare namespace cocoascript {
  /**
   * A control for selecting a single value from a continuous range of values.
   * doc://com.apple.documentation/documentation/uikit/uislider
   */
  interface UISlider extends UIControl {
    // doc://com.apple.documentation/documentation/uikit/uislider/1621346-value
    value(): number;
    setValue(): void;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621330-setvalue
    setValue_animated(value: number, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621345-minimumvalue
    minimumValue(): number;
    setMinimumValue(): void;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621341-maximumvalue
    maximumValue(): number;
    setMaximumValue(): void;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621340-continuous
    continuous(): cocoascript.BOOL;
    setContinuous(): void;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621337-minimumvalueimage
    minimumValueImage(): cocoascript.UIImage;
    setMinimumValueImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621329-maximumvalueimage
    maximumValueImage(): cocoascript.UIImage;
    setMaximumValueImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621348-minimumtracktintcolor
    minimumTrackTintColor(): cocoascript.UIColor;
    setMinimumTrackTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621339-currentminimumtrackimage
    currentMinimumTrackImage(): cocoascript.UIImage;
    setCurrentMinimumTrackImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621328-minimumtrackimageforstate
    minimumTrackImageForState(state: cocoascript.UIControlState):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621331-setminimumtrackimage
    setMinimumTrackImage_forState(image: cocoascript.UIImage, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621334-maximumtracktintcolor
    maximumTrackTintColor(): cocoascript.UIColor;
    setMaximumTrackTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621343-currentmaximumtrackimage
    currentMaximumTrackImage(): cocoascript.UIImage;
    setCurrentMaximumTrackImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621335-maximumtrackimageforstate
    maximumTrackImageForState(state: cocoascript.UIControlState):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621338-setmaximumtrackimage
    setMaximumTrackImage_forState(image: cocoascript.UIImage, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621332-thumbtintcolor
    thumbTintColor(): cocoascript.UIColor;
    setThumbTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621347-currentthumbimage
    currentThumbImage(): cocoascript.UIImage;
    setCurrentThumbImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621342-thumbimageforstate
    thumbImageForState(state: cocoascript.UIControlState):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621336-setthumbimage
    setThumbImage_forState(image: cocoascript.UIImage, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621333-maximumvalueimagerectforbounds
    maximumValueImageRectForBounds(bounds: cocoascript.CGRect):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621327-minimumvalueimagerectforbounds
    minimumValueImageRectForBounds(bounds: cocoascript.CGRect):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621349-trackrectforbounds
    trackRectForBounds(bounds: cocoascript.CGRect):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uislider/1621344-thumbrectforbounds
    thumbRectForBounds_trackRect_value(bounds: cocoascript.CGRect, rect: cocoascript.CGRect, value: number):cocoascript.CGRect;
    //
    alloc():cocoascript.UISlider;
    //
    init():cocoascript.UISlider;
  }
}

declare const UISlider: cocoascript.UISlider;
declare namespace cocoascript {
  /**
   * An interface for adding and removing menus from a menu system.
   * doc://com.apple.documentation/documentation/uikit/uimenubuilder
   */
  interface UIMenuBuilder {
    // doc://com.apple.documentation/documentation/uikit/uimenubuilder/3327311-system
    system(): cocoascript.UIMenuSystem;
    setSystem(): void;
    // doc://com.apple.documentation/documentation/uikit/uimenubuilder/3327307-menuforidentifier
    menuForIdentifier(identifier: cocoascript.UIMenuIdentifier):cocoascript.UIMenu;
    // doc://com.apple.documentation/documentation/uikit/uimenubuilder/3335198-actionforidentifier
    actionForIdentifier(identifier: cocoascript.UIActionIdentifier):cocoascript.UIAction;
    // doc://com.apple.documentation/documentation/uikit/uimenubuilder/3327335-commandforaction
    commandForAction_propertyList(action: cocoascript.SEL, propertyList: cocoascript.UIMenuBuilder):cocoascript.UICommand;
    // doc://com.apple.documentation/documentation/uikit/uimenubuilder/3327304-insertchildmenu
    insertChildMenu_atStartOfMenuForIdentifier(childMenu: cocoascript.UIMenu, parentIdentifier: cocoascript.UIMenuIdentifier):void;
    // doc://com.apple.documentation/documentation/uikit/uimenubuilder/3327303-insertchildmenu
    insertChildMenu_atEndOfMenuForIdentifier(childMenu: cocoascript.UIMenu, parentIdentifier: cocoascript.UIMenuIdentifier):void;
    // doc://com.apple.documentation/documentation/uikit/uimenubuilder/3327306-insertsiblingmenu
    insertSiblingMenu_beforeMenuForIdentifier(siblingMenu: cocoascript.UIMenu, siblingIdentifier: cocoascript.UIMenuIdentifier):void;
    // doc://com.apple.documentation/documentation/uikit/uimenubuilder/3327305-insertsiblingmenu
    insertSiblingMenu_afterMenuForIdentifier(siblingMenu: cocoascript.UIMenu, siblingIdentifier: cocoascript.UIMenuIdentifier):void;
    // doc://com.apple.documentation/documentation/uikit/uimenubuilder/3327309-replacemenuforidentifier
    replaceMenuForIdentifier_withMenu(replacedIdentifier: cocoascript.UIMenuIdentifier, replacementMenu: cocoascript.UIMenu):void;
    // doc://com.apple.documentation/documentation/uikit/uimenubuilder/3327310-replacechildrenofmenuforidentifi
    replaceChildrenOfMenuForIdentifier_fromChildrenBlock(parentIdentifier: cocoascript.UIMenuIdentifier, childrenBlock: cocoascript.UIMenuElement):void;
    // doc://com.apple.documentation/documentation/uikit/uimenubuilder/3327308-removemenuforidentifier
    removeMenuForIdentifier(removedIdentifier: cocoascript.UIMenuIdentifier):void;
  }
}
declare namespace cocoascript {
  /**
   * A menu element that performs its action in a block.
   * doc://com.apple.documentation/documentation/uikit/uiaction
   */
  interface UIAction extends UIMenuElement {
    // doc://com.apple.documentation/documentation/uikit/uiaction/3335179-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaction/3335177-image
    image(): cocoascript.UIImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaction/3335176-identifier
    identifier(): cocoascript.UIActionIdentifier;
    setIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaction/3335175-discoverabilitytitle
    discoverabilityTitle(): cocoascript.NSString;
    setDiscoverabilityTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaction/3335174-attributes
    attributes(): cocoascript.UIMenuElementAttributes;
    setAttributes(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaction/3335178-state
    state(): cocoascript.UIMenuElementState;
    setState(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaction/3600315-sender
    sender(): cocoascript.id;
    setSender(): void;
    //
    alloc():cocoascript.UIAction;
    //
    init():cocoascript.UIAction;
  }
}

declare const UIAction: cocoascript.UIAction;
declare namespace cocoascript {
  /**
   * A container for grouping related menu elements in an app menu or contextual menu.
   * doc://com.apple.documentation/documentation/uikit/uimenu
   */
  interface UIMenu extends UIMenuElement {
    // doc://com.apple.documentation/documentation/uikit/uimenu/3281978-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIMenu;
    // doc://com.apple.documentation/documentation/uikit/uimenu/3261448-children
    children(): cocoascript.UIMenuElement;
    setChildren(): void;
    // doc://com.apple.documentation/documentation/uikit/uimenu/3261450-menubyreplacingchildren
    menuByReplacingChildren(newChildren: cocoascript.UIMenuElement):cocoascript.UIMenu;
    // doc://com.apple.documentation/documentation/uikit/uimenu/3261449-identifier
    identifier(): cocoascript.UIMenuIdentifier;
    setIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uimenu/3261451-options
    options(): cocoascript.UIMenuOptions;
    setOptions(): void;
    //
    alloc():cocoascript.UIMenu;
    //
    init():cocoascript.UIMenu;
  }
}

declare const UIMenu: cocoascript.UIMenu;
declare namespace cocoascript {
  /**
   * A view that shows that a task is in progress.
   * doc://com.apple.documentation/documentation/uikit/uiactivityindicatorview
   */
  interface UIActivityIndicatorView extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uiactivityindicatorview/1622840-initwithactivityindicatorstyle
    initWithActivityIndicatorStyle(style: cocoascript.UIActivityIndicatorViewStyle):cocoascript.UIActivityIndicatorView;
    // doc://com.apple.documentation/documentation/uikit/uiactivityindicatorview/1622841-initwithframe
    initWithFrame(frame: cocoascript.CGRect):cocoascript.UIActivityIndicatorView;
    // doc://com.apple.documentation/documentation/uikit/uiactivityindicatorview/1622844-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIActivityIndicatorView;
    // doc://com.apple.documentation/documentation/uikit/uiactivityindicatorview/1622835-startanimating
    startAnimating():void;
    // doc://com.apple.documentation/documentation/uikit/uiactivityindicatorview/1622842-stopanimating
    stopAnimating():void;
    // doc://com.apple.documentation/documentation/uikit/uiactivityindicatorview/2097554-animating
    animating(): cocoascript.BOOL;
    setAnimating(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivityindicatorview/1622837-hideswhenstopped
    hidesWhenStopped(): cocoascript.BOOL;
    setHidesWhenStopped(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivityindicatorview/1622847-activityindicatorviewstyle
    activityIndicatorViewStyle(): cocoascript.UIActivityIndicatorViewStyle;
    setActivityIndicatorViewStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivityindicatorview/1622836-color
    color(): cocoascript.UIColor;
    setColor(): void;
    //
    alloc():cocoascript.UIActivityIndicatorView;
    //
    init():cocoascript.UIActivityIndicatorView;
  }
}

declare const UIActivityIndicatorView: cocoascript.UIActivityIndicatorView;
declare namespace cocoascript {
  /**
   * An object that displays an alert message to the user.
   * doc://com.apple.documentation/documentation/uikit/uialertcontroller
   */
  interface UIAlertController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uialertcontroller/1620103-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uialertcontroller/1620106-message
    message(): cocoascript.NSString;
    setMessage(): void;
    // doc://com.apple.documentation/documentation/uikit/uialertcontroller/1620096-preferredstyle
    preferredStyle(): cocoascript.UIAlertControllerStyle;
    setPreferredStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uialertcontroller/1620094-addaction
    addAction(action: cocoascript.UIAlertAction):void;
    // doc://com.apple.documentation/documentation/uikit/uialertcontroller/1620099-actions
    actions(): cocoascript.UIAlertAction;
    setActions(): void;
    // doc://com.apple.documentation/documentation/uikit/uialertcontroller/1620102-preferredaction
    preferredAction(): cocoascript.UIAlertAction;
    setPreferredAction(): void;
    // doc://com.apple.documentation/documentation/uikit/uialertcontroller/1620093-addtextfieldwithconfigurationhan
    addTextFieldWithConfigurationHandler(configurationHandler: cocoascript.UITextField):void;
    // doc://com.apple.documentation/documentation/uikit/uialertcontroller/1620104-textfields
    textFields(): cocoascript.UITextField;
    setTextFields(): void;
    //
    alloc():cocoascript.UIAlertController;
    //
    init():cocoascript.UIAlertController;
  }
}

declare const UIAlertController: cocoascript.UIAlertController;
declare namespace cocoascript {
  /**
   * A control for the inputting of date and time values.
   * doc://com.apple.documentation/documentation/uikit/uidatepicker
   */
  interface UIDatePicker extends UIControl {
    // doc://com.apple.documentation/documentation/uikit/uidatepicker/1615973-calendar
    calendar(): cocoascript.NSCalendar;
    setCalendar(): void;
    // doc://com.apple.documentation/documentation/uikit/uidatepicker/1615975-date
    date(): cocoascript.NSDate;
    setDate(): void;
    // doc://com.apple.documentation/documentation/uikit/uidatepicker/1615995-locale
    locale(): cocoascript.NSLocale;
    setLocale(): void;
    // doc://com.apple.documentation/documentation/uikit/uidatepicker/1615971-setdate
    setDate_animated(date: cocoascript.NSDate, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uidatepicker/1615976-timezone
    timeZone(): cocoascript.NSTimeZone;
    setTimeZone(): void;
    // doc://com.apple.documentation/documentation/uikit/uidatepicker/1615997-datepickermode
    datePickerMode(): cocoascript.UIDatePickerMode;
    setDatePickerMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uidatepicker/3526123-datepickerstyle
    datePickerStyle(): cocoascript.UIDatePickerStyle;
    setDatePickerStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uidatepicker/3526124-preferreddatepickerstyle
    preferredDatePickerStyle(): cocoascript.UIDatePickerStyle;
    setPreferredDatePickerStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uidatepicker/1615999-maximumdate
    maximumDate(): cocoascript.NSDate;
    setMaximumDate(): void;
    // doc://com.apple.documentation/documentation/uikit/uidatepicker/1615980-minimumdate
    minimumDate(): cocoascript.NSDate;
    setMinimumDate(): void;
    // doc://com.apple.documentation/documentation/uikit/uidatepicker/1615998-minuteinterval
    minuteInterval(): cocoascript.NSInteger;
    setMinuteInterval(): void;
    // doc://com.apple.documentation/documentation/uikit/uidatepicker/1615986-countdownduration
    countDownDuration(): cocoascript.NSTimeInterval;
    setCountDownDuration(): void;
    //
    alloc():cocoascript.UIDatePicker;
    //
    init():cocoascript.UIDatePicker;
  }
}

declare const UIDatePicker: cocoascript.UIDatePicker;
declare namespace cocoascript {
  /**
   * A view that uses a spinning-wheel or slot-machine metaphor to show one or more sets of values.
   * doc://com.apple.documentation/documentation/uikit/uipickerview
   */
  interface UIPickerView extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uipickerview/1614370-datasource
    dataSource(): cocoascript.UIPickerViewDataSource;
    setDataSource(): void;
    // doc://com.apple.documentation/documentation/uikit/uipickerview/1614379-delegate
    delegate(): cocoascript.UIPickerViewDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uipickerview/1614368-numberofcomponents
    numberOfComponents(): cocoascript.NSInteger;
    setNumberOfComponents(): void;
    // doc://com.apple.documentation/documentation/uikit/uipickerview/1614381-numberofrowsincomponent
    numberOfRowsInComponent(component: cocoascript.NSInteger):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uipickerview/1614374-rowsizeforcomponent
    rowSizeForComponent(component: cocoascript.NSInteger):cocoascript.CGSize;
    // doc://com.apple.documentation/documentation/uikit/uipickerview/1614380-reloadallcomponents
    reloadAllComponents():void;
    // doc://com.apple.documentation/documentation/uikit/uipickerview/1614385-reloadcomponent
    reloadComponent(component: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uipickerview/1614382-selectrow
    selectRow_inComponent_animated(row: cocoascript.NSInteger, component: cocoascript.NSInteger, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uipickerview/1614369-selectedrowincomponent
    selectedRowInComponent(component: cocoascript.NSInteger):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uipickerview/1614372-viewforrow
    viewForRow_forComponent(row: cocoascript.NSInteger, component: cocoascript.NSInteger):cocoascript.UIView;
    // doc://com.apple.documentation/documentation/uikit/uipickerview/1614373-showsselectionindicator
    showsSelectionIndicator(): cocoascript.BOOL;
    setShowsSelectionIndicator(): void;
    //
    alloc():cocoascript.UIPickerView;
    //
    init():cocoascript.UIPickerView;
  }
}

declare const UIPickerView: cocoascript.UIPickerView;
declare namespace cocoascript {
  /**
   * A view controller that informs your app about user interaction with the color picker.
   * doc://com.apple.documentation/documentation/uikit/uicolorpickerviewcontroller
   */
  interface UIColorPickerViewController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uicolorpickerviewcontroller/3600465-init
    init():cocoascript.UIColorPickerViewController;
    // doc://com.apple.documentation/documentation/uikit/uicolorpickerviewcontroller/3600464-delegate
    delegate(): cocoascript.UIColorPickerViewControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uicolorpickerviewcontroller/3600466-selectedcolor
    selectedColor(): cocoascript.UIColor;
    setSelectedColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uicolorpickerviewcontroller/3600467-supportsalpha
    supportsAlpha(): cocoascript.BOOL;
    setSupportsAlpha(): void;
    //
    alloc():cocoascript.UIColorPickerViewController;
    //
    init():cocoascript.UIColorPickerViewController;
  }
}

declare const UIColorPickerViewController: cocoascript.UIColorPickerViewController;
declare namespace cocoascript {
  /**
   * A control that displays a color picker.
   * doc://com.apple.documentation/documentation/uikit/uicolorwell
   */
  interface UIColorWell extends UIControl {
    // doc://com.apple.documentation/documentation/uikit/uicolorwell/3600472-selectedcolor
    selectedColor(): cocoascript.UIColor;
    setSelectedColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uicolorwell/3600473-supportsalpha
    supportsAlpha(): cocoascript.BOOL;
    setSupportsAlpha(): void;
    // doc://com.apple.documentation/documentation/uikit/uicolorwell/3600474-title
    title(): cocoascript.NSString;
    setTitle(): void;
    //
    alloc():cocoascript.UIColorWell;
    //
    init():cocoascript.UIColorWell;
  }
}

declare const UIColorWell: cocoascript.UIColorWell;
declare namespace cocoascript {
  /**
   * A view controller that manages the interface for selecting a font that the system provides or the user installs.
   * doc://com.apple.documentation/documentation/uikit/uifontpickerviewcontroller
   */
  interface UIFontPickerViewController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uifontpickerviewcontroller/3238098-initwithconfiguration
    initWithConfiguration(configuration: cocoascript.UIFontPickerViewControllerConfiguration):cocoascript.UIFontPickerViewController;
    // doc://com.apple.documentation/documentation/uikit/uifontpickerviewcontroller/3238096-configuration
    configuration(): cocoascript.UIFontPickerViewControllerConfiguration;
    setConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uifontpickerviewcontroller/3238097-delegate
    delegate(): cocoascript.UIFontPickerViewControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uifontpickerviewcontroller/3238099-selectedfontdescriptor
    selectedFontDescriptor(): cocoascript.UIFontDescriptor;
    setSelectedFontDescriptor(): void;
    //
    alloc():cocoascript.UIFontPickerViewController;
    //
    init():cocoascript.UIFontPickerViewController;
  }
}

declare const UIFontPickerViewController: cocoascript.UIFontPickerViewController;
declare namespace cocoascript {
  /**
   * A view controller that manages the system interfaces for taking pictures, recording movies, and choosing items from the user's media library.
   * doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller
   */
  interface UIImagePickerController extends UINavigationController {
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/1619145-delegate
    delegate(): cocoascript.UIImagePickerControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/1619167-sourcetype
    sourceType(): cocoascript.UIImagePickerControllerSourceType;
    setSourceType(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/1619173-mediatypes
    mediaTypes(): cocoascript.NSString;
    setMediaTypes(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/1619137-allowsediting
    allowsEditing(): cocoascript.BOOL;
    setAllowsEditing(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/1619115-allowsimageediting
    allowsImageEditing(): cocoascript.BOOL;
    setAllowsImageEditing(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/1619154-videoquality
    videoQuality(): cocoascript.UIImagePickerControllerQualityType;
    setVideoQuality(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/1619146-videomaximumduration
    videoMaximumDuration(): cocoascript.NSTimeInterval;
    setVideoMaximumDuration(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/1619129-showscameracontrols
    showsCameraControls(): cocoascript.BOOL;
    setShowsCameraControls(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/1619113-cameraoverlayview
    cameraOverlayView(): cocoascript.UIView;
    setCameraOverlayView(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/1619142-cameraviewtransform
    cameraViewTransform(): cocoascript.CGAffineTransform;
    setCameraViewTransform(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/1619160-takepicture
    takePicture():void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/1619123-startvideocapture
    startVideoCapture():cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/1619140-stopvideocapture
    stopVideoCapture():void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/1619117-cameradevice
    cameraDevice(): cocoascript.UIImagePickerControllerCameraDevice;
    setCameraDevice(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/1619141-cameracapturemode
    cameraCaptureMode(): cocoascript.UIImagePickerControllerCameraCaptureMode;
    setCameraCaptureMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/1619124-cameraflashmode
    cameraFlashMode(): cocoascript.UIImagePickerControllerCameraFlashMode;
    setCameraFlashMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/2897484-imageexportpreset
    imageExportPreset(): cocoascript.UIImagePickerControllerImageURLExportPreset;
    setImageExportPreset(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontroller/2890964-videoexportpreset
    videoExportPreset(): cocoascript.NSString;
    setVideoExportPreset(): void;
    //
    alloc():cocoascript.UIImagePickerController;
    //
    init():cocoascript.UIImagePickerController;
  }
}

declare const UIImagePickerController: cocoascript.UIImagePickerController;
declare namespace cocoascript {
  /**
   * An object that displays a single image or a sequence of animated images in your interface.
   * doc://com.apple.documentation/documentation/uikit/uiimageview
   */
  interface UIImageView extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uiimageview/1621062-initwithimage
    initWithImage(image: cocoascript.UIImage):cocoascript.UIImageView;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/1621064-initwithimage
    initWithImage_highlightedImage(image: cocoascript.UIImage, highlightedImage: cocoascript.UIImage):cocoascript.UIImageView;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/1621069-image
    image(): cocoascript.UIImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/1621066-highlightedimage
    highlightedImage(): cocoascript.UIImage;
    setHighlightedImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/1621068-animationimages
    animationImages(): cocoascript.UIImage;
    setAnimationImages(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/1621065-highlightedanimationimages
    highlightedAnimationImages(): cocoascript.UIImage;
    setHighlightedAnimationImages(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/1621058-animationduration
    animationDuration(): cocoascript.NSTimeInterval;
    setAnimationDuration(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/1621070-animationrepeatcount
    animationRepeatCount(): cocoascript.NSInteger;
    setAnimationRepeatCount(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/1621061-startanimating
    startAnimating():void;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/1621057-stopanimating
    stopAnimating():void;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/2097534-animating
    animating(): cocoascript.BOOL;
    setAnimating(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/3295948-preferredsymbolconfiguration
    preferredSymbolConfiguration(): cocoascript.UIImageSymbolConfiguration;
    setPreferredSymbolConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/1621063-userinteractionenabled
    userInteractionEnabled(): cocoascript.BOOL;
    setUserInteractionEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/1621060-highlighted
    highlighted(): cocoascript.BOOL;
    setHighlighted(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/1621059-tintcolor
    tintColor(): cocoascript.UIColor;
    setTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/1627692-adjustsimagewhenancestorfocused
    adjustsImageWhenAncestorFocused(): cocoascript.BOOL;
    setAdjustsImageWhenAncestorFocused(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/1627691-focusedframeguide
    focusedFrameGuide(): cocoascript.UILayoutGuide;
    setFocusedFrameGuide(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/2920037-masksfocuseffecttocontents
    masksFocusEffectToContents(): cocoascript.BOOL;
    setMasksFocusEffectToContents(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimageview/2882128-overlaycontentview
    overlayContentView(): cocoascript.UIView;
    setOverlayContentView(): void;
    //
    alloc():cocoascript.UIImageView;
    //
    init():cocoascript.UIImageView;
  }
}

declare const UIImageView: cocoascript.UIImageView;
declare namespace cocoascript {
  /**
   * A view that depicts the progress of a task over time.
   * doc://com.apple.documentation/documentation/uikit/uiprogressview
   */
  interface UIProgressView extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uiprogressview/1619833-initwithprogressviewstyle
    initWithProgressViewStyle(style: cocoascript.UIProgressViewStyle):cocoascript.UIProgressView;
    // doc://com.apple.documentation/documentation/uikit/uiprogressview/1619842-initwithframe
    initWithFrame(frame: cocoascript.CGRect):cocoascript.UIProgressView;
    // doc://com.apple.documentation/documentation/uikit/uiprogressview/1619839-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIProgressView;
    // doc://com.apple.documentation/documentation/uikit/uiprogressview/1619844-progress
    progress(): number;
    setProgress(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprogressview/1619846-setprogress
    setProgress_animated(progress: number, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiprogressview/1619840-observedprogress
    observedProgress(): cocoascript.NSProgress;
    setObservedProgress(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprogressview/1619845-progressviewstyle
    progressViewStyle(): cocoascript.UIProgressViewStyle;
    setProgressViewStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprogressview/1619836-progresstintcolor
    progressTintColor(): cocoascript.UIColor;
    setProgressTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprogressview/1619837-progressimage
    progressImage(): cocoascript.UIImage;
    setProgressImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprogressview/1619841-tracktintcolor
    trackTintColor(): cocoascript.UIColor;
    setTrackTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprogressview/1619843-trackimage
    trackImage(): cocoascript.UIImage;
    setTrackImage(): void;
    //
    alloc():cocoascript.UIProgressView;
    //
    init():cocoascript.UIProgressView;
  }
}

declare const UIProgressView: cocoascript.UIProgressView;
declare namespace cocoascript {
  /**
   * A specialized view for receiving search-related information from the user.
   * doc://com.apple.documentation/documentation/uikit/uisearchbar
   */
  interface UISearchBar extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624304-init
    init():cocoascript.UISearchBar;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624324-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UISearchBar;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624269-initwithframe
    initWithFrame(frame: cocoascript.CGRect):cocoascript.UISearchBar;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624291-delegate
    delegate(): cocoascript.UISearchBarDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624322-placeholder
    placeholder(): cocoascript.NSString;
    setPlaceholder(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624326-prompt
    prompt(): cocoascript.NSString;
    setPrompt(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624282-text
    text(): cocoascript.NSString;
    setText(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624295-bartintcolor
    barTintColor(): cocoascript.UIColor;
    setBarTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624281-searchbarstyle
    searchBarStyle(): cocoascript.UISearchBarStyle;
    setSearchBarStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624286-tintcolor
    tintColor(): cocoascript.UIColor;
    setTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624321-translucent
    translucent(): cocoascript.BOOL;
    setTranslucent(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624270-barstyle
    barStyle(): cocoascript.UIBarStyle;
    setBarStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624275-inputassistantitem
    inputAssistantItem(): cocoascript.UITextInputAssistantItem;
    setInputAssistantItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624298-showsbookmarkbutton
    showsBookmarkButton(): cocoascript.BOOL;
    setShowsBookmarkButton(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624283-showscancelbutton
    showsCancelButton(): cocoascript.BOOL;
    setShowsCancelButton(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624293-setshowscancelbutton
    setShowsCancelButton_animated(showsCancelButton: cocoascript.BOOL, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624273-showssearchresultsbutton
    showsSearchResultsButton(): cocoascript.BOOL;
    setShowsSearchResultsButton(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624285-searchresultsbuttonselected
    searchResultsButtonSelected(): cocoascript.BOOL;
    setSearchResultsButtonSelected(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624292-scopebuttontitles
    scopeButtonTitles(): cocoascript.NSString;
    setScopeButtonTitles(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624287-selectedscopebuttonindex
    selectedScopeButtonIndex(): cocoascript.NSInteger;
    setSelectedScopeButtonIndex(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624319-showsscopebar
    showsScopeBar(): cocoascript.BOOL;
    setShowsScopeBar(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624276-backgroundimage
    backgroundImage(): cocoascript.UIImage;
    setBackgroundImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624274-backgroundimageforbarposition
    backgroundImageForBarPosition_barMetrics(barPosition: cocoascript.UIBarPosition, barMetrics: cocoascript.UIBarMetrics):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624325-setbackgroundimage
    setBackgroundImage_forBarPosition_barMetrics(backgroundImage: cocoascript.UIImage, barPosition: cocoascript.UIBarPosition, barMetrics: cocoascript.UIBarMetrics):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624296-imageforsearchbaricon
    imageForSearchBarIcon_state(icon: cocoascript.UISearchBarIcon, state: cocoascript.UIControlState):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624330-setimage
    setImage_forSearchBarIcon_state(iconImage: cocoascript.UIImage, icon: cocoascript.UISearchBarIcon, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624323-positionadjustmentforsearchbaric
    positionAdjustmentForSearchBarIcon(icon: cocoascript.UISearchBarIcon):cocoascript.UIOffset;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624278-setpositionadjustment
    setPositionAdjustment_forSearchBarIcon(adjustment: cocoascript.UIOffset, icon: cocoascript.UISearchBarIcon):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624279-inputaccessoryview
    inputAccessoryView(): cocoascript.UIView;
    setInputAccessoryView(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624317-scopebarbackgroundimage
    scopeBarBackgroundImage(): cocoascript.UIImage;
    setScopeBarBackgroundImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624311-scopebarbuttonbackgroundimagefor
    scopeBarButtonBackgroundImageForState(state: cocoascript.UIControlState):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624290-setscopebarbuttonbackgroundimage
    setScopeBarButtonBackgroundImage_forState(backgroundImage: cocoascript.UIImage, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624313-scopebarbuttondividerimageforlef
    scopeBarButtonDividerImageForLeftSegmentState_rightSegmentState(leftState: cocoascript.UIControlState, rightState: cocoascript.UIControlState):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624308-setscopebarbuttondividerimage
    setScopeBarButtonDividerImage_forLeftSegmentState_rightSegmentState(dividerImage: cocoascript.UIImage, leftState: cocoascript.UIControlState, rightState: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624309-scopebarbuttontitletextattribute
    scopeBarButtonTitleTextAttributesForState(state: cocoascript.UIControlState):cocoascript.UISearchBar;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624277-setscopebarbuttontitletextattrib
    setScopeBarButtonTitleTextAttributes_forState(attributes: cocoascript.UISearchBar, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624288-searchfieldbackgroundimageforsta
    searchFieldBackgroundImageForState(state: cocoascript.UIControlState):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624307-setsearchfieldbackgroundimage
    setSearchFieldBackgroundImage_forState(backgroundImage: cocoascript.UIImage, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624320-searchfieldbackgroundpositionadj
    searchFieldBackgroundPositionAdjustment(): cocoascript.UIOffset;
    setSearchFieldBackgroundPositionAdjustment(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/1624297-searchtextpositionadjustment
    searchTextPositionAdjustment(): cocoascript.UIOffset;
    setSearchTextPositionAdjustment(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/3175433-searchtextfield
    searchTextField(): cocoascript.UISearchTextField;
    setSearchTextField(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbar/3152925-setshowsscopebar
    setShowsScopeBar_animated(show: cocoascript.BOOL, animate: cocoascript.BOOL):void;
    //
    alloc():cocoascript.UISearchBar;
    //
    init():cocoascript.UISearchBar;
  }
}

declare const UISearchBar: cocoascript.UISearchBar;
declare namespace cocoascript {
  /**
   * A horizontal control that consists of multiple segments, each segment functioning as a discrete button.
   * doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol
   */
  interface UISegmentedControl extends UIControl {
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618569-initwithitems
    initWithItems(items: cocoascript.NSArray):cocoascript.UISegmentedControl;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618582-setimage
    setImage_forSegmentAtIndex(image: cocoascript.UIImage, segment: cocoascript.NSUInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618579-imageforsegmentatindex
    imageForSegmentAtIndex(segment: cocoascript.NSUInteger):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618556-settitle
    setTitle_forSegmentAtIndex(title: cocoascript.NSString, segment: cocoascript.NSUInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618561-titleforsegmentatindex
    titleForSegmentAtIndex(segment: cocoascript.NSUInteger):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618572-insertsegmentwithimage
    insertSegmentWithImage_atIndex_animated(image: cocoascript.UIImage, segment: cocoascript.NSUInteger, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618588-insertsegmentwithtitle
    insertSegmentWithTitle_atIndex_animated(title: cocoascript.NSString, segment: cocoascript.NSUInteger, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618553-numberofsegments
    numberOfSegments(): cocoascript.NSUInteger;
    setNumberOfSegments(): void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618557-removeallsegments
    removeAllSegments():void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618590-removesegmentatindex
    removeSegmentAtIndex_animated(segment: cocoascript.NSUInteger, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618575-selectedsegmentindex
    selectedSegmentIndex(): cocoascript.NSInteger;
    setSelectedSegmentIndex(): void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618586-momentary
    momentary(): cocoascript.BOOL;
    setMomentary(): void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618577-segmentedcontrolstyle
    segmentedControlStyle(): cocoascript.UISegmentedControlStyle;
    setSegmentedControlStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618567-setenabled
    setEnabled_forSegmentAtIndex(enabled: cocoascript.BOOL, segment: cocoascript.NSUInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618591-isenabledforsegmentatindex
    isEnabledForSegmentAtIndex(segment: cocoascript.NSUInteger):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618574-setcontentoffset
    setContentOffset_forSegmentAtIndex(offset: cocoascript.CGSize, segment: cocoascript.NSUInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618580-contentoffsetforsegmentatindex
    contentOffsetForSegmentAtIndex(segment: cocoascript.NSUInteger):cocoascript.CGSize;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618584-setwidth
    setWidth_forSegmentAtIndex(width: cocoascript.CGFloat, segment: cocoascript.NSUInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618581-widthforsegmentatindex
    widthForSegmentAtIndex(segment: cocoascript.NSUInteger):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618578-apportionssegmentwidthsbycontent
    apportionsSegmentWidthsByContent(): cocoascript.BOOL;
    setApportionsSegmentWidthsByContent(): void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618583-backgroundimageforstate
    backgroundImageForState_barMetrics(state: cocoascript.UIControlState, barMetrics: cocoascript.UIBarMetrics):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618571-setbackgroundimage
    setBackgroundImage_forState_barMetrics(backgroundImage: cocoascript.UIImage, state: cocoascript.UIControlState, barMetrics: cocoascript.UIBarMetrics):void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618593-contentpositionadjustmentforsegm
    contentPositionAdjustmentForSegmentType_barMetrics(leftCenterRightOrAlone: cocoascript.UISegmentedControlSegment, barMetrics: cocoascript.UIBarMetrics):cocoascript.UIOffset;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618555-setcontentpositionadjustment
    setContentPositionAdjustment_forSegmentType_barMetrics(adjustment: cocoascript.UIOffset, leftCenterRightOrAlone: cocoascript.UISegmentedControlSegment, barMetrics: cocoascript.UIBarMetrics):void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618565-dividerimageforleftsegmentstate
    dividerImageForLeftSegmentState_rightSegmentState_barMetrics(leftState: cocoascript.UIControlState, rightState: cocoascript.UIControlState, barMetrics: cocoascript.UIBarMetrics):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618558-setdividerimage
    setDividerImage_forLeftSegmentState_rightSegmentState_barMetrics(dividerImage: cocoascript.UIImage, leftState: cocoascript.UIControlState, rightState: cocoascript.UIControlState, barMetrics: cocoascript.UIBarMetrics):void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618566-titletextattributesforstate
    titleTextAttributesForState(state: cocoascript.UIControlState):cocoascript.UISegmentedControl;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/1618570-settitletextattributes
    setTitleTextAttributes_forState(attributes: cocoascript.UISegmentedControl, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/3600578-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UISegmentedControl;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/3600579-initwithframe
    initWithFrame(frame: cocoascript.CGRect):cocoascript.UISegmentedControl;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/3600580-initwithframe
    initWithFrame_actions(frame: cocoascript.CGRect, actions: cocoascript.UIAction):cocoascript.UISegmentedControl;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/3335209-selectedsegmenttintcolor
    selectedSegmentTintColor(): cocoascript.UIColor;
    setSelectedSegmentTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/3600577-actionforsegmentatindex
    actionForSegmentAtIndex(segment: cocoascript.NSUInteger):cocoascript.UIAction;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/3600581-insertsegmentwithaction
    insertSegmentWithAction_atIndex_animated(action: cocoascript.UIAction, segment: cocoascript.NSUInteger, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/3600582-segmentindexforactionidentifier
    segmentIndexForActionIdentifier(actionIdentifier: cocoascript.UIActionIdentifier):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrol/3600583-setaction
    setAction_forSegmentAtIndex(action: cocoascript.UIAction, segment: cocoascript.NSUInteger):void;
    //
    alloc():cocoascript.UISegmentedControl;
    //
    init():cocoascript.UISegmentedControl;
  }
}

declare const UISegmentedControl: cocoascript.UISegmentedControl;
declare namespace cocoascript {
  /**
   * A streamlined interface for laying out a collection of views in either a column or a row.
   * doc://com.apple.documentation/documentation/uikit/uistackview
   */
  interface UIStackView extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uistackview/1616240-initwitharrangedsubviews
    initWithArrangedSubviews(views: cocoascript.UIView):cocoascript.UIStackView;
    // doc://com.apple.documentation/documentation/uikit/uistackview/2097542-initwithframe
    initWithFrame(frame: cocoascript.CGRect):cocoascript.UIStackView;
    // doc://com.apple.documentation/documentation/uikit/uistackview/2097541-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIStackView;
    // doc://com.apple.documentation/documentation/uikit/uistackview/1616227-addarrangedsubview
    addArrangedSubview(view: cocoascript.UIView):void;
    // doc://com.apple.documentation/documentation/uikit/uistackview/1616232-arrangedsubviews
    arrangedSubviews(): cocoascript.UIView;
    setArrangedSubviews(): void;
    // doc://com.apple.documentation/documentation/uikit/uistackview/1616237-insertarrangedsubview
    insertArrangedSubview_atIndex(view: cocoascript.UIView, stackIndex: cocoascript.NSUInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uistackview/1616235-removearrangedsubview
    removeArrangedSubview(view: cocoascript.UIView):void;
    // doc://com.apple.documentation/documentation/uikit/uistackview/1616243-alignment
    alignment(): cocoascript.UIStackViewAlignment;
    setAlignment(): void;
    // doc://com.apple.documentation/documentation/uikit/uistackview/1616223-axis
    axis(): cocoascript.UILayoutConstraintAxis;
    setAxis(): void;
    // doc://com.apple.documentation/documentation/uikit/uistackview/1616224-baselinerelativearrangement
    baselineRelativeArrangement(): cocoascript.BOOL;
    setBaselineRelativeArrangement(): void;
    // doc://com.apple.documentation/documentation/uikit/uistackview/1616233-distribution
    distribution(): cocoascript.UIStackViewDistribution;
    setDistribution(): void;
    // doc://com.apple.documentation/documentation/uikit/uistackview/1616220-layoutmarginsrelativearrangement
    layoutMarginsRelativeArrangement(): cocoascript.BOOL;
    setLayoutMarginsRelativeArrangement(): void;
    // doc://com.apple.documentation/documentation/uikit/uistackview/1616225-spacing
    spacing(): cocoascript.CGFloat;
    setSpacing(): void;
    // doc://com.apple.documentation/documentation/uikit/uistackview/2865827-customspacingafterview
    customSpacingAfterView(arrangedSubview: cocoascript.UIView):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uistackview/2866023-setcustomspacing
    setCustomSpacing_afterView(spacing: cocoascript.CGFloat, arrangedSubview: cocoascript.UIView):void;
    //
    alloc():cocoascript.UIStackView;
    //
    init():cocoascript.UIStackView;
  }
}

declare const UIStackView: cocoascript.UIStackView;
declare namespace cocoascript {
  /**
   * An object that displays an editable text area in your interface.
   * doc://com.apple.documentation/documentation/uikit/uitextfield
   */
  interface UITextField extends UIControl {
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619595-delegate
    delegate(): cocoascript.UITextFieldDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619635-text
    text(): cocoascript.NSString;
    setText(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619602-attributedtext
    attributedText(): cocoascript.NSAttributedString;
    setAttributedText(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619621-placeholder
    placeholder(): cocoascript.NSString;
    setPlaceholder(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619610-attributedplaceholder
    attributedPlaceholder(): cocoascript.NSAttributedString;
    setAttributedPlaceholder(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619618-defaulttextattributes
    defaultTextAttributes(): cocoascript.id;
    setDefaultTextAttributes(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619604-font
    font(): cocoascript.UIFont;
    setFont(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619617-textcolor
    textColor(): cocoascript.UIColor;
    setTextColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619643-textalignment
    textAlignment(): cocoascript.NSTextAlignment;
    setTextAlignment(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619632-typingattributes
    typingAttributes(): cocoascript.id;
    setTypingAttributes(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619625-adjustsfontsizetofitwidth
    adjustsFontSizeToFitWidth(): cocoascript.BOOL;
    setAdjustsFontSizeToFitWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619605-minimumfontsize
    minimumFontSize(): cocoascript.CGFloat;
    setMinimumFontSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619608-editing
    editing(): cocoascript.BOOL;
    setEditing(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619639-clearsonbeginediting
    clearsOnBeginEditing(): cocoascript.BOOL;
    setClearsOnBeginEditing(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619631-clearsoninsertion
    clearsOnInsertion(): cocoascript.BOOL;
    setClearsOnInsertion(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619628-allowseditingtextattributes
    allowsEditingTextAttributes(): cocoascript.BOOL;
    setAllowsEditingTextAttributes(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619624-borderstyle
    borderStyle(): cocoascript.UITextBorderStyle;
    setBorderStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619623-background
    background(): cocoascript.UIImage;
    setBackground(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619611-disabledbackground
    disabledBackground(): cocoascript.UIImage;
    setDisabledBackground(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619622-clearbuttonmode
    clearButtonMode(): cocoascript.UITextFieldViewMode;
    setClearButtonMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619597-leftview
    leftView(): cocoascript.UIView;
    setLeftView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619588-leftviewmode
    leftViewMode(): cocoascript.UITextFieldViewMode;
    setLeftViewMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619596-rightview
    rightView(): cocoascript.UIView;
    setRightView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619607-rightviewmode
    rightViewMode(): cocoascript.UITextFieldViewMode;
    setRightViewMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619636-textrectforbounds
    textRectForBounds(bounds: cocoascript.CGRect):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619587-drawtextinrect
    drawTextInRect(rect: cocoascript.CGRect):void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619615-placeholderrectforbounds
    placeholderRectForBounds(bounds: cocoascript.CGRect):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619637-drawplaceholderinrect
    drawPlaceholderInRect(rect: cocoascript.CGRect):void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619642-borderrectforbounds
    borderRectForBounds(bounds: cocoascript.CGRect):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619589-editingrectforbounds
    editingRectForBounds(bounds: cocoascript.CGRect):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619600-clearbuttonrectforbounds
    clearButtonRectForBounds(bounds: cocoascript.CGRect):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619586-leftviewrectforbounds
    leftViewRectForBounds(bounds: cocoascript.CGRect):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619638-rightviewrectforbounds
    rightViewRectForBounds(bounds: cocoascript.CGRect):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619620-inputview
    inputView(): cocoascript.UIView;
    setInputView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619627-inputaccessoryview
    inputAccessoryView(): cocoascript.UIView;
    setInputAccessoryView(): void;
    //
    alloc():cocoascript.UITextField;
    //
    init():cocoascript.UITextField;
  }
}

declare const UITextField: cocoascript.UITextField;
declare const UITextFieldDidEndEditingReasonKey: cocoascript.NSString;
declare namespace cocoascript {
  /**
   * An object that coordinates text formatting using the standard Mac font panel.
   * doc://com.apple.documentation/documentation/uikit/uitextformattingcoordinator
   */
  interface UITextFormattingCoordinator extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextformattingcoordinator/3261464-initwithwindowscene
    initWithWindowScene(windowScene: cocoascript.UIWindowScene):cocoascript.UITextFormattingCoordinator;
    // doc://com.apple.documentation/documentation/uikit/uitextformattingcoordinator/3261463-fontpanelvisible
    fontPanelVisible(): cocoascript.BOOL;
    setFontPanelVisible(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextformattingcoordinator/3261465-setselectedattributes
    setSelectedAttributes_isMultiple(attributes: cocoascript.UITextFormattingCoordinator, flag: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uitextformattingcoordinator/3261462-delegate
    delegate(): cocoascript.UITextFormattingCoordinatorDelegate;
    setDelegate(): void;
    //
    alloc():cocoascript.UITextFormattingCoordinator;
    //
    init():cocoascript.UITextFormattingCoordinator;
  }
}

declare const UITextFormattingCoordinator: cocoascript.UITextFormattingCoordinator;
declare namespace cocoascript {
  /**
   * A scrollable, multiline text region.
   * doc://com.apple.documentation/documentation/uikit/uitextview
   */
  interface UITextView extends UIScrollView {
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618597-initwithframe
    initWithFrame_textContainer(frame: cocoascript.CGRect, textContainer: cocoascript.NSTextContainer):cocoascript.UITextView;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618617-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UITextView;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618631-delegate
    delegate(): cocoascript.UITextViewDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618623-text
    text(): cocoascript.NSString;
    setText(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618626-attributedtext
    attributedText(): cocoascript.NSAttributedString;
    setAttributedText(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618600-font
    font(): cocoascript.UIFont;
    setFont(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618601-textcolor
    textColor(): cocoascript.UIColor;
    setTextColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618607-datadetectortypes
    dataDetectorTypes(): cocoascript.UIDataDetectorTypes;
    setDataDetectorTypes(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618618-textalignment
    textAlignment(): cocoascript.NSTextAlignment;
    setTextAlignment(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618629-typingattributes
    typingAttributes(): cocoascript.id;
    setTypingAttributes(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618632-linktextattributes
    linkTextAttributes(): cocoascript.id;
    setLinkTextAttributes(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618619-textcontainerinset
    textContainerInset(): cocoascript.UIEdgeInsets;
    setTextContainerInset(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/3295975-usesstandardtextscaling
    usesStandardTextScaling(): cocoascript.BOOL;
    setUsesStandardTextScaling(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618616-editable
    editable(): cocoascript.BOOL;
    setEditable(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618622-allowseditingtextattributes
    allowsEditingTextAttributes(): cocoascript.BOOL;
    setAllowsEditingTextAttributes(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618615-selectedrange
    selectedRange(): cocoascript.NSRange;
    setSelectedRange(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618613-scrollrangetovisible
    scrollRangeToVisible(range: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618605-clearsoninsertion
    clearsOnInsertion(): cocoascript.BOOL;
    setClearsOnInsertion(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618627-selectable
    selectable(): cocoascript.BOOL;
    setSelectable(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618614-inputview
    inputView(): cocoascript.UIView;
    setInputView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618596-inputaccessoryview
    inputAccessoryView(): cocoascript.UIView;
    setInputAccessoryView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618602-layoutmanager
    layoutManager(): cocoascript.NSLayoutManager;
    setLayoutManager(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618624-textcontainer
    textContainer(): cocoascript.NSTextContainer;
    setTextContainer(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextview/1618611-textstorage
    textStorage(): cocoascript.NSTextStorage;
    setTextStorage(): void;
    //
    alloc():cocoascript.UITextView;
    //
    init():cocoascript.UITextView;
  }
}

declare const UITextView: cocoascript.UITextView;
declare namespace cocoascript {
  /**
   * A control that displays one or more buttons along the bottom edge of your interface.
   * doc://com.apple.documentation/documentation/uikit/uitoolbar
   */
  interface UIToolbar extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uitoolbar/1617992-delegate
    delegate(): cocoascript.UIToolbarDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uitoolbar/1617997-items
    items(): cocoascript.UIBarButtonItem;
    setItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uitoolbar/1617999-setitems
    setItems_animated(items: cocoascript.UIBarButtonItem, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uitoolbar/3198081-standardappearance
    standardAppearance(): cocoascript.UIToolbarAppearance;
    setStandardAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uitoolbar/3198080-compactappearance
    compactAppearance(): cocoascript.UIToolbarAppearance;
    setCompactAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uitoolbar/1618001-translucent
    translucent(): cocoascript.BOOL;
    setTranslucent(): void;
    //
    alloc():cocoascript.UIToolbar;
    //
    init():cocoascript.UIToolbar;
  }
}

declare const UIToolbar: cocoascript.UIToolbar;
declare namespace cocoascript {
  /**
   * An object that manages the content for a rectangular area on the screen.
   * doc://com.apple.documentation/documentation/uikit/uiview
   */
  interface UIView extends UIResponder {
    // doc://com.apple.documentation/documentation/uikit/uiview/1622488-initwithframe
    initWithFrame(frame: cocoascript.CGRect):cocoascript.UIView;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622477-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIView;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622591-backgroundcolor
    backgroundColor(): cocoascript.UIColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622585-hidden
    hidden(): cocoascript.BOOL;
    setHidden(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622417-alpha
    alpha(): cocoascript.CGFloat;
    setAlpha(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622622-opaque
    opaque(): cocoascript.BOOL;
    setOpaque(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622467-tintcolor
    tintColor(): cocoascript.UIColor;
    setTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622555-tintadjustmentmode
    tintAdjustmentMode(): cocoascript.UIViewTintAdjustmentMode;
    setTintAdjustmentMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622415-clipstobounds
    clipsToBounds(): cocoascript.BOOL;
    setClipsToBounds(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622449-clearscontextbeforedrawing
    clearsContextBeforeDrawing(): cocoascript.BOOL;
    setClearsContextBeforeDrawing(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622557-maskview
    maskView(): cocoascript.UIView;
    setMaskView(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622626-layerclass
    layerClass(): cocoascript.Class;
    setLayerClass(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622436-layer
    layer(): cocoascript.CALayer;
    setLayer(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622577-userinteractionenabled
    userInteractionEnabled(): cocoascript.BOOL;
    setUserInteractionEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622519-multipletouchenabled
    multipleTouchEnabled(): cocoascript.BOOL;
    setMultipleTouchEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622453-exclusivetouch
    exclusiveTouch(): cocoascript.BOOL;
    setExclusiveTouch(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622621-frame
    frame(): cocoascript.CGRect;
    setFrame(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622580-bounds
    bounds(): cocoascript.CGRect;
    setBounds(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622627-center
    center(): cocoascript.CGPoint;
    setCenter(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622459-transform
    transform(): cocoascript.CGAffineTransform;
    setTransform(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622474-superview
    superview(): cocoascript.UIView;
    setSuperview(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622614-subviews
    subviews(): cocoascript.UIView;
    setSubviews(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622456-window
    window(): cocoascript.UIWindow;
    setWindow(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622616-addsubview
    addSubview(view: cocoascript.UIView):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622541-bringsubviewtofront
    bringSubviewToFront(view: cocoascript.UIView):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622618-sendsubviewtoback
    sendSubviewToBack(view: cocoascript.UIView):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622421-removefromsuperview
    removeFromSuperview():void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622538-insertsubview
    insertSubview_atIndex(view: cocoascript.UIView, index: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622570-insertsubview
    insertSubview_aboveSubview(view: cocoascript.UIView, siblingSubview: cocoascript.UIView):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622598-insertsubview
    insertSubview_belowSubview(view: cocoascript.UIView, siblingSubview: cocoascript.UIView):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622448-exchangesubviewatindex
    exchangeSubviewAtIndex_withSubviewAtIndex(index1: cocoascript.NSInteger, index2: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622521-isdescendantofview
    isDescendantOfView(view: cocoascript.UIView):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622500-didaddsubview
    didAddSubview(subview: cocoascript.UIView):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622647-willremovesubview
    willRemoveSubview(subview: cocoascript.UIView):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622629-willmovetosuperview
    willMoveToSuperview(newSuperview: cocoascript.UIView):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622433-didmovetosuperview
    didMoveToSuperview():void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622563-willmovetowindow
    willMoveToWindow(newWindow: cocoascript.UIWindow):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622527-didmovetowindow
    didMoveToWindow():void;
    // doc://com.apple.documentation/documentation/uikit/uiview/2865930-directionallayoutmargins
    directionalLayoutMargins(): cocoascript.NSDirectionalEdgeInsets;
    setDirectionalLayoutMargins(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622566-layoutmargins
    layoutMargins(): cocoascript.UIEdgeInsets;
    setLayoutMargins(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622653-preservessuperviewlayoutmargins
    preservesSuperviewLayoutMargins(): cocoascript.BOOL;
    setPreservesSuperviewLayoutMargins(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622416-layoutmarginsdidchange
    layoutMarginsDidChange():void;
    // doc://com.apple.documentation/documentation/uikit/uiview/2891103-safeareainsets
    safeAreaInsets(): cocoascript.UIEdgeInsets;
    setSafeAreaInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/2891102-safearealayoutguide
    safeAreaLayoutGuide(): cocoascript.UILayoutGuide;
    setSafeAreaLayoutGuide(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/2891104-safeareainsetsdidchange
    safeAreaInsetsDidChange():void;
    // doc://com.apple.documentation/documentation/uikit/uiview/2891101-insetslayoutmarginsfromsafearea
    insetsLayoutMarginsFromSafeArea(): cocoascript.BOOL;
    setInsetsLayoutMarginsFromSafeArea(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622464-constraints
    constraints(): cocoascript.NSLayoutConstraint;
    setConstraints(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622523-addconstraint
    addConstraint(constraint: cocoascript.NSLayoutConstraint):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622513-addconstraints
    addConstraints(constraints: cocoascript.NSLayoutConstraint):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622659-removeconstraint
    removeConstraint(constraint: cocoascript.NSLayoutConstraint):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622593-removeconstraints
    removeConstraints(constraints: cocoascript.NSLayoutConstraint):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622483-bottomanchor
    bottomAnchor(): cocoascript.NSLayoutYAxisAnchor;
    setBottomAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622596-centerxanchor
    centerXAnchor(): cocoascript.NSLayoutXAxisAnchor;
    setCenterXAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622447-centeryanchor
    centerYAnchor(): cocoascript.NSLayoutYAxisAnchor;
    setCenterYAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622508-firstbaselineanchor
    firstBaselineAnchor(): cocoascript.NSLayoutYAxisAnchor;
    setFirstBaselineAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622590-heightanchor
    heightAnchor(): cocoascript.NSLayoutDimension;
    setHeightAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622471-lastbaselineanchor
    lastBaselineAnchor(): cocoascript.NSLayoutYAxisAnchor;
    setLastBaselineAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622520-leadinganchor
    leadingAnchor(): cocoascript.NSLayoutXAxisAnchor;
    setLeadingAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622435-leftanchor
    leftAnchor(): cocoascript.NSLayoutXAxisAnchor;
    setLeftAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622579-rightanchor
    rightAnchor(): cocoascript.NSLayoutXAxisAnchor;
    setRightAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622613-topanchor
    topAnchor(): cocoascript.NSLayoutYAxisAnchor;
    setTopAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622522-trailinganchor
    trailingAnchor(): cocoascript.NSLayoutXAxisAnchor;
    setTrailingAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622605-widthanchor
    widthAnchor(): cocoascript.NSLayoutDimension;
    setWidthAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622414-addlayoutguide
    addLayoutGuide(layoutGuide: cocoascript.UILayoutGuide):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622536-layoutguides
    layoutGuides(): cocoascript.UILayoutGuide;
    setLayoutGuides(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622651-layoutmarginsguide
    layoutMarginsGuide(): cocoascript.UILayoutGuide;
    setLayoutMarginsGuide(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622644-readablecontentguide
    readableContentGuide(): cocoascript.UILayoutGuide;
    setReadableContentGuide(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622506-removelayoutguide
    removeLayoutGuide(layoutGuide: cocoascript.UILayoutGuide):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622624-systemlayoutsizefittingsize
    systemLayoutSizeFittingSize(targetSize: cocoascript.CGSize):cocoascript.CGSize;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622623-systemlayoutsizefittingsize
    systemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority(targetSize: cocoascript.CGSize, horizontalFittingPriority: cocoascript.UILayoutPriority, verticalFittingPriority: cocoascript.UILayoutPriority):cocoascript.CGSize;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622600-intrinsiccontentsize
    intrinsicContentSize(): cocoascript.CGSize;
    setIntrinsicContentSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622457-invalidateintrinsiccontentsize
    invalidateIntrinsicContentSize():void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622465-contentcompressionresistanceprio
    contentCompressionResistancePriorityForAxis(axis: cocoascript.UILayoutConstraintAxis):cocoascript.UILayoutPriority;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622526-setcontentcompressionresistancep
    setContentCompressionResistancePriority_forAxis(priority: cocoascript.UILayoutPriority, axis: cocoascript.UILayoutConstraintAxis):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622556-contenthuggingpriorityforaxis
    contentHuggingPriorityForAxis(axis: cocoascript.UILayoutConstraintAxis):cocoascript.UILayoutPriority;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622485-setcontenthuggingpriority
    setContentHuggingPriority_forAxis(priority: cocoascript.UILayoutPriority, axis: cocoascript.UILayoutConstraintAxis):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622576-alignmentrectforframe
    alignmentRectForFrame(frame: cocoascript.CGRect):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622603-frameforalignmentrect
    frameForAlignmentRect(alignmentRect: cocoascript.CGRect):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622648-alignmentrectinsets
    alignmentRectInsets(): cocoascript.UIEdgeInsets;
    setAlignmentRectInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622439-viewforbaselinelayout
    viewForBaselineLayout():cocoascript.UIView;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622452-viewforfirstbaselinelayout
    viewForFirstBaselineLayout(): cocoascript.UIView;
    setViewForFirstBaselineLayout(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622633-viewforlastbaselinelayout
    viewForLastBaselineLayout(): cocoascript.UIView;
    setViewForLastBaselineLayout(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622567-needsupdateconstraints
    needsUpdateConstraints():cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622450-setneedsupdateconstraints
    setNeedsUpdateConstraints():void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622512-updateconstraints
    updateConstraints():void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622595-updateconstraintsifneeded
    updateConstraintsIfNeeded():void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622432-constraintsaffectinglayoutforaxi
    constraintsAffectingLayoutForAxis(axis: cocoascript.UILayoutConstraintAxis):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622517-hasambiguouslayout
    hasAmbiguousLayout(): cocoascript.BOOL;
    setHasAmbiguousLayout(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622545-exerciseambiguityinlayout
    exerciseAmbiguityInLayout():void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622619-contentmode
    contentMode(): cocoascript.UIViewContentMode;
    setContentMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622511-contentstretch
    contentStretch(): cocoascript.CGRect;
    setContentStretch(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622625-sizethatfits
    sizeThatFits(size: cocoascript.CGSize):cocoascript.CGSize;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622630-sizetofit
    sizeToFit():void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622425-autoresizessubviews
    autoresizesSubviews(): cocoascript.BOOL;
    setAutoresizesSubviews(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622559-autoresizingmask
    autoresizingMask(): cocoascript.UIViewAutoresizing;
    setAutoresizingMask(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622482-layoutsubviews
    layoutSubviews():void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622601-setneedslayout
    setNeedsLayout():void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622507-layoutifneeded
    layoutIfNeeded():void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622549-requiresconstraintbasedlayout
    requiresConstraintBasedLayout(): cocoascript.BOOL;
    setRequiresConstraintBasedLayout(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622572-translatesautoresizingmaskintoco
    translatesAutoresizingMaskIntoConstraints(): cocoascript.BOOL;
    setTranslatesAutoresizingMaskIntoConstraints(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/3238086-overrideuserinterfacestyle
    overrideUserInterfaceStyle(): cocoascript.UIUserInterfaceStyle;
    setOverrideUserInterfaceStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622461-semanticcontentattribute
    semanticContentAttribute(): cocoascript.UISemanticContentAttribute;
    setSemanticContentAttribute(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1648536-effectiveuserinterfacelayoutdire
    effectiveUserInterfaceLayoutDirection(): cocoascript.UIUserInterfaceLayoutDirection;
    setEffectiveUserInterfaceLayoutDirection(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/2891013-addinteraction
    addInteraction(interaction: cocoascript.UIInteraction):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/2891036-removeinteraction
    removeInteraction(interaction: cocoascript.UIInteraction):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/2891054-interactions
    interactions(): cocoascript.UIInteraction;
    setInteractions(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622529-drawrect
    drawRect(rect: cocoascript.CGRect):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622437-setneedsdisplay
    setNeedsDisplay():void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622587-setneedsdisplayinrect
    setNeedsDisplayInRect(rect: cocoascript.CGRect):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622657-contentscalefactor
    contentScaleFactor(): cocoascript.CGFloat;
    setContentScaleFactor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622620-tintcolordidchange
    tintColorDidChange():void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1621835-viewprintformatter
    viewPrintFormatter():cocoascript.UIViewPrintFormatter;
    // doc://com.apple.documentation/documentation/uikit/uiview/1621844-drawrect
    drawRect_forViewPrintFormatter(rect: cocoascript.CGRect, formatter: cocoascript.UIViewPrintFormatter):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622496-addgesturerecognizer
    addGestureRecognizer(gestureRecognizer: cocoascript.UIGestureRecognizer):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622413-removegesturerecognizer
    removeGestureRecognizer(gestureRecognizer: cocoascript.UIGestureRecognizer):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622542-gesturerecognizers
    gestureRecognizers(): cocoascript.UIGestureRecognizer;
    setGestureRecognizers(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622460-gesturerecognizershouldbegin
    gestureRecognizerShouldBegin(gestureRecognizer: cocoascript.UIGestureRecognizer):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622584-canbecomefocused
    canBecomeFocused(): cocoascript.BOOL;
    setCanBecomeFocused(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622479-inheritedanimationduration
    inheritedAnimationDuration(): cocoascript.NSTimeInterval;
    setInheritedAnimationDuration(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622565-focused
    focused(): cocoascript.BOOL;
    setFocused(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622586-addmotioneffect
    addMotionEffect(effect: cocoascript.UIMotionEffect):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622428-motioneffects
    motionEffects(): cocoascript.UIMotionEffect;
    setMotionEffects(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622481-removemotioneffect
    removeMotionEffect(effect: cocoascript.UIMotionEffect):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622494-restorationidentifier
    restorationIdentifier(): cocoascript.NSString;
    setRestorationIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622516-encoderestorablestatewithcoder
    encodeRestorableStateWithCoder(coder: cocoascript.NSCoder):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622638-decoderestorablestatewithcoder
    decodeRestorableStateWithCoder(coder: cocoascript.NSCoder):void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622531-snapshotviewafterscreenupdates
    snapshotViewAfterScreenUpdates(afterUpdates: cocoascript.BOOL):cocoascript.UIView;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622597-resizablesnapshotviewfromrect
    resizableSnapshotViewFromRect_afterScreenUpdates_withCapInsets(rect: cocoascript.CGRect, afterUpdates: cocoascript.BOOL, capInsets: cocoascript.UIEdgeInsets):cocoascript.UIView;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622589-drawviewhierarchyinrect
    drawViewHierarchyInRect_afterScreenUpdates(rect: cocoascript.CGRect, afterUpdates: cocoascript.BOOL):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622493-tag
    tag(): cocoascript.NSInteger;
    setTag(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622429-viewwithtag
    viewWithTag(tag: cocoascript.NSInteger):cocoascript.UIView;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622442-convertpoint
    convertPoint_toView(point: cocoascript.CGPoint, view: cocoascript.UIView):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622424-convertpoint
    convertPoint_fromView(point: cocoascript.CGPoint, view: cocoascript.UIView):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622504-convertrect
    convertRect_toView(rect: cocoascript.CGRect, view: cocoascript.UIView):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622498-convertrect
    convertRect_fromView(rect: cocoascript.CGRect, view: cocoascript.UIView):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622469-hittest
    hitTest_withEvent(point: cocoascript.CGPoint, event: cocoascript.UIEvent):cocoascript.UIView;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622533-pointinside
    pointInside_withEvent(point: cocoascript.CGPoint, event: cocoascript.UIEvent):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiview/1619630-endediting
    endEditing(force: cocoascript.BOOL):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiview/2865843-accessibilityignoresinvertcolors
    accessibilityIgnoresInvertColors(): cocoascript.BOOL;
    setAccessibilityIgnoresInvertColors(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/1622571-areanimationsenabled
    areAnimationsEnabled(): cocoascript.BOOL;
    setAreAnimationsEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/3601233-focusgroupidentifier
    focusGroupIdentifier(): cocoascript.NSString;
    setFocusGroupIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/3183937-largecontentimage
    largeContentImage(): cocoascript.UIImage;
    setLargeContentImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/3183938-largecontentimageinsets
    largeContentImageInsets(): cocoascript.UIEdgeInsets;
    setLargeContentImageInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/3183939-largecontenttitle
    largeContentTitle(): cocoascript.NSString;
    setLargeContentTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/3183940-scaleslargecontentimage
    scalesLargeContentImage(): cocoascript.BOOL;
    setScalesLargeContentImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/3183941-showslargecontentviewer
    showsLargeContentViewer(): cocoascript.BOOL;
    setShowsLargeContentViewer(): void;
    // doc://com.apple.documentation/documentation/uikit/uiview/3043565-transform3d
    transform3D(): cocoascript.CATransform3D;
    setTransform3D(): void;
    //
    alloc():cocoascript.UIView;
    //
    init():cocoascript.UIView;
  }
}

declare const UIView: cocoascript.UIView;
declare namespace cocoascript {
  /**
   * A menu element that performs its action in a selector.
   * doc://com.apple.documentation/documentation/uikit/uicommand
   */
  interface UICommand extends UIMenuElement {
    // doc://com.apple.documentation/documentation/uikit/uicommand/3175309-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UICommand;
    // doc://com.apple.documentation/documentation/uikit/uicommand/3175312-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uicommand/3229869-image
    image(): cocoascript.UIImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uicommand/3175302-action
    action(): cocoascript.SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/uikit/uicommand/3175308-discoverabilitytitle
    discoverabilityTitle(): cocoascript.NSString;
    setDiscoverabilityTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uicommand/3335180-attributes
    attributes(): cocoascript.UIMenuElementAttributes;
    setAttributes(): void;
    // doc://com.apple.documentation/documentation/uikit/uicommand/3229870-state
    state(): cocoascript.UIMenuElementState;
    setState(): void;
    // doc://com.apple.documentation/documentation/uikit/uicommand/3175303-alternates
    alternates(): cocoascript.UICommandAlternate;
    setAlternates(): void;
    // doc://com.apple.documentation/documentation/uikit/uicommand/3175310-propertylist
    propertyList(): cocoascript.id;
    setPropertyList(): void;
    //
    alloc():cocoascript.UICommand;
    //
    init():cocoascript.UICommand;
  }
}

declare const UICommand: cocoascript.UICommand;
declare const UICommandTagShare: cocoascript.NSString;
declare namespace cocoascript {
  /**
   * An interaction object that you use to display relevant actions for your content.
   * doc://com.apple.documentation/documentation/uikit/uicontextmenuinteraction
   */
  interface UIContextMenuInteraction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteraction/3295926-initwithdelegate
    initWithDelegate(delegate: cocoascript.UIContextMenuInteractionDelegate):cocoascript.UIContextMenuInteraction;
    // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteraction/3295925-delegate
    delegate(): cocoascript.UIContextMenuInteractionDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteraction/3295927-locationinview
    locationInView(view: cocoascript.UIView):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteraction/3601209-menuappearance
    menuAppearance(): cocoascript.UIContextMenuInteractionAppearance;
    setMenuAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteraction/3601208-dismissmenu
    dismissMenu():void;
    // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteraction/3601210-updatevisiblemenuwithblock
    updateVisibleMenuWithBlock(block: cocoascript.UIMenu):void;
    //
    alloc():cocoascript.UIContextMenuInteraction;
    //
    init():cocoascript.UIContextMenuInteraction;
  }
}

declare const UIContextMenuInteraction: cocoascript.UIContextMenuInteraction;
declare namespace cocoascript {
  /**
   * The methods for providing the set of actions to perform on your content, and for customizing the preview of that content.
   * doc://com.apple.documentation/documentation/uikit/uicontextmenuinteractiondelegate
   */
  interface UIContextMenuInteractionDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteractiondelegate/3295937-contextmenuinteraction
    contextMenuInteraction_configurationForMenuAtLocation(interaction: cocoascript.UIContextMenuInteraction, location: cocoascript.CGPoint):cocoascript.UIContextMenuConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteractiondelegate/3295939-contextmenuinteraction
    contextMenuInteraction_previewForHighlightingMenuWithConfiguration(interaction: cocoascript.UIContextMenuInteraction, configuration: cocoascript.UIContextMenuConfiguration):cocoascript.UITargetedPreview;
    // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteractiondelegate/3295938-contextmenuinteraction
    contextMenuInteraction_previewForDismissingMenuWithConfiguration(interaction: cocoascript.UIContextMenuInteraction, configuration: cocoascript.UIContextMenuConfiguration):cocoascript.UITargetedPreview;
    // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteractiondelegate/3375807-contextmenuinteraction
    contextMenuInteraction_willPerformPreviewActionForMenuWithConfiguration_animator(interaction: cocoascript.UIContextMenuInteraction, configuration: cocoascript.UIContextMenuConfiguration, animator: cocoascript.UIContextMenuInteractionCommitAnimating):void;
    // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteractiondelegate/3375805-contextmenuinteraction
    contextMenuInteraction_willDisplayMenuForConfiguration_animator(interaction: cocoascript.UIContextMenuInteraction, configuration: cocoascript.UIContextMenuConfiguration, animator: cocoascript.UIContextMenuInteractionAnimating):void;
    // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteractiondelegate/3375806-contextmenuinteraction
    contextMenuInteraction_willEndForConfiguration_animator(interaction: cocoascript.UIContextMenuInteraction, configuration: cocoascript.UIContextMenuConfiguration, animator: cocoascript.UIContextMenuInteractionAnimating):void;
  }
}
declare namespace cocoascript {
  /**
   * An object representing a main or contextual menu system.
   * doc://com.apple.documentation/documentation/uikit/uimenusystem
   */
  interface UIMenuSystem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uimenusystem/3327314-mainsystem
    mainSystem(): cocoascript.UIMenuSystem;
    setMainSystem(): void;
    // doc://com.apple.documentation/documentation/uikit/uimenusystem/3327313-contextsystem
    contextSystem(): cocoascript.UIMenuSystem;
    setContextSystem(): void;
    // doc://com.apple.documentation/documentation/uikit/uimenusystem/3327315-setneedsrebuild
    setNeedsRebuild():void;
    // doc://com.apple.documentation/documentation/uikit/uimenusystem/3327316-setneedsrevalidate
    setNeedsRevalidate():void;
    //
    alloc():cocoascript.UIMenuSystem;
    //
    init():cocoascript.UIMenuSystem;
  }
}

declare const UIMenuSystem: cocoascript.UIMenuSystem;
declare namespace cocoascript {
  /**
   * The menu interface for the Cut, Copy, Paste, Select, Select All, and Delete commands.
   * doc://com.apple.documentation/documentation/uikit/uimenucontroller
   */
  interface UIMenuController extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uimenucontroller/1622831-sharedmenucontroller
    sharedMenuController(): cocoascript.UIMenuController;
    setSharedMenuController(): void;
    // doc://com.apple.documentation/documentation/uikit/uimenucontroller/3044217-showmenufromview
    showMenuFromView_rect(targetView: cocoascript.UIView, targetRect: cocoascript.CGRect):void;
    // doc://com.apple.documentation/documentation/uikit/uimenucontroller/3044216-hidemenufromview
    hideMenuFromView(targetView: cocoascript.UIView):void;
    // doc://com.apple.documentation/documentation/uikit/uimenucontroller/3044215-hidemenu
    hideMenu():void;
    // doc://com.apple.documentation/documentation/uikit/uimenucontroller/1622833-setmenuvisible
    menuVisible(): cocoascript.BOOL;
    setMenuVisible(): void;
    // doc://com.apple.documentation/documentation/uikit/uimenucontroller/1622819-setmenuvisible
    setMenuVisible_animated(menuVisible: cocoascript.BOOL, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uimenucontroller/1622822-menuframe
    menuFrame(): cocoascript.CGRect;
    setMenuFrame(): void;
    // doc://com.apple.documentation/documentation/uikit/uimenucontroller/1622821-arrowdirection
    arrowDirection(): cocoascript.UIMenuControllerArrowDirection;
    setArrowDirection(): void;
    // doc://com.apple.documentation/documentation/uikit/uimenucontroller/1622812-settargetrect
    setTargetRect_inView(targetRect: cocoascript.CGRect, targetView: cocoascript.UIView):void;
    // doc://com.apple.documentation/documentation/uikit/uimenucontroller/1622815-update
    update():void;
    // doc://com.apple.documentation/documentation/uikit/uimenucontroller/1622811-menuitems
    menuItems(): cocoascript.UIMenuItem;
    setMenuItems(): void;
    //
    alloc():cocoascript.UIMenuController;
    //
    init():cocoascript.UIMenuController;
  }
}

declare const UIMenuController: cocoascript.UIMenuController;
declare namespace cocoascript {
  /**
   * An object describing the view to use during preview-related animations.
   * doc://com.apple.documentation/documentation/uikit/uitargetedpreview
   */
  interface UITargetedPreview extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitargetedpreview/3295969-initwithview
    initWithView_parameters_target(view: cocoascript.UIView, parameters: cocoascript.UIPreviewParameters, target: cocoascript.UIPreviewTarget):cocoascript.UITargetedPreview;
    // doc://com.apple.documentation/documentation/uikit/uitargetedpreview/3295968-initwithview
    initWithView_parameters(view: cocoascript.UIView, parameters: cocoascript.UIPreviewParameters):cocoascript.UITargetedPreview;
    // doc://com.apple.documentation/documentation/uikit/uitargetedpreview/3295967-initwithview
    initWithView(view: cocoascript.UIView):cocoascript.UITargetedPreview;
    // doc://com.apple.documentation/documentation/uikit/uitargetedpreview/3295974-view
    view(): cocoascript.UIView;
    setView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitargetedpreview/3295973-target
    target(): cocoascript.UIPreviewTarget;
    setTarget(): void;
    // doc://com.apple.documentation/documentation/uikit/uitargetedpreview/3295972-size
    size(): cocoascript.CGSize;
    setSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uitargetedpreview/3295970-parameters
    parameters(): cocoascript.UIPreviewParameters;
    setParameters(): void;
    // doc://com.apple.documentation/documentation/uikit/uitargetedpreview/3295971-retargetedpreviewwithtarget
    retargetedPreviewWithTarget(newTarget: cocoascript.UIPreviewTarget):cocoascript.UITargetedPreview;
    //
    alloc():cocoascript.UITargetedPreview;
    //
    init():cocoascript.UITargetedPreview;
  }
}

declare const UITargetedPreview: cocoascript.UITargetedPreview;
declare namespace cocoascript {
  /**
   * An object representing a menu, action, or command.
   * doc://com.apple.documentation/documentation/uikit/uimenuelement
   */
  interface UIMenuElement extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uimenuelement/3261458-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uimenuelement/3261457-image
    image(): cocoascript.UIImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uimenuelement/3335208-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIMenuElement;
    //
    alloc():cocoascript.UIMenuElement;
    //
    init():cocoascript.UIMenuElement;
  }
}

declare const UIMenuElement: cocoascript.UIMenuElement;
declare namespace cocoascript {
  /**
   * A placeholder menu element that the system replaces with the result of the block’s completion handler.
   * doc://com.apple.documentation/documentation/uikit/uideferredmenuelement
   */
  interface UIDeferredMenuElement extends UIMenuElement {
    //
    alloc():cocoascript.UIDeferredMenuElement;
    //
    init():cocoascript.UIDeferredMenuElement;
  }
}

declare const UIDeferredMenuElement: cocoascript.UIDeferredMenuElement;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uimenuelementattributes
  type UIMenuElementAttributes = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uimenuelementstate
  type UIMenuElementState = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * An abstract interface for responding to and handling events.
   * doc://com.apple.documentation/documentation/uikit/uiresponder
   */
  interface UIResponder extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621099-nextresponder
    nextResponder(): cocoascript.UIResponder;
    setNextResponder(): void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621145-isfirstresponder
    isFirstResponder(): cocoascript.BOOL;
    setIsFirstResponder(): void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621130-canbecomefirstresponder
    canBecomeFirstResponder(): cocoascript.BOOL;
    setCanBecomeFirstResponder(): void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621113-becomefirstresponder
    becomeFirstResponder():cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621125-canresignfirstresponder
    canResignFirstResponder(): cocoascript.BOOL;
    setCanResignFirstResponder(): void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621097-resignfirstresponder
    resignFirstResponder():cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621142-touchesbegan
    touchesBegan_withEvent(touches: cocoascript.UITouch, event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621107-touchesmoved
    touchesMoved_withEvent(touches: cocoascript.UITouch, event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621084-touchesended
    touchesEnded_withEvent(touches: cocoascript.UITouch, event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621116-touchescancelled
    touchesCancelled_withEvent(touches: cocoascript.UITouch, event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621147-touchesestimatedpropertiesupdate
    touchesEstimatedPropertiesUpdated(touches: cocoascript.UITouch):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621120-motionbegan
    motionBegan_withEvent(motion: cocoascript.UIEventSubtype, event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621090-motionended
    motionEnded_withEvent(motion: cocoascript.UIEventSubtype, event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621087-motioncancelled
    motionCancelled_withEvent(motion: cocoascript.UIEventSubtype, event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621134-pressesbegan
    pressesBegan_withEvent(presses: cocoascript.UIPress, event: cocoascript.UIPressesEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621150-presseschanged
    pressesChanged_withEvent(presses: cocoascript.UIPress, event: cocoascript.UIPressesEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621128-pressesended
    pressesEnded_withEvent(presses: cocoascript.UIPress, event: cocoascript.UIPressesEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621148-pressescancelled
    pressesCancelled_withEvent(presses: cocoascript.UIPress, event: cocoascript.UIPressesEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621118-remotecontrolreceivedwithevent
    remoteControlReceivedWithEvent(event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621092-inputview
    inputView(): cocoascript.UIView;
    setInputView(): void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621117-inputviewcontroller
    inputViewController(): cocoascript.UIInputViewController;
    setInputViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621119-inputaccessoryview
    inputAccessoryView(): cocoascript.UIView;
    setInputAccessoryView(): void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621124-inputaccessoryviewcontroller
    inputAccessoryViewController(): cocoascript.UIInputViewController;
    setInputAccessoryViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621110-reloadinputviews
    reloadInputViews():void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621122-undomanager
    undoManager(): cocoascript.NSUndoManager;
    setUndoManager(): void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/3327317-buildmenuwithbuilder
    buildMenuWithBuilder(builder: cocoascript.UIMenuBuilder):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/3229892-validatecommand
    validateCommand(command: cocoascript.UICommand):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621105-canperformaction
    canPerformAction_withSender(action: cocoascript.SEL, sender: cocoascript.UIResponder):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621146-targetforaction
    targetForAction_withSender(action: cocoascript.SEL, sender: cocoascript.UIResponder):cocoascript.UIResponder;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621141-keycommands
    keyCommands(): cocoascript.UIKeyCommand;
    setKeyCommands(): void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621133-textinputmode
    textInputMode(): cocoascript.UITextInputMode;
    setTextInputMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621091-textinputcontextidentifier
    textInputContextIdentifier(): cocoascript.NSString;
    setTextInputContextIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621135-inputassistantitem
    inputAssistantItem(): cocoascript.UITextInputAssistantItem;
    setInputAssistantItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621089-useractivity
    userActivity(): cocoascript.NSUserActivity;
    setUserActivity(): void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621111-restoreuseractivitystate
    restoreUserActivityState(activity: cocoascript.NSUserActivity):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/1621095-updateuseractivitystate
    updateUserActivityState(activity: cocoascript.NSUserActivity):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/3368158-activityitemsconfiguration
    activityItemsConfiguration(): cocoascript.UIActivityItemsConfigurationReading;
    setActivityItemsConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/3327318-editinginteractionconfiguration
    editingInteractionConfiguration(): cocoascript.UIEditingInteractionConfiguration;
    setEditingInteractionConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/3375808-maketouchbar
    makeTouchBar():cocoascript.NSTouchBar;
    // doc://com.apple.documentation/documentation/uikit/uiresponder/3375809-touchbar
    touchBar(): cocoascript.NSTouchBar;
    setTouchBar(): void;
    //
    alloc():cocoascript.UIResponder;
    //
    init():cocoascript.UIResponder;
  }
}

declare const UIResponder: cocoascript.UIResponder;
declare const UIKeyboardAnimationCurveUserInfoKey: cocoascript.NSString;
declare const UIKeyboardAnimationDurationUserInfoKey: cocoascript.NSString;
declare const UIKeyboardFrameBeginUserInfoKey: cocoascript.NSString;
declare const UIKeyboardFrameEndUserInfoKey: cocoascript.NSString;
declare const UIKeyboardIsLocalUserInfoKey: cocoascript.NSString;
declare namespace cocoascript {
  /**
   * The centralized point of control and coordination for apps running in iOS.
   * doc://com.apple.documentation/documentation/uikit/uiapplication
   */
  interface UIApplication extends UIResponder {
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622975-sharedapplication
    sharedApplication(): cocoascript.UIApplication;
    setSharedApplication(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622936-delegate
    delegate(): cocoascript.UIApplicationDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623078-registerforremotenotifications
    registerForRemoteNotifications():void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623093-unregisterforremotenotifications
    unregisterForRemoteNotifications():void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623069-registeredforremotenotifications
    registeredForRemoteNotifications(): cocoascript.BOOL;
    setRegisteredForRemoteNotifications(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623003-applicationstate
    applicationState(): cocoascript.UIApplicationState;
    setApplicationState(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/3197904-supportsmultiplescenes
    supportsMultipleScenes(): cocoascript.BOOL;
    setSupportsMultipleScenes(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/3197899-connectedscenes
    connectedScenes(): cocoascript.UIScene;
    setConnectedScenes(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/3197900-opensessions
    openSessions(): cocoascript.UISceneSession;
    setOpenSessions(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/3197901-requestscenesessionactivation
    requestSceneSessionActivation_userActivity_options_errorHandler(sceneSession: cocoascript.UISceneSession, userActivity: cocoascript.NSUserActivity, options: cocoascript.UISceneActivationRequestOptions, errorHandler: cocoascript.NSError):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/3197902-requestscenesessiondestruction
    requestSceneSessionDestruction_options_errorHandler(sceneSession: cocoascript.UISceneSession, options: cocoascript.UISceneDestructionRequestOptions, errorHandler: cocoascript.NSError):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/3197903-requestscenesessionrefresh
    requestSceneSessionRefresh(sceneSession: cocoascript.UISceneSession):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622994-backgroundrefreshstatus
    backgroundRefreshStatus(): cocoascript.UIBackgroundRefreshStatus;
    setBackgroundRefreshStatus(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623051-beginbackgroundtaskwithname
    beginBackgroundTaskWithName_expirationHandler(taskName: cocoascript.NSString, handler: void):cocoascript.UIBackgroundTaskIdentifier;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623031-beginbackgroundtaskwithexpiratio
    beginBackgroundTaskWithExpirationHandler(handler: void):cocoascript.UIBackgroundTaskIdentifier;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622970-endbackgroundtask
    endBackgroundTask(identifier: cocoascript.UIBackgroundTaskIdentifier):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623029-backgroundtimeremaining
    backgroundTimeRemaining(): cocoascript.NSTimeInterval;
    setBackgroundTimeRemaining(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1648685-openurl
    openURL_options_completionHandler(url: cocoascript.NSURL, options: cocoascript.UIApplication, completion: void):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622952-canopenurl
    canOpenURL(url: cocoascript.NSURL):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623070-idletimerdisabled
    idleTimerDisabled(): cocoascript.BOOL;
    setIdleTimerDisabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623060-extendstaterestoration
    extendStateRestoration():void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623081-completestaterestoration
    completeStateRestoration():void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623097-ignoresnapshotonnextapplicationl
    ignoreSnapshotOnNextApplicationLaunch():void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623033-shortcutitems
    shortcutItems(): cocoascript.UIApplicationShortcutItem;
    setShortcutItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622925-protecteddataavailable
    protectedDataAvailable(): cocoascript.BOOL;
    setProtectedDataAvailable(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623126-beginreceivingremotecontrolevent
    beginReceivingRemoteControlEvents():void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623057-endreceivingremotecontrolevents
    endReceivingRemoteControlEvents():void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623025-userinterfacelayoutdirection
    userInterfaceLayoutDirection(): cocoascript.UIUserInterfaceLayoutDirection;
    setUserInterfaceLayoutDirection(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623043-sendevent
    sendEvent(event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622946-sendaction
    sendAction_to_from_forEvent(action: cocoascript.SEL, target: cocoascript.UIApplication, sender: cocoascript.UIApplication, event: cocoascript.UIEvent):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623047-beginignoringinteractionevents
    beginIgnoringInteractionEvents():void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622938-endignoringinteractionevents
    endIgnoringInteractionEvents():void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/2097536-ignoringinteractionevents
    ignoringInteractionEvents(): cocoascript.BOOL;
    setIgnoringInteractionEvents(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623127-applicationsupportsshaketoedit
    applicationSupportsShakeToEdit(): cocoascript.BOOL;
    setApplicationSupportsShakeToEdit(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622918-applicationiconbadgenumber
    applicationIconBadgeNumber(): cocoascript.NSInteger;
    setApplicationIconBadgeNumber(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/2806815-supportsalternateicons
    supportsAlternateIcons(): cocoascript.BOOL;
    setSupportsAlternateIcons(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/2806808-alternateiconname
    alternateIconName(): cocoascript.NSString;
    setAlternateIconName(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/2806818-setalternateiconname
    setAlternateIconName_completionHandler(alternateIconName: cocoascript.NSString, completionHandler: cocoascript.NSError):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622924-keywindow
    keyWindow(): cocoascript.UIWindow;
    setKeyWindow(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623104-windows
    windows(): cocoascript.UIWindow;
    setWindows(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623048-preferredcontentsizecategory
    preferredContentSizeCategory(): cocoascript.UIContentSizeCategory;
    setPreferredContentSizeCategory(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623091-supportedinterfaceorientationsfo
    supportedInterfaceOrientationsForWindow(window: cocoascript.UIWindow):cocoascript.UIInterfaceOrientationMask;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623100-setminimumbackgroundfetchinterva
    setMinimumBackgroundFetchInterval(minimumBackgroundFetchInterval: cocoascript.NSTimeInterval):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623014-statusbarorientationanimationdur
    statusBarOrientationAnimationDuration(): cocoascript.NSTimeInterval;
    setStatusBarOrientationAnimationDuration(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622937-statusbarframe
    statusBarFrame(): cocoascript.CGRect;
    setStatusBarFrame(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623102-networkactivityindicatorvisible
    networkActivityIndicatorVisible(): cocoascript.BOOL;
    setNetworkActivityIndicatorVisible(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622932-registerusernotificationsettings
    registerUserNotificationSettings(notificationSettings: cocoascript.UIUserNotificationSettings):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623092-currentusernotificationsettings
    currentUserNotificationSettings(): cocoascript.UIUserNotificationSettings;
    setCurrentUserNotificationSettings(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622961-openurl
    openURL(url: cocoascript.NSURL):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623005-schedulelocalnotification
    scheduleLocalNotification(notification: cocoascript.UILocalNotification):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622931-presentlocalnotificationnow
    presentLocalNotificationNow(notification: cocoascript.UILocalNotification):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623082-cancellocalnotification
    cancelLocalNotification(notification: cocoascript.UILocalNotification):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622990-cancelalllocalnotifications
    cancelAllLocalNotifications():void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622993-scheduledlocalnotifications
    scheduledLocalNotifications(): cocoascript.UILocalNotification;
    setScheduledLocalNotifications(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623016-setnewsstandiconimage
    setNewsstandIconImage(image: cocoascript.UIImage):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622989-setkeepalivetimeout
    setKeepAliveTimeout_handler(timeout: cocoascript.NSTimeInterval, keepAliveHandler: void):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622986-clearkeepalivetimeout
    clearKeepAliveTimeout():void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622949-setstatusbarhidden
    setStatusBarHidden_withAnimation(hidden: cocoascript.BOOL, animation: cocoascript.UIStatusBarAnimation):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622982-statusbarhidden
    statusBarHidden(): cocoascript.BOOL;
    setStatusBarHidden(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622923-setstatusbarstyle
    setStatusBarStyle_animated(statusBarStyle: cocoascript.UIStatusBarStyle, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622988-statusbarstyle
    statusBarStyle(): cocoascript.UIStatusBarStyle;
    setStatusBarStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622939-setstatusbarorientation
    setStatusBarOrientation_animated(interfaceOrientation: cocoascript.UIInterfaceOrientation, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623026-statusbarorientation
    statusBarOrientation(): cocoascript.UIInterfaceOrientation;
    setStatusBarOrientation(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623010-registerforremotenotificationtyp
    registerForRemoteNotificationTypes(types: cocoascript.UIRemoteNotificationType):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1623075-enabledremotenotificationtypes
    enabledRemoteNotificationTypes():cocoascript.UIRemoteNotificationType;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622984-proximitysensingenabled
    proximitySensingEnabled(): cocoascript.BOOL;
    setProximitySensingEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplication/1622942-setstatusbarhidden
    setStatusBarHidden_animated(hidden: cocoascript.BOOL, animated: cocoascript.BOOL):void;
    //
    alloc():cocoascript.UIApplication;
    //
    init():cocoascript.UIApplication;
  }
}

declare const UIApplication: cocoascript.UIApplication;
declare const UIApplicationOpenSettingsURLString: cocoascript.NSString;
declare const UIContentSizeCategoryNewValueKey: cocoascript.NSString;
declare const UIApplicationStatusBarOrientationUserInfoKey: cocoascript.NSString;
declare const UIApplicationStatusBarFrameUserInfoKey: cocoascript.NSString;
declare namespace cocoascript {
  /**
   * The base class for concrete gesture recognizers.
   * doc://com.apple.documentation/documentation/uikit/uigesturerecognizer
   */
  interface UIGestureRecognizer extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1624211-initwithtarget
    initWithTarget_action(target: cocoascript.UIGestureRecognizer, action: cocoascript.SEL):cocoascript.UIGestureRecognizer;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1624207-delegate
    delegate(): cocoascript.UIGestureRecognizerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1624230-addtarget
    addTarget_action(target: cocoascript.UIGestureRecognizer, action: cocoascript.SEL):void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1624226-removetarget
    removeTarget_action(target: cocoascript.UIGestureRecognizer, action: cocoascript.SEL):void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1624219-locationinview
    locationInView(view: cocoascript.UIView):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1624201-locationoftouch
    locationOfTouch_inView(touchIndex: cocoascript.NSUInteger, view: cocoascript.UIView):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1624200-numberoftouches
    numberOfTouches(): cocoascript.NSUInteger;
    setNumberOfTouches(): void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1619998-state
    state(): cocoascript.UIGestureRecognizerState;
    setState(): void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1624212-view
    view(): cocoascript.UIView;
    setView(): void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1624220-enabled
    enabled(): cocoascript.BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/3538974-buttonmask
    buttonMask(): cocoascript.UIEventButtonMask;
    setButtonMask(): void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/3538975-modifierflags
    modifierFlags(): cocoascript.UIKeyModifierFlags;
    setModifierFlags(): void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1624218-cancelstouchesinview
    cancelsTouchesInView(): cocoascript.BOOL;
    setCancelsTouchesInView(): void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1624234-delaystouchesbegan
    delaysTouchesBegan(): cocoascript.BOOL;
    setDelaysTouchesBegan(): void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1624209-delaystouchesended
    delaysTouchesEnded(): cocoascript.BOOL;
    setDelaysTouchesEnded(): void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1624203-requiregesturerecognizertofail
    requireGestureRecognizerToFail(otherGestureRecognizer: cocoascript.UIGestureRecognizer):void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1624231-allowedpresstypes
    allowedPressTypes(): cocoascript.NSNumber;
    setAllowedPressTypes(): void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1624223-allowedtouchtypes
    allowedTouchTypes(): cocoascript.NSNumber;
    setAllowedTouchTypes(): void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1649116-requiresexclusivetouchtype
    requiresExclusiveTouchType(): cocoascript.BOOL;
    setRequiresExclusiveTouchType(): void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1620009-touchesbegan
    touchesBegan_withEvent(touches: cocoascript.UITouch, event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1619996-touchesmoved
    touchesMoved_withEvent(touches: cocoascript.UITouch, event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1620005-touchesended
    touchesEnded_withEvent(touches: cocoascript.UITouch, event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1620002-touchescancelled
    touchesCancelled_withEvent(touches: cocoascript.UITouch, event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1619997-touchesestimatedpropertiesupdate
    touchesEstimatedPropertiesUpdated(touches: cocoascript.UITouch):void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1620004-reset
    reset():void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1620010-ignoretouch
    ignoreTouch_forEvent(touch: cocoascript.UITouch, event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1620003-canbepreventedbygesturerecognize
    canBePreventedByGestureRecognizer(preventingGestureRecognizer: cocoascript.UIGestureRecognizer):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1620008-canpreventgesturerecognizer
    canPreventGestureRecognizer(preventedGestureRecognizer: cocoascript.UIGestureRecognizer):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1620006-shouldrequirefailureofgesturerec
    shouldRequireFailureOfGestureRecognizer(otherGestureRecognizer: cocoascript.UIGestureRecognizer):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1619994-shouldberequiredtofailbygesturer
    shouldBeRequiredToFailByGestureRecognizer(otherGestureRecognizer: cocoascript.UIGestureRecognizer):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1620007-ignorepress
    ignorePress_forEvent(button: cocoascript.UIPress, event: cocoascript.UIPressesEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1619995-pressesbegan
    pressesBegan_withEvent(presses: cocoascript.UIPress, event: cocoascript.UIPressesEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1620001-presseschanged
    pressesChanged_withEvent(presses: cocoascript.UIPress, event: cocoascript.UIPressesEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1620000-pressesended
    pressesEnded_withEvent(presses: cocoascript.UIPress, event: cocoascript.UIPressesEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/1619999-pressescancelled
    pressesCancelled_withEvent(presses: cocoascript.UIPress, event: cocoascript.UIPressesEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/2890966-name
    name(): cocoascript.NSString;
    setName(): void;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/3182937-init
    init():cocoascript.UIGestureRecognizer;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/3043559-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIGestureRecognizer;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizer/3538977-shouldreceiveevent
    shouldReceiveEvent(event: cocoascript.UIEvent):cocoascript.BOOL;
    //
    alloc():cocoascript.UIGestureRecognizer;
    //
    init():cocoascript.UIGestureRecognizer;
  }
}

declare const UIGestureRecognizer: cocoascript.UIGestureRecognizer;
declare namespace cocoascript {
  /**
   * A discrete gesture recognizer that interprets long-press gestures.
   * doc://com.apple.documentation/documentation/uikit/uilongpressgesturerecognizer
   */
  interface UILongPressGestureRecognizer extends UIGestureRecognizer {
    // doc://com.apple.documentation/documentation/uikit/uilongpressgesturerecognizer/1616423-minimumpressduration
    minimumPressDuration(): cocoascript.NSTimeInterval;
    setMinimumPressDuration(): void;
    // doc://com.apple.documentation/documentation/uikit/uilongpressgesturerecognizer/1616425-numberoftouchesrequired
    numberOfTouchesRequired(): cocoascript.NSUInteger;
    setNumberOfTouchesRequired(): void;
    // doc://com.apple.documentation/documentation/uikit/uilongpressgesturerecognizer/1616424-numberoftapsrequired
    numberOfTapsRequired(): cocoascript.NSUInteger;
    setNumberOfTapsRequired(): void;
    // doc://com.apple.documentation/documentation/uikit/uilongpressgesturerecognizer/1616427-allowablemovement
    allowableMovement(): cocoascript.CGFloat;
    setAllowableMovement(): void;
    //
    alloc():cocoascript.UILongPressGestureRecognizer;
    //
    init():cocoascript.UILongPressGestureRecognizer;
  }
}

declare const UILongPressGestureRecognizer: cocoascript.UILongPressGestureRecognizer;
declare namespace cocoascript {
  /**
   * A discrete gesture recognizer that interprets panning gestures.
   * doc://com.apple.documentation/documentation/uikit/uipangesturerecognizer
   */
  interface UIPanGestureRecognizer extends UIGestureRecognizer {
    // doc://com.apple.documentation/documentation/uikit/uipangesturerecognizer/1621208-maximumnumberoftouches
    maximumNumberOfTouches(): cocoascript.NSUInteger;
    setMaximumNumberOfTouches(): void;
    // doc://com.apple.documentation/documentation/uikit/uipangesturerecognizer/1621210-minimumnumberoftouches
    minimumNumberOfTouches(): cocoascript.NSUInteger;
    setMinimumNumberOfTouches(): void;
    // doc://com.apple.documentation/documentation/uikit/uipangesturerecognizer/1621207-translationinview
    translationInView(view: cocoascript.UIView):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uipangesturerecognizer/1621206-settranslation
    setTranslation_inView(translation: cocoascript.CGPoint, view: cocoascript.UIView):void;
    // doc://com.apple.documentation/documentation/uikit/uipangesturerecognizer/1621209-velocityinview
    velocityInView(view: cocoascript.UIView):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uipangesturerecognizer/3538978-allowedscrolltypesmask
    allowedScrollTypesMask(): cocoascript.UIScrollTypeMask;
    setAllowedScrollTypesMask(): void;
    //
    alloc():cocoascript.UIPanGestureRecognizer;
    //
    init():cocoascript.UIPanGestureRecognizer;
  }
}

declare const UIPanGestureRecognizer: cocoascript.UIPanGestureRecognizer;
declare namespace cocoascript {
  /**
   * A discrete gesture recognizer that interprets pinching gestures involving two touches.
   * doc://com.apple.documentation/documentation/uikit/uipinchgesturerecognizer
   */
  interface UIPinchGestureRecognizer extends UIGestureRecognizer {
    // doc://com.apple.documentation/documentation/uikit/uipinchgesturerecognizer/1622235-scale
    scale(): cocoascript.CGFloat;
    setScale(): void;
    // doc://com.apple.documentation/documentation/uikit/uipinchgesturerecognizer/1622233-velocity
    velocity(): cocoascript.CGFloat;
    setVelocity(): void;
    //
    alloc():cocoascript.UIPinchGestureRecognizer;
    //
    init():cocoascript.UIPinchGestureRecognizer;
  }
}

declare const UIPinchGestureRecognizer: cocoascript.UIPinchGestureRecognizer;
declare namespace cocoascript {
  /**
   * A discrete gesture recognizer that interprets rotation gestures involving two touches.
   * doc://com.apple.documentation/documentation/uikit/uirotationgesturerecognizer
   */
  interface UIRotationGestureRecognizer extends UIGestureRecognizer {
    // doc://com.apple.documentation/documentation/uikit/uirotationgesturerecognizer/1624337-rotation
    rotation(): cocoascript.CGFloat;
    setRotation(): void;
    // doc://com.apple.documentation/documentation/uikit/uirotationgesturerecognizer/1624335-velocity
    velocity(): cocoascript.CGFloat;
    setVelocity(): void;
    //
    alloc():cocoascript.UIRotationGestureRecognizer;
    //
    init():cocoascript.UIRotationGestureRecognizer;
  }
}

declare const UIRotationGestureRecognizer: cocoascript.UIRotationGestureRecognizer;
declare namespace cocoascript {
  /**
   * A discrete gesture recognizer that interprets panning gestures that start near an edge of the screen.
   * doc://com.apple.documentation/documentation/uikit/uiscreenedgepangesturerecognizer
   */
  interface UIScreenEdgePanGestureRecognizer extends UIPanGestureRecognizer {
    // doc://com.apple.documentation/documentation/uikit/uiscreenedgepangesturerecognizer/1614142-edges
    edges(): cocoascript.UIRectEdge;
    setEdges(): void;
    //
    alloc():cocoascript.UIScreenEdgePanGestureRecognizer;
    //
    init():cocoascript.UIScreenEdgePanGestureRecognizer;
  }
}

declare const UIScreenEdgePanGestureRecognizer: cocoascript.UIScreenEdgePanGestureRecognizer;
declare namespace cocoascript {
  /**
   * A discrete gesture recognizer that interprets swiping gestures in one or more directions.
   * doc://com.apple.documentation/documentation/uikit/uiswipegesturerecognizer
   */
  interface UISwipeGestureRecognizer extends UIGestureRecognizer {
    // doc://com.apple.documentation/documentation/uikit/uiswipegesturerecognizer/1619178-direction
    direction(): cocoascript.UISwipeGestureRecognizerDirection;
    setDirection(): void;
    // doc://com.apple.documentation/documentation/uikit/uiswipegesturerecognizer/1619182-numberoftouchesrequired
    numberOfTouchesRequired(): cocoascript.NSUInteger;
    setNumberOfTouchesRequired(): void;
    //
    alloc():cocoascript.UISwipeGestureRecognizer;
    //
    init():cocoascript.UISwipeGestureRecognizer;
  }
}

declare const UISwipeGestureRecognizer: cocoascript.UISwipeGestureRecognizer;
declare namespace cocoascript {
  /**
   * A discrete gesture recognizer that interprets single or multiple taps.
   * doc://com.apple.documentation/documentation/uikit/uitapgesturerecognizer
   */
  interface UITapGestureRecognizer extends UIGestureRecognizer {
    // doc://com.apple.documentation/documentation/uikit/uitapgesturerecognizer/3539032-buttonmaskrequired
    buttonMaskRequired(): cocoascript.UIEventButtonMask;
    setButtonMaskRequired(): void;
    // doc://com.apple.documentation/documentation/uikit/uitapgesturerecognizer/1623581-numberoftapsrequired
    numberOfTapsRequired(): cocoascript.NSUInteger;
    setNumberOfTapsRequired(): void;
    // doc://com.apple.documentation/documentation/uikit/uitapgesturerecognizer/1623580-numberoftouchesrequired
    numberOfTouchesRequired(): cocoascript.NSUInteger;
    setNumberOfTouchesRequired(): void;
    //
    alloc():cocoascript.UITapGestureRecognizer;
    //
    init():cocoascript.UITapGestureRecognizer;
  }
}

declare const UITapGestureRecognizer: cocoascript.UITapGestureRecognizer;
declare namespace cocoascript {
  /**
   * An object that stores color data and sometimes opacity.
   * doc://com.apple.documentation/documentation/uikit/uicolor
   */
  interface UIColor extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicolor/1621944-initwithwhite
    initWithWhite_alpha(white: cocoascript.CGFloat, alpha: cocoascript.CGFloat):cocoascript.UIColor;
    // doc://com.apple.documentation/documentation/uikit/uicolor/1621931-initwithhue
    initWithHue_saturation_brightness_alpha(hue: cocoascript.CGFloat, saturation: cocoascript.CGFloat, brightness: cocoascript.CGFloat, alpha: cocoascript.CGFloat):cocoascript.UIColor;
    // doc://com.apple.documentation/documentation/uikit/uicolor/1621925-initwithred
    initWithRed_green_blue_alpha(red: cocoascript.CGFloat, green: cocoascript.CGFloat, blue: cocoascript.CGFloat, alpha: cocoascript.CGFloat):cocoascript.UIColor;
    // doc://com.apple.documentation/documentation/uikit/uicolor/1648568-initwithdisplayp3red
    initWithDisplayP3Red_green_blue_alpha(displayP3Red: cocoascript.CGFloat, green: cocoascript.CGFloat, blue: cocoascript.CGFloat, alpha: cocoascript.CGFloat):cocoascript.UIColor;
    // doc://com.apple.documentation/documentation/uikit/uicolor/3238041-initwithdynamicprovider
    initWithDynamicProvider(dynamicProvider: cocoascript.UITraitCollection):cocoascript.UIColor;
    // doc://com.apple.documentation/documentation/uikit/uicolor/1621938-initwithcicolor
    initWithCIColor(ciColor: cocoascript.CIColor):cocoascript.UIColor;
    // doc://com.apple.documentation/documentation/uikit/uicolor/1621921-initwithcgcolor
    initWithCGColor(cgColor: cocoascript.CGColorRef):cocoascript.UIColor;
    // doc://com.apple.documentation/documentation/uikit/uicolor/1621922-colorwithalphacomponent
    colorWithAlphaComponent(alpha: cocoascript.CGFloat):cocoascript.UIColor;
    // doc://com.apple.documentation/documentation/uikit/uicolor/1621933-initwithpatternimage
    initWithPatternImage(image: cocoascript.UIImage):cocoascript.UIColor;
    // doc://com.apple.documentation/documentation/uikit/uicolor/1621928-set
    set():void;
    // doc://com.apple.documentation/documentation/uikit/uicolor/1621926-setfill
    setFill():void;
    // doc://com.apple.documentation/documentation/uikit/uicolor/1621948-setstroke
    setStroke():void;
    // doc://com.apple.documentation/documentation/uikit/uicolor/1621954-cgcolor
    CGColor(): cocoascript.CGColorRef;
    setCGColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uicolor/1621943-cgcolor
    CGColor():cocoascript.CGColorRef;
    // doc://com.apple.documentation/documentation/uikit/uicolor/1621951-cicolor
    CIColor(): cocoascript.CIColor;
    setCIColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uicolor/1621949-gethue
    getHue_saturation_brightness_alpha(hue: cocoascript.CGFloat, saturation: cocoascript.CGFloat, brightness: cocoascript.CGFloat, alpha: cocoascript.CGFloat):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicolor/1621919-getred
    getRed_green_blue_alpha(red: cocoascript.CGFloat, green: cocoascript.CGFloat, blue: cocoascript.CGFloat, alpha: cocoascript.CGFloat):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicolor/1621927-getwhite
    getWhite_alpha(white: cocoascript.CGFloat, alpha: cocoascript.CGFloat):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicolor/3600314-accessibilityname
    accessibilityName(): cocoascript.NSString;
    setAccessibilityName(): void;
    // doc://com.apple.documentation/documentation/uikit/uicolor/3238042-resolvedcolorwithtraitcollection
    resolvedColorWithTraitCollection(traitCollection: cocoascript.UITraitCollection):cocoascript.UIColor;
    //
    alloc():cocoascript.UIColor;
    //
    init():cocoascript.UIColor;
  }
}

declare const UIColor: cocoascript.UIColor;
declare namespace cocoascript {
  /**
   * An object that manages a view hierarchy for your UIKit app.
   * doc://com.apple.documentation/documentation/uikit/uiviewcontroller
   */
  interface UIViewController extends UIResponder {
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621359-initwithnibname
    initWithNibName_bundle(nibNameOrNil: cocoascript.NSString, nibBundleOrNil: cocoascript.NSBundle):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621403-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621399-storyboard
    storyboard(): cocoascript.UIStoryboard;
    setStoryboard(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621487-nibname
    nibName(): cocoascript.NSString;
    setNibName(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621489-nibbundle
    nibBundle(): cocoascript.NSBundle;
    setNibBundle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621460-view
    view(): cocoascript.UIView;
    setView(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621360-viewifloaded
    viewIfLoaded(): cocoascript.UIView;
    setViewIfLoaded(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2097563-viewloaded
    viewLoaded(): cocoascript.BOOL;
    setViewLoaded(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621454-loadview
    loadView():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621495-viewdidload
    viewDidLoad():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621446-loadviewifneeded
    loadViewIfNeeded():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621364-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621476-preferredcontentsize
    preferredContentSize(): cocoascript.CGSize;
    setPreferredContentSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621510-viewwillappear
    viewWillAppear(animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621423-viewdidappear
    viewDidAppear(animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621485-viewwilldisappear
    viewWillDisappear(animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621477-viewdiddisappear
    viewDidDisappear(animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2097562-beingdismissed
    beingDismissed(): cocoascript.BOOL;
    setBeingDismissed(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2097564-beingpresented
    beingPresented(): cocoascript.BOOL;
    setBeingPresented(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2097565-movingfromparentviewcontroller
    movingFromParentViewController(): cocoascript.BOOL;
    setMovingFromParentViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2097561-movingtoparentviewcontroller
    movingToParentViewController(): cocoascript.BOOL;
    setMovingToParentViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2902284-additionalsafeareainsets
    additionalSafeAreaInsets(): cocoascript.UIEdgeInsets;
    setAdditionalSafeAreaInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2891116-viewsafeareainsetsdidchange
    viewSafeAreaInsetsDidChange():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2891115-viewrespectssystemminimumlayoutm
    viewRespectsSystemMinimumLayoutMargins(): cocoascript.BOOL;
    setViewRespectsSystemMinimumLayoutMargins(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2865908-systemminimumlayoutmargins
    systemMinimumLayoutMargins(): cocoascript.NSDirectionalEdgeInsets;
    setSystemMinimumLayoutMargins(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2891114-viewlayoutmarginsdidchange
    viewLayoutMarginsDidChange():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621515-edgesforextendedlayout
    edgesForExtendedLayout(): cocoascript.UIRectEdge;
    setEdgesForExtendedLayout(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621404-extendedlayoutincludesopaquebars
    extendedLayoutIncludesOpaqueBars(): cocoascript.BOOL;
    setExtendedLayoutIncludesOpaqueBars(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621437-viewwilllayoutsubviews
    viewWillLayoutSubviews():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621398-viewdidlayoutsubviews
    viewDidLayoutSubviews():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621379-updateviewconstraints
    updateViewConstraints():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621419-shouldautorotate
    shouldAutorotate(): cocoascript.BOOL;
    setShouldAutorotate(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621435-supportedinterfaceorientations
    supportedInterfaceOrientations(): cocoascript.UIInterfaceOrientationMask;
    setSupportedInterfaceOrientations(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621438-preferredinterfaceorientationfor
    preferredInterfaceOrientationForPresentation(): cocoascript.UIInterfaceOrientation;
    setPreferredInterfaceOrientationForPresentation(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621502-shouldperformseguewithidentifier
    shouldPerformSegueWithIdentifier_sender(identifier: cocoascript.NSString, sender: cocoascript.UIViewController):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621490-prepareforsegue
    prepareForSegue_sender(segue: cocoascript.UIStoryboardSegue, sender: cocoascript.UIViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621413-performseguewithidentifier
    performSegueWithIdentifier_sender(identifier: cocoascript.NSString, sender: cocoascript.UIViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621371-allowedchildviewcontrollersforun
    allowedChildViewControllersForUnwindingFromSource(source: cocoascript.UIStoryboardUnwindSegueSource):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621384-childviewcontrollercontainingseg
    childViewControllerContainingSegueSource(source: cocoascript.UIStoryboardUnwindSegueSource):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/3089101-canperformunwindsegueaction
    canPerformUnwindSegueAction_fromViewController_sender(action: cocoascript.SEL, fromViewController: cocoascript.UIViewController, sender: cocoascript.UIViewController):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621473-unwindforsegue
    unwindForSegue_towardsViewController(unwindSegue: cocoascript.UIStoryboardSegue, subsequentVC: cocoascript.UIViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621377-showviewcontroller
    showViewController_sender(vc: cocoascript.UIViewController, sender: cocoascript.UIViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621432-showdetailviewcontroller
    showDetailViewController_sender(vc: cocoascript.UIViewController, sender: cocoascript.UIViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621380-presentviewcontroller
    presentViewController_animated_completion(viewControllerToPresent: cocoascript.UIViewController, flag: cocoascript.BOOL, completion: void):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621505-dismissviewcontrolleranimated
    dismissViewControllerAnimated_completion(flag: cocoascript.BOOL, completion: void):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621355-modalpresentationstyle
    modalPresentationStyle(): cocoascript.UIModalPresentationStyle;
    setModalPresentationStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621388-modaltransitionstyle
    modalTransitionStyle(): cocoascript.UIModalTransitionStyle;
    setModalTransitionStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/3229894-modalinpresentation
    modalInPresentation(): cocoascript.BOOL;
    setModalInPresentation(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621456-definespresentationcontext
    definesPresentationContext(): cocoascript.BOOL;
    setDefinesPresentationContext(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621356-providespresentationcontexttrans
    providesPresentationContextTransitionStyle(): cocoascript.BOOL;
    setProvidesPresentationContextTransitionStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621385-disablesautomatickeyboarddismiss
    disablesAutomaticKeyboardDismissal(): cocoascript.BOOL;
    setDisablesAutomaticKeyboardDismissal(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621421-transitioningdelegate
    transitioningDelegate(): cocoascript.UIViewControllerTransitioningDelegate;
    setTransitioningDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1619294-transitioncoordinator
    transitionCoordinator(): cocoascript.UIViewControllerTransitionCoordinator;
    setTransitionCoordinator(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621415-targetviewcontrollerforaction
    targetViewControllerForAction_sender(action: cocoascript.SEL, sender: cocoascript.UIViewController):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621426-presentationcontroller
    presentationController(): cocoascript.UIPresentationController;
    setPresentationController(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621428-popoverpresentationcontroller
    popoverPresentationController(): cocoascript.UIPopoverPresentationController;
    setPopoverPresentationController(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1829440-restoresfocusaftertransition
    restoresFocusAfterTransition(): cocoascript.BOOL;
    setRestoresFocusAfterTransition(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1623193-collapsesecondaryviewcontroller
    collapseSecondaryViewController_forSplitViewController(secondaryViewController: cocoascript.UIViewController, splitViewController: cocoascript.UISplitViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1623191-separatesecondaryviewcontrollerf
    separateSecondaryViewControllerForSplitViewController(splitViewController: cocoascript.UISplitViewController):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/3238087-overrideuserinterfacestyle
    overrideUserInterfaceStyle(): cocoascript.UIUserInterfaceStyle;
    setOverrideUserInterfaceStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2909093-preferreduserinterfacestyle
    preferredUserInterfaceStyle(): cocoascript.UIUserInterfaceStyle;
    setPreferredUserInterfaceStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2909095-childviewcontrollerforuserinterf
    childViewControllerForUserInterfaceStyle(): cocoascript.UIViewController;
    setChildViewControllerForUserInterfaceStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2909094-setneedsuserinterfaceappearanceu
    setNeedsUserInterfaceAppearanceUpdate():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621452-childviewcontrollers
    childViewControllers(): cocoascript.UIViewController;
    setChildViewControllers(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621394-addchildviewcontroller
    addChildViewController(childController: cocoascript.UIViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621425-removefromparentviewcontroller
    removeFromParentViewController():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621363-transitionfromviewcontroller
    transitionFromViewController_toViewController_duration_options_animations_completion(fromViewController: cocoascript.UIViewController, toViewController: cocoascript.UIViewController, duration: cocoascript.NSTimeInterval, options: cocoascript.UIViewAnimationOptions, animations: void, completion: void):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621389-shouldautomaticallyforwardappear
    shouldAutomaticallyForwardAppearanceMethods(): cocoascript.BOOL;
    setShouldAutomaticallyForwardAppearanceMethods(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621387-beginappearancetransition
    beginAppearanceTransition_animated(isAppearing: cocoascript.BOOL, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621503-endappearancetransition
    endAppearanceTransition():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621406-setoverridetraitcollection
    setOverrideTraitCollection_forChildViewController(collection: cocoascript.UITraitCollection, childViewController: cocoascript.UIViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621486-overridetraitcollectionforchildv
    overrideTraitCollectionForChildViewController(childViewController: cocoascript.UIViewController):cocoascript.UITraitCollection;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621381-willmovetoparentviewcontroller
    willMoveToParentViewController(parent: cocoascript.UIViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621405-didmovetoparentviewcontroller
    didMoveToParentViewController(parent: cocoascript.UIViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621430-presentingviewcontroller
    presentingViewController(): cocoascript.UIViewController;
    setPresentingViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621407-presentedviewcontroller
    presentedViewController(): cocoascript.UIViewController;
    setPresentedViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621362-parentviewcontroller
    parentViewController(): cocoascript.UIViewController;
    setParentViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1623187-splitviewcontroller
    splitViewController(): cocoascript.UISplitViewController;
    setSplitViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621860-navigationcontroller
    navigationController(): cocoascript.UINavigationController;
    setNavigationController(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621169-tabbarcontroller
    tabBarController(): cocoascript.UITabBarController;
    setTabBarController(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621851-navigationitem
    navigationItem(): cocoascript.UINavigationItem;
    setNavigationItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621863-hidesbottombarwhenpushed
    hidesBottomBarWhenPushed(): cocoascript.BOOL;
    setHidesBottomBarWhenPushed(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621874-settoolbaritems
    setToolbarItems_animated(toolbarItems: cocoascript.UIBarButtonItem, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621867-toolbaritems
    toolbarItems(): cocoascript.UIBarButtonItem;
    setToolbarItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621175-tabbaritem
    tabBarItem(): cocoascript.UITabBarItem;
    setTabBarItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/3152928-tabbarobservedscrollview
    tabBarObservedScrollView(): cocoascript.UIScrollView;
    setTabBarObservedScrollView(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621411-extensioncontext
    extensionContext(): cocoascript.NSExtensionContext;
    setExtensionContext(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2887512-preferredscreenedgesdeferringsys
    preferredScreenEdgesDeferringSystemGestures(): cocoascript.UIRectEdge;
    setPreferredScreenEdgesDeferringSystemGestures(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2887511-childviewcontrollerforscreenedge
    childViewControllerForScreenEdgesDeferringSystemGestures(): cocoascript.UIViewController;
    setChildViewControllerForScreenEdgesDeferringSystemGestures(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2887507-setneedsupdateofscreenedgesdefer
    setNeedsUpdateOfScreenEdgesDeferringSystemGestures():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2887510-prefershomeindicatorautohidden
    prefersHomeIndicatorAutoHidden(): cocoascript.BOOL;
    setPrefersHomeIndicatorAutoHidden(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2887508-childviewcontrollerforhomeindica
    childViewControllerForHomeIndicatorAutoHidden(): cocoascript.UIViewController;
    setChildViewControllerForHomeIndicatorAutoHidden(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/2887509-setneedsupdateofhomeindicatoraut
    setNeedsUpdateOfHomeIndicatorAutoHidden():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621451-childviewcontrollerforstatusbarh
    childViewControllerForStatusBarHidden(): cocoascript.UIViewController;
    setChildViewControllerForStatusBarHidden(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621433-childviewcontrollerforstatusbars
    childViewControllerForStatusBarStyle(): cocoascript.UIViewController;
    setChildViewControllerForStatusBarStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621416-preferredstatusbarstyle
    preferredStatusBarStyle(): cocoascript.UIStatusBarStyle;
    setPreferredStatusBarStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621440-prefersstatusbarhidden
    prefersStatusBarHidden(): cocoascript.BOOL;
    setPrefersStatusBarHidden(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621453-modalpresentationcapturesstatusb
    modalPresentationCapturesStatusBarAppearance(): cocoascript.BOOL;
    setModalPresentationCapturesStatusBarAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621434-preferredstatusbarupdateanimatio
    preferredStatusBarUpdateAnimation(): cocoascript.UIStatusBarAnimation;
    setPreferredStatusBarUpdateAnimation(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621354-setneedsstatusbarappearanceupdat
    setNeedsStatusBarAppearanceUpdate():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/3375829-childviewcontrollerfortouchbar
    childViewControllerForTouchBar(): cocoascript.UIViewController;
    setChildViewControllerForTouchBar(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/3375830-setneedstouchbarupdate
    setNeedsTouchBarUpdate():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/3368164-performsactionswhilepresentingmo
    performsActionsWhilePresentingModally(): cocoascript.BOOL;
    setPerformsActionsWhilePresentingModally(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621439-addkeycommand
    addKeyCommand(keyCommand: cocoascript.UIKeyCommand):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621410-removekeycommand
    removeKeyCommand(keyCommand: cocoascript.UIKeyCommand):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621498-editing
    editing(): cocoascript.BOOL;
    setEditing(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621378-setediting
    setEditing_animated(editing: cocoascript.BOOL, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621471-editbuttonitem
    editButtonItem(): cocoascript.UIBarButtonItem;
    setEditButtonItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621409-didreceivememorywarning
    didReceiveMemoryWarning():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621499-restorationidentifier
    restorationIdentifier(): cocoascript.NSString;
    setRestorationIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621472-restorationclass
    restorationClass(): cocoascript.UIViewControllerRestoration;
    setRestorationClass(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621461-encoderestorablestatewithcoder
    encodeRestorableStateWithCoder(coder: cocoascript.NSCoder):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621429-decoderestorablestatewithcoder
    decodeRestorableStateWithCoder(coder: cocoascript.NSCoder):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/1621482-applicationfinishedrestoringstat
    applicationFinishedRestoringState():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/3601234-childviewcontrollerforpointerloc
    childViewControllerForPointerLock(): cocoascript.UIViewController;
    setChildViewControllerForPointerLock(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/3601235-preferspointerlocked
    prefersPointerLocked(): cocoascript.BOOL;
    setPrefersPointerLocked(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontroller/3601236-setneedsupdateofpreferspointerlo
    setNeedsUpdateOfPrefersPointerLocked():void;
    //
    alloc():cocoascript.UIViewController;
    //
    init():cocoascript.UIViewController;
  }
}

declare const UIViewController: cocoascript.UIViewController;
declare namespace cocoascript {
  /**
   * A set of methods that makes the iOS interface environment available to your app.
   * doc://com.apple.documentation/documentation/uikit/uitraitenvironment
   */
  interface UITraitEnvironment extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitraitenvironment/1623514-traitcollection
    traitCollection(): cocoascript.UITraitCollection;
    setTraitCollection(): void;
    // doc://com.apple.documentation/documentation/uikit/uitraitenvironment/1623516-traitcollectiondidchange
    traitCollectionDidChange(previousTraitCollection: cocoascript.UITraitCollection):void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that you use to manage shared behaviors for your app.
   * doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate
   */
  interface UIApplicationDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1623032-application
    application_willFinishLaunchingWithOptions(application: cocoascript.UIApplication, launchOptions: cocoascript.UIApplicationDelegate):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1622921-application
    application_didFinishLaunchingWithOptions(application: cocoascript.UIApplication, launchOptions: cocoascript.UIApplicationDelegate):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1623053-applicationdidfinishlaunching
    applicationDidFinishLaunching(application: cocoascript.UIApplication):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/3197905-application
    application_configurationForConnectingSceneSession_options(application: cocoascript.UIApplication, connectingSceneSession: cocoascript.UISceneSession, options: cocoascript.UISceneConnectionOptions):cocoascript.UISceneConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/3197906-application
    application_didDiscardSceneSessions(application: cocoascript.UIApplication, sceneSessions: cocoascript.UISceneSession):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1622956-applicationdidbecomeactive
    applicationDidBecomeActive(application: cocoascript.UIApplication):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1622950-applicationwillresignactive
    applicationWillResignActive(application: cocoascript.UIApplication):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1622997-applicationdidenterbackground
    applicationDidEnterBackground(application: cocoascript.UIApplication):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1623076-applicationwillenterforeground
    applicationWillEnterForeground(application: cocoascript.UIApplication):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1623111-applicationwillterminate
    applicationWillTerminate(application: cocoascript.UIApplication):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1623044-applicationprotecteddatadidbecom
    applicationProtectedDataDidBecomeAvailable(application: cocoascript.UIApplication):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1623019-applicationprotecteddatawillbeco
    applicationProtectedDataWillBecomeUnavailable(application: cocoascript.UIApplication):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1623063-applicationdidreceivememorywarni
    applicationDidReceiveMemoryWarning(application: cocoascript.UIApplication):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1622992-applicationsignificanttimechange
    applicationSignificantTimeChange(application: cocoascript.UIApplication):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/3395862-application
    application_shouldSaveSecureApplicationState(application: cocoascript.UIApplication, coder: cocoascript.NSCoder):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/3395861-application
    application_shouldRestoreSecureApplicationState(application: cocoascript.UIApplication, coder: cocoascript.NSCoder):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1623062-application
    application_viewControllerWithRestorationIdentifierPath_coder(application: cocoascript.UIApplication, identifierComponents: cocoascript.NSString, coder: cocoascript.NSCoder):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1623099-application
    application_willEncodeRestorableStateWithCoder(application: cocoascript.UIApplication, coder: cocoascript.NSCoder):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1623006-application
    application_didDecodeRestorableStateWithCoder(application: cocoascript.UIApplication, coder: cocoascript.NSCoder):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1622941-application
    application_handleEventsForBackgroundURLSession_completionHandler(application: cocoascript.UIApplication, identifier: cocoascript.NSString, completionHandler: void):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1622958-application
    application_didRegisterForRemoteNotificationsWithDeviceToken(application: cocoascript.UIApplication, deviceToken: cocoascript.NSData):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1622962-application
    application_didFailToRegisterForRemoteNotificationsWithError(application: cocoascript.UIApplication, error: cocoascript.NSError):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1623013-application
    application_didReceiveRemoteNotification_fetchCompletionHandler(application: cocoascript.UIApplication, userInfo: cocoascript.NSDictionary, completionHandler: cocoascript.UIBackgroundFetchResult):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1622919-application
    application_willContinueUserActivityWithType(application: cocoascript.UIApplication, userActivityType: cocoascript.NSString):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1623072-application
    application_continueUserActivity_restorationHandler(application: cocoascript.UIApplication, userActivity: cocoascript.NSUserActivity, restorationHandler: cocoascript.UIUserActivityRestoring):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1622963-application
    application_didUpdateUserActivity(application: cocoascript.UIApplication, userActivity: cocoascript.NSUserActivity):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1622927-application
    application_didFailToContinueUserActivityWithType_error(application: cocoascript.UIApplication, userActivityType: cocoascript.NSString, error: cocoascript.NSError):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1622935-application
    application_performActionForShortcutItem_completionHandler(application: cocoascript.UIApplication, shortcutItem: cocoascript.UIApplicationShortcutItem, completionHandler: void):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1623041-application
    application_handleWatchKitExtensionRequest_reply(application: cocoascript.UIApplication, userInfo: cocoascript.NSDictionary, reply: cocoascript.NSDictionary):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1622998-applicationshouldrequesthealthau
    applicationShouldRequestHealthAuthorization(application: cocoascript.UIApplication):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1623112-application
    application_openURL_options(app: cocoascript.UIApplication, url: cocoascript.NSURL, options: cocoascript.UIApplicationDelegate):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1623122-application
    application_shouldAllowExtensionPointIdentifier(application: cocoascript.UIApplication, extensionPointIdentifier: cocoascript.UIApplicationExtensionPointIdentifier):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/3548063-application
    application_handlerForIntent(application: cocoascript.UIApplication, intent: cocoascript.INIntent):cocoascript.UIApplicationDelegate;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/2206721-application
    application_userDidAcceptCloudKitShareWithMetadata(application: cocoascript.UIApplication, cloudKitShareMetadata: cocoascript.CKShareMetadata):void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1623107-application
    application_supportedInterfaceOrientationsForWindow(application: cocoascript.UIApplication, window: cocoascript.UIWindow):cocoascript.UIInterfaceOrientationMask;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationdelegate/1623056-window
    window(): cocoascript.UIWindow;
    setWindow(): void;
  }
}
declare const UIApplicationStateRestorationBundleVersionKey: cocoascript.NSString;
declare const UIApplicationStateRestorationSystemVersionKey: cocoascript.NSString;
declare const UIApplicationStateRestorationTimestampKey: cocoascript.NSString;
declare const UIApplicationStateRestorationUserInterfaceIdiomKey: cocoascript.NSString;
declare const UIStateRestorationViewControllerStoryboardKey: cocoascript.NSString;
declare namespace cocoascript {
  /**
   * An object describing the configuration of the status bar.
   * doc://com.apple.documentation/documentation/uikit/uistatusbarmanager
   */
  interface UIStatusBarManager extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uistatusbarmanager/3213941-statusbarhidden
    statusBarHidden(): cocoascript.BOOL;
    setStatusBarHidden(): void;
    // doc://com.apple.documentation/documentation/uikit/uistatusbarmanager/3213942-statusbarstyle
    statusBarStyle(): cocoascript.UIStatusBarStyle;
    setStatusBarStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uistatusbarmanager/3213940-statusbarframe
    statusBarFrame(): cocoascript.CGRect;
    setStatusBarFrame(): void;
    //
    alloc():cocoascript.UIStatusBarManager;
    //
    init():cocoascript.UIStatusBarManager;
  }
}

declare const UIStatusBarManager: cocoascript.UIStatusBarManager;
declare namespace cocoascript {
  /**
   * The iOS interface environment for your app, including traits such as horizontal and vertical size class, display scale, and user interface idiom.
   * doc://com.apple.documentation/documentation/uikit/uitraitcollection
   */
  interface UITraitCollection extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/1623517-init
    init():cocoascript.UITraitCollection;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/1623504-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UITraitCollection;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/3238080-currenttraitcollection
    currentTraitCollection(): cocoascript.UITraitCollection;
    setCurrentTraitCollection(): void;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/1623508-horizontalsizeclass
    horizontalSizeClass(): cocoascript.UIUserInterfaceSizeClass;
    setHorizontalSizeClass(): void;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/1623513-verticalsizeclass
    verticalSizeClass(): cocoascript.UIUserInterfaceSizeClass;
    setVerticalSizeClass(): void;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/1623519-displayscale
    displayScale(): cocoascript.CGFloat;
    setDisplayScale(): void;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/1771749-displaygamut
    displayGamut(): cocoascript.UIDisplayGamut;
    setDisplayGamut(): void;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/1651063-userinterfacestyle
    userInterfaceStyle(): cocoascript.UIUserInterfaceStyle;
    setUserInterfaceStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/1623521-userinterfaceidiom
    userInterfaceIdiom(): cocoascript.UIUserInterfaceIdiom;
    setUserInterfaceIdiom(): void;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/3238085-userinterfacelevel
    userInterfaceLevel(): cocoascript.UIUserInterfaceLevel;
    setUserInterfaceLevel(): void;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/1648355-layoutdirection
    layoutDirection(): cocoascript.UITraitEnvironmentLayoutDirection;
    setLayoutDirection(): void;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/3238079-accessibilitycontrast
    accessibilityContrast(): cocoascript.UIAccessibilityContrast;
    setAccessibilityContrast(): void;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/3255094-legibilityweight
    legibilityWeight(): cocoascript.UILegibilityWeight;
    setLegibilityWeight(): void;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/3618952-activeappearance
    activeAppearance(): cocoascript.UIUserInterfaceActiveAppearance;
    setActiveAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/1623515-forcetouchcapability
    forceTouchCapability(): cocoascript.UIForceTouchCapability;
    setForceTouchCapability(): void;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/1771746-preferredcontentsizecategory
    preferredContentSizeCategory(): cocoascript.UIContentSizeCategory;
    setPreferredContentSizeCategory(): void;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/1623506-containstraitsincollection
    containsTraitsInCollection(trait: cocoascript.UITraitCollection):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/3238081-hasdifferentcolorappearancecompa
    hasDifferentColorAppearanceComparedToTraitCollection(traitCollection: cocoascript.UITraitCollection):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/3295976-imageconfiguration
    imageConfiguration(): cocoascript.UIImageConfiguration;
    setImageConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uitraitcollection/3238082-performascurrenttraitcollection
    performAsCurrentTraitCollection(actions: void):void;
    //
    alloc():cocoascript.UITraitCollection;
    //
    init():cocoascript.UITraitCollection;
  }
}

declare const UITraitCollection: cocoascript.UITraitCollection;
declare const UIContentSizeCategoryCompareToCategory: cocoascript.UIContentSizeCategory;
declare namespace cocoascript {
  /**
   * A set of methods that, in conjunction with a presentation controller, determine how to respond to trait changes in your app.
   * doc://com.apple.documentation/documentation/uikit/uiadaptivepresentationcontrollerdelegate
   */
  interface UIAdaptivePresentationControllerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiadaptivepresentationcontrollerdelegate/1618334-adaptivepresentationstyleforpres
    adaptivePresentationStyleForPresentationController_traitCollection(controller: cocoascript.UIPresentationController, traitCollection: cocoascript.UITraitCollection):cocoascript.UIModalPresentationStyle;
    // doc://com.apple.documentation/documentation/uikit/uiadaptivepresentationcontrollerdelegate/1618343-adaptivepresentationstyleforpres
    adaptivePresentationStyleForPresentationController(controller: cocoascript.UIPresentationController):cocoascript.UIModalPresentationStyle;
    // doc://com.apple.documentation/documentation/uikit/uiadaptivepresentationcontrollerdelegate/1618326-presentationcontroller
    presentationController_viewControllerForAdaptivePresentationStyle(controller: cocoascript.UIPresentationController, style: cocoascript.UIModalPresentationStyle):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uiadaptivepresentationcontrollerdelegate/1618324-presentationcontroller
    presentationController_willPresentWithAdaptiveStyle_transitionCoordinator(presentationController: cocoascript.UIPresentationController, style: cocoascript.UIModalPresentationStyle, transitionCoordinator: cocoascript.UIViewControllerTransitionCoordinator):void;
    // doc://com.apple.documentation/documentation/uikit/uiadaptivepresentationcontrollerdelegate/3229888-presentationcontrollerdidattempt
    presentationControllerDidAttemptToDismiss(presentationController: cocoascript.UIPresentationController):void;
    // doc://com.apple.documentation/documentation/uikit/uiadaptivepresentationcontrollerdelegate/3229890-presentationcontrollershoulddism
    presentationControllerShouldDismiss(presentationController: cocoascript.UIPresentationController):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiadaptivepresentationcontrollerdelegate/3229889-presentationcontrollerdiddismiss
    presentationControllerDidDismiss(presentationController: cocoascript.UIPresentationController):void;
    // doc://com.apple.documentation/documentation/uikit/uiadaptivepresentationcontrollerdelegate/3229891-presentationcontrollerwilldismis
    presentationControllerWillDismiss(presentationController: cocoascript.UIPresentationController):void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods for adapting the contents of your view controllers to size and trait changes.
   * doc://com.apple.documentation/documentation/uikit/uicontentcontainer
   */
  interface UIContentContainer extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicontentcontainer/1621466-viewwilltransitiontosize
    viewWillTransitionToSize_withTransitionCoordinator(size: cocoascript.CGSize, coordinator: cocoascript.UIViewControllerTransitionCoordinator):void;
    // doc://com.apple.documentation/documentation/uikit/uicontentcontainer/1621511-willtransitiontotraitcollection
    willTransitionToTraitCollection_withTransitionCoordinator(newCollection: cocoascript.UITraitCollection, coordinator: cocoascript.UIViewControllerTransitionCoordinator):void;
    // doc://com.apple.documentation/documentation/uikit/uicontentcontainer/1621484-sizeforchildcontentcontainer
    sizeForChildContentContainer_withParentContainerSize(container: cocoascript.UIContentContainer, parentSize: cocoascript.CGSize):cocoascript.CGSize;
    // doc://com.apple.documentation/documentation/uikit/uicontentcontainer/1621351-preferredcontentsizedidchangefor
    preferredContentSizeDidChangeForChildContentContainer(container: cocoascript.UIContentContainer):void;
    // doc://com.apple.documentation/documentation/uikit/uicontentcontainer/1621424-systemlayoutfittingsizedidchange
    systemLayoutFittingSizeDidChangeForChildContentContainer(container: cocoascript.UIContentContainer):void;
    // doc://com.apple.documentation/documentation/uikit/uicontentcontainer/1621481-preferredcontentsize
    preferredContentSize(): cocoascript.CGSize;
    setPreferredContentSize(): void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods you use to add custom restrictions for the Guided Access feature in iOS.
   * doc://com.apple.documentation/documentation/uikit/uiguidedaccessrestrictiondelegate
   */
  interface UIGuidedAccessRestrictionDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiguidedaccessrestrictiondelegate/1621160-guidedaccessrestrictionidentifie
    guidedAccessRestrictionIdentifiers(): cocoascript.NSString;
    setGuidedAccessRestrictionIdentifiers(): void;
    // doc://com.apple.documentation/documentation/uikit/uiguidedaccessrestrictiondelegate/1621161-textforguidedaccessrestrictionwi
    textForGuidedAccessRestrictionWithIdentifier(restrictionIdentifier: cocoascript.NSString):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uiguidedaccessrestrictiondelegate/1621158-detailtextforguidedaccessrestric
    detailTextForGuidedAccessRestrictionWithIdentifier(restrictionIdentifier: cocoascript.NSString):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uiguidedaccessrestrictiondelegate/1621156-guidedaccessrestrictionwithident
    guidedAccessRestrictionWithIdentifier_didChangeState(restrictionIdentifier: cocoascript.NSString, newRestrictionState: cocoascript.UIGuidedAccessRestrictionState):void;
  }
}
declare namespace cocoascript {
  /**
   * An abstract base class for managing discrete portions of your app's data.
   * doc://com.apple.documentation/documentation/uikit/uidocument
   */
  interface UIDocument extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619979-initwithfileurl
    initWithFileURL(url: cocoascript.NSURL):cocoascript.UIDocument;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619990-fileurl
    fileURL(): cocoascript.NSURL;
    setFileURL(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619959-localizedname
    localizedName(): cocoascript.NSString;
    setLocalizedName(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619992-filetype
    fileType(): cocoascript.NSString;
    setFileType(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619952-filemodificationdate
    fileModificationDate(): cocoascript.NSDate;
    setFileModificationDate(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619982-documentstate
    documentState(): cocoascript.UIDocumentState;
    setDocumentState(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1648564-progress
    progress(): cocoascript.NSProgress;
    setProgress(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619976-closewithcompletionhandler
    closeWithCompletionHandler(completionHandler: void):void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619978-contentsfortype
    contentsForType_error(typeName: cocoascript.NSString, outError: cocoascript.NSError):cocoascript.UIDocument;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619988-savetourl
    saveToURL_forSaveOperation_completionHandler(url: cocoascript.NSURL, saveOperation: cocoascript.UIDocumentSaveOperation, completionHandler: void):void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619951-writecontents
    writeContents_andAttributes_safelyToURL_forSaveOperation_error(contents: cocoascript.UIDocument, additionalFileAttributes: cocoascript.NSDictionary, url: cocoascript.NSURL, saveOperation: cocoascript.UIDocumentSaveOperation, outError: cocoascript.NSError):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619989-writecontents
    writeContents_toURL_forSaveOperation_originalContentsURL_error(contents: cocoascript.UIDocument, url: cocoascript.NSURL, saveOperation: cocoascript.UIDocumentSaveOperation, originalContentsURL: cocoascript.NSURL, outError: cocoascript.NSError):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619991-savingfiletype
    savingFileType(): cocoascript.NSString;
    setSavingFileType(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619947-fileattributestowritetourl
    fileAttributesToWriteToURL_forSaveOperation_error(url: cocoascript.NSURL, saveOperation: cocoascript.UIDocumentSaveOperation, outError: cocoascript.NSError):cocoascript.NSDictionary;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619969-filenameextensionfortype
    fileNameExtensionForType_saveOperation(typeName: cocoascript.NSString, saveOperation: cocoascript.UIDocumentSaveOperation):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619977-openwithcompletionhandler
    openWithCompletionHandler(completionHandler: void):void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619971-loadfromcontents
    loadFromContents_ofType_error(contents: cocoascript.UIDocument, typeName: cocoascript.NSString, outError: cocoascript.NSError):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619967-readfromurl
    readFromURL_error(url: cocoascript.NSURL, outError: cocoascript.NSError):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619980-performasynchronousfileaccessusi
    performAsynchronousFileAccessUsingBlock(block: void):void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619974-reverttocontentsofurl
    revertToContentsOfURL_completionHandler(url: cocoascript.NSURL, completionHandler: void):void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619958-disableediting
    disableEditing():void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619987-enableediting
    enableEditing():void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619965-hasunsavedchanges
    hasUnsavedChanges(): cocoascript.BOOL;
    setHasUnsavedChanges(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619961-updatechangecount
    updateChangeCount(change: cocoascript.UIDocumentChangeKind):void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619953-undomanager
    undoManager(): cocoascript.NSUndoManager;
    setUndoManager(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619954-changecounttokenforsaveoperation
    changeCountTokenForSaveOperation(saveOperation: cocoascript.UIDocumentSaveOperation):cocoascript.UIDocument;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619975-updatechangecountwithtoken
    updateChangeCountWithToken_forSaveOperation(changeCountToken: cocoascript.UIDocument, saveOperation: cocoascript.UIDocumentSaveOperation):void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619981-autosavewithcompletionhandler
    autosaveWithCompletionHandler(completionHandler: void):void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619963-useractivity
    userActivity(): cocoascript.NSUserActivity;
    setUserActivity(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619973-restoreuseractivitystate
    restoreUserActivityState(userActivity: cocoascript.NSUserActivity):void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619986-updateuseractivitystate
    updateUserActivityState(userActivity: cocoascript.NSUserActivity):void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619955-handleerror
    handleError_userInteractionPermitted(error: cocoascript.NSError, userInteractionPermitted: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619960-finishedhandlingerror
    finishedHandlingError_recovered(error: cocoascript.NSError, recovered: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uidocument/1619993-userinteractionnolongerpermitted
    userInteractionNoLongerPermittedForError(error: cocoascript.NSError):void;
    //
    alloc():cocoascript.UIDocument;
    //
    init():cocoascript.UIDocument;
  }
}

declare const UIDocument: cocoascript.UIDocument;
declare const NSUserActivityDocumentURLKey: cocoascript.NSString;
declare namespace cocoascript {
  /**
   * A managed document object that integrates with Core Data.
   * doc://com.apple.documentation/documentation/uikit/uimanageddocument
   */
  interface UIManagedDocument extends UIDocument {
    // doc://com.apple.documentation/documentation/uikit/uimanageddocument/1622674-configurepersistentstorecoordina
    configurePersistentStoreCoordinatorForURL_ofType_modelConfiguration_storeOptions_error(storeURL: cocoascript.NSURL, fileType: cocoascript.NSString, configuration: cocoascript.NSString, storeOptions: cocoascript.NSDictionary, error: cocoascript.NSError):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uimanageddocument/1622667-managedobjectcontext
    managedObjectContext(): cocoascript.NSManagedObjectContext;
    setManagedObjectContext(): void;
    // doc://com.apple.documentation/documentation/uikit/uimanageddocument/1622669-managedobjectmodel
    managedObjectModel(): cocoascript.NSManagedObjectModel;
    setManagedObjectModel(): void;
    // doc://com.apple.documentation/documentation/uikit/uimanageddocument/1622666-persistentstoreoptions
    persistentStoreOptions(): cocoascript.NSDictionary;
    setPersistentStoreOptions(): void;
    // doc://com.apple.documentation/documentation/uikit/uimanageddocument/1622671-modelconfiguration
    modelConfiguration(): cocoascript.NSString;
    setModelConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uimanageddocument/1622673-persistentstoretypeforfiletype
    persistentStoreTypeForFileType(fileType: cocoascript.NSString):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uimanageddocument/1622670-readadditionalcontentfromurl
    readAdditionalContentFromURL_error(absoluteURL: cocoascript.NSURL, error: cocoascript.NSError):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uimanageddocument/1622665-additionalcontentforurl
    additionalContentForURL_error(absoluteURL: cocoascript.NSURL, error: cocoascript.NSError):cocoascript.UIManagedDocument;
    // doc://com.apple.documentation/documentation/uikit/uimanageddocument/1622668-writeadditionalcontent
    writeAdditionalContent_toURL_originalContentsURL_error(content: cocoascript.UIManagedDocument, absoluteURL: cocoascript.NSURL, absoluteOriginalContentsURL: cocoascript.NSURL, error: cocoascript.NSError):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uimanageddocument/1622672-persistentstorename
    persistentStoreName(): cocoascript.NSString;
    setPersistentStoreName(): void;
    //
    alloc():cocoascript.UIManagedDocument;
    //
    init():cocoascript.UIManagedDocument;
  }
}

declare const UIManagedDocument: cocoascript.UIManagedDocument;
declare namespace cocoascript {
  /**
   * A set of methods that defines an interface for providing persistent references to data objects in your app.
   * doc://com.apple.documentation/documentation/uikit/uidatasourcemodelassociation
   */
  interface UIDataSourceModelAssociation {
    // doc://com.apple.documentation/documentation/uikit/uidatasourcemodelassociation/1616862-modelidentifierforelementatindex
    modelIdentifierForElementAtIndexPath_inView(idx: cocoascript.NSIndexPath, view: cocoascript.UIView):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uidatasourcemodelassociation/1616850-indexpathforelementwithmodeliden
    indexPathForElementWithModelIdentifier_inView(identifier: cocoascript.NSString, view: cocoascript.UIView):cocoascript.NSIndexPath;
  }
}
declare namespace cocoascript {
  /**
   * An object that helps a user share data from one place to another within your app, and from your app to other apps.
   * doc://com.apple.documentation/documentation/uikit/uipasteboard
   */
  interface UIPasteboard extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622106-generalpasteboard
    generalPasteboard(): cocoascript.UIPasteboard;
    setGeneralPasteboard(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622083-name
    name(): cocoascript.UIPasteboardName;
    setName(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622103-changecount
    changeCount(): cocoascript.NSInteger;
    setChangeCount(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622096-setpersistent
    persistent(): cocoascript.BOOL;
    setPersistent(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/3621870-detectpatternsforpatterns
    detectPatternsForPatterns_completionHandler(patterns: cocoascript.UIPasteboardDetectionPattern, completionHandler: cocoascript.NSError):void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/3621871-detectpatternsforpatterns
    detectPatternsForPatterns_inItemSet_completionHandler(patterns: cocoascript.UIPasteboardDetectionPattern, itemSet: cocoascript.NSIndexSet, completionHandler: cocoascript.NSError):void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/3621872-detectvaluesforpatterns
    detectValuesForPatterns_completionHandler(patterns: cocoascript.UIPasteboardDetectionPattern, completionHandler: cocoascript.NSError):void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/3621873-detectvaluesforpatterns
    detectValuesForPatterns_inItemSet_completionHandler(patterns: cocoascript.UIPasteboardDetectionPattern, itemSet: cocoascript.NSIndexSet, completionHandler: cocoascript.NSError):void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622077-pasteboardtypes
    pasteboardTypes(): cocoascript.NSString;
    setPasteboardTypes(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622095-pasteboardtypesforitemset
    pasteboardTypesForItemSet(itemSet: cocoascript.NSIndexSet):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622070-containspasteboardtypes
    containsPasteboardTypes(pasteboardTypes: cocoascript.NSString):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622100-containspasteboardtypes
    containsPasteboardTypes_inItemSet(pasteboardTypes: cocoascript.NSString, itemSet: cocoascript.NSIndexSet):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622071-itemsetwithpasteboardtypes
    itemSetWithPasteboardTypes(pasteboardTypes: cocoascript.NSString):cocoascript.NSIndexSet;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622076-numberofitems
    numberOfItems(): cocoascript.NSInteger;
    setNumberOfItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622067-items
    items(): cocoascript.id;
    setItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622101-additems
    addItems(items: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1829417-setitems
    setItems_options(items: cocoascript.NSString, options: cocoascript.UIPasteboard):void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622093-dataforpasteboardtype
    dataForPasteboardType(pasteboardType: cocoascript.NSString):cocoascript.NSData;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622068-dataforpasteboardtype
    dataForPasteboardType_inItemSet(pasteboardType: cocoascript.NSString, itemSet: cocoascript.NSIndexSet):cocoascript.NSData;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622075-setdata
    setData_forPasteboardType(data: cocoascript.NSData, pasteboardType: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622099-valueforpasteboardtype
    valueForPasteboardType(pasteboardType: cocoascript.NSString):cocoascript.UIPasteboard;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622094-valuesforpasteboardtype
    valuesForPasteboardType_inItemSet(pasteboardType: cocoascript.NSString, itemSet: cocoascript.NSIndexSet):cocoascript.NSArray;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622079-setvalue
    setValue_forPasteboardType(value: cocoascript.UIPasteboard, pasteboardType: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622092-string
    string(): cocoascript.NSString;
    setString(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622091-strings
    strings(): cocoascript.NSString;
    setStrings(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622069-image
    image(): cocoascript.UIImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622086-images
    images(): cocoascript.UIImage;
    setImages(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622081-url
    URL(): cocoascript.NSURL;
    setURL(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622097-urls
    URLs(): cocoascript.NSURL;
    setURLs(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622085-color
    color(): cocoascript.UIColor;
    setColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1622078-colors
    colors(): cocoascript.UIColor;
    setColors(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1829413-hascolors
    hasColors(): cocoascript.BOOL;
    setHasColors(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1829411-hasimages
    hasImages(): cocoascript.BOOL;
    setHasImages(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1829416-hasstrings
    hasStrings(): cocoascript.BOOL;
    setHasStrings(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/1829410-hasurls
    hasURLs(): cocoascript.BOOL;
    setHasURLs(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/2882049-itemproviders
    itemProviders(): cocoascript.NSItemProvider;
    setItemProviders(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/2882050-setitemproviders
    setItemProviders_localOnly_expirationDate(itemProviders: cocoascript.NSItemProvider, localOnly: cocoascript.BOOL, expirationDate: cocoascript.NSDate):void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/2882051-setobjects
    setObjects(objects: cocoascript.NSItemProviderWriting):void;
    // doc://com.apple.documentation/documentation/uikit/uipasteboard/2882052-setobjects
    setObjects_localOnly_expirationDate(objects: cocoascript.NSItemProviderWriting, localOnly: cocoascript.BOOL, expirationDate: cocoascript.NSDate):void;
    //
    alloc():cocoascript.UIPasteboard;
    //
    init():cocoascript.UIPasteboard;
  }
}

declare const UIPasteboard: cocoascript.UIPasteboard;
declare namespace cocoascript {
  /**
   * The interface that an object implements to declare its ability to accept specific data types for pasting and for drag and drop activities.
   * doc://com.apple.documentation/documentation/uikit/uipasteconfiguration
   */
  interface UIPasteConfiguration extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipasteconfiguration/2882061-init
    init():cocoascript.UIPasteConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uipasteconfiguration/2882060-initwithacceptabletypeidentifier
    initWithAcceptableTypeIdentifiers(acceptableTypeIdentifiers: cocoascript.NSString):cocoascript.UIPasteConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uipasteconfiguration/2882058-initwithtypeidentifiersforaccept
    initWithTypeIdentifiersForAcceptingClass(aClass: cocoascript.NSItemProviderReading):cocoascript.UIPasteConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uipasteconfiguration/2882059-acceptabletypeidentifiers
    acceptableTypeIdentifiers(): cocoascript.NSString;
    setAcceptableTypeIdentifiers(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteconfiguration/2882057-addacceptabletypeidentifiers
    addAcceptableTypeIdentifiers(acceptableTypeIdentifiers: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uipasteconfiguration/2882062-addtypeidentifiersforacceptingcl
    addTypeIdentifiersForAcceptingClass(aClass: cocoascript.NSItemProviderReading):void;
    //
    alloc():cocoascript.UIPasteConfiguration;
    //
    init():cocoascript.UIPasteConfiguration;
  }
}

declare const UIPasteConfiguration: cocoascript.UIPasteConfiguration;
declare namespace cocoascript {
  /**
   * The interface that determines whether a responder object supports paste configuration.
   * doc://com.apple.documentation/documentation/uikit/uipasteconfigurationsupporting
   */
  interface UIPasteConfigurationSupporting extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipasteconfigurationsupporting/2882040-pasteconfiguration
    pasteConfiguration(): cocoascript.UIPasteConfiguration;
    setPasteConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uipasteconfigurationsupporting/2887578-canpasteitemproviders
    canPasteItemProviders(itemProviders: cocoascript.NSItemProvider):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uipasteconfigurationsupporting/2887579-pasteitemproviders
    pasteItemProviders(itemProviders: cocoascript.NSItemProvider):void;
  }
}
declare namespace cocoascript {
  /**
   * An encapsulation of the design-time view controller graph represented in an Interface Builder storyboard resource file.
   * doc://com.apple.documentation/documentation/uikit/uistoryboard
   */
  interface UIStoryboard extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uistoryboard/1616213-instantiateinitialviewcontroller
    instantiateInitialViewController():cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uistoryboard/3173165-instantiateinitialviewcontroller
    instantiateInitialViewControllerWithCreator(block: cocoascript.UIStoryboardViewControllerCreator):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uistoryboard/1616214-instantiateviewcontrollerwithide
    instantiateViewControllerWithIdentifier(identifier: cocoascript.NSString):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uistoryboard/3173166-instantiateviewcontrollerwithide
    instantiateViewControllerWithIdentifier_creator(identifier: cocoascript.NSString, block: cocoascript.UIStoryboardViewControllerCreator):cocoascript.UIViewController;
    //
    alloc():cocoascript.UIStoryboard;
    //
    init():cocoascript.UIStoryboard;
  }
}

declare const UIStoryboard: cocoascript.UIStoryboard;
declare namespace cocoascript {
  /**
   * An object that prepares for and performs the visual transition between two view controllers.
   * doc://com.apple.documentation/documentation/uikit/uistoryboardsegue
   */
  interface UIStoryboardSegue extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uistoryboardsegue/1621908-initwithidentifier
    initWithIdentifier_source_destination(identifier: cocoascript.NSString, source: cocoascript.UIViewController, destination: cocoascript.UIViewController):cocoascript.UIStoryboardSegue;
    // doc://com.apple.documentation/documentation/uikit/uistoryboardsegue/1621918-sourceviewcontroller
    sourceViewController(): cocoascript.UIViewController;
    setSourceViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uistoryboardsegue/1621916-destinationviewcontroller
    destinationViewController(): cocoascript.UIViewController;
    setDestinationViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uistoryboardsegue/1621909-identifier
    identifier(): cocoascript.NSString;
    setIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uistoryboardsegue/1621912-perform
    perform():void;
    //
    alloc():cocoascript.UIStoryboardSegue;
    //
    init():cocoascript.UIStoryboardSegue;
  }
}

declare const UIStoryboardSegue: cocoascript.UIStoryboardSegue;
declare namespace cocoascript {
  /**
   * An encapsulation of information about an unwind segue.
   * doc://com.apple.documentation/documentation/uikit/uistoryboardunwindseguesource
   */
  interface UIStoryboardUnwindSegueSource extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uistoryboardunwindseguesource/1621917-sourceviewcontroller
    sourceViewController(): cocoascript.UIViewController;
    setSourceViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uistoryboardunwindseguesource/1621915-unwindaction
    unwindAction(): cocoascript.SEL;
    setUnwindAction(): void;
    // doc://com.apple.documentation/documentation/uikit/uistoryboardunwindseguesource/1621914-sender
    sender(): cocoascript.id;
    setSender(): void;
    //
    alloc():cocoascript.UIStoryboardUnwindSegueSource;
    //
    init():cocoascript.UIStoryboardUnwindSegueSource;
  }
}

declare const UIStoryboardUnwindSegueSource: cocoascript.UIStoryboardUnwindSegueSource;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uistoryboardviewcontrollercreator
  type UIStoryboardViewControllerCreator = cocoascript.NSCoder;
}
declare namespace cocoascript {
  /**
   * A container for a collection of images that represent multiple ways of describing a single piece of artwork.
   * doc://com.apple.documentation/documentation/uikit/uiimageasset
   */
  interface UIImageAsset extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiimageasset/1624977-init
    init():cocoascript.UIImageAsset;
    // doc://com.apple.documentation/documentation/uikit/uiimageasset/1624978-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIImageAsset;
    // doc://com.apple.documentation/documentation/uikit/uiimageasset/1624974-registerimage
    registerImage_withTraitCollection(image: cocoascript.UIImage, traitCollection: cocoascript.UITraitCollection):void;
    // doc://com.apple.documentation/documentation/uikit/uiimageasset/3295944-registerimage
    registerImage_withConfiguration(image: cocoascript.UIImage, configuration: cocoascript.UIImageConfiguration):void;
    // doc://com.apple.documentation/documentation/uikit/uiimageasset/1624973-unregisterimagewithtraitcollecti
    unregisterImageWithTraitCollection(traitCollection: cocoascript.UITraitCollection):void;
    // doc://com.apple.documentation/documentation/uikit/uiimageasset/3295945-unregisterimagewithconfiguration
    unregisterImageWithConfiguration(configuration: cocoascript.UIImageConfiguration):void;
    // doc://com.apple.documentation/documentation/uikit/uiimageasset/1624976-imagewithtraitcollection
    imageWithTraitCollection(traitCollection: cocoascript.UITraitCollection):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimageasset/3238043-imagewithconfiguration
    imageWithConfiguration(configuration: cocoascript.UIImageConfiguration):cocoascript.UIImage;
    //
    alloc():cocoascript.UIImageAsset;
    //
    init():cocoascript.UIImageAsset;
  }
}

declare const UIImageAsset: cocoascript.UIImageAsset;
declare namespace cocoascript {
  /**
   * An object that wraps, or contains, Interface Builder nib files.
   * doc://com.apple.documentation/documentation/uikit/uinib
   */
  interface UINib extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uinib/1614137-instantiatewithowner
    instantiateWithOwner_options(ownerOrNil: cocoascript.UINib, optionsOrNil: cocoascript.UINib):cocoascript.NSArray;
    //
    alloc():cocoascript.UINib;
    //
    init():cocoascript.UINib;
  }
}

declare const UINib: cocoascript.UINib;
declare const UINibProxiedObjectsKey: cocoascript.NSString;
declare namespace cocoascript {
  /**
   * The principal class for the Document Picker View Controller extension.
   * doc://com.apple.documentation/documentation/uikit/uidocumentpickerextensionviewcontroller
   */
  interface UIDocumentPickerExtensionViewController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerextensionviewcontroller/1614391-dismissgrantingaccesstourl
    dismissGrantingAccessToURL(url: cocoascript.NSURL):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerextensionviewcontroller/1614393-documentpickermode
    documentPickerMode(): cocoascript.UIDocumentPickerMode;
    setDocumentPickerMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerextensionviewcontroller/1614390-documentstorageurl
    documentStorageURL(): cocoascript.NSURL;
    setDocumentStorageURL(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerextensionviewcontroller/1614392-originalurl
    originalURL(): cocoascript.NSURL;
    setOriginalURL(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerextensionviewcontroller/1614395-prepareforpresentationinmode
    prepareForPresentationInMode(mode: cocoascript.UIDocumentPickerMode):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerextensionviewcontroller/1614396-provideridentifier
    providerIdentifier(): cocoascript.NSString;
    setProviderIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerextensionviewcontroller/1614394-validtypes
    validTypes(): cocoascript.NSString;
    setValidTypes(): void;
    //
    alloc():cocoascript.UIDocumentPickerExtensionViewController;
    //
    init():cocoascript.UIDocumentPickerExtensionViewController;
  }
}

declare const UIDocumentPickerExtensionViewController: cocoascript.UIDocumentPickerExtensionViewController;
declare namespace cocoascript {
  /**
   * An object that provides textual context to a custom keyboard.
   * doc://com.apple.documentation/documentation/uikit/uitextdocumentproxy
   */
  interface UITextDocumentProxy extends UIKeyInput {
    // doc://com.apple.documentation/documentation/uikit/uitextdocumentproxy/1649583-documentinputmode
    documentInputMode(): cocoascript.UITextInputMode;
    setDocumentInputMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdocumentproxy/1618199-documentcontextafterinput
    documentContextAfterInput(): cocoascript.NSString;
    setDocumentContextAfterInput(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdocumentproxy/1618190-documentcontextbeforeinput
    documentContextBeforeInput(): cocoascript.NSString;
    setDocumentContextBeforeInput(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdocumentproxy/1618194-adjusttextpositionbycharacteroff
    adjustTextPositionByCharacterOffset(offset: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uitextdocumentproxy/2875749-selectedtext
    selectedText(): cocoascript.NSString;
    setSelectedText(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdocumentproxy/3152923-setmarkedtext
    setMarkedText_selectedRange(markedText: cocoascript.NSString, selectedRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/uitextdocumentproxy/3152924-unmarktext
    unmarkText():void;
    // doc://com.apple.documentation/documentation/uikit/uitextdocumentproxy/2875742-documentidentifier
    documentIdentifier(): cocoascript.NSUUID;
    setDocumentIdentifier(): void;
  }
}
declare namespace cocoascript {
  /**
   * A property that enables a custom input or keyboard accessory view to play standard keyboard input clicks.
   * doc://com.apple.documentation/documentation/uikit/uiinputviewaudiofeedback
   */
  interface UIInputViewAudioFeedback extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiinputviewaudiofeedback/1620038-enableinputclickswhenvisible
    enableInputClicksWhenVisible(): cocoascript.BOOL;
    setEnableInputClicksWhenVisible(): void;
  }
}
declare namespace cocoascript {
  /**
   * The primary view controller for a custom keyboard app extension.
   * doc://com.apple.documentation/documentation/uikit/uiinputviewcontroller
   */
  interface UIInputViewController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uiinputviewcontroller/1618192-inputview
    inputView(): cocoascript.UIInputView;
    setInputView(): void;
    // doc://com.apple.documentation/documentation/uikit/uiinputviewcontroller/1618191-advancetonextinputmode
    advanceToNextInputMode():void;
    // doc://com.apple.documentation/documentation/uikit/uiinputviewcontroller/1618196-dismisskeyboard
    dismissKeyboard():void;
    // doc://com.apple.documentation/documentation/uikit/uiinputviewcontroller/1649584-handleinputmodelistfromview
    handleInputModeListFromView_withEvent(view: cocoascript.UIView, event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uiinputviewcontroller/1618193-textdocumentproxy
    textDocumentProxy(): cocoascript.UITextDocumentProxy;
    setTextDocumentProxy(): void;
    // doc://com.apple.documentation/documentation/uikit/uiinputviewcontroller/1618195-requestsupplementarylexiconwithc
    requestSupplementaryLexiconWithCompletion(completionHandler: cocoascript.UILexicon):void;
    // doc://com.apple.documentation/documentation/uikit/uiinputviewcontroller/1618200-primarylanguage
    primaryLanguage(): cocoascript.NSString;
    setPrimaryLanguage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiinputviewcontroller/2875741-needsinputmodeswitchkey
    needsInputModeSwitchKey(): cocoascript.BOOL;
    setNeedsInputModeSwitchKey(): void;
    // doc://com.apple.documentation/documentation/uikit/uiinputviewcontroller/2875763-hasfullaccess
    hasFullAccess(): cocoascript.BOOL;
    setHasFullAccess(): void;
    // doc://com.apple.documentation/documentation/uikit/uiinputviewcontroller/2932195-hasdictationkey
    hasDictationKey(): cocoascript.BOOL;
    setHasDictationKey(): void;
    //
    alloc():cocoascript.UIInputViewController;
    //
    init():cocoascript.UIInputViewController;
  }
}

declare const UIInputViewController: cocoascript.UIInputViewController;
declare namespace cocoascript {
  /**
   * A read-only array of term pairs, each in a lexicon entry object, for a custom keyboard.
   * doc://com.apple.documentation/documentation/uikit/uilexicon
   */
  interface UILexicon extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uilexicon/1614133-entries
    entries(): cocoascript.UILexiconEntry;
    setEntries(): void;
    //
    alloc():cocoascript.UILexicon;
    //
    init():cocoascript.UILexicon;
  }
}

declare const UILexicon: cocoascript.UILexicon;
declare namespace cocoascript {
  /**
   * A read-only term pair, available within a lexicon object, for a custom keyboard.
   * doc://com.apple.documentation/documentation/uikit/uilexiconentry
   */
  interface UILexiconEntry extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uilexiconentry/1614130-documenttext
    documentText(): cocoascript.NSString;
    setDocumentText(): void;
    // doc://com.apple.documentation/documentation/uikit/uilexiconentry/1614132-userinput
    userInput(): cocoascript.NSString;
    setUserInput(): void;
    //
    alloc():cocoascript.UILexiconEntry;
    //
    init():cocoascript.UILexiconEntry;
  }
}

declare const UILexiconEntry: cocoascript.UILexiconEntry;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uiuseractivityrestoring
   */
  interface UIUserActivityRestoring extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiuseractivityrestoring/2980936-restoreuseractivitystate
    restoreUserActivityState(userActivity: cocoascript.NSUserActivity):void;
  }
}
declare namespace cocoascript {
  /**
   * An abstract class that you subclass to implement app-specific services.
   * doc://com.apple.documentation/documentation/uikit/uiactivity
   */
  interface UIActivity extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiactivity/1620656-activitycategory
    activityCategory(): cocoascript.UIActivityCategory;
    setActivityCategory(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivity/1620671-activitytype
    activityType(): cocoascript.UIActivityType;
    setActivityType(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivity/1620674-activitytitle
    activityTitle(): cocoascript.NSString;
    setActivityTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivity/1620658-activityimage
    activityImage(): cocoascript.UIImage;
    setActivityImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivity/1620677-canperformwithactivityitems
    canPerformWithActivityItems(activityItems: cocoascript.NSArray):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiactivity/1620668-preparewithactivityitems
    prepareWithActivityItems(activityItems: cocoascript.NSArray):void;
    // doc://com.apple.documentation/documentation/uikit/uiactivity/1620678-activityviewcontroller
    activityViewController(): cocoascript.UIViewController;
    setActivityViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivity/1620659-performactivity
    performActivity():void;
    // doc://com.apple.documentation/documentation/uikit/uiactivity/1620679-activitydidfinish
    activityDidFinish(completed: cocoascript.BOOL):void;
    //
    alloc():cocoascript.UIActivity;
    //
    init():cocoascript.UIActivity;
  }
}

declare const UIActivity: cocoascript.UIActivity;
declare namespace cocoascript {
  /**
   * A view controller that you use to offer standard services from your app.
   * doc://com.apple.documentation/documentation/uikit/uiactivityviewcontroller
   */
  interface UIActivityViewController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uiactivityviewcontroller/1622019-initwithactivityitems
    initWithActivityItems_applicationActivities(activityItems: cocoascript.NSArray, applicationActivities: cocoascript.UIActivity):cocoascript.UIActivityViewController;
    // doc://com.apple.documentation/documentation/uikit/uiactivityviewcontroller/3626475-initwithactivityitemsconfigurati
    initWithActivityItemsConfiguration(activityItemsConfiguration: cocoascript.UIActivityItemsConfigurationReading):cocoascript.UIActivityViewController;
    // doc://com.apple.documentation/documentation/uikit/uiactivityviewcontroller/1622022-completionwithitemshandler
    completionWithItemsHandler(): cocoascript.UIActivityViewControllerCompletionWithItemsHandler;
    setCompletionWithItemsHandler(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivityviewcontroller/1622010-completionhandler
    completionHandler(): cocoascript.UIActivityViewControllerCompletionHandler;
    setCompletionHandler(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivityviewcontroller/1622009-excludedactivitytypes
    excludedActivityTypes(): cocoascript.UIActivityType;
    setExcludedActivityTypes(): void;
    //
    alloc():cocoascript.UIActivityViewController;
    //
    init():cocoascript.UIActivityViewController;
  }
}

declare const UIActivityViewController: cocoascript.UIActivityViewController;
declare namespace cocoascript {
  /**
   * A set of methods that an activity view controller uses to retrieve the data items to act on.
   * doc://com.apple.documentation/documentation/uikit/uiactivityitemsource
   */
  interface UIActivityItemSource extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsource/1620458-activityviewcontrollerplaceholde
    activityViewControllerPlaceholderItem(activityViewController: cocoascript.UIActivityViewController):cocoascript.UIActivityItemSource;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsource/1620453-activityviewcontroller
    activityViewController_itemForActivityType(activityViewController: cocoascript.UIActivityViewController, activityType: cocoascript.UIActivityType):cocoascript.UIActivityItemSource;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsource/1620455-activityviewcontroller
    activityViewController_subjectForActivityType(activityViewController: cocoascript.UIActivityViewController, activityType: cocoascript.UIActivityType):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsource/1620456-activityviewcontroller
    activityViewController_dataTypeIdentifierForActivityType(activityViewController: cocoascript.UIActivityViewController, activityType: cocoascript.UIActivityType):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsource/1620462-activityviewcontroller
    activityViewController_thumbnailImageForActivityType_suggestedSize(activityViewController: cocoascript.UIActivityViewController, activityType: cocoascript.UIActivityType, size: cocoascript.CGSize):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsource/3144571-activityviewcontrollerlinkmetada
    activityViewControllerLinkMetadata(activityViewController: cocoascript.UIActivityViewController):cocoascript.LPLinkMetadata;
  }
}
declare namespace cocoascript {
  /**
   * A proxy for data that passes to an activity view controller.
   * doc://com.apple.documentation/documentation/uikit/uiactivityitemprovider
   */
  interface UIActivityItemProvider extends NSOperation {
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemprovider/1620463-initwithplaceholderitem
    initWithPlaceholderItem(placeholderItem: cocoascript.UIActivityItemProvider):cocoascript.UIActivityItemProvider;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemprovider/1620457-item
    item(): cocoascript.id;
    setItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemprovider/1620454-placeholderitem
    placeholderItem(): cocoascript.id;
    setPlaceholderItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemprovider/1620459-activitytype
    activityType(): cocoascript.UIActivityType;
    setActivityType(): void;
    //
    alloc():cocoascript.UIActivityItemProvider;
    //
    init():cocoascript.UIActivityItemProvider;
  }
}

declare const UIActivityItemProvider: cocoascript.UIActivityItemProvider;
declare const UIDeviceOrientationDidChangeNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uideviceorientation
  type UIDeviceOrientation = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidevicebatterystate
  type UIDeviceBatteryState = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiuserinterfaceidiom
  type UIUserInterfaceIdiom = cocoascript.NSInteger;
}
declare const UIDeviceBatteryLevelDidChangeNotification: cocoascript.NSNotificationName;
declare const UIDeviceBatteryStateDidChangeNotification: cocoascript.NSNotificationName;
declare const UIDeviceProximityStateDidChangeNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nsdataassetname
  type NSDataAssetName = cocoascript.NSString;
}
declare namespace cocoascript {
  /**
   * A representation of the state of the data in a view at a specific point in time.
   * doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot
   */
  interface NSDiffableDataSourceSnapshot extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182897-appendsectionswithidentifiers
    appendSectionsWithIdentifiers(sectionIdentifiers: cocoascript.NSArray):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182896-appenditemswithidentifiers
    appendItemsWithIdentifiers_intoSectionWithIdentifier(identifiers: cocoascript.NSArray, sectionIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182895-appenditemswithidentifiers
    appendItemsWithIdentifiers(identifiers: cocoascript.NSArray):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182913-numberofitems
    numberOfItems(): cocoascript.NSInteger;
    setNumberOfItems(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182915-numberofsections
    numberOfSections(): cocoascript.NSInteger;
    setNumberOfSections(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182914-numberofitemsinsection
    numberOfItemsInSection(sectionIdentifier: cocoascript.):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182907-itemidentifiers
    itemIdentifiers(): cocoascript.ItemIdentifierType;
    setItemIdentifiers(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182919-sectionidentifiers
    sectionIdentifiers(): cocoascript.SectionIdentifierType;
    setSectionIdentifiers(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182901-indexofitemidentifier
    indexOfItemIdentifier(itemIdentifier: cocoascript.):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182902-indexofsectionidentifier
    indexOfSectionIdentifier(sectionIdentifier: cocoascript.):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182908-itemidentifiersinsectionwithiden
    itemIdentifiersInSectionWithIdentifier(sectionIdentifier: cocoascript.):cocoascript.NSArray;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182918-sectionidentifierforsectionconta
    sectionIdentifierForSectionContainingItemIdentifier(itemIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182903-insertitemswithidentifiers
    insertItemsWithIdentifiers_afterItemWithIdentifier(identifiers: cocoascript.NSArray, itemIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182904-insertitemswithidentifiers
    insertItemsWithIdentifiers_beforeItemWithIdentifier(identifiers: cocoascript.NSArray, itemIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182905-insertsectionswithidentifiers
    insertSectionsWithIdentifiers_afterSectionWithIdentifier(sectionIdentifiers: cocoascript.NSArray, toSectionIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182906-insertsectionswithidentifiers
    insertSectionsWithIdentifiers_beforeSectionWithIdentifier(sectionIdentifiers: cocoascript.NSArray, toSectionIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182898-deleteallitems
    deleteAllItems():void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182899-deleteitemswithidentifiers
    deleteItemsWithIdentifiers(identifiers: cocoascript.NSArray):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182900-deletesectionswithidentifiers
    deleteSectionsWithIdentifiers(sectionIdentifiers: cocoascript.NSArray):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182909-moveitemwithidentifier
    moveItemWithIdentifier(toIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182910-moveitemwithidentifier
    moveItemWithIdentifier(toIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182911-movesectionwithidentifier
    moveSectionWithIdentifier(toSectionIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182912-movesectionwithidentifier
    moveSectionWithIdentifier(toSectionIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182916-reloaditemswithidentifiers
    reloadItemsWithIdentifiers(identifiers: cocoascript.NSArray):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182917-reloadsectionswithidentifiers
    reloadSectionsWithIdentifiers(sectionIdentifiers: cocoascript.NSArray):void;
    //
    alloc():cocoascript.NSDiffableDataSourceSnapshot;
    //
    init():cocoascript.NSDiffableDataSourceSnapshot;
  }
}

declare const NSDiffableDataSourceSnapshot: cocoascript.NSDiffableDataSourceSnapshot;
declare namespace cocoascript {
  /**
   * A set of methods that provide layout support and access to layout anchors.
   * doc://com.apple.documentation/documentation/uikit/uilayoutsupport
   */
  interface UILayoutSupport extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uilayoutsupport/1622253-length
    length(): cocoascript.CGFloat;
    setLength(): void;
    // doc://com.apple.documentation/documentation/uikit/uilayoutsupport/1622239-bottomanchor
    bottomAnchor(): cocoascript.NSLayoutYAxisAnchor;
    setBottomAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilayoutsupport/1622236-heightanchor
    heightAnchor(): cocoascript.NSLayoutDimension;
    setHeightAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilayoutsupport/1622255-topanchor
    topAnchor(): cocoascript.NSLayoutYAxisAnchor;
    setTopAnchor(): void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uilayoutpriority
  type UILayoutPriority = number;
}
declare const UILayoutPriorityRequired: cocoascript.UILayoutPriority;
declare const UILayoutPriorityDefaultHigh: cocoascript.UILayoutPriority;
declare const UILayoutPriorityDefaultLow: cocoascript.UILayoutPriority;
declare const UILayoutPriorityFittingSizeLevel: cocoascript.UILayoutPriority;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nslayoutrelation
  type NSLayoutRelation = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nslayoutattribute
  type NSLayoutAttribute = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nslayoutformatoptions
  type NSLayoutFormatOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uilayoutconstraintaxis
  type UILayoutConstraintAxis = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * A rectangular area that can interact with Auto Layout.
   * doc://com.apple.documentation/documentation/uikit/uilayoutguide
   */
  interface UILayoutGuide extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uilayoutguide/1619655-identifier
    identifier(): cocoascript.NSString;
    setIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uilayoutguide/1619657-layoutframe
    layoutFrame(): cocoascript.CGRect;
    setLayoutFrame(): void;
    // doc://com.apple.documentation/documentation/uikit/uilayoutguide/1619648-owningview
    owningView(): cocoascript.UIView;
    setOwningView(): void;
    // doc://com.apple.documentation/documentation/uikit/uilayoutguide/1619661-bottomanchor
    bottomAnchor(): cocoascript.NSLayoutYAxisAnchor;
    setBottomAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilayoutguide/1619654-centerxanchor
    centerXAnchor(): cocoascript.NSLayoutXAxisAnchor;
    setCenterXAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilayoutguide/1619659-centeryanchor
    centerYAnchor(): cocoascript.NSLayoutYAxisAnchor;
    setCenterYAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilayoutguide/1619652-heightanchor
    heightAnchor(): cocoascript.NSLayoutDimension;
    setHeightAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilayoutguide/1619658-leadinganchor
    leadingAnchor(): cocoascript.NSLayoutXAxisAnchor;
    setLeadingAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilayoutguide/1619656-leftanchor
    leftAnchor(): cocoascript.NSLayoutXAxisAnchor;
    setLeftAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilayoutguide/1619649-rightanchor
    rightAnchor(): cocoascript.NSLayoutXAxisAnchor;
    setRightAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilayoutguide/1619650-topanchor
    topAnchor(): cocoascript.NSLayoutYAxisAnchor;
    setTopAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilayoutguide/1619660-trailinganchor
    trailingAnchor(): cocoascript.NSLayoutXAxisAnchor;
    setTrailingAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilayoutguide/1619653-widthanchor
    widthAnchor(): cocoascript.NSLayoutDimension;
    setWidthAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilayoutguide/1648534-constraintsaffectinglayoutforaxi
    constraintsAffectingLayoutForAxis(axis: cocoascript.UILayoutConstraintAxis):cocoascript.NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/uikit/uilayoutguide/1648533-hasambiguouslayout
    hasAmbiguousLayout(): cocoascript.BOOL;
    setHasAmbiguousLayout(): void;
    //
    alloc():cocoascript.UILayoutGuide;
    //
    init():cocoascript.UILayoutGuide;
  }
}

declare const UILayoutGuide: cocoascript.UILayoutGuide;
declare namespace cocoascript {
  /**
   * The interface for configuring and controlling a drag interaction.
   * doc://com.apple.documentation/documentation/uikit/uidraginteractiondelegate
   */
  interface UIDragInteractionDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidraginteractiondelegate/2891010-draginteraction
    dragInteraction_itemsForBeginningSession(interaction: cocoascript.UIDragInteraction, session: cocoascript.UIDragSession):cocoascript.UIDragItem;
    // doc://com.apple.documentation/documentation/uikit/uidraginteractiondelegate/2890968-draginteraction
    dragInteraction_itemsForAddingToSession_withTouchAtPoint(interaction: cocoascript.UIDragInteraction, session: cocoascript.UIDragSession, point: cocoascript.CGPoint):cocoascript.UIDragItem;
    // doc://com.apple.documentation/documentation/uikit/uidraginteractiondelegate/2891004-draginteraction
    dragInteraction_sessionForAddingItems_withTouchAtPoint(interaction: cocoascript.UIDragInteraction, sessions: cocoascript.UIDragSession, point: cocoascript.CGPoint):cocoascript.UIDragSession;
    // doc://com.apple.documentation/documentation/uikit/uidraginteractiondelegate/2891005-draginteraction
    dragInteraction_willAnimateLiftWithAnimator_session(interaction: cocoascript.UIDragInteraction, animator: cocoascript.UIDragAnimating, session: cocoascript.UIDragSession):void;
    // doc://com.apple.documentation/documentation/uikit/uidraginteractiondelegate/2891027-draginteraction
    dragInteraction_item_willAnimateCancelWithAnimator(interaction: cocoascript.UIDragInteraction, item: cocoascript.UIDragItem, animator: cocoascript.UIDragAnimating):void;
    // doc://com.apple.documentation/documentation/uikit/uidraginteractiondelegate/2891055-draginteraction
    dragInteraction_sessionWillBegin(interaction: cocoascript.UIDragInteraction, session: cocoascript.UIDragSession):void;
    // doc://com.apple.documentation/documentation/uikit/uidraginteractiondelegate/2890993-draginteraction
    dragInteraction_session_willAddItems_forInteraction(interaction: cocoascript.UIDragInteraction, session: cocoascript.UIDragSession, items: cocoascript.UIDragItem, addingInteraction: cocoascript.UIDragInteraction):void;
    // doc://com.apple.documentation/documentation/uikit/uidraginteractiondelegate/2890988-draginteraction
    dragInteraction_sessionDidMove(interaction: cocoascript.UIDragInteraction, session: cocoascript.UIDragSession):void;
    // doc://com.apple.documentation/documentation/uikit/uidraginteractiondelegate/2891032-draginteraction
    dragInteraction_session_willEndWithOperation(interaction: cocoascript.UIDragInteraction, session: cocoascript.UIDragSession, operation: cocoascript.UIDropOperation):void;
    // doc://com.apple.documentation/documentation/uikit/uidraginteractiondelegate/2891012-draginteraction
    dragInteraction_session_didEndWithOperation(interaction: cocoascript.UIDragInteraction, session: cocoascript.UIDragSession, operation: cocoascript.UIDropOperation):void;
    // doc://com.apple.documentation/documentation/uikit/uidraginteractiondelegate/2891014-draginteraction
    dragInteraction_sessionDidTransferItems(interaction: cocoascript.UIDragInteraction, session: cocoascript.UIDragSession):void;
    // doc://com.apple.documentation/documentation/uikit/uidraginteractiondelegate/2891057-draginteraction
    dragInteraction_previewForLiftingItem_session(interaction: cocoascript.UIDragInteraction, item: cocoascript.UIDragItem, session: cocoascript.UIDragSession):cocoascript.UITargetedDragPreview;
    // doc://com.apple.documentation/documentation/uikit/uidraginteractiondelegate/2890967-draginteraction
    dragInteraction_previewForCancellingItem_withDefault(interaction: cocoascript.UIDragInteraction, item: cocoascript.UIDragItem, defaultPreview: cocoascript.UITargetedDragPreview):cocoascript.UITargetedDragPreview;
    // doc://com.apple.documentation/documentation/uikit/uidraginteractiondelegate/2891028-draginteraction
    dragInteraction_prefersFullSizePreviewsForSession(interaction: cocoascript.UIDragInteraction, session: cocoascript.UIDragSession):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uidraginteractiondelegate/2891063-draginteraction
    dragInteraction_sessionIsRestrictedToDraggingApplication(interaction: cocoascript.UIDragInteraction, session: cocoascript.UIDragSession):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uidraginteractiondelegate/2890978-draginteraction
    dragInteraction_sessionAllowsMoveOperation(interaction: cocoascript.UIDragInteraction, session: cocoascript.UIDragSession):cocoascript.BOOL;
  }
}
declare namespace cocoascript {
  /**
   * The interface for configuring and controlling a drop interaction.
   * doc://com.apple.documentation/documentation/uikit/uidropinteractiondelegate
   */
  interface UIDropInteractionDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidropinteractiondelegate/2890887-dropinteraction
    dropInteraction_canHandleSession(interaction: cocoascript.UIDropInteraction, session: cocoascript.UIDropSession):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uidropinteractiondelegate/2890889-dropinteraction
    dropInteraction_performDrop(interaction: cocoascript.UIDropInteraction, session: cocoascript.UIDropSession):void;
    // doc://com.apple.documentation/documentation/uikit/uidropinteractiondelegate/2890880-dropinteraction
    dropInteraction_sessionDidEnter(interaction: cocoascript.UIDropInteraction, session: cocoascript.UIDropSession):void;
    // doc://com.apple.documentation/documentation/uikit/uidropinteractiondelegate/2890888-dropinteraction
    dropInteraction_sessionDidUpdate(interaction: cocoascript.UIDropInteraction, session: cocoascript.UIDropSession):cocoascript.UIDropProposal;
    // doc://com.apple.documentation/documentation/uikit/uidropinteractiondelegate/2890893-dropinteraction
    dropInteraction_sessionDidExit(interaction: cocoascript.UIDropInteraction, session: cocoascript.UIDropSession):void;
    // doc://com.apple.documentation/documentation/uikit/uidropinteractiondelegate/2890879-dropinteraction
    dropInteraction_sessionDidEnd(interaction: cocoascript.UIDropInteraction, session: cocoascript.UIDropSession):void;
    // doc://com.apple.documentation/documentation/uikit/uidropinteractiondelegate/2890896-dropinteraction
    dropInteraction_item_willAnimateDropWithAnimator(interaction: cocoascript.UIDropInteraction, item: cocoascript.UIDragItem, animator: cocoascript.UIDragAnimating):void;
    // doc://com.apple.documentation/documentation/uikit/uidropinteractiondelegate/2890870-dropinteraction
    dropInteraction_previewForDroppingItem_withDefault(interaction: cocoascript.UIDropInteraction, item: cocoascript.UIDragItem, defaultPreview: cocoascript.UITargetedDragPreview):cocoascript.UITargetedDragPreview;
    // doc://com.apple.documentation/documentation/uikit/uidropinteractiondelegate/2890898-dropinteraction
    dropInteraction_concludeDrop(interaction: cocoascript.UIDropInteraction, session: cocoascript.UIDropSession):void;
  }
}
declare namespace cocoascript {
  /**
   * An interaction to enable dragging of items from a view, employing a delegate to provide drag items and to respond to calls from the drag session.
   * doc://com.apple.documentation/documentation/uikit/uidraginteraction
   */
  interface UIDragInteraction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidraginteraction/2890982-initwithdelegate
    initWithDelegate(delegate: cocoascript.UIDragInteractionDelegate):cocoascript.UIDragInteraction;
    // doc://com.apple.documentation/documentation/uikit/uidraginteraction/2919986-allowssimultaneousrecognitiondur
    allowsSimultaneousRecognitionDuringLift(): cocoascript.BOOL;
    setAllowsSimultaneousRecognitionDuringLift(): void;
    // doc://com.apple.documentation/documentation/uikit/uidraginteraction/2891021-delegate
    delegate(): cocoascript.UIDragInteractionDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uidraginteraction/2891015-enabled
    enabled(): cocoascript.BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uidraginteraction/2891051-enabledbydefault
    enabledByDefault(): cocoascript.BOOL;
    setEnabledByDefault(): void;
    //
    alloc():cocoascript.UIDragInteraction;
    //
    init():cocoascript.UIDragInteraction;
  }
}

declare const UIDragInteraction: cocoascript.UIDragInteraction;
declare namespace cocoascript {
  /**
   * An interaction to enable dropping of items onto a view, employing a delegate to instantiate objects and respond to calls from the drop session.
   * doc://com.apple.documentation/documentation/uikit/uidropinteraction
   */
  interface UIDropInteraction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidropinteraction/2890891-initwithdelegate
    initWithDelegate(delegate: cocoascript.UIDropInteractionDelegate):cocoascript.UIDropInteraction;
    // doc://com.apple.documentation/documentation/uikit/uidropinteraction/2890890-delegate
    delegate(): cocoascript.UIDropInteractionDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uidropinteraction/2890871-allowssimultaneousdropsessions
    allowsSimultaneousDropSessions(): cocoascript.BOOL;
    setAllowsSimultaneousDropSessions(): void;
    //
    alloc():cocoascript.UIDropInteraction;
    //
    init():cocoascript.UIDropInteraction;
  }
}

declare const UIDropInteraction: cocoascript.UIDropInteraction;
declare namespace cocoascript {
  /**
   * The interface for specifying the behavior of a spring-loaded interaction.
   * doc://com.apple.documentation/documentation/uikit/uispringloadedinteractionbehavior
   */
  interface UISpringLoadedInteractionBehavior extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uispringloadedinteractionbehavior/2897297-shouldallowinteraction
    shouldAllowInteraction_withContext(interaction: cocoascript.UISpringLoadedInteraction, context: cocoascript.UISpringLoadedInteractionContext):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uispringloadedinteractionbehavior/2897322-interactiondidfinish
    interactionDidFinish(interaction: cocoascript.UISpringLoadedInteraction):void;
  }
}
declare namespace cocoascript {
  /**
   * The interface that determines if an object supports a spring-loaded interaction for drag and drop activities.
   * doc://com.apple.documentation/documentation/uikit/uispringloadedinteractionsupporting
   */
  interface UISpringLoadedInteractionSupporting extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uispringloadedinteractionsupporting/2897189-springloaded
    springLoaded(): cocoascript.BOOL;
    setSpringLoaded(): void;
  }
}
declare namespace cocoascript {
  /**
   * An interaction object for configuring and controlling spring-loaded, user-driven navigation during a drag activity.
   * doc://com.apple.documentation/documentation/uikit/uispringloadedinteraction
   */
  interface UISpringLoadedInteraction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uispringloadedinteraction/2897337-initwithinteractionbehavior
    initWithInteractionBehavior_interactionEffect_activationHandler(interactionBehavior: cocoascript.UISpringLoadedInteractionBehavior, interactionEffect: cocoascript.UISpringLoadedInteractionEffect, handler: cocoascript.UISpringLoadedInteractionContext):cocoascript.UISpringLoadedInteraction;
    // doc://com.apple.documentation/documentation/uikit/uispringloadedinteraction/2897354-initwithactivationhandler
    initWithActivationHandler(handler: cocoascript.UISpringLoadedInteractionContext):cocoascript.UISpringLoadedInteraction;
    // doc://com.apple.documentation/documentation/uikit/uispringloadedinteraction/2897325-interactionbehavior
    interactionBehavior(): cocoascript.UISpringLoadedInteractionBehavior;
    setInteractionBehavior(): void;
    // doc://com.apple.documentation/documentation/uikit/uispringloadedinteraction/2897379-interactioneffect
    interactionEffect(): cocoascript.UISpringLoadedInteractionEffect;
    setInteractionEffect(): void;
    //
    alloc():cocoascript.UISpringLoadedInteraction;
    //
    init():cocoascript.UISpringLoadedInteraction;
  }
}

declare const UISpringLoadedInteraction: cocoascript.UISpringLoadedInteraction;
declare namespace cocoascript {
  /**
   * The interface an object implements to provide information about a spring-loaded interaction.
   * doc://com.apple.documentation/documentation/uikit/uispringloadedinteractioncontext
   */
  interface UISpringLoadedInteractionContext extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uispringloadedinteractioncontext/2897357-state
    state(): cocoascript.UISpringLoadedInteractionEffectState;
    setState(): void;
    // doc://com.apple.documentation/documentation/uikit/uispringloadedinteractioncontext/2897330-targetitem
    targetItem(): cocoascript.id;
    setTargetItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uispringloadedinteractioncontext/2897394-targetview
    targetView(): cocoascript.UIView;
    setTargetView(): void;
    // doc://com.apple.documentation/documentation/uikit/uispringloadedinteractioncontext/2897468-locationinview
    locationInView(view: cocoascript.UIView):cocoascript.CGPoint;
  }
}
declare namespace cocoascript {
  /**
   * The interface for providing visual styling to a spring-loaded interaction based on the interaction state.
   * doc://com.apple.documentation/documentation/uikit/uispringloadedinteractioneffect
   */
  interface UISpringLoadedInteractionEffect extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uispringloadedinteractioneffect/2897374-interaction
    interaction_didChangeWithContext(interaction: cocoascript.UISpringLoadedInteraction, context: cocoascript.UISpringLoadedInteractionContext):void;
  }
}
declare namespace cocoascript {
  /**
   * A representation of an underlying data item being dragged from one location to another.
   * doc://com.apple.documentation/documentation/uikit/uidragitem
   */
  interface UIDragItem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidragitem/2890994-initwithitemprovider
    initWithItemProvider(itemProvider: cocoascript.NSItemProvider):cocoascript.UIDragItem;
    // doc://com.apple.documentation/documentation/uikit/uidragitem/2890975-itemprovider
    itemProvider(): cocoascript.NSItemProvider;
    setItemProvider(): void;
    // doc://com.apple.documentation/documentation/uikit/uidragitem/2890981-localobject
    localObject(): cocoascript.id;
    setLocalObject(): void;
    // doc://com.apple.documentation/documentation/uikit/uidragitem/2890972-previewprovider
    previewProvider(): void;
    setPreviewProvider(): void;
    //
    alloc():cocoascript.UIDragItem;
    //
    init():cocoascript.UIDragItem;
  }
}

declare const UIDragItem: cocoascript.UIDragItem;
declare namespace cocoascript {
  /**
   * The common interface for querying the state of both drag sessions and drop sessions.
   * doc://com.apple.documentation/documentation/uikit/uidragdropsession
   */
  interface UIDragDropSession extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidragdropsession/2903561-canloadobjectsofclass
    canLoadObjectsOfClass(aClass: cocoascript.NSItemProviderReading):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uidragdropsession/2891006-hasitemsconformingtotypeidentifi
    hasItemsConformingToTypeIdentifiers(typeIdentifiers: cocoascript.NSString):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uidragdropsession/2891030-items
    items(): cocoascript.UIDragItem;
    setItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uidragdropsession/2891062-allowsmoveoperation
    allowsMoveOperation(): cocoascript.BOOL;
    setAllowsMoveOperation(): void;
    // doc://com.apple.documentation/documentation/uikit/uidragdropsession/2890983-restrictedtodraggingapplication
    restrictedToDraggingApplication(): cocoascript.BOOL;
    setRestrictedToDraggingApplication(): void;
    // doc://com.apple.documentation/documentation/uikit/uidragdropsession/2891049-locationinview
    locationInView(view: cocoascript.UIView):cocoascript.CGPoint;
  }
}
declare namespace cocoascript {
  /**
   * The interface for configuring a drag session.
   * doc://com.apple.documentation/documentation/uikit/uidragsession
   */
  interface UIDragSession extends UIDragDropSession {
    // doc://com.apple.documentation/documentation/uikit/uidragsession/2891033-localcontext
    localContext(): cocoascript.id;
    setLocalContext(): void;
  }
}
declare namespace cocoascript {
  /**
   * The interface for providing custom animation alongside the system's lift, drop, and cancellation animations.
   * doc://com.apple.documentation/documentation/uikit/uidraganimating
   */
  interface UIDragAnimating extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidraganimating/2890977-addanimations
    addAnimations(animations: void):void;
    // doc://com.apple.documentation/documentation/uikit/uidraganimating/2891061-addcompletion
    addCompletion(completion: cocoascript.UIViewAnimatingPosition):void;
  }
}
declare namespace cocoascript {
  /**
   * The interface for querying a drop session about its state and associated drag items.
   * doc://com.apple.documentation/documentation/uikit/uidropsession
   */
  interface UIDropSession extends NSProgressReporting {
    // doc://com.apple.documentation/documentation/uikit/uidropsession/2890985-localdragsession
    localDragSession(): cocoascript.UIDragSession;
    setLocalDragSession(): void;
    // doc://com.apple.documentation/documentation/uikit/uidropsession/2891058-loadobjectsofclass
    loadObjectsOfClass_completion(aClass: cocoascript.NSItemProviderReading, completion: cocoascript.NSItemProviderReading):cocoascript.NSProgress;
    // doc://com.apple.documentation/documentation/uikit/uidropsession/2890980-progressindicatorstyle
    progressIndicatorStyle(): cocoascript.UIDropSessionProgressIndicatorStyle;
    setProgressIndicatorStyle(): void;
  }
}
declare namespace cocoascript {
  /**
   * A configuration for the behavior of a drop interaction, required if a view accepts drop activities.
   * doc://com.apple.documentation/documentation/uikit/uidropproposal
   */
  interface UIDropProposal extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidropproposal/2890886-initwithdropoperation
    initWithDropOperation(operation: cocoascript.UIDropOperation):cocoascript.UIDropProposal;
    // doc://com.apple.documentation/documentation/uikit/uidropproposal/2890877-operation
    operation(): cocoascript.UIDropOperation;
    setOperation(): void;
    // doc://com.apple.documentation/documentation/uikit/uidropproposal/2890897-precise
    precise(): cocoascript.BOOL;
    setPrecise(): void;
    // doc://com.apple.documentation/documentation/uikit/uidropproposal/2890884-prefersfullsizepreview
    prefersFullSizePreview(): cocoascript.BOOL;
    setPrefersFullSizePreview(): void;
    //
    alloc():cocoascript.UIDropProposal;
    //
    init():cocoascript.UIDropProposal;
  }
}

declare const UIDropProposal: cocoascript.UIDropProposal;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidropoperation
  type UIDropOperation = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidropsessionprogressindicatorstyle
  type UIDropSessionProgressIndicatorStyle = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uiitemproviderpresentationsizeproviding
   */
  interface UIItemProviderPresentationSizeProviding extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiitemproviderpresentationsizeproviding/2921674-preferredpresentationsizeforitem
    preferredPresentationSizeForItemProvider(): cocoascript.CGSize;
    setPreferredPresentationSizeForItemProvider(): void;
  }
}
declare namespace cocoascript {
  /**
   * A set of parameters for adjusting the appearance of a drag item preview or a targeted drag item preview.
   * doc://com.apple.documentation/documentation/uikit/uidragpreviewparameters
   */
  interface UIDragPreviewParameters extends UIPreviewParameters {
    //
    alloc():cocoascript.UIDragPreviewParameters;
    //
    init():cocoascript.UIDragPreviewParameters;
  }
}

declare const UIDragPreviewParameters: cocoascript.UIDragPreviewParameters;
declare namespace cocoascript {
  /**
   * A graphical preview for a single drag item, used by the system after a drag has started and when no related animation is running.
   * doc://com.apple.documentation/documentation/uikit/uidragpreview
   */
  interface UIDragPreview extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidragpreview/2890915-initwithview
    initWithView(view: cocoascript.UIView):cocoascript.UIDragPreview;
    // doc://com.apple.documentation/documentation/uikit/uidragpreview/2890918-initwithview
    initWithView_parameters(view: cocoascript.UIView, parameters: cocoascript.UIDragPreviewParameters):cocoascript.UIDragPreview;
    // doc://com.apple.documentation/documentation/uikit/uidragpreview/2890925-parameters
    parameters(): cocoascript.UIDragPreviewParameters;
    setParameters(): void;
    // doc://com.apple.documentation/documentation/uikit/uidragpreview/2890924-view
    view(): cocoascript.UIView;
    setView(): void;
    //
    alloc():cocoascript.UIDragPreview;
    //
    init():cocoascript.UIDragPreview;
  }
}

declare const UIDragPreview: cocoascript.UIDragPreview;
declare namespace cocoascript {
  /**
   * A geometric specification for the source or destination of a drag item preview, used by the system when a user drops items or cancels a drag activity.
   * doc://com.apple.documentation/documentation/uikit/uidragpreviewtarget
   */
  interface UIDragPreviewTarget extends UIPreviewTarget {
    //
    alloc():cocoascript.UIDragPreviewTarget;
    //
    init():cocoascript.UIDragPreviewTarget;
  }
}

declare const UIDragPreviewTarget: cocoascript.UIDragPreviewTarget;
declare namespace cocoascript {
  /**
   * A drag item preview used by the system during lift, drop, or cancellation animation.
   * doc://com.apple.documentation/documentation/uikit/uitargeteddragpreview
   */
  interface UITargetedDragPreview extends UITargetedPreview {
    // doc://com.apple.documentation/documentation/uikit/uitargeteddragpreview/2890950-retargetedpreviewwithtarget
    retargetedPreviewWithTarget(newTarget: cocoascript.UIDragPreviewTarget):cocoascript.UITargetedDragPreview;
    //
    alloc():cocoascript.UITargetedDragPreview;
    //
    init():cocoascript.UITargetedDragPreview;
  }
}

declare const UITargetedDragPreview: cocoascript.UITargetedDragPreview;
declare namespace cocoascript {
  /**
   * An object that manages image data in your app.
   * doc://com.apple.documentation/documentation/uikit/uiimage
   */
  interface UIImage extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624112-initwithcontentsoffile
    initWithContentsOfFile(path: cocoascript.NSString):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624106-initwithdata
    initWithData(data: cocoascript.NSData):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624109-initwithdata
    initWithData_scale(data: cocoascript.NSData, scale: cocoascript.CGFloat):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624090-initwithcgimage
    initWithCGImage(cgImage: cocoascript.CGImageRef):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624091-initwithcgimage
    initWithCGImage_scale_orientation(cgImage: cocoascript.CGImageRef, scale: cocoascript.CGFloat, orientation: cocoascript.UIImageOrientation):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624114-initwithciimage
    initWithCIImage(ciImage: cocoascript.CIImage):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624150-initwithciimage
    initWithCIImage_scale_orientation(ciImage: cocoascript.CIImage, scale: cocoascript.CGFloat, orientation: cocoascript.UIImageOrientation):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/3294228-imagewithconfiguration
    imageWithConfiguration(configuration: cocoascript.UIImageConfiguration):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/3294225-imagebyapplyingsymbolconfigurati
    imageByApplyingSymbolConfiguration(configuration: cocoascript.UIImageSymbolConfiguration):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624140-imageflippedforrighttoleftlayout
    imageFlippedForRightToLeftLayoutDirection():cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/2113668-imagewithhorizontallyflippedorie
    imageWithHorizontallyFlippedOrientation():cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624153-imagewithrenderingmode
    imageWithRenderingMode(renderingMode: cocoascript.UIImageRenderingMode):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624100-imagewithalignmentrectinsets
    imageWithAlignmentRectInsets(alignmentInsets: cocoascript.UIEdgeInsets):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624102-resizableimagewithcapinsets
    resizableImageWithCapInsets(capInsets: cocoascript.UIEdgeInsets):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624127-resizableimagewithcapinsets
    resizableImageWithCapInsets_resizingMode(capInsets: cocoascript.UIEdgeInsets, resizingMode: cocoascript.UIImageResizingMode):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/3294229-imagewithoutbaseline
    imageWithoutBaseline():cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/3294227-imagewithbaselineoffsetfrombotto
    imageWithBaselineOffsetFromBottom(baselineOffset: cocoascript.CGFloat):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/3294220-addimage
    addImage(): cocoascript.UIImage;
    setAddImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/3294230-removeimage
    removeImage(): cocoascript.UIImage;
    setRemoveImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/3294219-actionsimage
    actionsImage(): cocoascript.UIImage;
    setActionsImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/3343561-checkmarkimage
    checkmarkImage(): cocoascript.UIImage;
    setCheckmarkImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/3343562-strokedcheckmarkimage
    strokedCheckmarkImage(): cocoascript.UIImage;
    setStrokedCheckmarkImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624147-cgimage
    CGImage(): cocoascript.CGImageRef;
    setCGImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624159-cgimage
    CGImage():cocoascript.CGImageRef;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624129-ciimage
    CIImage(): cocoascript.CIImage;
    setCIImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624117-images
    images(): cocoascript.UIImage;
    setImages(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624151-imageasset
    imageAsset(): cocoascript.UIImageAsset;
    setImageAsset(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624110-scale
    scale(): cocoascript.CGFloat;
    setScale(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624105-size
    size(): cocoascript.CGSize;
    setSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624141-imageorientation
    imageOrientation(): cocoascript.UIImageOrientation;
    setImageOrientation(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624128-flipsforrighttoleftlayoutdirecti
    flipsForRightToLeftLayoutDirection(): cocoascript.BOOL;
    setFlipsForRightToLeftLayoutDirection(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624157-resizingmode
    resizingMode(): cocoascript.UIImageResizingMode;
    setResizingMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624155-duration
    duration(): cocoascript.NSTimeInterval;
    setDuration(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624097-capinsets
    capInsets(): cocoascript.UIEdgeInsets;
    setCapInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624139-alignmentrectinsets
    alignmentRectInsets(): cocoascript.UIEdgeInsets;
    setAlignmentRectInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/3294232-symbolimage
    symbolImage(): cocoascript.BOOL;
    setSymbolImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/3294223-configuration
    configuration(): cocoascript.UIImageConfiguration;
    setConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/3294231-symbolconfiguration
    symbolConfiguration(): cocoascript.UIImageSymbolConfiguration;
    setSymbolConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624158-traitcollection
    traitCollection(): cocoascript.UITraitCollection;
    setTraitCollection(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/3294224-hasbaseline
    hasBaseline(): cocoascript.BOOL;
    setHasBaseline(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/3294221-baselineoffsetfrombottom
    baselineOffsetFromBottom(): cocoascript.CGFloat;
    setBaselineOffsetFromBottom(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624122-renderingmode
    renderingMode(): cocoascript.UIImageRenderingMode;
    setRenderingMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1649497-imagerendererformat
    imageRendererFormat(): cocoascript.UIGraphicsImageRendererFormat;
    setImageRendererFormat(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/3327300-imagewithtintcolor
    imageWithTintColor(color: cocoascript.UIColor):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/3327301-imagewithtintcolor
    imageWithTintColor_renderingMode(color: cocoascript.UIColor, renderingMode: cocoascript.UIImageRenderingMode):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624132-drawatpoint
    drawAtPoint(point: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624095-drawatpoint
    drawAtPoint_blendMode_alpha(point: cocoascript.CGPoint, blendMode: cocoascript.CGBlendMode, alpha: cocoascript.CGFloat):void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624092-drawinrect
    drawInRect(rect: cocoascript.CGRect):void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624101-drawinrect
    drawInRect_blendMode_alpha(rect: cocoascript.CGRect, blendMode: cocoascript.CGBlendMode, alpha: cocoascript.CGFloat):void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624144-drawaspatterninrect
    drawAsPatternInRect(rect: cocoascript.CGRect):void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624145-stretchableimagewithleftcapwidth
    stretchableImageWithLeftCapWidth_topCapHeight(leftCapWidth: cocoascript.NSInteger, topCapHeight: cocoascript.NSInteger):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624148-leftcapwidth
    leftCapWidth(): cocoascript.NSInteger;
    setLeftCapWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimage/1624116-topcapheight
    topCapHeight(): cocoascript.NSInteger;
    setTopCapHeight(): void;
    //
    alloc():cocoascript.UIImage;
    //
    init():cocoascript.UIImage;
  }
}

declare const UIImage: cocoascript.UIImage;
declare const UIImageJPEGRepresentation: cocoascript.CGFloat;
declare const UIImagePNGRepresentation: cocoascript.UIImage;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uibaselineadjustment
  type UIBaselineAdjustment = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uilinebreakmode
  type UILineBreakMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextalignment
  type UITextAlignment = cocoascript.NSInteger;
}
declare const NSShadowAttributeName: cocoascript.NSAttributedStringKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nstextalignment
  type NSTextAlignment = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nswritingdirection
  type NSWritingDirection = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nstextstorageeditactions
  type NSTextStorageEditActions = cocoascript.NSUInteger;
}
declare const NSTextStorageWillProcessEditingNotification: cocoascript.NSNotificationName;
declare const NSTextStorageDidProcessEditingNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nstextscalingtype
  type NSTextScalingType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nsglyphproperty
  type NSGlyphProperty = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nstextlayoutorientation
  type NSTextLayoutOrientation = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nstexteffectstyle
  type NSTextEffectStyle = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nswritingdirectionformattype
  type NSWritingDirectionFormatType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nsunderlinestyle
  type NSUnderlineStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nsattributedstringdocumentattributekey
  type NSAttributedStringDocumentAttributeKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nsattributedstringdocumenttype
  type NSAttributedStringDocumentType = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nstextlayoutsectionkey
  type NSTextLayoutSectionKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nsattributedstringdocumentreadingoptionkey
  type NSAttributedStringDocumentReadingOptionKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nstextwritingdirection
  type NSTextWritingDirection = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nscontrolcharacteraction
  type NSControlCharacterAction = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nslinebreakmode
  type NSLineBreakMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nstexttaboptionkey
  type NSTextTabOptionKey = cocoascript.NSString;
}
declare const NSAttachmentAttributeName: cocoascript.NSAttributedStringKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uifontdescriptorsymbolictraits
  type UIFontDescriptorSymbolicTraits = number;
}
declare const NSBackgroundColorAttributeName: cocoascript.NSAttributedStringKey;
declare const NSBaselineOffsetAttributeName: cocoascript.NSAttributedStringKey;
declare const NSExpansionAttributeName: cocoascript.NSAttributedStringKey;
declare const NSFontAttributeName: cocoascript.NSAttributedStringKey;
declare const NSForegroundColorAttributeName: cocoascript.NSAttributedStringKey;
declare const NSKernAttributeName: cocoascript.NSAttributedStringKey;
declare const NSLigatureAttributeName: cocoascript.NSAttributedStringKey;
declare const NSLinkAttributeName: cocoascript.NSAttributedStringKey;
declare const NSObliquenessAttributeName: cocoascript.NSAttributedStringKey;
declare const NSParagraphStyleAttributeName: cocoascript.NSAttributedStringKey;
declare const NSStrikethroughColorAttributeName: cocoascript.NSAttributedStringKey;
declare const NSStrikethroughStyleAttributeName: cocoascript.NSAttributedStringKey;
declare const NSStrokeColorAttributeName: cocoascript.NSAttributedStringKey;
declare const NSStrokeWidthAttributeName: cocoascript.NSAttributedStringKey;
declare const NSTextEffectAttributeName: cocoascript.NSAttributedStringKey;
declare const NSUnderlineColorAttributeName: cocoascript.NSAttributedStringKey;
declare const NSUnderlineStyleAttributeName: cocoascript.NSAttributedStringKey;
declare const NSVerticalGlyphFormAttributeName: cocoascript.NSAttributedStringKey;
declare namespace cocoascript {
  /**
   * The base class for controls, which are visual elements that convey a specific action or intention in response to user interactions.
   * doc://com.apple.documentation/documentation/uikit/uicontrol
   */
  interface UIControl extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618245-state
    state(): cocoascript.UIControlState;
    setState(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618217-enabled
    enabled(): cocoascript.BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618203-selected
    selected(): cocoascript.BOOL;
    setSelected(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618231-highlighted
    highlighted(): cocoascript.BOOL;
    setHighlighted(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618249-contentverticalalignment
    contentVerticalAlignment(): cocoascript.UIControlContentVerticalAlignment;
    setContentVerticalAlignment(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618213-contenthorizontalalignment
    contentHorizontalAlignment(): cocoascript.UIControlContentHorizontalAlignment;
    setContentHorizontalAlignment(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/2866070-effectivecontenthorizontalalignm
    effectiveContentHorizontalAlignment(): cocoascript.UIControlContentHorizontalAlignment;
    setEffectiveContentHorizontalAlignment(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618259-addtarget
    addTarget_action_forControlEvents(target: cocoascript.UIControl, action: cocoascript.SEL, controlEvents: cocoascript.UIControlEvents):void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618248-removetarget
    removeTarget_action_forControlEvents(target: cocoascript.UIControl, action: cocoascript.SEL, controlEvents: cocoascript.UIControlEvents):void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618251-actionsfortarget
    actionsForTarget_forControlEvent(target: cocoascript.UIControl, controlEvent: cocoascript.UIControlEvents):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618225-allcontrolevents
    allControlEvents(): cocoascript.UIControlEvents;
    setAllControlEvents(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618207-alltargets
    allTargets(): cocoascript.NSSet;
    setAllTargets(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618237-sendaction
    sendAction_to_forEvent(action: cocoascript.SEL, target: cocoascript.UIControl, event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618211-sendactionsforcontrolevents
    sendActionsForControlEvents(controlEvents: cocoascript.UIControlEvents):void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618227-begintrackingwithtouch
    beginTrackingWithTouch_withEvent(touch: cocoascript.UITouch, event: cocoascript.UIEvent):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618216-continuetrackingwithtouch
    continueTrackingWithTouch_withEvent(touch: cocoascript.UITouch, event: cocoascript.UIEvent):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618234-endtrackingwithtouch
    endTrackingWithTouch_withEvent(touch: cocoascript.UITouch, event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618219-canceltrackingwithevent
    cancelTrackingWithEvent(event: cocoascript.UIEvent):void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618210-tracking
    tracking(): cocoascript.BOOL;
    setTracking(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/1618229-touchinside
    touchInside(): cocoascript.BOOL;
    setTouchInside(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/3600490-addaction
    addAction_forControlEvents(action: cocoascript.UIAction, controlEvents: cocoascript.UIControlEvents):void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/3601216-contextmenuinteraction
    contextMenuInteraction_configurationForMenuAtLocation(interaction: cocoascript.UIContextMenuInteraction, location: cocoascript.CGPoint):cocoascript.UIContextMenuConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/3601217-contextmenuinteraction
    contextMenuInteraction_previewForDismissingMenuWithConfiguration(interaction: cocoascript.UIContextMenuInteraction, configuration: cocoascript.UIContextMenuConfiguration):cocoascript.UITargetedPreview;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/3601218-contextmenuinteraction
    contextMenuInteraction_previewForHighlightingMenuWithConfiguration(interaction: cocoascript.UIContextMenuInteraction, configuration: cocoascript.UIContextMenuConfiguration):cocoascript.UITargetedPreview;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/3601219-contextmenuinteraction
    contextMenuInteraction_willDisplayMenuForConfiguration_animator(interaction: cocoascript.UIContextMenuInteraction, configuration: cocoascript.UIContextMenuConfiguration, animator: cocoascript.UIContextMenuInteractionAnimating):void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/3601220-contextmenuinteraction
    contextMenuInteraction_willEndForConfiguration_animator(interaction: cocoascript.UIContextMenuInteraction, configuration: cocoascript.UIContextMenuConfiguration, animator: cocoascript.UIContextMenuInteractionAnimating):void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/3656349-menuattachmentpointforconfigurat
    menuAttachmentPointForConfiguration(configuration: cocoascript.UIContextMenuConfiguration):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/3600495-removeaction
    removeAction_forControlEvents(action: cocoascript.UIAction, controlEvents: cocoascript.UIControlEvents):void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/3600496-removeactionforidentifier
    removeActionForIdentifier_forControlEvents(actionIdentifier: cocoascript.UIActionIdentifier, controlEvents: cocoascript.UIControlEvents):void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/3600497-sendaction
    sendAction(action: cocoascript.UIAction):void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/3600491-enumerateeventhandlers
    enumerateEventHandlers(iterator: cocoascript.UIControlEvents):void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/3600492-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIControl;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/3600493-initwithframe
    initWithFrame(frame: cocoascript.CGRect):cocoascript.UIControl;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/3600494-initwithframe
    initWithFrame_primaryAction(frame: cocoascript.CGRect, primaryAction: cocoascript.UIAction):cocoascript.UIControl;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/3601215-contextmenuinteraction
    contextMenuInteraction(): cocoascript.UIContextMenuInteraction;
    setContextMenuInteraction(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/3601222-contextmenuinteractionenabled
    contextMenuInteractionEnabled(): cocoascript.BOOL;
    setContextMenuInteractionEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontrol/3601223-showsmenuasprimaryaction
    showsMenuAsPrimaryAction(): cocoascript.BOOL;
    setShowsMenuAsPrimaryAction(): void;
    //
    alloc():cocoascript.UIControl;
    //
    init():cocoascript.UIControl;
  }
}

declare const UIControl: cocoascript.UIControl;
declare namespace cocoascript {
  /**
   * A set of methods for defining the positioning of bars in iOS apps.
   * doc://com.apple.documentation/documentation/uikit/uibarpositioning
   */
  interface UIBarPositioning extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uibarpositioning/1624857-barposition
    barPosition(): cocoascript.UIBarPosition;
    setBarPosition(): void;
  }
}
declare namespace cocoascript {
  /**
   * A view that allows the scrolling and zooming of its contained views.
   * doc://com.apple.documentation/documentation/uikit/uiscrollview
   */
  interface UIScrollView extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619430-delegate
    delegate(): cocoascript.UIScrollViewDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619399-contentsize
    contentSize(): cocoascript.CGSize;
    setContentSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619404-contentoffset
    contentOffset(): cocoascript.CGPoint;
    setContentOffset(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619400-setcontentoffset
    setContentOffset_animated(contentOffset: cocoascript.CGPoint, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/2902259-adjustedcontentinset
    adjustedContentInset(): cocoascript.UIEdgeInsets;
    setAdjustedContentInset(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619406-contentinset
    contentInset(): cocoascript.UIEdgeInsets;
    setContentInset(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/2902261-contentinsetadjustmentbehavior
    contentInsetAdjustmentBehavior(): cocoascript.UIScrollViewContentInsetAdjustmentBehavior;
    setContentInsetAdjustmentBehavior(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/2902254-adjustedcontentinsetdidchange
    adjustedContentInsetDidChange():void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/2865772-framelayoutguide
    frameLayoutGuide(): cocoascript.UILayoutGuide;
    setFrameLayoutGuide(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/2865870-contentlayoutguide
    contentLayoutGuide(): cocoascript.UILayoutGuide;
    setContentLayoutGuide(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619395-scrollenabled
    scrollEnabled(): cocoascript.BOOL;
    setScrollEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619390-directionallockenabled
    directionalLockEnabled(): cocoascript.BOOL;
    setDirectionalLockEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619432-pagingenabled
    pagingEnabled(): cocoascript.BOOL;
    setPagingEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619421-scrollstotop
    scrollsToTop(): cocoascript.BOOL;
    setScrollsToTop(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619420-bounces
    bounces(): cocoascript.BOOL;
    setBounces(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619383-alwaysbouncevertical
    alwaysBounceVertical(): cocoascript.BOOL;
    setAlwaysBounceVertical(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619393-alwaysbouncehorizontal
    alwaysBounceHorizontal(): cocoascript.BOOL;
    setAlwaysBounceHorizontal(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619413-tracking
    tracking(): cocoascript.BOOL;
    setTracking(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619384-dragging
    dragging(): cocoascript.BOOL;
    setDragging(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619434-decelerating
    decelerating(): cocoascript.BOOL;
    setDecelerating(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619438-decelerationrate
    decelerationRate(): cocoascript.UIScrollViewDecelerationRate;
    setDecelerationRate(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619433-indicatorstyle
    indicatorStyle(): cocoascript.UIScrollViewIndicatorStyle;
    setIndicatorStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619427-scrollindicatorinsets
    scrollIndicatorInsets():cocoascript.UIEdgeInsets;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619380-showshorizontalscrollindicator
    showsHorizontalScrollIndicator(): cocoascript.BOOL;
    setShowsHorizontalScrollIndicator(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619405-showsverticalscrollindicator
    showsVerticalScrollIndicator(): cocoascript.BOOL;
    setShowsVerticalScrollIndicator(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619435-flashscrollindicators
    flashScrollIndicators():void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/2127691-refreshcontrol
    refreshControl(): cocoascript.UIRefreshControl;
    setRefreshControl(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619439-scrollrecttovisible
    scrollRectToVisible_animated(rect: cocoascript.CGRect, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619418-touchesshouldbegin
    touchesShouldBegin_withEvent_inContentView(touches: cocoascript.UITouch, event: cocoascript.UIEvent, view: cocoascript.UIView):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619387-touchesshouldcancelincontentview
    touchesShouldCancelInContentView(view: cocoascript.UIView):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619424-cancancelcontenttouches
    canCancelContentTouches(): cocoascript.BOOL;
    setCanCancelContentTouches(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619398-delayscontenttouches
    delaysContentTouches(): cocoascript.BOOL;
    setDelaysContentTouches(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1627702-directionalpressgesturerecognize
    directionalPressGestureRecognizer(): cocoascript.UIGestureRecognizer;
    setDirectionalPressGestureRecognizer(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619425-pangesturerecognizer
    panGestureRecognizer(): cocoascript.UIPanGestureRecognizer;
    setPanGestureRecognizer(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619381-pinchgesturerecognizer
    pinchGestureRecognizer(): cocoascript.UIPinchGestureRecognizer;
    setPinchGestureRecognizer(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619388-zoomtorect
    zoomToRect_animated(rect: cocoascript.CGRect, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619419-zoomscale
    zoomScale(): cocoascript.CGFloat;
    setZoomScale(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619412-setzoomscale
    setZoomScale_animated(scale: cocoascript.CGFloat, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619408-maximumzoomscale
    maximumZoomScale(): cocoascript.CGFloat;
    setMaximumZoomScale(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619428-minimumzoomscale
    minimumZoomScale(): cocoascript.CGFloat;
    setMinimumZoomScale(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619423-zoombouncing
    zoomBouncing(): cocoascript.BOOL;
    setZoomBouncing(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619429-zooming
    zooming(): cocoascript.BOOL;
    setZooming(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619410-bounceszoom
    bouncesZoom(): cocoascript.BOOL;
    setBouncesZoom(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/1619437-keyboarddismissmode
    keyboardDismissMode(): cocoascript.UIScrollViewKeyboardDismissMode;
    setKeyboardDismissMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/2851452-indexdisplaymode
    indexDisplayMode(): cocoascript.UIScrollViewIndexDisplayMode;
    setIndexDisplayMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/3198043-automaticallyadjustsscrollindica
    automaticallyAdjustsScrollIndicatorInsets(): cocoascript.BOOL;
    setAutomaticallyAdjustsScrollIndicatorInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/3198044-horizontalscrollindicatorinsets
    horizontalScrollIndicatorInsets(): cocoascript.UIEdgeInsets;
    setHorizontalScrollIndicatorInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollview/3198045-verticalscrollindicatorinsets
    verticalScrollIndicatorInsets(): cocoascript.UIEdgeInsets;
    setVerticalScrollIndicatorInsets(): void;
    //
    alloc():cocoascript.UIScrollView;
    //
    init():cocoascript.UIScrollView;
  }
}

declare const UIScrollView: cocoascript.UIScrollView;
declare namespace cocoascript {
  /**
   * A view that embeds web content in your app.
   * doc://com.apple.documentation/documentation/uikit/uiwebview
   */
  interface UIWebView extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617937-delegate
    delegate(): cocoascript.UIWebViewDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617941-loaddata
    loadData_MIMEType_textEncodingName_baseURL(data: cocoascript.NSData, MIMEType: cocoascript.NSString, textEncodingName: cocoascript.NSString, baseURL: cocoascript.NSURL):void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617979-loadhtmlstring
    loadHTMLString_baseURL(string: cocoascript.NSString, baseURL: cocoascript.NSURL):void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617957-loadrequest
    loadRequest(request: cocoascript.NSURLRequest):void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617972-request
    request(): cocoascript.NSURLRequest;
    setRequest(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617978-loading
    loading(): cocoascript.BOOL;
    setLoading(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617974-stoploading
    stopLoading():void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617932-reload
    reload():void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617931-cangoback
    canGoBack(): cocoascript.BOOL;
    setCanGoBack(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617951-cangoforward
    canGoForward(): cocoascript.BOOL;
    setCanGoForward(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617975-goback
    goBack():void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617940-goforward
    goForward():void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617976-allowslinkpreview
    allowsLinkPreview(): cocoascript.BOOL;
    setAllowsLinkPreview(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617950-scalespagetofit
    scalesPageToFit(): cocoascript.BOOL;
    setScalesPageToFit(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617955-scrollview
    scrollView(): cocoascript.UIScrollView;
    setScrollView(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617984-suppressesincrementalrendering
    suppressesIncrementalRendering(): cocoascript.BOOL;
    setSuppressesIncrementalRendering(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617967-keyboarddisplayrequiresuseractio
    keyboardDisplayRequiresUserAction(): cocoascript.BOOL;
    setKeyboardDisplayRequiresUserAction(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617965-datadetectortypes
    dataDetectorTypes(): cocoascript.UIDataDetectorTypes;
    setDataDetectorTypes(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617963-stringbyevaluatingjavascriptfrom
    stringByEvaluatingJavaScriptFromString(script: cocoascript.NSString):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617960-allowsinlinemediaplayback
    allowsInlineMediaPlayback(): cocoascript.BOOL;
    setAllowsInlineMediaPlayback(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617954-mediaplaybackrequiresuseraction
    mediaPlaybackRequiresUserAction(): cocoascript.BOOL;
    setMediaPlaybackRequiresUserAction(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617973-mediaplaybackallowsairplay
    mediaPlaybackAllowsAirPlay(): cocoascript.BOOL;
    setMediaPlaybackAllowsAirPlay(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617944-allowspictureinpicturemediaplayb
    allowsPictureInPictureMediaPlayback(): cocoascript.BOOL;
    setAllowsPictureInPictureMediaPlayback(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617943-gapbetweenpages
    gapBetweenPages(): cocoascript.CGFloat;
    setGapBetweenPages(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617968-pagecount
    pageCount(): cocoascript.NSUInteger;
    setPageCount(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617980-pagelength
    pageLength(): cocoascript.CGFloat;
    setPageLength(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617933-paginationbreakingmode
    paginationBreakingMode(): cocoascript.UIWebPaginationBreakingMode;
    setPaginationBreakingMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617985-paginationmode
    paginationMode(): cocoascript.UIWebPaginationMode;
    setPaginationMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwebview/1617952-detectsphonenumbers
    detectsPhoneNumbers(): cocoascript.BOOL;
    setDetectsPhoneNumbers(): void;
    //
    alloc():cocoascript.UIWebView;
    //
    init():cocoascript.UIWebView;
  }
}

declare const UIWebView: cocoascript.UIWebView;
declare namespace cocoascript {
  /**
   * A view that displays one or more lines of informational text.
   * doc://com.apple.documentation/documentation/uikit/uilabel
   */
  interface UILabel extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620538-text
    text(): cocoascript.NSString;
    setText(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620542-attributedtext
    attributedText(): cocoascript.NSAttributedString;
    setAttributedText(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620532-font
    font(): cocoascript.UIFont;
    setFont(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620531-textcolor
    textColor(): cocoascript.UIColor;
    setTextColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620541-textalignment
    textAlignment(): cocoascript.NSTextAlignment;
    setTextAlignment(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620525-linebreakmode
    lineBreakMode(): cocoascript.NSLineBreakMode;
    setLineBreakMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620530-enabled
    enabled(): cocoascript.BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/2967087-enablesmarqueewhenancestorfocuse
    enablesMarqueeWhenAncestorFocused(): cocoascript.BOOL;
    setEnablesMarqueeWhenAncestorFocused(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620546-adjustsfontsizetofitwidth
    adjustsFontSizeToFitWidth(): cocoascript.BOOL;
    setAdjustsFontSizeToFitWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620533-allowsdefaulttighteningfortrunca
    allowsDefaultTighteningForTruncation(): cocoascript.BOOL;
    setAllowsDefaultTighteningForTruncation(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620524-baselineadjustment
    baselineAdjustment(): cocoascript.UIBaselineAdjustment;
    setBaselineAdjustment(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620544-minimumscalefactor
    minimumScaleFactor(): cocoascript.CGFloat;
    setMinimumScaleFactor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620539-numberoflines
    numberOfLines(): cocoascript.NSInteger;
    setNumberOfLines(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620535-adjustsletterspacingtofitwidth
    adjustsLetterSpacingToFitWidth(): cocoascript.BOOL;
    setAdjustsLetterSpacingToFitWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620529-minimumfontsize
    minimumFontSize(): cocoascript.CGFloat;
    setMinimumFontSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620540-highlightedtextcolor
    highlightedTextColor(): cocoascript.UIColor;
    setHighlightedTextColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620526-highlighted
    highlighted(): cocoascript.BOOL;
    setHighlighted(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620536-shadowcolor
    shadowColor(): cocoascript.UIColor;
    setShadowColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620528-shadowoffset
    shadowOffset(): cocoascript.CGSize;
    setShadowOffset(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620545-textrectforbounds
    textRectForBounds_limitedToNumberOfLines(bounds: cocoascript.CGRect, numberOfLines: cocoascript.NSInteger):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620527-drawtextinrect
    drawTextInRect(rect: cocoascript.CGRect):void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620534-preferredmaxlayoutwidth
    preferredMaxLayoutWidth(): cocoascript.CGFloat;
    setPreferredMaxLayoutWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/1620543-userinteractionenabled
    userInteractionEnabled(): cocoascript.BOOL;
    setUserInteractionEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uilabel/3667730-linebreakstrategy
    lineBreakStrategy(): cocoascript.NSLineBreakStrategy;
    setLineBreakStrategy(): void;
    //
    alloc():cocoascript.UILabel;
    //
    init():cocoascript.UILabel;
  }
}

declare const UILabel: cocoascript.UILabel;
declare namespace cocoascript {
  /**
   * A view for displaying and editing text and search tokens.
   * doc://com.apple.documentation/documentation/uikit/uisearchtextfield
   */
  interface UISearchTextField extends UITextField {
    // doc://com.apple.documentation/documentation/uikit/uisearchtextfield/3175440-replacetextualportionofrange
    replaceTextualPortionOfRange_withToken_atIndex(textRange: cocoascript.UITextRange, token: cocoascript.UISearchToken, tokenIndex: cocoascript.NSUInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchtextfield/3175441-textualrange
    textualRange(): cocoascript.UITextRange;
    setTextualRange(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchtextfield/3175436-allowsdeletingtokens
    allowsDeletingTokens(): cocoascript.BOOL;
    setAllowsDeletingTokens(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchtextfield/3175435-allowscopyingtokens
    allowsCopyingTokens(): cocoascript.BOOL;
    setAllowsCopyingTokens(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextfield/1619595-delegate
    delegate(): cocoascript.UITextFieldDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchtextfield/3175443-tokens
    tokens(): cocoascript.UISearchToken;
    setTokens(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchtextfield/3175437-inserttoken
    insertToken_atIndex(token: cocoascript.UISearchToken, tokenIndex: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchtextfield/3175439-removetokenatindex
    removeTokenAtIndex(tokenIndex: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchtextfield/3175442-tokenbackgroundcolor
    tokenBackgroundColor(): cocoascript.UIColor;
    setTokenBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchtextfield/3175444-tokensinrange
    tokensInRange(textRange: cocoascript.UITextRange):cocoascript.UISearchToken;
    // doc://com.apple.documentation/documentation/uikit/uisearchtextfield/3175438-positionoftokenatindex
    positionOfTokenAtIndex(tokenIndex: cocoascript.NSInteger):cocoascript.UITextPosition;
    //
    alloc():cocoascript.UISearchTextField;
    //
    init():cocoascript.UISearchTextField;
  }
}

declare const UISearchTextField: cocoascript.UISearchTextField;
declare namespace cocoascript {
  /**
   * Search criteria in a search text field, represented by text and an optional icon.
   * doc://com.apple.documentation/documentation/uikit/uisearchtoken
   */
  interface UISearchToken extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uisearchtoken/3175448-representedobject
    representedObject(): cocoascript.id;
    setRepresentedObject(): void;
    //
    alloc():cocoascript.UISearchToken;
    //
    init():cocoascript.UISearchToken;
  }
}

declare const UISearchToken: cocoascript.UISearchToken;
declare namespace cocoascript {
  /**
   * A method that supports cutting, copying, and dragging tokens from a search field.
   * doc://com.apple.documentation/documentation/uikit/uisearchtextfielddelegate
   */
  interface UISearchTextFieldDelegate extends UITextFieldDelegate {
    // doc://com.apple.documentation/documentation/uikit/uisearchtextfielddelegate/3175446-searchtextfield
    searchTextField_itemProviderForCopyingToken(searchTextField: cocoascript.UISearchTextField, token: cocoascript.UISearchToken):cocoascript.NSItemProvider;
  }
}
declare namespace cocoascript {
  /**
   * An initializer for visual effect views and blur and vibrancy effect objects.
   * doc://com.apple.documentation/documentation/uikit/uivisualeffect
   */
  interface UIVisualEffect extends NSObject {
    //
    alloc():cocoascript.UIVisualEffect;
    //
    init():cocoascript.UIVisualEffect;
  }
}

declare const UIVisualEffect: cocoascript.UIVisualEffect;
declare namespace cocoascript {
  /**
   * An object that implements some complex visual effects.
   * doc://com.apple.documentation/documentation/uikit/uivisualeffectview
   */
  interface UIVisualEffectView extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uivisualeffectview/1615051-initwitheffect
    initWithEffect(effect: cocoascript.UIVisualEffect):cocoascript.UIVisualEffectView;
    // doc://com.apple.documentation/documentation/uikit/uivisualeffectview/1615054-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIVisualEffectView;
    // doc://com.apple.documentation/documentation/uikit/uivisualeffectview/1615068-contentview
    contentView(): cocoascript.UIView;
    setContentView(): void;
    // doc://com.apple.documentation/documentation/uikit/uivisualeffectview/1615072-effect
    effect(): cocoascript.UIVisualEffect;
    setEffect(): void;
    //
    alloc():cocoascript.UIVisualEffectView;
    //
    init():cocoascript.UIVisualEffectView;
  }
}

declare const UIVisualEffectView: cocoascript.UIVisualEffectView;
declare namespace cocoascript {
  /**
   * An object that amplifies and adjusts the color of the content layered behind a visual effect view.
   * doc://com.apple.documentation/documentation/uikit/uivibrancyeffect
   */
  interface UIVibrancyEffect extends UIVisualEffect {
    //
    alloc():cocoascript.UIVibrancyEffect;
    //
    init():cocoascript.UIVibrancyEffect;
  }
}

declare const UIVibrancyEffect: cocoascript.UIVibrancyEffect;
declare namespace cocoascript {
  /**
   * An object that applies a blurring effect to the content layered behind a visual effect view.
   * doc://com.apple.documentation/documentation/uikit/uiblureffect
   */
  interface UIBlurEffect extends UIVisualEffect {
    //
    alloc():cocoascript.UIBlurEffect;
    //
    init():cocoascript.UIBlurEffect;
  }
}

declare const UIBlurEffect: cocoascript.UIBlurEffect;
declare namespace cocoascript {
  /**
   * An abstract superclass for items that you can add to a bar that appears at the bottom of the screen.
   * doc://com.apple.documentation/documentation/uikit/uibaritem
   */
  interface UIBarItem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uibaritem/1616411-init
    init():cocoascript.UIBarItem;
    // doc://com.apple.documentation/documentation/uikit/uibaritem/1616416-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIBarItem;
    // doc://com.apple.documentation/documentation/uikit/uibaritem/1616412-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uibaritem/1616415-image
    image(): cocoascript.UIImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uibaritem/1616421-landscapeimagephone
    landscapeImagePhone(): cocoascript.UIImage;
    setLandscapeImagePhone(): void;
    // doc://com.apple.documentation/documentation/uikit/uibaritem/2865917-largecontentsizeimage
    largeContentSizeImage(): cocoascript.UIImage;
    setLargeContentSizeImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uibaritem/1616413-imageinsets
    imageInsets(): cocoascript.UIEdgeInsets;
    setImageInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uibaritem/1616420-landscapeimagephoneinsets
    landscapeImagePhoneInsets(): cocoascript.UIEdgeInsets;
    setLandscapeImagePhoneInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uibaritem/2865781-largecontentsizeimageinsets
    largeContentSizeImageInsets(): cocoascript.UIEdgeInsets;
    setLargeContentSizeImageInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uibaritem/1616418-enabled
    enabled(): cocoascript.BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uibaritem/1616419-tag
    tag(): cocoascript.NSInteger;
    setTag(): void;
    // doc://com.apple.documentation/documentation/uikit/uibaritem/1616414-settitletextattributes
    setTitleTextAttributes_forState(attributes: cocoascript.UIBarItem, state: cocoascript.UIControlState):void;
    // doc://com.apple.documentation/documentation/uikit/uibaritem/1616422-titletextattributesforstate
    titleTextAttributesForState(state: cocoascript.UIControlState):cocoascript.UIBarItem;
    //
    alloc():cocoascript.UIBarItem;
    //
    init():cocoascript.UIBarItem;
  }
}

declare const UIBarItem: cocoascript.UIBarItem;
declare namespace cocoascript {
  /**
   * A specialized button for placement on a toolbar or tab bar.
   * doc://com.apple.documentation/documentation/uikit/uibarbuttonitem
   */
  interface UIBarButtonItem extends UIBarItem {
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617153-initwithbarbuttonsystemitem
    initWithBarButtonSystemItem_target_action(systemItem: cocoascript.UIBarButtonSystemItem, target: cocoascript.UIBarButtonItem, action: cocoascript.SEL):cocoascript.UIBarButtonItem;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617151-initwithcustomview
    initWithCustomView(customView: cocoascript.UIView):cocoascript.UIBarButtonItem;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617163-initwithimage
    initWithImage_style_target_action(image: cocoascript.UIImage, style: cocoascript.UIBarButtonItemStyle, target: cocoascript.UIBarButtonItem, action: cocoascript.SEL):cocoascript.UIBarButtonItem;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617148-initwithtitle
    initWithTitle_style_target_action(title: cocoascript.NSString, style: cocoascript.UIBarButtonItemStyle, target: cocoascript.UIBarButtonItem, action: cocoascript.SEL):cocoascript.UIBarButtonItem;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617118-initwithimage
    initWithImage_landscapeImagePhone_style_target_action(image: cocoascript.UIImage, landscapeImagePhone: cocoascript.UIImage, style: cocoascript.UIBarButtonItemStyle, target: cocoascript.UIBarButtonItem, action: cocoascript.SEL):cocoascript.UIBarButtonItem;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617166-init
    init():cocoascript.UIBarButtonItem;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617111-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIBarButtonItem;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/3600340-initwithbarbuttonsystemitem
    initWithBarButtonSystemItem_menu(systemItem: cocoascript.UIBarButtonSystemItem, menu: cocoascript.UIMenu):cocoascript.UIBarButtonItem;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/3600341-initwithbarbuttonsystemitem
    initWithBarButtonSystemItem_primaryAction(systemItem: cocoascript.UIBarButtonSystemItem, primaryAction: cocoascript.UIAction):cocoascript.UIBarButtonItem;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/3600342-initwithimage
    initWithImage_menu(image: cocoascript.UIImage, menu: cocoascript.UIMenu):cocoascript.UIBarButtonItem;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/3600343-initwithprimaryaction
    initWithPrimaryAction(primaryAction: cocoascript.UIAction):cocoascript.UIBarButtonItem;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/3600344-initwithtitle
    initWithTitle_menu(title: cocoascript.NSString, menu: cocoascript.UIMenu):cocoascript.UIBarButtonItem;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617154-target
    target(): cocoascript.id;
    setTarget(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617127-action
    action(): cocoascript.SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617114-style
    style(): cocoascript.UIBarButtonItemStyle;
    setStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617132-possibletitles
    possibleTitles(): cocoascript.NSString;
    setPossibleTitles(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617155-width
    width(): cocoascript.CGFloat;
    setWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617129-customview
    customView(): cocoascript.UIView;
    setCustomView(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/3601188-menu
    menu(): cocoascript.UIMenu;
    setMenu(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/3600345-primaryaction
    primaryAction(): cocoascript.UIAction;
    setPrimaryAction(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617135-tintcolor
    tintColor(): cocoascript.UIColor;
    setTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617125-backbuttonbackgroundimageforstat
    backButtonBackgroundImageForState_barMetrics(state: cocoascript.UIControlState, barMetrics: cocoascript.UIBarMetrics):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617128-setbackbuttonbackgroundimage
    setBackButtonBackgroundImage_forState_barMetrics(backgroundImage: cocoascript.UIImage, state: cocoascript.UIControlState, barMetrics: cocoascript.UIBarMetrics):void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617145-backbuttontitlepositionadjustmen
    backButtonTitlePositionAdjustmentForBarMetrics(barMetrics: cocoascript.UIBarMetrics):cocoascript.UIOffset;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617139-setbackbuttontitlepositionadjust
    setBackButtonTitlePositionAdjustment_forBarMetrics(adjustment: cocoascript.UIOffset, barMetrics: cocoascript.UIBarMetrics):void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617120-backbuttonbackgroundverticalposi
    backButtonBackgroundVerticalPositionAdjustmentForBarMetrics(barMetrics: cocoascript.UIBarMetrics):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617124-setbackbuttonbackgroundverticalp
    setBackButtonBackgroundVerticalPositionAdjustment_forBarMetrics(adjustment: cocoascript.CGFloat, barMetrics: cocoascript.UIBarMetrics):void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617143-backgroundverticalpositionadjust
    backgroundVerticalPositionAdjustmentForBarMetrics(barMetrics: cocoascript.UIBarMetrics):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617141-setbackgroundverticalpositionadj
    setBackgroundVerticalPositionAdjustment_forBarMetrics(adjustment: cocoascript.CGFloat, barMetrics: cocoascript.UIBarMetrics):void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617134-backgroundimageforstate
    backgroundImageForState_barMetrics(state: cocoascript.UIControlState, barMetrics: cocoascript.UIBarMetrics):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617138-setbackgroundimage
    setBackgroundImage_forState_barMetrics(backgroundImage: cocoascript.UIImage, state: cocoascript.UIControlState, barMetrics: cocoascript.UIBarMetrics):void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617117-backgroundimageforstate
    backgroundImageForState_style_barMetrics(state: cocoascript.UIControlState, style: cocoascript.UIBarButtonItemStyle, barMetrics: cocoascript.UIBarMetrics):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617161-setbackgroundimage
    setBackgroundImage_forState_style_barMetrics(backgroundImage: cocoascript.UIImage, state: cocoascript.UIControlState, style: cocoascript.UIBarButtonItemStyle, barMetrics: cocoascript.UIBarMetrics):void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617160-titlepositionadjustmentforbarmet
    titlePositionAdjustmentForBarMetrics(barMetrics: cocoascript.UIBarMetrics):cocoascript.UIOffset;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1617149-settitlepositionadjustment
    setTitlePositionAdjustment_forBarMetrics(adjustment: cocoascript.UIOffset, barMetrics: cocoascript.UIBarMetrics):void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitem/1623564-buttongroup
    buttonGroup(): cocoascript.UIBarButtonItemGroup;
    setButtonGroup(): void;
    //
    alloc():cocoascript.UIBarButtonItem;
    //
    init():cocoascript.UIBarButtonItem;
  }
}

declare const UIBarButtonItem: cocoascript.UIBarButtonItem;
declare namespace cocoascript {
  /**
   * A set of bar button items on the shortcuts bar above the keyboard on the iPad.
   * doc://com.apple.documentation/documentation/uikit/uibarbuttonitemgroup
   */
  interface UIBarButtonItemGroup extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemgroup/1623559-initwithbarbuttonitems
    initWithBarButtonItems_representativeItem(barButtonItems: cocoascript.UIBarButtonItem, representativeItem: cocoascript.UIBarButtonItem):cocoascript.UIBarButtonItemGroup;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemgroup/1623562-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIBarButtonItemGroup;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemgroup/1623565-barbuttonitems
    barButtonItems(): cocoascript.UIBarButtonItem;
    setBarButtonItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemgroup/1623563-representativeitem
    representativeItem(): cocoascript.UIBarButtonItem;
    setRepresentativeItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemgroup/1623560-displayingrepresentativeitem
    displayingRepresentativeItem(): cocoascript.BOOL;
    setDisplayingRepresentativeItem(): void;
    //
    alloc():cocoascript.UIBarButtonItemGroup;
    //
    init():cocoascript.UIBarButtonItemGroup;
  }
}

declare const UIBarButtonItemGroup: cocoascript.UIBarButtonItemGroup;
declare namespace cocoascript {
  /**
   * Navigational controls that display in a bar along the top of the screen, usually in conjunction with a navigation controller.
   * doc://com.apple.documentation/documentation/uikit/uinavigationbar
   */
  interface UINavigationBar extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uinavigationbar/1624951-delegate
    delegate(): cocoascript.UINavigationBarDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbar/1624952-pushnavigationitem
    pushNavigationItem_animated(item: cocoascript.UINavigationItem, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbar/1624969-popnavigationitemanimated
    popNavigationItemAnimated(animated: cocoascript.BOOL):cocoascript.UINavigationItem;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbar/1624945-setitems
    setItems_animated(items: cocoascript.UINavigationItem, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbar/1624961-items
    items(): cocoascript.UINavigationItem;
    setItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbar/1624967-topitem
    topItem(): cocoascript.UINavigationItem;
    setTopItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbar/1624925-backitem
    backItem(): cocoascript.UINavigationItem;
    setBackItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbar/2908999-preferslargetitles
    prefersLargeTitles(): cocoascript.BOOL;
    setPrefersLargeTitles(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbar/3198028-standardappearance
    standardAppearance(): cocoascript.UINavigationBarAppearance;
    setStandardAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbar/3198026-compactappearance
    compactAppearance(): cocoascript.UINavigationBarAppearance;
    setCompactAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbar/3198027-scrolledgeappearance
    scrollEdgeAppearance(): cocoascript.UINavigationBarAppearance;
    setScrollEdgeAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbar/1624928-translucent
    translucent(): cocoascript.BOOL;
    setTranslucent(): void;
    //
    alloc():cocoascript.UINavigationBar;
    //
    init():cocoascript.UINavigationBar;
  }
}

declare const UINavigationBar: cocoascript.UINavigationBar;
declare namespace cocoascript {
  /**
   * A control that displays one or more buttons in a tab bar for selecting between different subtasks, views, or modes in an app.
   * doc://com.apple.documentation/documentation/uikit/uitabbar
   */
  interface UITabBar extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uitabbar/1623444-delegate
    delegate(): cocoascript.UITabBarDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbar/1623466-items
    items(): cocoascript.UITabBarItem;
    setItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbar/1623455-setitems
    setItems_animated(items: cocoascript.UITabBarItem, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uitabbar/1623453-selecteditem
    selectedItem(): cocoascript.UITabBarItem;
    setSelectedItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbar/3198046-standardappearance
    standardAppearance(): cocoascript.UITabBarAppearance;
    setStandardAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbar/3213944-leadingaccessoryview
    leadingAccessoryView(): cocoascript.UIView;
    setLeadingAccessoryView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbar/3213945-trailingaccessoryview
    trailingAccessoryView(): cocoascript.UIView;
    setTrailingAccessoryView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbar/1623458-translucent
    translucent(): cocoascript.BOOL;
    setTranslucent(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbar/1623462-begincustomizingitems
    beginCustomizingItems(items: cocoascript.UITabBarItem):void;
    // doc://com.apple.documentation/documentation/uikit/uitabbar/1623448-endcustomizinganimated
    endCustomizingAnimated(animated: cocoascript.BOOL):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitabbar/2102237-customizing
    customizing(): cocoascript.BOOL;
    setCustomizing(): void;
    //
    alloc():cocoascript.UITabBar;
    //
    init():cocoascript.UITabBar;
  }
}

declare const UITabBar: cocoascript.UITabBar;
declare namespace cocoascript {
  /**
   * An item in a tab bar.
   * doc://com.apple.documentation/documentation/uikit/uitabbaritem
   */
  interface UITabBarItem extends UIBarItem {
    // doc://com.apple.documentation/documentation/uikit/uitabbaritem/1617067-initwithtabbarsystemitem
    initWithTabBarSystemItem_tag(systemItem: cocoascript.UITabBarSystemItem, tag: cocoascript.NSInteger):cocoascript.UITabBarItem;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritem/1617056-initwithtitle
    initWithTitle_image_tag(title: cocoascript.NSString, image: cocoascript.UIImage, tag: cocoascript.NSInteger):cocoascript.UITabBarItem;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritem/1617066-initwithtitle
    initWithTitle_image_selectedImage(title: cocoascript.NSString, image: cocoascript.UIImage, selectedImage: cocoascript.UIImage):cocoascript.UITabBarItem;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritem/1617055-init
    init():cocoascript.UITabBarItem;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritem/1617071-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UITabBarItem;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritem/3198079-standardappearance
    standardAppearance(): cocoascript.UITabBarAppearance;
    setStandardAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritem/1617051-finishedselectedimage
    finishedSelectedImage():cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritem/1617053-finishedunselectedimage
    finishedUnselectedImage():cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritem/1617063-setfinishedselectedimage
    setFinishedSelectedImage_withFinishedUnselectedImage(selectedImage: cocoascript.UIImage, unselectedImage: cocoascript.UIImage):void;
    //
    alloc():cocoascript.UITabBarItem;
    //
    init():cocoascript.UITabBarItem;
  }
}

declare const UITabBarItem: cocoascript.UITabBarItem;
declare namespace cocoascript {
  /**
   * A set of methods that support the positioning of a bar that conforms to the
   * doc://com.apple.documentation/documentation/uikit/uibarpositioningdelegate
   */
  interface UIBarPositioningDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uibarpositioningdelegate/1624872-positionforbar
    positionForBar(bar: cocoascript.UIBarPositioning):cocoascript.UIBarPosition;
  }
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uilargecontentviewerinteraction
   */
  interface UILargeContentViewerInteraction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uilargecontentviewerinteraction/3183925-initwithdelegate
    initWithDelegate(delegate: cocoascript.UILargeContentViewerInteractionDelegate):cocoascript.UILargeContentViewerInteraction;
    // doc://com.apple.documentation/documentation/uikit/uilargecontentviewerinteraction/3183922-delegate
    delegate(): cocoascript.UILargeContentViewerInteractionDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uilargecontentviewerinteraction/3183924-gesturerecognizerforexclusionrel
    gestureRecognizerForExclusionRelationship(): cocoascript.UIGestureRecognizer;
    setGestureRecognizerForExclusionRelationship(): void;
    // doc://com.apple.documentation/documentation/uikit/uilargecontentviewerinteraction/3183923-enabled
    enabled(): cocoascript.BOOL;
    setEnabled(): void;
    //
    alloc():cocoascript.UILargeContentViewerInteraction;
    //
    init():cocoascript.UILargeContentViewerInteraction;
  }
}

declare const UILargeContentViewerInteraction: cocoascript.UILargeContentViewerInteraction;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uilargecontentviewerinteractiondelegate
   */
  interface UILargeContentViewerInteractionDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uilargecontentviewerinteractiondelegate/3183927-largecontentviewerinteraction
    largeContentViewerInteraction_didEndOnItem_atPoint(interaction: cocoascript.UILargeContentViewerInteraction, item: cocoascript.UILargeContentViewerItem, point: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/uilargecontentviewerinteractiondelegate/3183928-largecontentviewerinteraction
    largeContentViewerInteraction_itemAtPoint(interaction: cocoascript.UILargeContentViewerInteraction, point: cocoascript.CGPoint):cocoascript.UILargeContentViewerItem;
    // doc://com.apple.documentation/documentation/uikit/uilargecontentviewerinteractiondelegate/3183929-viewcontrollerforlargecontentvie
    viewControllerForLargeContentViewerInteraction(interaction: cocoascript.UILargeContentViewerInteraction):cocoascript.UIViewController;
  }
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uilargecontentvieweritem
   */
  interface UILargeContentViewerItem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uilargecontentvieweritem/3183932-largecontentimage
    largeContentImage(): cocoascript.UIImage;
    setLargeContentImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uilargecontentvieweritem/3183933-largecontentimageinsets
    largeContentImageInsets(): cocoascript.UIEdgeInsets;
    setLargeContentImageInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uilargecontentvieweritem/3183934-largecontenttitle
    largeContentTitle(): cocoascript.NSString;
    setLargeContentTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uilargecontentvieweritem/3183935-scaleslargecontentimage
    scalesLargeContentImage(): cocoascript.BOOL;
    setScalesLargeContentImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uilargecontentvieweritem/3183936-showslargecontentviewer
    showsLargeContentViewer(): cocoascript.BOOL;
    setShowsLargeContentViewer(): void;
  }
}
declare namespace cocoascript {
  interface UIOffset {
  }
}declare namespace cocoascript {
  interface UIEdgeInsets {
  }
}declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiaxis
  type UIAxis = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  interface NSDirectionalEdgeInsets {
  }
}declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nsdirectionalrectedge
  type NSDirectionalRectEdge = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nsrectalignment
  type NSRectAlignment = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidirectionalrectedge
  type UIDirectionalRectEdge = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * A container view controller that defines a stack-based scheme for navigating hierarchical content.
   * doc://com.apple.documentation/documentation/uikit/uinavigationcontroller
   */
  interface UINavigationController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621858-initwithrootviewcontroller
    initWithRootViewController(rootViewController: cocoascript.UIViewController):cocoascript.UINavigationController;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621866-initwithnavigationbarclass
    initWithNavigationBarClass_toolbarClass(navigationBarClass: cocoascript.Class, toolbarClass: cocoascript.Class):cocoascript.UINavigationController;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/3043561-initwithnibname
    initWithNibName_bundle(nibNameOrNil: cocoascript.NSString, nibBundleOrNil: cocoascript.NSBundle):cocoascript.UINavigationController;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/3043560-initwithcoder
    initWithCoder(aDecoder: cocoascript.NSCoder):cocoascript.UINavigationController;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621876-delegate
    delegate(): cocoascript.UINavigationControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621849-topviewcontroller
    topViewController(): cocoascript.UIViewController;
    setTopViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621862-visibleviewcontroller
    visibleViewController(): cocoascript.UIViewController;
    setVisibleViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621873-viewcontrollers
    viewControllers(): cocoascript.UIViewController;
    setViewControllers(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621861-setviewcontrollers
    setViewControllers_animated(viewControllers: cocoascript.UIViewController, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621887-pushviewcontroller
    pushViewController_animated(viewController: cocoascript.UIViewController, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621886-popviewcontrolleranimated
    popViewControllerAnimated(animated: cocoascript.BOOL):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621855-poptorootviewcontrolleranimated
    popToRootViewControllerAnimated(animated: cocoascript.BOOL):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621871-poptoviewcontroller
    popToViewController_animated(viewController: cocoascript.UIViewController, animated: cocoascript.BOOL):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621847-interactivepopgesturerecognizer
    interactivePopGestureRecognizer(): cocoascript.UIGestureRecognizer;
    setInteractivePopGestureRecognizer(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621877-navigationbar
    navigationBar(): cocoascript.UINavigationBar;
    setNavigationBar(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621885-setnavigationbarhidden
    setNavigationBarHidden_animated(hidden: cocoascript.BOOL, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621882-toolbar
    toolbar(): cocoascript.UIToolbar;
    setToolbar(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621888-settoolbarhidden
    setToolbarHidden_animated(hidden: cocoascript.BOOL, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621875-toolbarhidden
    toolbarHidden(): cocoascript.BOOL;
    setToolbarHidden(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621879-hidesbarsontap
    hidesBarsOnTap(): cocoascript.BOOL;
    setHidesBarsOnTap(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621883-hidesbarsonswipe
    hidesBarsOnSwipe(): cocoascript.BOOL;
    setHidesBarsOnSwipe(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621869-hidesbarswhenverticallycompact
    hidesBarsWhenVerticallyCompact(): cocoascript.BOOL;
    setHidesBarsWhenVerticallyCompact(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621881-hidesbarswhenkeyboardappears
    hidesBarsWhenKeyboardAppears(): cocoascript.BOOL;
    setHidesBarsWhenKeyboardAppears(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621850-navigationbarhidden
    navigationBarHidden(): cocoascript.BOOL;
    setNavigationBarHidden(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621852-barhideontapgesturerecognizer
    barHideOnTapGestureRecognizer(): cocoascript.UITapGestureRecognizer;
    setBarHideOnTapGestureRecognizer(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621854-barhideonswipegesturerecognizer
    barHideOnSwipeGestureRecognizer(): cocoascript.UIPanGestureRecognizer;
    setBarHideOnSwipeGestureRecognizer(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontroller/1621872-showviewcontroller
    showViewController_sender(vc: cocoascript.UIViewController, sender: cocoascript.UINavigationController):void;
    //
    alloc():cocoascript.UINavigationController;
    //
    init():cocoascript.UINavigationController;
  }
}

declare const UINavigationController: cocoascript.UINavigationController;
declare namespace cocoascript {
  /**
   * A view controller that specializes in managing a table view.
   * doc://com.apple.documentation/documentation/uikit/uitableviewcontroller
   */
  interface UITableViewController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uitableviewcontroller/1614754-initwithstyle
    initWithStyle(style: cocoascript.UITableViewStyle):cocoascript.UITableViewController;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcontroller/1614760-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UITableViewController;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcontroller/1614757-initwithnibname
    initWithNibName_bundle(nibNameOrNil: cocoascript.NSString, nibBundleOrNil: cocoascript.NSBundle):cocoascript.UITableViewController;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcontroller/1614753-tableview
    tableView(): cocoascript.UITableView;
    setTableView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcontroller/1614758-clearsselectiononviewwillappear
    clearsSelectionOnViewWillAppear(): cocoascript.BOOL;
    setClearsSelectionOnViewWillAppear(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcontroller/1614752-refreshcontrol
    refreshControl(): cocoascript.UIRefreshControl;
    setRefreshControl(): void;
    //
    alloc():cocoascript.UITableViewController;
    //
    init():cocoascript.UITableViewController;
  }
}

declare const UITableViewController: cocoascript.UITableViewController;
declare namespace cocoascript {
  /**
   * A view controller that specializes in managing a collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewcontroller
   */
  interface UICollectionViewController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcontroller/1623976-initwithcollectionviewlayout
    initWithCollectionViewLayout(layout: cocoascript.UICollectionViewLayout):cocoascript.UICollectionViewController;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcontroller/1623975-initwithnibname
    initWithNibName_bundle(nibNameOrNil: cocoascript.NSString, nibBundleOrNil: cocoascript.NSBundle):cocoascript.UICollectionViewController;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcontroller/1623981-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UICollectionViewController;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcontroller/1623983-collectionview
    collectionView(): cocoascript.UICollectionView;
    setCollectionView(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcontroller/1623980-collectionviewlayout
    collectionViewLayout(): cocoascript.UICollectionViewLayout;
    setCollectionViewLayout(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcontroller/1623977-clearsselectiononviewwillappear
    clearsSelectionOnViewWillAppear(): cocoascript.BOOL;
    setClearsSelectionOnViewWillAppear(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcontroller/1623979-installsstandardgestureforintera
    installsStandardGestureForInteractiveMovement(): cocoascript.BOOL;
    setInstallsStandardGestureForInteractiveMovement(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcontroller/1623978-uselayouttolayoutnavigationtrans
    useLayoutToLayoutNavigationTransitions(): cocoascript.BOOL;
    setUseLayoutToLayoutNavigationTransitions(): void;
    //
    alloc():cocoascript.UICollectionViewController;
    //
    init():cocoascript.UICollectionViewController;
  }
}

declare const UICollectionViewController: cocoascript.UICollectionViewController;
declare namespace cocoascript {
  /**
   * A container view controller that implements a hierarchical interface.
   * doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller
   */
  interface UISplitViewController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3580906-initwithstyle
    initWithStyle(style: cocoascript.UISplitViewControllerStyle):cocoascript.UISplitViewController;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3580905-initwithnibname
    initWithNibName_bundle(nibNameOrNil: cocoascript.NSString, nibBundleOrNil: cocoascript.NSBundle):cocoascript.UISplitViewController;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3580904-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UISplitViewController;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3580915-style
    style(): cocoascript.UISplitViewControllerStyle;
    setStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/1623167-delegate
    delegate(): cocoascript.UISplitViewControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3580911-setviewcontroller
    setViewController_forColumn(vc: cocoascript.UIViewController, column: cocoascript.UISplitViewControllerColumn):void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3580917-viewcontrollerforcolumn
    viewControllerForColumn(column: cocoascript.UISplitViewControllerColumn):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/1623181-viewcontrollers
    viewControllers(): cocoascript.UIViewController;
    setViewControllers(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3580912-showcolumn
    showColumn(column: cocoascript.UISplitViewControllerColumn):void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3580903-hidecolumn
    hideColumn(column: cocoascript.UISplitViewControllerColumn):void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/1623199-showviewcontroller
    showViewController_sender(vc: cocoascript.UIViewController, sender: cocoascript.UISplitViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/1623182-showdetailviewcontroller
    showDetailViewController_sender(vc: cocoascript.UIViewController, sender: cocoascript.UISplitViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/1623170-preferreddisplaymode
    preferredDisplayMode(): cocoascript.UISplitViewControllerDisplayMode;
    setPreferredDisplayMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/1623194-displaymode
    displayMode(): cocoascript.UISplitViewControllerDisplayMode;
    setDisplayMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/1623196-displaymodebuttonitem
    displayModeButtonItem(): cocoascript.UIBarButtonItem;
    setDisplayModeButtonItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/1623171-presentswithgesture
    presentsWithGesture(): cocoascript.BOOL;
    setPresentsWithGesture(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3580913-showssecondaryonlybutton
    showsSecondaryOnlyButton(): cocoascript.BOOL;
    setShowsSecondaryOnlyButton(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3580909-preferredsplitbehavior
    preferredSplitBehavior(): cocoascript.UISplitViewControllerSplitBehavior;
    setPreferredSplitBehavior(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3580914-splitbehavior
    splitBehavior(): cocoascript.UISplitViewControllerSplitBehavior;
    setSplitBehavior(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/1623185-collapsed
    collapsed(): cocoascript.BOOL;
    setCollapsed(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/1623183-preferredprimarycolumnwidthfract
    preferredPrimaryColumnWidthFraction(): cocoascript.CGFloat;
    setPreferredPrimaryColumnWidthFraction(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3650234-preferredprimarycolumnwidth
    preferredPrimaryColumnWidth(): cocoascript.CGFloat;
    setPreferredPrimaryColumnWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/1623200-primarycolumnwidth
    primaryColumnWidth(): cocoascript.CGFloat;
    setPrimaryColumnWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/1623198-minimumprimarycolumnwidth
    minimumPrimaryColumnWidth(): cocoascript.CGFloat;
    setMinimumPrimaryColumnWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/1623180-maximumprimarycolumnwidth
    maximumPrimaryColumnWidth(): cocoascript.CGFloat;
    setMaximumPrimaryColumnWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3580910-preferredsupplementarycolumnwidt
    preferredSupplementaryColumnWidthFraction(): cocoascript.CGFloat;
    setPreferredSupplementaryColumnWidthFraction(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3650235-preferredsupplementarycolumnwidt
    preferredSupplementaryColumnWidth(): cocoascript.CGFloat;
    setPreferredSupplementaryColumnWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3580916-supplementarycolumnwidth
    supplementaryColumnWidth(): cocoascript.CGFloat;
    setSupplementaryColumnWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3580908-minimumsupplementarycolumnwidth
    minimumSupplementaryColumnWidth(): cocoascript.CGFloat;
    setMinimumSupplementaryColumnWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3580907-maximumsupplementarycolumnwidth
    maximumSupplementaryColumnWidth(): cocoascript.CGFloat;
    setMaximumSupplementaryColumnWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/2875524-primaryedge
    primaryEdge(): cocoascript.UISplitViewControllerPrimaryEdge;
    setPrimaryEdge(): void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontroller/3238075-primarybackgroundstyle
    primaryBackgroundStyle(): cocoascript.UISplitViewControllerBackgroundStyle;
    setPrimaryBackgroundStyle(): void;
    //
    alloc():cocoascript.UISplitViewController;
    //
    init():cocoascript.UISplitViewController;
  }
}

declare const UISplitViewController: cocoascript.UISplitViewController;
declare namespace cocoascript {
  /**
   * The items that a navigation bar displays when the associated view controller is visible.
   * doc://com.apple.documentation/documentation/uikit/uinavigationitem
   */
  interface UINavigationItem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/1624943-initwithtitle
    initWithTitle(title: cocoascript.NSString):cocoascript.UINavigationItem;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/1624950-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UINavigationItem;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/1624965-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/2909056-largetitledisplaymode
    largeTitleDisplayMode(): cocoascript.UINavigationItemLargeTitleDisplayMode;
    setLargeTitleDisplayMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/1624958-backbarbuttonitem
    backBarButtonItem(): cocoascript.UIBarButtonItem;
    setBackBarButtonItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/3600576-backbuttontitle
    backButtonTitle(): cocoascript.NSString;
    setBackButtonTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/3656350-backbuttondisplaymode
    backButtonDisplayMode(): cocoascript.UINavigationItemBackButtonDisplayMode;
    setBackButtonDisplayMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/1624947-hidesbackbutton
    hidesBackButton(): cocoascript.BOOL;
    setHidesBackButton(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/1624934-sethidesbackbutton
    setHidesBackButton_animated(hidesBackButton: cocoascript.BOOL, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/1624930-prompt
    prompt(): cocoascript.NSString;
    setPrompt(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/1624933-leftitemssupplementbackbutton
    leftItemsSupplementBackButton(): cocoascript.BOOL;
    setLeftItemsSupplementBackButton(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/1624935-titleview
    titleView(): cocoascript.UIView;
    setTitleView(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/1624946-leftbarbuttonitems
    leftBarButtonItems(): cocoascript.UIBarButtonItem;
    setLeftBarButtonItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/1624936-leftbarbuttonitem
    leftBarButtonItem(): cocoascript.UIBarButtonItem;
    setLeftBarButtonItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/1624956-rightbarbuttonitems
    rightBarButtonItems(): cocoascript.UIBarButtonItem;
    setRightBarButtonItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/1624957-rightbarbuttonitem
    rightBarButtonItem(): cocoascript.UIBarButtonItem;
    setRightBarButtonItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/1624949-setleftbarbuttonitems
    setLeftBarButtonItems_animated(items: cocoascript.UIBarButtonItem, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/1624954-setleftbarbuttonitem
    setLeftBarButtonItem_animated(item: cocoascript.UIBarButtonItem, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/1624939-setrightbarbuttonitems
    setRightBarButtonItems_animated(items: cocoascript.UIBarButtonItem, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/1624929-setrightbarbuttonitem
    setRightBarButtonItem_animated(item: cocoascript.UIBarButtonItem, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/3198042-standardappearance
    standardAppearance(): cocoascript.UINavigationBarAppearance;
    setStandardAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/3198040-compactappearance
    compactAppearance(): cocoascript.UINavigationBarAppearance;
    setCompactAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/3198041-scrolledgeappearance
    scrollEdgeAppearance(): cocoascript.UINavigationBarAppearance;
    setScrollEdgeAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/2897305-searchcontroller
    searchController(): cocoascript.UISearchController;
    setSearchController(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationitem/2897296-hidessearchbarwhenscrolling
    hidesSearchBarWhenScrolling(): cocoascript.BOOL;
    setHidesSearchBarWhenScrolling(): void;
    //
    alloc():cocoascript.UINavigationItem;
    //
    init():cocoascript.UINavigationItem;
  }
}

declare const UINavigationItem: cocoascript.UINavigationItem;
declare namespace cocoascript {
  /**
   * A container view controller that manages a multiselection interface, where the selection determines which child view controller to display.
   * doc://com.apple.documentation/documentation/uikit/uitabbarcontroller
   */
  interface UITabBarController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uitabbarcontroller/1621164-delegate
    delegate(): cocoascript.UITabBarControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarcontroller/1621174-tabbar
    tabBar(): cocoascript.UITabBar;
    setTabBar(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarcontroller/1621185-viewcontrollers
    viewControllers(): cocoascript.UIViewController;
    setViewControllers(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarcontroller/1621177-setviewcontrollers
    setViewControllers_animated(viewControllers: cocoascript.UIViewController, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarcontroller/1621184-customizableviewcontrollers
    customizableViewControllers(): cocoascript.UIViewController;
    setCustomizableViewControllers(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarcontroller/1621183-morenavigationcontroller
    moreNavigationController(): cocoascript.UINavigationController;
    setMoreNavigationController(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarcontroller/1621172-selectedviewcontroller
    selectedViewController(): cocoascript.UIViewController;
    setSelectedViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarcontroller/1621171-selectedindex
    selectedIndex(): cocoascript.NSUInteger;
    setSelectedIndex(): void;
    //
    alloc():cocoascript.UITabBarController;
    //
    init():cocoascript.UITabBarController;
  }
}

declare const UITabBarController: cocoascript.UITabBarController;
declare namespace cocoascript {
  /**
   * A container view controller that manages navigation between pages of content, where a child view controller manages each page.
   * doc://com.apple.documentation/documentation/uikit/uipageviewcontroller
   */
  interface UIPageViewController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontroller/1614105-initwithtransitionstyle
    initWithTransitionStyle_navigationOrientation_options(style: cocoascript.UIPageViewControllerTransitionStyle, navigationOrientation: cocoascript.UIPageViewControllerNavigationOrientation, options: cocoascript.UIPageViewController):cocoascript.UIPageViewController;
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontroller/1614108-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIPageViewController;
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontroller/1614117-datasource
    dataSource(): cocoascript.UIPageViewControllerDataSource;
    setDataSource(): void;
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontroller/1614089-delegate
    delegate(): cocoascript.UIPageViewControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontroller/1614087-setviewcontrollers
    setViewControllers_direction_animated_completion(viewControllers: cocoascript.UIViewController, direction: cocoascript.UIPageViewControllerNavigationDirection, animated: cocoascript.BOOL, completion: void):void;
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontroller/1614106-viewcontrollers
    viewControllers(): cocoascript.UIViewController;
    setViewControllers(): void;
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontroller/1614107-gesturerecognizers
    gestureRecognizers(): cocoascript.UIGestureRecognizer;
    setGestureRecognizers(): void;
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontroller/1614097-navigationorientation
    navigationOrientation(): cocoascript.UIPageViewControllerNavigationOrientation;
    setNavigationOrientation(): void;
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontroller/1614085-spinelocation
    spineLocation(): cocoascript.UIPageViewControllerSpineLocation;
    setSpineLocation(): void;
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontroller/1614092-transitionstyle
    transitionStyle(): cocoascript.UIPageViewControllerTransitionStyle;
    setTransitionStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontroller/1614098-doublesided
    doubleSided(): cocoascript.BOOL;
    setDoubleSided(): void;
    //
    alloc():cocoascript.UIPageViewController;
    //
    init():cocoascript.UIPageViewController;
  }
}

declare const UIPageViewController: cocoascript.UIPageViewController;
declare namespace cocoascript {
  /**
   * An object that manages the transition animations and the presentation of view controllers onscreen.
   * doc://com.apple.documentation/documentation/uikit/uipresentationcontroller
   */
  interface UIPresentationController extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618328-initwithpresentedviewcontroller
    initWithPresentedViewController_presentingViewController(presentedViewController: cocoascript.UIViewController, presentingViewController: cocoascript.UIViewController):cocoascript.UIPresentationController;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618329-delegate
    delegate(): cocoascript.UIAdaptivePresentationControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618338-presentingviewcontroller
    presentingViewController(): cocoascript.UIViewController;
    setPresentingViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618322-presentedviewcontroller
    presentedViewController(): cocoascript.UIViewController;
    setPresentedViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618332-containerview
    containerView(): cocoascript.UIView;
    setContainerView(): void;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618321-presentedview
    presentedView(): cocoascript.UIView;
    setPresentedView(): void;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618337-frameofpresentedviewincontainerv
    frameOfPresentedViewInContainerView(): cocoascript.CGRect;
    setFrameOfPresentedViewInContainerView(): void;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618335-overridetraitcollection
    overrideTraitCollection(): cocoascript.UITraitCollection;
    setOverrideTraitCollection(): void;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618341-containerviewwilllayoutsubviews
    containerViewWillLayoutSubviews():void;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618331-containerviewdidlayoutsubviews
    containerViewDidLayoutSubviews():void;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618330-presentationtransitionwillbegin
    presentationTransitionWillBegin():void;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618327-presentationtransitiondidend
    presentationTransitionDidEnd(completed: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618342-dismissaltransitionwillbegin
    dismissalTransitionWillBegin():void;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618323-dismissaltransitiondidend
    dismissalTransitionDidEnd(completed: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618320-presentationstyle
    presentationStyle(): cocoascript.UIModalPresentationStyle;
    setPresentationStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618325-adaptivepresentationstylefortrai
    adaptivePresentationStyleForTraitCollection(traitCollection: cocoascript.UITraitCollection):cocoascript.UIModalPresentationStyle;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618340-adaptivepresentationstyle
    adaptivePresentationStyle(): cocoascript.UIModalPresentationStyle;
    setAdaptivePresentationStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618336-shouldpresentinfullscreen
    shouldPresentInFullscreen(): cocoascript.BOOL;
    setShouldPresentInFullscreen(): void;
    // doc://com.apple.documentation/documentation/uikit/uipresentationcontroller/1618319-shouldremovepresentersview
    shouldRemovePresentersView(): cocoascript.BOOL;
    setShouldRemovePresentersView(): void;
    //
    alloc():cocoascript.UIPresentationController;
    //
    init():cocoascript.UIPresentationController;
  }
}

declare const UIPresentationController: cocoascript.UIPresentationController;
declare namespace cocoascript {
  /**
   * A view controller that manages the presentation of search results in your interface.
   * doc://com.apple.documentation/documentation/uikit/uisearchcontainerviewcontroller
   */
  interface UISearchContainerViewController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uisearchcontainerviewcontroller/1615746-initwithsearchcontroller
    initWithSearchController(searchController: cocoascript.UISearchController):cocoascript.UISearchContainerViewController;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontainerviewcontroller/1615748-searchcontroller
    searchController(): cocoascript.UISearchController;
    setSearchController(): void;
    //
    alloc():cocoascript.UISearchContainerViewController;
    //
    init():cocoascript.UISearchContainerViewController;
  }
}

declare const UISearchContainerViewController: cocoascript.UISearchContainerViewController;
declare namespace cocoascript {
  /**
   * A view controller that manages the display of search results based on interactions with a search bar.
   * doc://com.apple.documentation/documentation/uikit/uisearchcontroller
   */
  interface UISearchController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uisearchcontroller/1618647-initwithsearchresultscontroller
    initWithSearchResultsController(searchResultsController: cocoascript.UIViewController):cocoascript.UISearchController;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontroller/3043562-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UISearchController;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontroller/3043563-initwithnibname
    initWithNibName_bundle(nibNameOrNil: cocoascript.NSString, nibBundleOrNil: cocoascript.NSBundle):cocoascript.UISearchController;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontroller/1618654-delegate
    delegate(): cocoascript.UISearchControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontroller/1618657-searchbar
    searchBar(): cocoascript.UISearchBar;
    setSearchBar(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontroller/1618661-searchresultsupdater
    searchResultsUpdater(): cocoascript.UISearchResultsUpdating;
    setSearchResultsUpdater(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontroller/1618649-searchresultscontroller
    searchResultsController(): cocoascript.UIViewController;
    setSearchResultsController(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontroller/1618659-active
    active(): cocoascript.BOOL;
    setActive(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontroller/3584820-searchcontrollerobservedscrollvi
    searchControllerObservedScrollView(): cocoascript.UIScrollView;
    setSearchControllerObservedScrollView(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontroller/1618656-obscuresbackgroundduringpresenta
    obscuresBackgroundDuringPresentation(): cocoascript.BOOL;
    setObscuresBackgroundDuringPresentation(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontroller/1618650-hidesnavigationbarduringpresenta
    hidesNavigationBarDuringPresentation(): cocoascript.BOOL;
    setHidesNavigationBarDuringPresentation(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontroller/3152926-automaticallyshowscancelbutton
    automaticallyShowsCancelButton(): cocoascript.BOOL;
    setAutomaticallyShowsCancelButton(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontroller/3152927-automaticallyshowsscopebar
    automaticallyShowsScopeBar(): cocoascript.BOOL;
    setAutomaticallyShowsScopeBar(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontroller/3153160-automaticallyshowssearchresultsc
    automaticallyShowsSearchResultsController(): cocoascript.BOOL;
    setAutomaticallyShowsSearchResultsController(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontroller/3153161-showssearchresultscontroller
    showsSearchResultsController(): cocoascript.BOOL;
    setShowsSearchResultsController(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontroller/1618660-dimsbackgroundduringpresentation
    dimsBackgroundDuringPresentation(): cocoascript.BOOL;
    setDimsBackgroundDuringPresentation(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontroller/3584821-searchsuggestions
    searchSuggestions(): cocoascript.UISearchSuggestion;
    setSearchSuggestions(): void;
    //
    alloc():cocoascript.UISearchController;
    //
    init():cocoascript.UISearchController;
  }
}

declare const UISearchController: cocoascript.UISearchController;
declare namespace cocoascript {
  /**
   * A set of methods that let you update search results based on information the user enters into the search bar.
   * doc://com.apple.documentation/documentation/uikit/uisearchresultsupdating
   */
  interface UISearchResultsUpdating extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uisearchresultsupdating/1618658-updatesearchresultsforsearchcont
    updateSearchResultsForSearchController(searchController: cocoascript.UISearchController):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchresultsupdating/3584822-updatesearchresultsforsearchcont
    updateSearchResultsForSearchController_selectingSearchSuggestion(searchController: cocoascript.UISearchController, searchSuggestion: cocoascript.UISearchSuggestion):void;
  }
}
declare namespace cocoascript {
  /**
   * A view controller that manages the system interface for trimming video frames and encoding a previously recorded movie.
   * doc://com.apple.documentation/documentation/uikit/uivideoeditorcontroller
   */
  interface UIVideoEditorController extends UINavigationController {
    // doc://com.apple.documentation/documentation/uikit/uivideoeditorcontroller/1622341-delegate
    delegate(): cocoascript.UIVideoEditorControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uivideoeditorcontroller/1622338-videomaximumduration
    videoMaximumDuration(): cocoascript.NSTimeInterval;
    setVideoMaximumDuration(): void;
    // doc://com.apple.documentation/documentation/uikit/uivideoeditorcontroller/1622343-videopath
    videoPath(): cocoascript.NSString;
    setVideoPath(): void;
    // doc://com.apple.documentation/documentation/uikit/uivideoeditorcontroller/1622339-videoquality
    videoQuality(): cocoascript.UIImagePickerControllerQualityType;
    setVideoQuality(): void;
    //
    alloc():cocoascript.UIVideoEditorController;
    //
    init():cocoascript.UIVideoEditorController;
  }
}

declare const UIVideoEditorController: cocoascript.UIVideoEditorController;
declare namespace cocoascript {
  /**
   * A view controller for browsing and performing actions on documents stored locally and in the cloud.
   * doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller
   */
  interface UIDocumentBrowserViewController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/2874203-initforopeningfileswithcontentty
    initForOpeningFilesWithContentTypes(allowedContentTypes: cocoascript.NSString):cocoascript.UIDocumentBrowserViewController;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/2874185-delegate
    delegate(): cocoascript.UIDocumentBrowserViewControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/2927800-importdocumentaturl
    importDocumentAtURL_nextToDocumentAtURL_mode_completionHandler(documentURL: cocoascript.NSURL, neighbourURL: cocoascript.NSURL, importMode: cocoascript.UIDocumentBrowserImportMode, completion: cocoascript.NSError):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/2874182-allowedcontenttypes
    allowedContentTypes(): cocoascript.NSString;
    setAllowedContentTypes(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/2874172-allowsdocumentcreation
    allowsDocumentCreation(): cocoascript.BOOL;
    setAllowsDocumentCreation(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/2874179-allowspickingmultipleitems
    allowsPickingMultipleItems(): cocoascript.BOOL;
    setAllowsPickingMultipleItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/2915849-revealdocumentaturl
    revealDocumentAtURL_importIfNeeded_completion(url: cocoascript.NSURL, importIfNeeded: cocoascript.BOOL, completion: cocoascript.NSError):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/2875748-browseruserinterfacestyle
    browserUserInterfaceStyle(): cocoascript.UIDocumentBrowserUserInterfaceStyle;
    setBrowserUserInterfaceStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/2874191-additionalleadingnavigationbarbu
    additionalLeadingNavigationBarButtonItems(): cocoascript.UIBarButtonItem;
    setAdditionalLeadingNavigationBarButtonItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/2874180-additionaltrailingnavigationbarb
    additionalTrailingNavigationBarButtonItems(): cocoascript.UIBarButtonItem;
    setAdditionalTrailingNavigationBarButtonItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/3153159-shouldshowfileextensions
    shouldShowFileExtensions(): cocoascript.BOOL;
    setShouldShowFileExtensions(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/3114622-localizedcreatedocumentactiontit
    localizedCreateDocumentActionTitle(): cocoascript.NSString;
    setLocalizedCreateDocumentActionTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/3123949-defaultdocumentaspectratio
    defaultDocumentAspectRatio(): cocoascript.CGFloat;
    setDefaultDocumentAspectRatio(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/2874181-customactions
    customActions(): cocoascript.UIDocumentBrowserAction;
    setCustomActions(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/3019587-transitioncontrollerfordocumenta
    transitionControllerForDocumentAtURL(documentURL: cocoascript.NSURL):cocoascript.UIDocumentBrowserTransitionController;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/2874177-transitioncontrollerfordocumentu
    transitionControllerForDocumentURL(documentURL: cocoascript.NSURL):cocoascript.UIDocumentBrowserTransitionController;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/3566729-initforopeningcontenttypes
    initForOpeningContentTypes(contentTypes: cocoascript.UTType):cocoascript.UIDocumentBrowserViewController;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/3566728-contenttypesforrecentdocuments
    contentTypesForRecentDocuments(): cocoascript.UTType;
    setContentTypesForRecentDocuments(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontroller/3356325-recentdocumentscontenttypes
    recentDocumentsContentTypes(): cocoascript.NSString;
    setRecentDocumentsContentTypes(): void;
    //
    alloc():cocoascript.UIDocumentBrowserViewController;
    //
    init():cocoascript.UIDocumentBrowserViewController;
  }
}

declare const UIDocumentBrowserViewController: cocoascript.UIDocumentBrowserViewController;
declare namespace cocoascript {
  /**
   * A view controller that provides access to documents or destinations outside your app’s sandbox.
   * doc://com.apple.documentation/documentation/uikit/uidocumentpickerviewcontroller
   */
  interface UIDocumentPickerViewController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerviewcontroller/1618678-initwithdocumenttypes
    initWithDocumentTypes_inMode(allowedUTIs: cocoascript.NSString, mode: cocoascript.UIDocumentPickerMode):cocoascript.UIDocumentPickerViewController;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerviewcontroller/1618684-initwithurl
    initWithURL_inMode(url: cocoascript.NSURL, mode: cocoascript.UIDocumentPickerMode):cocoascript.UIDocumentPickerViewController;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerviewcontroller/2921628-initwithurls
    initWithURLs_inMode(urls: cocoascript.NSURL, mode: cocoascript.UIDocumentPickerMode):cocoascript.UIDocumentPickerViewController;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerviewcontroller/1618686-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIDocumentPickerViewController;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerviewcontroller/1618690-delegate
    delegate(): cocoascript.UIDocumentPickerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerviewcontroller/2902365-allowsmultipleselection
    allowsMultipleSelection(): cocoascript.BOOL;
    setAllowsMultipleSelection(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerviewcontroller/3183918-directoryurl
    directoryURL(): cocoascript.NSURL;
    setDirectoryURL(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerviewcontroller/3152920-shouldshowfileextensions
    shouldShowFileExtensions(): cocoascript.BOOL;
    setShouldShowFileExtensions(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerviewcontroller/1618681-documentpickermode
    documentPickerMode(): cocoascript.UIDocumentPickerMode;
    setDocumentPickerMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerviewcontroller/3566730-initforexportingurls
    initForExportingURLs(urls: cocoascript.NSURL):cocoascript.UIDocumentPickerViewController;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerviewcontroller/3566731-initforexportingurls
    initForExportingURLs_asCopy(urls: cocoascript.NSURL, asCopy: cocoascript.BOOL):cocoascript.UIDocumentPickerViewController;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerviewcontroller/3566732-initforopeningcontenttypes
    initForOpeningContentTypes(contentTypes: cocoascript.UTType):cocoascript.UIDocumentPickerViewController;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerviewcontroller/3566733-initforopeningcontenttypes
    initForOpeningContentTypes_asCopy(contentTypes: cocoascript.UTType, asCopy: cocoascript.BOOL):cocoascript.UIDocumentPickerViewController;
    //
    alloc():cocoascript.UIDocumentPickerViewController;
    //
    init():cocoascript.UIDocumentPickerViewController;
  }
}

declare const UIDocumentPickerViewController: cocoascript.UIDocumentPickerViewController;
declare namespace cocoascript {
  /**
   * A view controller that previews, opens, or prints files whose file format cannot be handled directly by your app.
   * doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontroller
   */
  interface UIDocumentInteractionController extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontroller/1616812-delegate
    delegate(): cocoascript.UIDocumentInteractionControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontroller/1616828-presentpreviewanimated
    presentPreviewAnimated(animated: cocoascript.BOOL):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontroller/1616815-dismisspreviewanimated
    dismissPreviewAnimated(animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontroller/1616814-presentoptionsmenufromrect
    presentOptionsMenuFromRect_inView_animated(rect: cocoascript.CGRect, view: cocoascript.UIView, animated: cocoascript.BOOL):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontroller/1616811-presentoptionsmenufrombarbuttoni
    presentOptionsMenuFromBarButtonItem_animated(item: cocoascript.UIBarButtonItem, animated: cocoascript.BOOL):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontroller/1616807-presentopeninmenufromrect
    presentOpenInMenuFromRect_inView_animated(rect: cocoascript.CGRect, view: cocoascript.UIView, animated: cocoascript.BOOL):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontroller/1616827-presentopeninmenufrombarbuttonit
    presentOpenInMenuFromBarButtonItem_animated(item: cocoascript.UIBarButtonItem, animated: cocoascript.BOOL):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontroller/1616816-dismissmenuanimated
    dismissMenuAnimated(animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontroller/1616804-url
    URL(): cocoascript.NSURL;
    setURL(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontroller/1616802-uti
    UTI(): cocoascript.NSString;
    setUTI(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontroller/1616810-name
    name(): cocoascript.NSString;
    setName(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontroller/1616801-icons
    icons(): cocoascript.UIImage;
    setIcons(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontroller/1616820-annotation
    annotation(): cocoascript.id;
    setAnnotation(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontroller/1616817-gesturerecognizers
    gestureRecognizers(): cocoascript.UIGestureRecognizer;
    setGestureRecognizers(): void;
    //
    alloc():cocoascript.UIDocumentInteractionController;
    //
    init():cocoascript.UIDocumentInteractionController;
  }
}

declare const UIDocumentInteractionController: cocoascript.UIDocumentInteractionController;
declare namespace cocoascript {
  /**
   * A view controller that presents standard screens for adding and removing people from a CloudKit share record.
   * doc://com.apple.documentation/documentation/uikit/uicloudsharingcontroller
   */
  interface UICloudSharingController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uicloudsharingcontroller/1649607-initwithpreparationhandler
    initWithPreparationHandler(preparationHandler: cocoascript.NSError):cocoascript.UICloudSharingController;
    // doc://com.apple.documentation/documentation/uikit/uicloudsharingcontroller/1649597-initwithshare
    initWithShare_container(share: cocoascript.CKShare, container: cocoascript.CKContainer):cocoascript.UICloudSharingController;
    // doc://com.apple.documentation/documentation/uikit/uicloudsharingcontroller/1649595-delegate
    delegate(): cocoascript.UICloudSharingControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uicloudsharingcontroller/1649602-availablepermissions
    availablePermissions(): cocoascript.UICloudSharingPermissionOptions;
    setAvailablePermissions(): void;
    // doc://com.apple.documentation/documentation/uikit/uicloudsharingcontroller/1649601-share
    share(): cocoascript.CKShare;
    setShare(): void;
    // doc://com.apple.documentation/documentation/uikit/uicloudsharingcontroller/1649594-activityitemsource
    activityItemSource():cocoascript.UIActivityItemSource;
    //
    alloc():cocoascript.UICloudSharingController;
    //
    init():cocoascript.UICloudSharingController;
  }
}

declare const UICloudSharingController: cocoascript.UICloudSharingController;
declare namespace cocoascript {
  /**
   * A set of optional methods for receiving messages about the user’s interaction with the font picker.
   * doc://com.apple.documentation/documentation/uikit/uifontpickerviewcontrollerdelegate
   */
  interface UIFontPickerViewControllerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uifontpickerviewcontrollerdelegate/3238101-fontpickerviewcontrollerdidcance
    fontPickerViewControllerDidCancel(viewController: cocoascript.UIFontPickerViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uifontpickerviewcontrollerdelegate/3238102-fontpickerviewcontrollerdidpickf
    fontPickerViewControllerDidPickFont(viewController: cocoascript.UIFontPickerViewController):void;
  }
}
declare namespace cocoascript {
  /**
   * The filters and display settings a font picker view controller uses to set up a font picker.
   * doc://com.apple.documentation/documentation/uikit/uifontpickerviewcontrollerconfiguration
   */
  interface UIFontPickerViewControllerConfiguration extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uifontpickerviewcontrollerconfiguration/3327296-displayusingsystemfont
    displayUsingSystemFont(): cocoascript.BOOL;
    setDisplayUsingSystemFont(): void;
    // doc://com.apple.documentation/documentation/uikit/uifontpickerviewcontrollerconfiguration/3238104-includefaces
    includeFaces(): cocoascript.BOOL;
    setIncludeFaces(): void;
    // doc://com.apple.documentation/documentation/uikit/uifontpickerviewcontrollerconfiguration/3327299-filteredtraits
    filteredTraits(): cocoascript.UIFontDescriptorSymbolicTraits;
    setFilteredTraits(): void;
    // doc://com.apple.documentation/documentation/uikit/uifontpickerviewcontrollerconfiguration/3327298-filteredlanguagespredicate
    filteredLanguagesPredicate(): cocoascript.NSPredicate;
    setFilteredLanguagesPredicate(): void;
    //
    alloc():cocoascript.UIFontPickerViewControllerConfiguration;
    //
    init():cocoascript.UIFontPickerViewControllerConfiguration;
  }
}

declare const UIFontPickerViewControllerConfiguration: cocoascript.UIFontPickerViewControllerConfiguration;
declare namespace cocoascript {
  /**
   * An interface that manages color picker activity.
   * doc://com.apple.documentation/documentation/uikit/uicolorpickerviewcontrollerdelegate
   */
  interface UIColorPickerViewControllerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicolorpickerviewcontrollerdelegate/3600469-colorpickerviewcontrollerdidfini
    colorPickerViewControllerDidFinish(viewController: cocoascript.UIColorPickerViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uicolorpickerviewcontrollerdelegate/3600470-colorpickerviewcontrollerdidsele
    colorPickerViewControllerDidSelectColor(viewController: cocoascript.UIColorPickerViewController):void;
  }
}
declare namespace cocoascript {
  /**
   * A view controller that displays a standard interface for looking up the definition of a word or term.
   * doc://com.apple.documentation/documentation/uikit/uireferencelibraryviewcontroller
   */
  interface UIReferenceLibraryViewController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uireferencelibraryviewcontroller/1624808-initwithterm
    initWithTerm(term: cocoascript.NSString):cocoascript.UIReferenceLibraryViewController;
    // doc://com.apple.documentation/documentation/uikit/uireferencelibraryviewcontroller/1624809-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIReferenceLibraryViewController;
    //
    alloc():cocoascript.UIReferenceLibraryViewController;
    //
    init():cocoascript.UIReferenceLibraryViewController;
  }
}

declare const UIReferenceLibraryViewController: cocoascript.UIReferenceLibraryViewController;
declare namespace cocoascript {
  /**
   * A view controller that displays the standard interface for selecting a printer.
   * doc://com.apple.documentation/documentation/uikit/uiprinterpickercontroller
   */
  interface UIPrinterPickerController extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiprinterpickercontroller/1620511-delegate
    delegate(): cocoascript.UIPrinterPickerControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprinterpickercontroller/1620514-presentanimated
    presentAnimated_completionHandler(animated: cocoascript.BOOL, completion: cocoascript.UIPrinterPickerCompletionHandler):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiprinterpickercontroller/1620507-presentfrombarbuttonitem
    presentFromBarButtonItem_animated_completionHandler(item: cocoascript.UIBarButtonItem, animated: cocoascript.BOOL, completion: cocoascript.UIPrinterPickerCompletionHandler):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiprinterpickercontroller/1620515-presentfromrect
    presentFromRect_inView_animated_completionHandler(rect: cocoascript.CGRect, view: cocoascript.UIView, animated: cocoascript.BOOL, completion: cocoascript.UIPrinterPickerCompletionHandler):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiprinterpickercontroller/1620512-dismissanimated
    dismissAnimated(animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiprinterpickercontroller/1620516-selectedprinter
    selectedPrinter(): cocoascript.UIPrinter;
    setSelectedPrinter(): void;
    //
    alloc():cocoascript.UIPrinterPickerController;
    //
    init():cocoascript.UIPrinterPickerController;
  }
}

declare const UIPrinterPickerController: cocoascript.UIPrinterPickerController;
declare namespace cocoascript {
  /**
   * The methods that objects adopt so that they can act as a "restoration class” for view controllers during state restoration.
   * doc://com.apple.documentation/documentation/uikit/uiviewcontrollerrestoration
   */
  interface UIViewControllerRestoration {
  }
}
declare namespace cocoascript {
  /**
   * The interface that restoration classes use to restore preserved objects.
   * doc://com.apple.documentation/documentation/uikit/uiobjectrestoration
   */
  interface UIObjectRestoration {
  }
}
declare namespace cocoascript {
  /**
   * Methods for adding objects to your state restoration archives.
   * doc://com.apple.documentation/documentation/uikit/uistaterestoring
   */
  interface UIStateRestoring extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uistaterestoring/1616867-restorationparent
    restorationParent(): cocoascript.UIStateRestoring;
    setRestorationParent(): void;
    // doc://com.apple.documentation/documentation/uikit/uistaterestoring/1616851-objectrestorationclass
    objectRestorationClass(): cocoascript.UIObjectRestoration;
    setObjectRestorationClass(): void;
    // doc://com.apple.documentation/documentation/uikit/uistaterestoring/1616866-encoderestorablestatewithcoder
    encodeRestorableStateWithCoder(coder: cocoascript.NSCoder):void;
    // doc://com.apple.documentation/documentation/uikit/uistaterestoring/1616854-decoderestorablestatewithcoder
    decodeRestorableStateWithCoder(coder: cocoascript.NSCoder):void;
    // doc://com.apple.documentation/documentation/uikit/uistaterestoring/1616864-applicationfinishedrestoringstat
    applicationFinishedRestoringState():void;
  }
}
declare namespace cocoascript {
  /**
   * A collection of methods that gives you access to the appearance proxy for a class.
   * doc://com.apple.documentation/documentation/uikit/uiappearance
   */
  interface UIAppearance extends NSObject {
  }
}
declare namespace cocoascript {
  /**
   * An object for customizing the appearance of a navigation bar.
   * doc://com.apple.documentation/documentation/uikit/uinavigationbarappearance
   */
  interface UINavigationBarAppearance extends UIBarAppearance {
    // doc://com.apple.documentation/documentation/uikit/uinavigationbarappearance/3198039-titletextattributes
    titleTextAttributes(): cocoascript.id;
    setTitleTextAttributes(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbarappearance/3198035-largetitletextattributes
    largeTitleTextAttributes(): cocoascript.id;
    setLargeTitleTextAttributes(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbarappearance/3198038-titlepositionadjustment
    titlePositionAdjustment(): cocoascript.UIOffset;
    setTitlePositionAdjustment(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbarappearance/3198033-buttonappearance
    buttonAppearance(): cocoascript.UIBarButtonItemAppearance;
    setButtonAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbarappearance/3198030-backbuttonappearance
    backButtonAppearance(): cocoascript.UIBarButtonItemAppearance;
    setBackButtonAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbarappearance/3198031-backindicatorimage
    backIndicatorImage(): cocoascript.UIImage;
    setBackIndicatorImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbarappearance/3198032-backindicatortransitionmaskimage
    backIndicatorTransitionMaskImage(): cocoascript.UIImage;
    setBackIndicatorTransitionMaskImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbarappearance/3198037-setbackindicatorimage
    setBackIndicatorImage_transitionMaskImage(backIndicatorImage: cocoascript.UIImage, backIndicatorTransitionMaskImage: cocoascript.UIImage):void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbarappearance/3198034-donebuttonappearance
    doneButtonAppearance(): cocoascript.UIBarButtonItemAppearance;
    setDoneButtonAppearance(): void;
    //
    alloc():cocoascript.UINavigationBarAppearance;
    //
    init():cocoascript.UINavigationBarAppearance;
  }
}

declare const UINavigationBarAppearance: cocoascript.UINavigationBarAppearance;
declare namespace cocoascript {
  /**
   * An object for customizing the appearance of a toolbar.
   * doc://com.apple.documentation/documentation/uikit/uitoolbarappearance
   */
  interface UIToolbarAppearance extends UIBarAppearance {
    // doc://com.apple.documentation/documentation/uikit/uitoolbarappearance/3198083-buttonappearance
    buttonAppearance(): cocoascript.UIBarButtonItemAppearance;
    setButtonAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uitoolbarappearance/3198084-donebuttonappearance
    doneButtonAppearance(): cocoascript.UIBarButtonItemAppearance;
    setDoneButtonAppearance(): void;
    //
    alloc():cocoascript.UIToolbarAppearance;
    //
    init():cocoascript.UIToolbarAppearance;
  }
}

declare const UIToolbarAppearance: cocoascript.UIToolbarAppearance;
declare namespace cocoascript {
  /**
   * An object for customizing the appearance of a tab bar.
   * doc://com.apple.documentation/documentation/uikit/uitabbarappearance
   */
  interface UITabBarAppearance extends UIBarAppearance {
    // doc://com.apple.documentation/documentation/uikit/uitabbarappearance/3198055-stackedlayoutappearance
    stackedLayoutAppearance(): cocoascript.UITabBarItemAppearance;
    setStackedLayoutAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarappearance/3198052-stackeditempositioning
    stackedItemPositioning(): cocoascript.UITabBarItemPositioning;
    setStackedItemPositioning(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarappearance/3198053-stackeditemspacing
    stackedItemSpacing(): cocoascript.CGFloat;
    setStackedItemSpacing(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarappearance/3198054-stackeditemwidth
    stackedItemWidth(): cocoascript.CGFloat;
    setStackedItemWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarappearance/3198049-inlinelayoutappearance
    inlineLayoutAppearance(): cocoascript.UITabBarItemAppearance;
    setInlineLayoutAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarappearance/3198048-compactinlinelayoutappearance
    compactInlineLayoutAppearance(): cocoascript.UITabBarItemAppearance;
    setCompactInlineLayoutAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarappearance/3198051-selectionindicatortintcolor
    selectionIndicatorTintColor(): cocoascript.UIColor;
    setSelectionIndicatorTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarappearance/3198050-selectionindicatorimage
    selectionIndicatorImage(): cocoascript.UIImage;
    setSelectionIndicatorImage(): void;
    //
    alloc():cocoascript.UITabBarAppearance;
    //
    init():cocoascript.UITabBarAppearance;
  }
}

declare const UITabBarAppearance: cocoascript.UITabBarAppearance;
declare namespace cocoascript {
  /**
   * An object for customizing the appearance of tab bar items.
   * doc://com.apple.documentation/documentation/uikit/uitabbaritemappearance
   */
  interface UITabBarItemAppearance extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitabbaritemappearance/3198062-initwithstyle
    initWithStyle(style: cocoascript.UITabBarItemAppearanceStyle):cocoascript.UITabBarItemAppearance;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritemappearance/3198060-init
    init():cocoascript.UITabBarItemAppearance;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritemappearance/3198061-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UITabBarItemAppearance;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritemappearance/3198057-configurewithdefaultforstyle
    configureWithDefaultForStyle(style: cocoascript.UITabBarItemAppearanceStyle):void;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritemappearance/3198064-normal
    normal(): cocoascript.UITabBarItemStateAppearance;
    setNormal(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritemappearance/3198065-selected
    selected(): cocoascript.UITabBarItemStateAppearance;
    setSelected(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritemappearance/3198058-disabled
    disabled(): cocoascript.UITabBarItemStateAppearance;
    setDisabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritemappearance/3198059-focused
    focused(): cocoascript.UITabBarItemStateAppearance;
    setFocused(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritemappearance/3368163-copy
    copy():cocoascript.UITabBarItemAppearance;
    //
    alloc():cocoascript.UITabBarItemAppearance;
    //
    init():cocoascript.UITabBarItemAppearance;
  }
}

declare const UITabBarItemAppearance: cocoascript.UITabBarItemAppearance;
declare namespace cocoascript {
  /**
   * A data object containing the specific customizations for tab bar items in a particular state.
   * doc://com.apple.documentation/documentation/uikit/uitabbaritemstateappearance
   */
  interface UITabBarItemStateAppearance extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitabbaritemstateappearance/3198078-titletextattributes
    titleTextAttributes(): cocoascript.id;
    setTitleTextAttributes(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritemstateappearance/3198077-titlepositionadjustment
    titlePositionAdjustment(): cocoascript.UIOffset;
    setTitlePositionAdjustment(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritemstateappearance/3198076-iconcolor
    iconColor(): cocoascript.UIColor;
    setIconColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritemstateappearance/3198074-badgetextattributes
    badgeTextAttributes(): cocoascript.id;
    setBadgeTextAttributes(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritemstateappearance/3198072-badgebackgroundcolor
    badgeBackgroundColor(): cocoascript.UIColor;
    setBadgeBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritemstateappearance/3198075-badgetitlepositionadjustment
    badgeTitlePositionAdjustment(): cocoascript.UIOffset;
    setBadgeTitlePositionAdjustment(): void;
    // doc://com.apple.documentation/documentation/uikit/uitabbaritemstateappearance/3198073-badgepositionadjustment
    badgePositionAdjustment(): cocoascript.UIOffset;
    setBadgePositionAdjustment(): void;
    //
    alloc():cocoascript.UITabBarItemStateAppearance;
    //
    init():cocoascript.UITabBarItemStateAppearance;
  }
}

declare const UITabBarItemStateAppearance: cocoascript.UITabBarItemStateAppearance;
declare namespace cocoascript {
  /**
   * An object for customizing the basic appearance of system bars.
   * doc://com.apple.documentation/documentation/uikit/uibarappearance
   */
  interface UIBarAppearance extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uibarappearance/3198004-initwithidiom
    initWithIdiom(idiom: cocoascript.UIUserInterfaceIdiom):cocoascript.UIBarAppearance;
    // doc://com.apple.documentation/documentation/uikit/uibarappearance/3198002-initwithbarappearance
    initWithBarAppearance(barAppearance: cocoascript.UIBarAppearance):cocoascript.UIBarAppearance;
    // doc://com.apple.documentation/documentation/uikit/uibarappearance/3198001-init
    init():cocoascript.UIBarAppearance;
    // doc://com.apple.documentation/documentation/uikit/uibarappearance/3198003-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIBarAppearance;
    // doc://com.apple.documentation/documentation/uikit/uibarappearance/3197997-configurewithdefaultbackground
    configureWithDefaultBackground():void;
    // doc://com.apple.documentation/documentation/uikit/uibarappearance/3197998-configurewithopaquebackground
    configureWithOpaqueBackground():void;
    // doc://com.apple.documentation/documentation/uikit/uibarappearance/3197999-configurewithtransparentbackgrou
    configureWithTransparentBackground():void;
    // doc://com.apple.documentation/documentation/uikit/uibarappearance/3197994-backgroundeffect
    backgroundEffect(): cocoascript.UIBlurEffect;
    setBackgroundEffect(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarappearance/3197993-backgroundcolor
    backgroundColor(): cocoascript.UIColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarappearance/3197995-backgroundimage
    backgroundImage(): cocoascript.UIImage;
    setBackgroundImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarappearance/3197996-backgroundimagecontentmode
    backgroundImageContentMode(): cocoascript.UIViewContentMode;
    setBackgroundImageContentMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarappearance/3198008-shadowcolor
    shadowColor(): cocoascript.UIColor;
    setShadowColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarappearance/3198009-shadowimage
    shadowImage(): cocoascript.UIImage;
    setShadowImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarappearance/3198000-idiom
    idiom(): cocoascript.UIUserInterfaceIdiom;
    setIdiom(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarappearance/3368150-copy
    copy():cocoascript.UIBarAppearance;
    //
    alloc():cocoascript.UIBarAppearance;
    //
    init():cocoascript.UIBarAppearance;
  }
}

declare const UIBarAppearance: cocoascript.UIBarAppearance;
declare namespace cocoascript {
  /**
   * An object for customizing the appearance of bar button items.
   * doc://com.apple.documentation/documentation/uikit/uibarbuttonitemappearance
   */
  interface UIBarButtonItemAppearance extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemappearance/3198018-initwithstyle
    initWithStyle(style: cocoascript.UIBarButtonItemStyle):cocoascript.UIBarButtonItemAppearance;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemappearance/3198015-init
    init():cocoascript.UIBarButtonItemAppearance;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemappearance/3198017-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIBarButtonItemAppearance;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemappearance/3198011-configurewithdefaultforstyle
    configureWithDefaultForStyle(style: cocoascript.UIBarButtonItemStyle):void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemappearance/3198019-normal
    normal(): cocoascript.UIBarButtonItemStateAppearance;
    setNormal(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemappearance/3198012-disabled
    disabled(): cocoascript.UIBarButtonItemStateAppearance;
    setDisabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemappearance/3198014-highlighted
    highlighted(): cocoascript.UIBarButtonItemStateAppearance;
    setHighlighted(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemappearance/3198013-focused
    focused(): cocoascript.UIBarButtonItemStateAppearance;
    setFocused(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemappearance/3368152-copy
    copy():cocoascript.UIBarButtonItemAppearance;
    //
    alloc():cocoascript.UIBarButtonItemAppearance;
    //
    init():cocoascript.UIBarButtonItemAppearance;
  }
}

declare const UIBarButtonItemAppearance: cocoascript.UIBarButtonItemAppearance;
declare namespace cocoascript {
  /**
   * A data object containing the specific customizations for a bar button item in a particular state.
   * doc://com.apple.documentation/documentation/uikit/uibarbuttonitemstateappearance
   */
  interface UIBarButtonItemStateAppearance extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemstateappearance/3198025-titletextattributes
    titleTextAttributes(): cocoascript.id;
    setTitleTextAttributes(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemstateappearance/3198024-titlepositionadjustment
    titlePositionAdjustment(): cocoascript.UIOffset;
    setTitlePositionAdjustment(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemstateappearance/3198022-backgroundimage
    backgroundImage(): cocoascript.UIImage;
    setBackgroundImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemstateappearance/3198023-backgroundimagepositionadjustmen
    backgroundImagePositionAdjustment(): cocoascript.UIOffset;
    setBackgroundImagePositionAdjustment(): void;
    //
    alloc():cocoascript.UIBarButtonItemStateAppearance;
    //
    init():cocoascript.UIBarButtonItemStateAppearance;
  }
}

declare const UIBarButtonItemStateAppearance: cocoascript.UIBarButtonItemStateAppearance;
declare namespace cocoascript {
  /**
   * A protocol that a class must adopt to allow appearance customization using the
   * doc://com.apple.documentation/documentation/uikit/uiappearancecontainer
   */
  interface UIAppearanceContainer extends NSObject {
  }
}
declare namespace cocoascript {
  /**
   * The abstract superclass for all feedback generators.
   * doc://com.apple.documentation/documentation/uikit/uifeedbackgenerator
   */
  interface UIFeedbackGenerator extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uifeedbackgenerator/2369818-prepare
    prepare():void;
    //
    alloc():cocoascript.UIFeedbackGenerator;
    //
    init():cocoascript.UIFeedbackGenerator;
  }
}

declare const UIFeedbackGenerator: cocoascript.UIFeedbackGenerator;
declare namespace cocoascript {
  /**
   * A concrete
   * doc://com.apple.documentation/documentation/uikit/uiimpactfeedbackgenerator
   */
  interface UIImpactFeedbackGenerator extends UIFeedbackGenerator {
    // doc://com.apple.documentation/documentation/uikit/uiimpactfeedbackgenerator/2374286-initwithstyle
    initWithStyle(style: cocoascript.UIImpactFeedbackStyle):cocoascript.UIImpactFeedbackGenerator;
    // doc://com.apple.documentation/documentation/uikit/uiimpactfeedbackgenerator/2374287-impactoccurred
    impactOccurred():void;
    // doc://com.apple.documentation/documentation/uikit/uiimpactfeedbackgenerator/3183920-impactoccurredwithintensity
    impactOccurredWithIntensity(intensity: cocoascript.CGFloat):void;
    //
    alloc():cocoascript.UIImpactFeedbackGenerator;
    //
    init():cocoascript.UIImpactFeedbackGenerator;
  }
}

declare const UIImpactFeedbackGenerator: cocoascript.UIImpactFeedbackGenerator;
declare namespace cocoascript {
  /**
   * A concrete
   * doc://com.apple.documentation/documentation/uikit/uinotificationfeedbackgenerator
   */
  interface UINotificationFeedbackGenerator extends UIFeedbackGenerator {
    // doc://com.apple.documentation/documentation/uikit/uinotificationfeedbackgenerator/2369826-notificationoccurred
    notificationOccurred(notificationType: cocoascript.UINotificationFeedbackType):void;
    //
    alloc():cocoascript.UINotificationFeedbackGenerator;
    //
    init():cocoascript.UINotificationFeedbackGenerator;
  }
}

declare const UINotificationFeedbackGenerator: cocoascript.UINotificationFeedbackGenerator;
declare namespace cocoascript {
  /**
   * A concrete
   * doc://com.apple.documentation/documentation/uikit/uiselectionfeedbackgenerator
   */
  interface UISelectionFeedbackGenerator extends UIFeedbackGenerator {
    // doc://com.apple.documentation/documentation/uikit/uiselectionfeedbackgenerator/2374284-selectionchanged
    selectionChanged():void;
    //
    alloc():cocoascript.UISelectionFeedbackGenerator;
    //
    init():cocoascript.UISelectionFeedbackGenerator;
  }
}

declare const UISelectionFeedbackGenerator: cocoascript.UISelectionFeedbackGenerator;
declare namespace cocoascript {
  /**
   * An object that defines the properties associated with a hardware-based display.
   * doc://com.apple.documentation/documentation/uikit/uiscreen
   */
  interface UIScreen extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617815-mainscreen
    mainScreen(): cocoascript.UIScreen;
    setMainScreen(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617812-screens
    screens(): cocoascript.UIScreen;
    setScreens(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617829-mirroredscreen
    mirroredScreen(): cocoascript.UIScreen;
    setMirroredScreen(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617833-coordinatespace
    coordinateSpace(): cocoascript.UICoordinateSpace;
    setCoordinateSpace(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617819-fixedcoordinatespace
    fixedCoordinateSpace(): cocoascript.UICoordinateSpace;
    setFixedCoordinateSpace(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617838-bounds
    bounds(): cocoascript.CGRect;
    setBounds(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617835-applicationframe
    applicationFrame(): cocoascript.CGRect;
    setApplicationFrame(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617810-nativebounds
    nativeBounds(): cocoascript.CGRect;
    setNativeBounds(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617825-nativescale
    nativeScale(): cocoascript.CGFloat;
    setNativeScale(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617836-scale
    scale(): cocoascript.CGFloat;
    setScale(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617817-currentmode
    currentMode(): cocoascript.UIScreenMode;
    setCurrentMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617823-preferredmode
    preferredMode(): cocoascript.UIScreenMode;
    setPreferredMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617839-availablemodes
    availableModes(): cocoascript.UIScreenMode;
    setAvailableModes(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617820-displaylinkwithtarget
    displayLinkWithTarget_selector(target: cocoascript.UIScreen, sel: cocoascript.SEL):cocoascript.CADisplayLink;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/2806814-maximumframespersecond
    maximumFramesPerSecond(): cocoascript.NSInteger;
    setMaximumFramesPerSecond(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617830-brightness
    brightness(): cocoascript.CGFloat;
    setBrightness(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617821-wantssoftwaredimming
    wantsSoftwareDimming(): cocoascript.BOOL;
    setWantsSoftwareDimming(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617824-overscancompensationinsets
    overscanCompensationInsets(): cocoascript.UIEdgeInsets;
    setOverscanCompensationInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617818-overscancompensation
    overscanCompensation(): cocoascript.UIScreenOverscanCompensation;
    setOverscanCompensation(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617814-snapshotviewafterscreenupdates
    snapshotViewAfterScreenUpdates(afterUpdates: cocoascript.BOOL):cocoascript.UIView;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/2921651-captured
    captured(): cocoascript.BOOL;
    setCaptured(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1649175-focuseditem
    focusedItem(): cocoascript.UIFocusItem;
    setFocusedItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617831-focusedview
    focusedView(): cocoascript.UIView;
    setFocusedView(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/1617816-supportsfocus
    supportsFocus(): cocoascript.BOOL;
    setSupportsFocus(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreen/3368162-calibratedlatency
    calibratedLatency(): cocoascript.CFTimeInterval;
    setCalibratedLatency(): void;
    //
    alloc():cocoascript.UIScreen;
    //
    init():cocoascript.UIScreen;
  }
}

declare const UIScreen: cocoascript.UIScreen;
declare namespace cocoascript {
  /**
   * The backdrop for your app’s user interface and the object that dispatches events to your views.
   * doc://com.apple.documentation/documentation/uikit/uiwindow
   */
  interface UIWindow extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uiwindow/3197961-initwithwindowscene
    initWithWindowScene(windowScene: cocoascript.UIWindowScene):cocoascript.UIWindow;
    // doc://com.apple.documentation/documentation/uikit/uiwindow/1621581-rootviewcontroller
    rootViewController(): cocoascript.UIViewController;
    setRootViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwindow/1621593-windowlevel
    windowLevel(): cocoascript.UIWindowLevel;
    setWindowLevel(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwindow/1621597-setscreen
    screen(): cocoascript.UIScreen;
    setScreen(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwindow/3368165-canresizetofitcontent
    canResizeToFitContent(): cocoascript.BOOL;
    setCanResizeToFitContent(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwindow/1621612-keywindow
    keyWindow(): cocoascript.BOOL;
    setKeyWindow(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwindow/1621601-makekeyandvisible
    makeKeyAndVisible():void;
    // doc://com.apple.documentation/documentation/uikit/uiwindow/1621610-makekeywindow
    makeKeyWindow():void;
    // doc://com.apple.documentation/documentation/uikit/uiwindow/1621596-becomekeywindow
    becomeKeyWindow():void;
    // doc://com.apple.documentation/documentation/uikit/uiwindow/1621618-resignkeywindow
    resignKeyWindow():void;
    // doc://com.apple.documentation/documentation/uikit/uiwindow/3197962-windowscene
    windowScene(): cocoascript.UIWindowScene;
    setWindowScene(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwindow/2935634-avdisplaymanager
    avDisplayManager(): cocoascript.AVDisplayManager;
    setAvDisplayManager(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwindow/1621589-convertpoint
    convertPoint_toWindow(point: cocoascript.CGPoint, window: cocoascript.UIWindow):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uiwindow/1621583-convertpoint
    convertPoint_fromWindow(point: cocoascript.CGPoint, window: cocoascript.UIWindow):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uiwindow/1621609-convertrect
    convertRect_toWindow(rect: cocoascript.CGRect, window: cocoascript.UIWindow):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uiwindow/1621604-convertrect
    convertRect_fromWindow(rect: cocoascript.CGRect, window: cocoascript.UIWindow):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uiwindow/1621614-sendevent
    sendEvent(event: cocoascript.UIEvent):void;
    //
    alloc():cocoascript.UIWindow;
    //
    init():cocoascript.UIWindow;
  }
}

declare const UIWindow: cocoascript.UIWindow;
declare const UIKeyboardAnimationCurveUserInfoKey: cocoascript.NSString;
declare const UIKeyboardAnimationDurationUserInfoKey: cocoascript.NSString;
declare const UIKeyboardIsLocalUserInfoKey: cocoascript.NSString;
declare const UIKeyboardCenterBeginUserInfoKey: cocoascript.NSString;
declare const UIKeyboardCenterEndUserInfoKey: cocoascript.NSString;
declare const UIKeyboardBoundsUserInfoKey: cocoascript.NSString;
declare const UIKeyboardFrameBeginUserInfoKey: cocoascript.NSString;
declare const UIKeyboardFrameEndUserInfoKey: cocoascript.NSString;
declare namespace cocoascript {
  /**
   * The background appearance for a popover.
   * doc://com.apple.documentation/documentation/uikit/uipopoverbackgroundview
   */
  interface UIPopoverBackgroundView extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uipopoverbackgroundview/1619347-arrowoffset
    arrowOffset(): cocoascript.CGFloat;
    setArrowOffset(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopoverbackgroundview/1619355-arrowdirection
    arrowDirection(): cocoascript.UIPopoverArrowDirection;
    setArrowDirection(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopoverbackgroundview/1619357-wantsdefaultcontentappearance
    wantsDefaultContentAppearance(): cocoascript.BOOL;
    setWantsDefaultContentAppearance(): void;
    //
    alloc():cocoascript.UIPopoverBackgroundView;
    //
    init():cocoascript.UIPopoverBackgroundView;
  }
}

declare const UIPopoverBackgroundView: cocoascript.UIPopoverBackgroundView;
declare namespace cocoascript {
  /**
   * A set of methods for converting between different frames of reference on a screen.
   * doc://com.apple.documentation/documentation/uikit/uicoordinatespace
   */
  interface UICoordinateSpace extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicoordinatespace/1622443-bounds
    bounds(): cocoascript.CGRect;
    setBounds(): void;
    // doc://com.apple.documentation/documentation/uikit/uicoordinatespace/1622609-convertpoint
    convertPoint_toCoordinateSpace(point: cocoascript.CGPoint, coordinateSpace: cocoascript.UICoordinateSpace):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uicoordinatespace/1622550-convertpoint
    convertPoint_fromCoordinateSpace(point: cocoascript.CGPoint, coordinateSpace: cocoascript.UICoordinateSpace):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uicoordinatespace/1622564-convertrect
    convertRect_toCoordinateSpace(rect: cocoascript.CGRect, coordinateSpace: cocoascript.UICoordinateSpace):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uicoordinatespace/1622661-convertrect
    convertRect_fromCoordinateSpace(rect: cocoascript.CGRect, coordinateSpace: cocoascript.UICoordinateSpace):cocoascript.CGRect;
  }
}
declare namespace cocoascript {
  /**
   * An object that manages the display of content in a popover.
   * doc://com.apple.documentation/documentation/uikit/uipopoverpresentationcontroller
   */
  interface UIPopoverPresentationController extends UIPresentationController {
    // doc://com.apple.documentation/documentation/uikit/uipopoverpresentationcontroller/1622320-delegate
    delegate(): cocoascript.UIPopoverPresentationControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopoverpresentationcontroller/1622323-popoverlayoutmargins
    popoverLayoutMargins(): cocoascript.UIEdgeInsets;
    setPopoverLayoutMargins(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopoverpresentationcontroller/1622316-backgroundcolor
    backgroundColor(): cocoascript.UIColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopoverpresentationcontroller/1622312-passthroughviews
    passthroughViews(): cocoascript.UIView;
    setPassthroughViews(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopoverpresentationcontroller/1622318-popoverbackgroundviewclass
    popoverBackgroundViewClass(): cocoascript.UIPopoverBackgroundViewMethods;
    setPopoverBackgroundViewClass(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopoverpresentationcontroller/1622325-canoverlapsourceviewrect
    canOverlapSourceViewRect(): cocoascript.BOOL;
    setCanOverlapSourceViewRect(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopoverpresentationcontroller/1622314-barbuttonitem
    barButtonItem(): cocoascript.UIBarButtonItem;
    setBarButtonItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopoverpresentationcontroller/1622313-sourceview
    sourceView(): cocoascript.UIView;
    setSourceView(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopoverpresentationcontroller/1622324-sourcerect
    sourceRect(): cocoascript.CGRect;
    setSourceRect(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopoverpresentationcontroller/1622319-permittedarrowdirections
    permittedArrowDirections(): cocoascript.UIPopoverArrowDirection;
    setPermittedArrowDirections(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopoverpresentationcontroller/1622315-arrowdirection
    arrowDirection(): cocoascript.UIPopoverArrowDirection;
    setArrowDirection(): void;
    //
    alloc():cocoascript.UIPopoverPresentationController;
    //
    init():cocoascript.UIPopoverPresentationController;
  }
}

declare const UIPopoverPresentationController: cocoascript.UIPopoverPresentationController;
declare namespace cocoascript {
  /**
   * A set of methods that
   * doc://com.apple.documentation/documentation/uikit/uipopoverbackgroundviewmethods
   */
  interface UIPopoverBackgroundViewMethods {
  }
}
declare namespace cocoascript {
  /**
   * An action that can be taken when the user taps a button in an alert.
   * doc://com.apple.documentation/documentation/uikit/uialertaction
   */
  interface UIAlertAction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uialertaction/1620098-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uialertaction/1620107-style
    style(): cocoascript.UIAlertActionStyle;
    setStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uialertaction/1620109-enabled
    enabled(): cocoascript.BOOL;
    setEnabled(): void;
    //
    alloc():cocoascript.UIAlertAction;
    //
    init():cocoascript.UIAlertAction;
  }
}

declare const UIAlertAction: cocoascript.UIAlertAction;
declare namespace cocoascript {
  /**
   * A possible set of attributes that can be applied to a screen object.
   * doc://com.apple.documentation/documentation/uikit/uiscreenmode
   */
  interface UIScreenMode extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiscreenmode/1620083-size
    size(): cocoascript.CGSize;
    setSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreenmode/1620082-pixelaspectratio
    pixelAspectRatio(): cocoascript.CGFloat;
    setPixelAspectRatio(): void;
    //
    alloc():cocoascript.UIScreenMode;
    //
    init():cocoascript.UIScreenMode;
  }
}

declare const UIScreenMode: cocoascript.UIScreenMode;
declare namespace cocoascript {
  /**
   * An object that describes a single user interaction with your app.
   * doc://com.apple.documentation/documentation/uikit/uievent
   */
  interface UIEvent extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uievent/1613836-alltouches
    allTouches(): cocoascript.UITouch;
    setAllTouches(): void;
    // doc://com.apple.documentation/documentation/uikit/uievent/1613812-touchesforview
    touchesForView(view: cocoascript.UIView):cocoascript.UITouch;
    // doc://com.apple.documentation/documentation/uikit/uievent/1613794-touchesforwindow
    touchesForWindow(window: cocoascript.UIWindow):cocoascript.UITouch;
    // doc://com.apple.documentation/documentation/uikit/uievent/1613808-coalescedtouchesfortouch
    coalescedTouchesForTouch(touch: cocoascript.UITouch):cocoascript.UITouch;
    // doc://com.apple.documentation/documentation/uikit/uievent/1613814-predictedtouchesfortouch
    predictedTouchesForTouch(touch: cocoascript.UITouch):cocoascript.UITouch;
    // doc://com.apple.documentation/documentation/uikit/uievent/1613790-timestamp
    timestamp(): cocoascript.NSTimeInterval;
    setTimestamp(): void;
    // doc://com.apple.documentation/documentation/uikit/uievent/1613840-type
    type(): cocoascript.UIEventType;
    setType(): void;
    // doc://com.apple.documentation/documentation/uikit/uievent/1613824-subtype
    subtype(): cocoascript.UIEventSubtype;
    setSubtype(): void;
    // doc://com.apple.documentation/documentation/uikit/uievent/1613832-touchesforgesturerecognizer
    touchesForGestureRecognizer(gesture: cocoascript.UIGestureRecognizer):cocoascript.UITouch;
    // doc://com.apple.documentation/documentation/uikit/uievent/3538960-buttonmask
    buttonMask(): cocoascript.UIEventButtonMask;
    setButtonMask(): void;
    // doc://com.apple.documentation/documentation/uikit/uievent/3538961-modifierflags
    modifierFlags(): cocoascript.UIKeyModifierFlags;
    setModifierFlags(): void;
    //
    alloc():cocoascript.UIEvent;
    //
    init():cocoascript.UIEvent;
  }
}

declare const UIEvent: cocoascript.UIEvent;
declare namespace cocoascript {
  /**
   * An object representing the location, size, movement, and force of a touch occurring on the screen.
   * doc://com.apple.documentation/documentation/uikit/uitouch
   */
  interface UITouch extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618116-locationinview
    locationInView(view: cocoascript.UIView):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618135-previouslocationinview
    previousLocationInView(view: cocoascript.UIView):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618109-view
    view(): cocoascript.UIView;
    setView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618126-window
    window(): cocoascript.UIWindow;
    setWindow(): void;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618106-majorradius
    majorRadius(): cocoascript.CGFloat;
    setMajorRadius(): void;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618120-majorradiustolerance
    majorRadiusTolerance(): cocoascript.CGFloat;
    setMajorRadiusTolerance(): void;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618134-preciselocationinview
    preciseLocationInView(view: cocoascript.UIView):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618129-precisepreviouslocationinview
    precisePreviousLocationInView(view: cocoascript.UIView):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618132-tapcount
    tapCount(): cocoascript.NSUInteger;
    setTapCount(): void;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618144-timestamp
    timestamp(): cocoascript.NSTimeInterval;
    setTimestamp(): void;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618143-type
    type(): cocoascript.UITouchType;
    setType(): void;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618113-phase
    phase(): cocoascript.UITouchPhase;
    setPhase(): void;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618110-force
    force(): cocoascript.CGFloat;
    setForce(): void;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618121-maximumpossibleforce
    maximumPossibleForce(): cocoascript.CGFloat;
    setMaximumPossibleForce(): void;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618118-altitudeangle
    altitudeAngle(): cocoascript.CGFloat;
    setAltitudeAngle(): void;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618131-azimuthangleinview
    azimuthAngleInView(view: cocoascript.UIView):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618133-azimuthunitvectorinview
    azimuthUnitVectorInView(view: cocoascript.UIView):cocoascript.CGVector;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618130-estimatedproperties
    estimatedProperties(): cocoascript.UITouchProperties;
    setEstimatedProperties(): void;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618119-estimatedpropertiesexpectingupda
    estimatedPropertiesExpectingUpdates(): cocoascript.UITouchProperties;
    setEstimatedPropertiesExpectingUpdates(): void;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618137-estimationupdateindex
    estimationUpdateIndex(): cocoascript.NSNumber;
    setEstimationUpdateIndex(): void;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1618114-gesturerecognizers
    gestureRecognizers(): cocoascript.UIGestureRecognizer;
    setGestureRecognizers(): void;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1614836-locationinnode
    locationInNode(node: cocoascript.SKNode):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uitouch/1615023-previouslocationinnode
    previousLocationInNode(node: cocoascript.SKNode):cocoascript.CGPoint;
    //
    alloc():cocoascript.UITouch;
    //
    init():cocoascript.UITouch;
  }
}

declare const UITouch: cocoascript.UITouch;
declare namespace cocoascript {
  /**
   * An object that represents the presence or movement of a button press on the screen for a particular event.
   * doc://com.apple.documentation/documentation/uikit/uipress
   */
  interface UIPress extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipress/1620364-force
    force(): cocoascript.CGFloat;
    setForce(): void;
    // doc://com.apple.documentation/documentation/uikit/uipress/1620376-gesturerecognizers
    gestureRecognizers(): cocoascript.UIGestureRecognizer;
    setGestureRecognizers(): void;
    // doc://com.apple.documentation/documentation/uikit/uipress/1620374-responder
    responder(): cocoascript.UIResponder;
    setResponder(): void;
    // doc://com.apple.documentation/documentation/uikit/uipress/1620366-window
    window(): cocoascript.UIWindow;
    setWindow(): void;
    // doc://com.apple.documentation/documentation/uikit/uipress/3526315-key
    key(): cocoascript.UIKey;
    setKey(): void;
    // doc://com.apple.documentation/documentation/uikit/uipress/1620370-type
    type(): cocoascript.UIPressType;
    setType(): void;
    // doc://com.apple.documentation/documentation/uikit/uipress/1620367-phase
    phase(): cocoascript.UIPressPhase;
    setPhase(): void;
    // doc://com.apple.documentation/documentation/uikit/uipress/1620360-timestamp
    timestamp(): cocoascript.NSTimeInterval;
    setTimestamp(): void;
    //
    alloc():cocoascript.UIPress;
    //
    init():cocoascript.UIPress;
  }
}

declare const UIPress: cocoascript.UIPress;
declare namespace cocoascript {
  /**
   * An event that describes the state of a set of physical buttons that are available to the device, such as those on an associated remote or game controller.
   * doc://com.apple.documentation/documentation/uikit/uipressesevent
   */
  interface UIPressesEvent extends UIEvent {
    // doc://com.apple.documentation/documentation/uikit/uipressesevent/1623575-allpresses
    allPresses(): cocoascript.UIPress;
    setAllPresses(): void;
    // doc://com.apple.documentation/documentation/uikit/uipressesevent/1623574-pressesforgesturerecognizer
    pressesForGestureRecognizer(gesture: cocoascript.UIGestureRecognizer):cocoascript.UIPress;
    //
    alloc():cocoascript.UIPressesEvent;
    //
    init():cocoascript.UIPressesEvent;
  }
}

declare const UIPressesEvent: cocoascript.UIPressesEvent;
declare namespace cocoascript {
  /**
   * A set of methods implemented by the delegate of a gesture recognizer to fine-tune an app’s gesture-recognition behavior.
   * doc://com.apple.documentation/documentation/uikit/uigesturerecognizerdelegate
   */
  interface UIGestureRecognizerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizerdelegate/1624213-gesturerecognizershouldbegin
    gestureRecognizerShouldBegin(gestureRecognizer: cocoascript.UIGestureRecognizer):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizerdelegate/1624214-gesturerecognizer
    gestureRecognizer_shouldReceiveTouch(gestureRecognizer: cocoascript.UIGestureRecognizer, touch: cocoascript.UITouch):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizerdelegate/1624216-gesturerecognizer
    gestureRecognizer_shouldReceivePress(gestureRecognizer: cocoascript.UIGestureRecognizer, press: cocoascript.UIPress):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizerdelegate/3538976-gesturerecognizer
    gestureRecognizer_shouldReceiveEvent(gestureRecognizer: cocoascript.UIGestureRecognizer, event: cocoascript.UIEvent):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizerdelegate/1624208-gesturerecognizer
    gestureRecognizer_shouldRecognizeSimultaneouslyWithGestureRecognizer(gestureRecognizer: cocoascript.UIGestureRecognizer, otherGestureRecognizer: cocoascript.UIGestureRecognizer):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizerdelegate/1624229-gesturerecognizer
    gestureRecognizer_shouldRequireFailureOfGestureRecognizer(gestureRecognizer: cocoascript.UIGestureRecognizer, otherGestureRecognizer: cocoascript.UIGestureRecognizer):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uigesturerecognizerdelegate/1624222-gesturerecognizer
    gestureRecognizer_shouldBeRequiredToFailByGestureRecognizer(gestureRecognizer: cocoascript.UIGestureRecognizer, otherGestureRecognizer: cocoascript.UIGestureRecognizer):cocoascript.BOOL;
  }
}
declare namespace cocoascript {
  /**
   * A class that registers a view to provide a custom user experience in response to 3D Touch interactions.
   * doc://com.apple.documentation/documentation/uikit/uipreviewinteraction
   */
  interface UIPreviewInteraction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipreviewinteraction/1648541-initwithview
    initWithView(view: cocoascript.UIView):cocoascript.UIPreviewInteraction;
    // doc://com.apple.documentation/documentation/uikit/uipreviewinteraction/1648537-delegate
    delegate(): cocoascript.UIPreviewInteractionDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uipreviewinteraction/1648544-view
    view(): cocoascript.UIView;
    setView(): void;
    // doc://com.apple.documentation/documentation/uikit/uipreviewinteraction/1648539-cancelinteraction
    cancelInteraction():void;
    // doc://com.apple.documentation/documentation/uikit/uipreviewinteraction/1648545-locationincoordinatespace
    locationInCoordinateSpace(coordinateSpace: cocoascript.UICoordinateSpace):cocoascript.CGPoint;
    //
    alloc():cocoascript.UIPreviewInteraction;
    //
    init():cocoascript.UIPreviewInteraction;
  }
}

declare const UIPreviewInteraction: cocoascript.UIPreviewInteraction;
declare namespace cocoascript {
  /**
   * A set of methods for communicating the progress of a preview interaction.
   * doc://com.apple.documentation/documentation/uikit/uipreviewinteractiondelegate
   */
  interface UIPreviewInteractionDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipreviewinteractiondelegate/1648538-previewinteractionshouldbegin
    previewInteractionShouldBegin(previewInteraction: cocoascript.UIPreviewInteraction):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uipreviewinteractiondelegate/1648546-previewinteraction
    previewInteraction_didUpdatePreviewTransition_ended(previewInteraction: cocoascript.UIPreviewInteraction, transitionProgress: cocoascript.CGFloat, ended: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uipreviewinteractiondelegate/1648540-previewinteraction
    previewInteraction_didUpdateCommitTransition_ended(previewInteraction: cocoascript.UIPreviewInteraction, transitionProgress: cocoascript.CGFloat, ended: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uipreviewinteractiondelegate/1648547-previewinteractiondidcancel
    previewInteractionDidCancel(previewInteraction: cocoascript.UIPreviewInteraction):void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that defines the styles you can apply to peek quick actions and peek quick action groups, and defines a read-only accessor for the user-visible title of a peek quick action.
   * doc://com.apple.documentation/documentation/uikit/uipreviewactionitem
   */
  interface UIPreviewActionItem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipreviewactionitem/1621352-title
    title(): cocoascript.NSString;
    setTitle(): void;
  }
}
declare namespace cocoascript {
  /**
   * An interaction that enables support for effects on a view or customizes the pointer's appearance within a region of an app.
   * doc://com.apple.documentation/documentation/uikit/uipointerinteraction
   */
  interface UIPointerInteraction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipointerinteraction/3538989-initwithdelegate
    initWithDelegate(delegate: cocoascript.UIPointerInteractionDelegate):cocoascript.UIPointerInteraction;
    // doc://com.apple.documentation/documentation/uikit/uipointerinteraction/3538987-delegate
    delegate(): cocoascript.UIPointerInteractionDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uipointerinteraction/3538988-enabled
    enabled(): cocoascript.BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uipointerinteraction/3538990-invalidate
    invalidate():void;
    //
    alloc():cocoascript.UIPointerInteraction;
    //
    init():cocoascript.UIPointerInteraction;
  }
}

declare const UIPointerInteraction: cocoascript.UIPointerInteraction;
declare namespace cocoascript {
  /**
   * An interface for handling pointer movements within the interaction's view.
   * doc://com.apple.documentation/documentation/uikit/uipointerinteractiondelegate
   */
  interface UIPointerInteractionDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipointerinteractiondelegate/3538995-pointerinteraction
    pointerInteraction_regionForRequest_defaultRegion(interaction: cocoascript.UIPointerInteraction, request: cocoascript.UIPointerRegionRequest, defaultRegion: cocoascript.UIPointerRegion):cocoascript.UIPointerRegion;
    // doc://com.apple.documentation/documentation/uikit/uipointerinteractiondelegate/3538996-pointerinteraction
    pointerInteraction_styleForRegion(interaction: cocoascript.UIPointerInteraction, region: cocoascript.UIPointerRegion):cocoascript.UIPointerStyle;
    // doc://com.apple.documentation/documentation/uikit/uipointerinteractiondelegate/3538997-pointerinteraction
    pointerInteraction_willEnterRegion_animator(interaction: cocoascript.UIPointerInteraction, region: cocoascript.UIPointerRegion, animator: cocoascript.UIPointerInteractionAnimating):void;
    // doc://com.apple.documentation/documentation/uikit/uipointerinteractiondelegate/3538998-pointerinteraction
    pointerInteraction_willExitRegion_animator(interaction: cocoascript.UIPointerInteraction, region: cocoascript.UIPointerRegion, animator: cocoascript.UIPointerInteractionAnimating):void;
  }
}
declare namespace cocoascript {
  /**
   * An object that defines the pointer shape and effect.
   * doc://com.apple.documentation/documentation/uikit/uipointerstyle
   */
  interface UIPointerStyle extends NSObject {
    //
    alloc():cocoascript.UIPointerStyle;
    //
    init():cocoascript.UIPointerStyle;
  }
}

declare const UIPointerStyle: cocoascript.UIPointerStyle;
declare namespace cocoascript {
  /**
   * An effect where the pointer slides under the given view and disappears as the view scales up and gains a shadow.
   * doc://com.apple.documentation/documentation/uikit/uipointerlifteffect
   */
  interface UIPointerLiftEffect extends UIPointerEffect {
    //
    alloc():cocoascript.UIPointerLiftEffect;
    //
    init():cocoascript.UIPointerLiftEffect;
  }
}

declare const UIPointerLiftEffect: cocoascript.UIPointerLiftEffect;
declare namespace cocoascript {
  /**
   * An interface for modifying an interaction animation in coordination with the pointer effect animations.
   * doc://com.apple.documentation/documentation/uikit/uipointerinteractionanimating
   */
  interface UIPointerInteractionAnimating extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipointerinteractionanimating/3538992-addanimations
    addAnimations(animations: void):void;
    // doc://com.apple.documentation/documentation/uikit/uipointerinteractionanimating/3538993-addcompletion
    addCompletion(completion: void):void;
  }
}
declare namespace cocoascript {
  /**
   * An object that defines the shape of custom pointers.
   * doc://com.apple.documentation/documentation/uikit/uipointershape
   */
  interface UIPointerShape extends NSObject {
    //
    alloc():cocoascript.UIPointerShape;
    //
    init():cocoascript.UIPointerShape;
  }
}

declare const UIPointerShape: cocoascript.UIPointerShape;
declare namespace cocoascript {
  /**
   * An effect that alters a view's appearance when a pointer enters the current region.
   * doc://com.apple.documentation/documentation/uikit/uipointereffect
   */
  interface UIPointerEffect extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipointereffect/3539008-preview
    preview(): cocoascript.UITargetedPreview;
    setPreview(): void;
    //
    alloc():cocoascript.UIPointerEffect;
    //
    init():cocoascript.UIPointerEffect;
  }
}

declare const UIPointerEffect: cocoascript.UIPointerEffect;
declare namespace cocoascript {
  /**
   * A rectangular region that interacts with pointer movements.
   * doc://com.apple.documentation/documentation/uikit/uipointerregion
   */
  interface UIPointerRegion extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipointerregion/3539004-rect
    rect(): cocoascript.CGRect;
    setRect(): void;
    // doc://com.apple.documentation/documentation/uikit/uipointerregion/3539003-identifier
    identifier(): cocoascript.NSObject;
    setIdentifier(): void;
    //
    alloc():cocoascript.UIPointerRegion;
    //
    init():cocoascript.UIPointerRegion;
  }
}

declare const UIPointerRegion: cocoascript.UIPointerRegion;
declare namespace cocoascript {
  /**
   * An object to describe the pointer's location in the interaction's view.
   * doc://com.apple.documentation/documentation/uikit/uipointerregionrequest
   */
  interface UIPointerRegionRequest extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipointerregionrequest/3539000-location
    location(): cocoascript.CGPoint;
    setLocation(): void;
    // doc://com.apple.documentation/documentation/uikit/uipointerregionrequest/3539001-modifiers
    modifiers(): cocoascript.UIKeyModifierFlags;
    setModifiers(): void;
    //
    alloc():cocoascript.UIPointerRegionRequest;
    //
    init():cocoascript.UIPointerRegionRequest;
  }
}

declare const UIPointerRegionRequest: cocoascript.UIPointerRegionRequest;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uipointerlockstate
   */
  interface UIPointerLockState extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipointerlockstate/3601226-locked
    locked(): cocoascript.BOOL;
    setLocked(): void;
    //
    alloc():cocoascript.UIPointerLockState;
    //
    init():cocoascript.UIPointerLockState;
  }
}

declare const UIPointerLockState: cocoascript.UIPointerLockState;
declare namespace cocoascript {
  /**
   * An interaction that tells your app the user double-tapped their Apple Pencil.
   * doc://com.apple.documentation/documentation/uikit/uipencilinteraction
   */
  interface UIPencilInteraction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipencilinteraction/3039591-delegate
    delegate(): cocoascript.UIPencilInteractionDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uipencilinteraction/3039592-enabled
    enabled(): cocoascript.BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uipencilinteraction/3039593-preferredtapaction
    preferredTapAction(): cocoascript.UIPencilPreferredAction;
    setPreferredTapAction(): void;
    // doc://com.apple.documentation/documentation/uikit/uipencilinteraction/3552414-preferspencilonlydrawing
    prefersPencilOnlyDrawing(): cocoascript.BOOL;
    setPrefersPencilOnlyDrawing(): void;
    //
    alloc():cocoascript.UIPencilInteraction;
    //
    init():cocoascript.UIPencilInteraction;
  }
}

declare const UIPencilInteraction: cocoascript.UIPencilInteraction;
declare namespace cocoascript {
  /**
   * The interface an object implements to handle double taps the user makes on their Apple Pencil.
   * doc://com.apple.documentation/documentation/uikit/uipencilinteractiondelegate
   */
  interface UIPencilInteractionDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipencilinteractiondelegate/3039595-pencilinteractiondidtap
    pencilInteractionDidTap(interaction: cocoascript.UIPencilInteraction):void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that define the focus behavior for a branch of the view hierarchy.
   * doc://com.apple.documentation/documentation/uikit/uifocusenvironment
   */
  interface UIFocusEnvironment extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uifocusenvironment/1616837-setneedsfocusupdate
    setNeedsFocusUpdate():void;
    // doc://com.apple.documentation/documentation/uikit/uifocusenvironment/1616833-updatefocusifneeded
    updateFocusIfNeeded():void;
    // doc://com.apple.documentation/documentation/uikit/uifocusenvironment/1616831-shouldupdatefocusincontext
    shouldUpdateFocusInContext(context: cocoascript.UIFocusUpdateContext):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uifocusenvironment/1616841-didupdatefocusincontext
    didUpdateFocusInContext_withAnimationCoordinator(context: cocoascript.UIFocusUpdateContext, coordinator: cocoascript.UIFocusAnimationCoordinator):void;
    // doc://com.apple.documentation/documentation/uikit/uifocusenvironment/1648972-preferredfocusenvironments
    preferredFocusEnvironments(): cocoascript.UIFocusEnvironment;
    setPreferredFocusEnvironments(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusenvironment/1616830-preferredfocusedview
    preferredFocusedView(): cocoascript.UIView;
    setPreferredFocusedView(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusenvironment/2887504-soundidentifierforfocusupdateinc
    soundIdentifierForFocusUpdateInContext(context: cocoascript.UIFocusUpdateContext):cocoascript.UIFocusSoundIdentifier;
    // doc://com.apple.documentation/documentation/uikit/uifocusenvironment/2976950-parentfocusenvironment
    parentFocusEnvironment(): cocoascript.UIFocusEnvironment;
    setParentFocusEnvironment(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusenvironment/2976949-focusitemcontainer
    focusItemContainer(): cocoascript.UIFocusItemContainer;
    setFocusItemContainer(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusenvironment/3601224-focusgroupidentifier
    focusGroupIdentifier(): cocoascript.NSString;
    setFocusGroupIdentifier(): void;
  }
}
declare namespace cocoascript {
  /**
   * Queries and reevaluates the currently focused item.
   * doc://com.apple.documentation/documentation/uikit/uifocussystem
   */
  interface UIFocusSystem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uifocussystem/2866087-focuseditem
    focusedItem(): cocoascript.UIFocusItem;
    setFocusedItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocussystem/2866115-requestfocusupdatetoenvironment
    requestFocusUpdateToEnvironment(environment: cocoascript.UIFocusEnvironment):void;
    // doc://com.apple.documentation/documentation/uikit/uifocussystem/2865914-updatefocusifneeded
    updateFocusIfNeeded():void;
    //
    alloc():cocoascript.UIFocusSystem;
    //
    init():cocoascript.UIFocusSystem;
  }
}

declare const UIFocusSystem: cocoascript.UIFocusSystem;
declare const UIFocusUpdateAnimationCoordinatorKey: cocoascript.NSString;
declare const UIFocusUpdateContextKey: cocoascript.NSString;
declare namespace cocoascript {
  /**
   * An object that provides information relevant to a specific focus update from one view to another.
   * doc://com.apple.documentation/documentation/uikit/uifocusupdatecontext
   */
  interface UIFocusUpdateContext extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uifocusupdatecontext/1616839-previouslyfocusedview
    previouslyFocusedView(): cocoascript.UIView;
    setPreviouslyFocusedView(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusupdatecontext/1616843-nextfocusedview
    nextFocusedView(): cocoascript.UIView;
    setNextFocusedView(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusupdatecontext/1616834-focusheading
    focusHeading(): cocoascript.UIFocusHeading;
    setFocusHeading(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusupdatecontext/1648962-previouslyfocuseditem
    previouslyFocusedItem(): cocoascript.UIFocusItem;
    setPreviouslyFocusedItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusupdatecontext/1648967-nextfocuseditem
    nextFocusedItem(): cocoascript.UIFocusItem;
    setNextFocusedItem(): void;
    //
    alloc():cocoascript.UIFocusUpdateContext;
    //
    init():cocoascript.UIFocusUpdateContext;
  }
}

declare const UIFocusUpdateContext: cocoascript.UIFocusUpdateContext;
declare const UIFocusUpdateAnimationCoordinatorKey: cocoascript.NSString;
declare const UIFocusUpdateContextKey: cocoascript.NSString;
declare namespace cocoascript {
  /**
   * An object that can become focused.
   * doc://com.apple.documentation/documentation/uikit/uifocusitem
   */
  interface UIFocusItem extends UIFocusEnvironment {
    // doc://com.apple.documentation/documentation/uikit/uifocusitem/1648965-canbecomefocused
    canBecomeFocused(): cocoascript.BOOL;
    setCanBecomeFocused(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusitem/2976952-frame
    frame(): cocoascript.CGRect;
    setFrame(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusitem/2976951-didhintfocusmovement
    didHintFocusMovement(hint: cocoascript.UIFocusMovementHint):void;
  }
}
declare namespace cocoascript {
  /**
   * Provides movement hint information for the focused item.
   * doc://com.apple.documentation/documentation/uikit/uifocusmovementhint
   */
  interface UIFocusMovementHint extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uifocusmovementhint/3000774-movementdirection
    movementDirection(): cocoascript.CGVector;
    setMovementDirection(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusmovementhint/3000773-interactiontransform
    interactionTransform(): cocoascript.CATransform3D;
    setInteractionTransform(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusmovementhint/2976962-perspectivetransform
    perspectiveTransform(): cocoascript.CATransform3D;
    setPerspectiveTransform(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusmovementhint/3000775-rotation
    rotation(): cocoascript.CGVector;
    setRotation(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusmovementhint/3000776-translation
    translation(): cocoascript.CGVector;
    setTranslation(): void;
    //
    alloc():cocoascript.UIFocusMovementHint;
    //
    init():cocoascript.UIFocusMovementHint;
  }
}

declare const UIFocusMovementHint: cocoascript.UIFocusMovementHint;
declare namespace cocoascript {
  /**
   * The container responsible for providing geometric context to focus items within a given focus environment.
   * doc://com.apple.documentation/documentation/uikit/uifocusitemcontainer
   */
  interface UIFocusItemContainer extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uifocusitemcontainer/2976954-focusitemsinrect
    focusItemsInRect(rect: cocoascript.CGRect):cocoascript.UIFocusItem;
    // doc://com.apple.documentation/documentation/uikit/uifocusitemcontainer/2998462-coordinatespace
    coordinateSpace(): cocoascript.UICoordinateSpace;
    setCoordinateSpace(): void;
  }
}
declare namespace cocoascript {
  /**
   * A type of focus item container that supports automatic scrolling of focusable content.
   * doc://com.apple.documentation/documentation/uikit/uifocusitemscrollablecontainer
   */
  interface UIFocusItemScrollableContainer extends UIFocusItemContainer {
    // doc://com.apple.documentation/documentation/uikit/uifocusitemscrollablecontainer/2976956-contentoffset
    contentOffset(): cocoascript.CGPoint;
    setContentOffset(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusitemscrollablecontainer/2976957-contentsize
    contentSize(): cocoascript.CGSize;
    setContentSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusitemscrollablecontainer/2998463-visiblesize
    visibleSize(): cocoascript.CGSize;
    setVisibleSize(): void;
  }
}
declare namespace cocoascript {
  /**
   * An object that exposes nonview areas as focusable.
   * doc://com.apple.documentation/documentation/uikit/uifocusguide
   */
  interface UIFocusGuide extends UILayoutGuide {
    // doc://com.apple.documentation/documentation/uikit/uifocusguide/1616838-enabled
    enabled(): cocoascript.BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusguide/1648230-preferredfocusenvironments
    preferredFocusEnvironments(): cocoascript.UIFocusEnvironment;
    setPreferredFocusEnvironments(): void;
    // doc://com.apple.documentation/documentation/uikit/uifocusguide/1616848-preferredfocusedview
    preferredFocusedView(): cocoascript.UIView;
    setPreferredFocusedView(): void;
    //
    alloc():cocoascript.UIFocusGuide;
    //
    init():cocoascript.UIFocusGuide;
  }
}

declare const UIFocusGuide: cocoascript.UIFocusGuide;
declare namespace cocoascript {
  /**
   * A runtime object for debugging focus-related interactions.
   * doc://com.apple.documentation/documentation/uikit/uifocusdebugger
   */
  interface UIFocusDebugger extends NSObject {
    //
    alloc():cocoascript.UIFocusDebugger;
    //
    init():cocoascript.UIFocusDebugger;
  }
}

declare const UIFocusDebugger: cocoascript.UIFocusDebugger;
declare namespace cocoascript {
  /**
   * A coordinator of focus-related animations during a focus update.
   * doc://com.apple.documentation/documentation/uikit/uifocusanimationcoordinator
   */
  interface UIFocusAnimationCoordinator extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uifocusanimationcoordinator/2887565-addcoordinatedfocusinganimations
    addCoordinatedFocusingAnimations_completion(animations: cocoascript.UIFocusAnimationContext, completion: void):void;
    // doc://com.apple.documentation/documentation/uikit/uifocusanimationcoordinator/2887567-addcoordinatedunfocusinganimatio
    addCoordinatedUnfocusingAnimations_completion(animations: cocoascript.UIFocusAnimationContext, completion: void):void;
    // doc://com.apple.documentation/documentation/uikit/uifocusanimationcoordinator/1619045-addcoordinatedanimations
    addCoordinatedAnimations_completion(animations: void, completion: void):void;
    //
    alloc():cocoascript.UIFocusAnimationCoordinator;
    //
    init():cocoascript.UIFocusAnimationCoordinator;
  }
}

declare const UIFocusAnimationCoordinator: cocoascript.UIFocusAnimationCoordinator;
declare namespace cocoascript {
  /**
   * A custom item in the editing menu managed by the menu controller.
   * doc://com.apple.documentation/documentation/uikit/uimenuitem
   */
  interface UIMenuItem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uimenuitem/1622824-initwithtitle
    initWithTitle_action(title: cocoascript.NSString, action: cocoascript.SEL):cocoascript.UIMenuItem;
    // doc://com.apple.documentation/documentation/uikit/uimenuitem/1622827-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uimenuitem/1622817-action
    action(): cocoascript.SEL;
    setAction(): void;
    //
    alloc():cocoascript.UIMenuItem;
    //
    init():cocoascript.UIMenuItem;
  }
}

declare const UIMenuItem: cocoascript.UIMenuItem;
declare namespace cocoascript {
  /**
   * A set of standard methods that apps can adopt to support editing.
   * doc://com.apple.documentation/documentation/uikit/uiresponderstandardeditactions
   */
  interface UIResponderStandardEditActions extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiresponderstandardeditactions/2354193-cut
    cut(sender: cocoascript.UIResponderStandardEditActions):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponderstandardeditactions/2354191-copy
    copy(sender: cocoascript.UIResponderStandardEditActions):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponderstandardeditactions/2354189-paste
    paste(sender: cocoascript.UIResponderStandardEditActions):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponderstandardeditactions/2354197-delete
    delete(sender: cocoascript.UIResponderStandardEditActions):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponderstandardeditactions/2354190-select
    select(sender: cocoascript.UIResponderStandardEditActions):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponderstandardeditactions/2354200-selectall
    selectAll(sender: cocoascript.UIResponderStandardEditActions):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponderstandardeditactions/2354196-toggleboldface
    toggleBoldface(sender: cocoascript.UIResponderStandardEditActions):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponderstandardeditactions/2354187-toggleitalics
    toggleItalics(sender: cocoascript.UIResponderStandardEditActions):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponderstandardeditactions/2354194-toggleunderline
    toggleUnderline(sender: cocoascript.UIResponderStandardEditActions):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponderstandardeditactions/2354198-maketextwritingdirectionlefttori
    makeTextWritingDirectionLeftToRight(sender: cocoascript.UIResponderStandardEditActions):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponderstandardeditactions/2354195-maketextwritingdirectionrighttol
    makeTextWritingDirectionRightToLeft(sender: cocoascript.UIResponderStandardEditActions):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponderstandardeditactions/2354199-increasesize
    increaseSize(sender: cocoascript.UIResponderStandardEditActions):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponderstandardeditactions/2354192-decreasesize
    decreaseSize(sender: cocoascript.UIResponderStandardEditActions):void;
    // doc://com.apple.documentation/documentation/uikit/uiresponderstandardeditactions/3261459-updatetextattributeswithconversi
    updateTextAttributesWithConversionHandler(conversionHandler: cocoascript.UITextAttributesConversionHandler):void;
  }
}
declare namespace cocoascript {
  /**
   * An object that specifies the container view to use for animations.
   * doc://com.apple.documentation/documentation/uikit/uipreviewtarget
   */
  interface UIPreviewTarget extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipreviewtarget/3295964-initwithcontainer
    initWithContainer_center_transform(container: cocoascript.UIView, center: cocoascript.CGPoint, transform: cocoascript.CGAffineTransform):cocoascript.UIPreviewTarget;
    // doc://com.apple.documentation/documentation/uikit/uipreviewtarget/3295963-initwithcontainer
    initWithContainer_center(container: cocoascript.UIView, center: cocoascript.CGPoint):cocoascript.UIPreviewTarget;
    // doc://com.apple.documentation/documentation/uikit/uipreviewtarget/3295962-container
    container(): cocoascript.UIView;
    setContainer(): void;
    // doc://com.apple.documentation/documentation/uikit/uipreviewtarget/3295961-center
    center(): cocoascript.CGPoint;
    setCenter(): void;
    // doc://com.apple.documentation/documentation/uikit/uipreviewtarget/3295965-transform
    transform(): cocoascript.CGAffineTransform;
    setTransform(): void;
    //
    alloc():cocoascript.UIPreviewTarget;
    //
    init():cocoascript.UIPreviewTarget;
  }
}

declare const UIPreviewTarget: cocoascript.UIPreviewTarget;
declare namespace cocoascript {
  /**
   * Additional parameters to use when animating a preview interface.
   * doc://com.apple.documentation/documentation/uikit/uipreviewparameters
   */
  interface UIPreviewParameters extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipreviewparameters/3295951-init
    init():cocoascript.UIPreviewParameters;
    // doc://com.apple.documentation/documentation/uikit/uipreviewparameters/3295952-initwithtextlinerects
    initWithTextLineRects(textLineRects: cocoascript.NSValue):cocoascript.UIPreviewParameters;
    // doc://com.apple.documentation/documentation/uikit/uipreviewparameters/3295950-backgroundcolor
    backgroundColor(): cocoascript.UIColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uipreviewparameters/3295953-visiblepath
    visiblePath(): cocoascript.UIBezierPath;
    setVisiblePath(): void;
    // doc://com.apple.documentation/documentation/uikit/uipreviewparameters/3601230-shadowpath
    shadowPath(): cocoascript.UIBezierPath;
    setShadowPath(): void;
    //
    alloc():cocoascript.UIPreviewParameters;
    //
    init():cocoascript.UIPreviewParameters;
  }
}

declare const UIPreviewParameters: cocoascript.UIPreviewParameters;
declare namespace cocoascript {
  /**
   * An application shortcut item, also called a
   * doc://com.apple.documentation/documentation/uikit/uiapplicationshortcutitem
   */
  interface UIApplicationShortcutItem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiapplicationshortcutitem/1623355-initwithtype
    initWithType_localizedTitle(type: cocoascript.NSString, localizedTitle: cocoascript.NSString):cocoascript.UIApplicationShortcutItem;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationshortcutitem/1623372-initwithtype
    initWithType_localizedTitle_localizedSubtitle_icon_userInfo(type: cocoascript.NSString, localizedTitle: cocoascript.NSString, localizedSubtitle: cocoascript.NSString, icon: cocoascript.UIApplicationShortcutIcon, userInfo: cocoascript.NSSecureCoding):cocoascript.UIApplicationShortcutItem;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationshortcutitem/1623354-localizedtitle
    localizedTitle(): cocoascript.NSString;
    setLocalizedTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationshortcutitem/1623376-localizedsubtitle
    localizedSubtitle(): cocoascript.NSString;
    setLocalizedSubtitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationshortcutitem/1623382-type
    type(): cocoascript.NSString;
    setType(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationshortcutitem/1623352-icon
    icon(): cocoascript.UIApplicationShortcutIcon;
    setIcon(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationshortcutitem/1623370-userinfo
    userInfo(): cocoascript.NSSecureCoding;
    setUserInfo(): void;
    // doc://com.apple.documentation/documentation/uikit/uiapplicationshortcutitem/3238038-targetcontentidentifier
    targetContentIdentifier(): cocoascript.id;
    setTargetContentIdentifier(): void;
    //
    alloc():cocoascript.UIApplicationShortcutItem;
    //
    init():cocoascript.UIApplicationShortcutItem;
  }
}

declare const UIApplicationShortcutItem: cocoascript.UIApplicationShortcutItem;
declare namespace cocoascript {
  /**
   * An image you can optionally associate with a Home screen quick action to improve its appearance and usability.
   * doc://com.apple.documentation/documentation/uikit/uiapplicationshortcuticon
   */
  interface UIApplicationShortcutIcon extends NSObject {
    //
    alloc():cocoascript.UIApplicationShortcutIcon;
    //
    init():cocoascript.UIApplicationShortcutIcon;
  }
}

declare const UIApplicationShortcutIcon: cocoascript.UIApplicationShortcutIcon;
declare namespace cocoascript {
  /**
   * An item that specifies a configurable user-initiated action for your app (the item is also called a mutable Home screen dynamic quick action).
   * doc://com.apple.documentation/documentation/uikit/uimutableapplicationshortcutitem
   */
  interface UIMutableApplicationShortcutItem extends UIApplicationShortcutItem {
    // doc://com.apple.documentation/documentation/uikit/uimutableapplicationshortcutitem/1623371-localizedtitle
    localizedTitle(): cocoascript.NSString;
    setLocalizedTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uimutableapplicationshortcutitem/1623384-localizedsubtitle
    localizedSubtitle(): cocoascript.NSString;
    setLocalizedSubtitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uimutableapplicationshortcutitem/1623362-type
    type(): cocoascript.NSString;
    setType(): void;
    // doc://com.apple.documentation/documentation/uikit/uimutableapplicationshortcutitem/1623351-icon
    icon(): cocoascript.UIApplicationShortcutIcon;
    setIcon(): void;
    // doc://com.apple.documentation/documentation/uikit/uimutableapplicationshortcutitem/1623375-userinfo
    userInfo(): cocoascript.NSSecureCoding;
    setUserInfo(): void;
    // doc://com.apple.documentation/documentation/uikit/uimutableapplicationshortcutitem/3238039-targetcontentidentifier
    targetContentIdentifier(): cocoascript.id;
    setTargetContentIdentifier(): void;
    //
    alloc():cocoascript.UIMutableApplicationShortcutItem;
    //
    init():cocoascript.UIMutableApplicationShortcutItem;
  }
}

declare const UIMutableApplicationShortcutItem: cocoascript.UIMutableApplicationShortcutItem;
declare namespace cocoascript {
  /**
   * Methods that associate a unique identifier with elements in your user interface.
   * doc://com.apple.documentation/documentation/uikit/uiaccessibilityidentification
   */
  interface UIAccessibilityIdentification extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilityidentification/1623132-accessibilityidentifier
    accessibilityIdentifier(): cocoascript.NSString;
    setAccessibilityIdentifier(): void;
  }
}
declare namespace cocoascript {
  /**
   * Methods to implement on an object that represents content that is intended to be read by users, such as a book or an article.
   * doc://com.apple.documentation/documentation/uikit/uiaccessibilityreadingcontent
   */
  interface UIAccessibilityReadingContent {
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilityreadingcontent/1615107-accessibilitylinenumberforpoint
    accessibilityLineNumberForPoint(point: cocoascript.CGPoint):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilityreadingcontent/2866114-accessibilityattributedcontentfo
    accessibilityAttributedContentForLineNumber(lineNumber: cocoascript.NSInteger):cocoascript.NSAttributedString;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilityreadingcontent/1615163-accessibilitycontentforlinenumbe
    accessibilityContentForLineNumber(lineNumber: cocoascript.NSInteger):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilityreadingcontent/1615171-accessibilityframeforlinenumber
    accessibilityFrameForLineNumber(lineNumber: cocoascript.NSInteger):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilityreadingcontent/2865881-accessibilityattributedpageconte
    accessibilityAttributedPageContent():cocoascript.NSAttributedString;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilityreadingcontent/1615157-accessibilitypagecontent
    accessibilityPageContent():cocoascript.NSString;
  }
}
declare namespace cocoascript {
  /**
   * Methods to determine when to adjust images for different content size categories.
   * doc://com.apple.documentation/documentation/uikit/uiaccessibilitycontentsizecategoryimageadjusting
   */
  interface UIAccessibilityContentSizeCategoryImageAdjusting extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycontentsizecategoryimageadjusting/2890929-adjustsimagesizeforaccessibility
    adjustsImageSizeForAccessibilityContentSizeCategory(): cocoascript.BOOL;
    setAdjustsImageSizeForAccessibilityContentSizeCategory(): void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiaccessibilitytextualcontext
  type UIAccessibilityTextualContext = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiguidedaccessaccessibilityfeature
  type UIGuidedAccessAccessibilityFeature = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiguidedaccesserrorcode
  type UIGuidedAccessErrorCode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * A custom action to be performed on an accessible object.
   * doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomaction
   */
  interface UIAccessibilityCustomAction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomaction/1620499-initwithname
    initWithName_target_selector(name: cocoascript.NSString, target: cocoascript.UIAccessibilityCustomAction, selector: cocoascript.SEL):cocoascript.UIAccessibilityCustomAction;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomaction/2865951-initwithattributedname
    initWithAttributedName_target_selector(attributedName: cocoascript.NSAttributedString, target: cocoascript.UIAccessibilityCustomAction, selector: cocoascript.SEL):cocoascript.UIAccessibilityCustomAction;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomaction/1620502-name
    name(): cocoascript.NSString;
    setName(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomaction/2865932-attributedname
    attributedName(): cocoascript.NSAttributedString;
    setAttributedName(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomaction/1620501-target
    target(): cocoascript.id;
    setTarget(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomaction/1620498-selector
    selector(): cocoascript.SEL;
    setSelector(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomaction/3043556-initwithattributedname
    initWithAttributedName_actionHandler(attributedName: cocoascript.NSAttributedString, actionHandler: cocoascript.UIAccessibilityCustomActionHandler):cocoascript.UIAccessibilityCustomAction;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomaction/3650218-initwithattributedname
    initWithAttributedName_image_actionHandler(attributedName: cocoascript.NSAttributedString, image: cocoascript.UIImage, actionHandler: cocoascript.UIAccessibilityCustomActionHandler):cocoascript.UIAccessibilityCustomAction;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomaction/3650219-initwithattributedname
    initWithAttributedName_image_target_selector(attributedName: cocoascript.NSAttributedString, image: cocoascript.UIImage, target: cocoascript.UIAccessibilityCustomAction, selector: cocoascript.SEL):cocoascript.UIAccessibilityCustomAction;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomaction/3043557-initwithname
    initWithName_actionHandler(name: cocoascript.NSString, actionHandler: cocoascript.UIAccessibilityCustomActionHandler):cocoascript.UIAccessibilityCustomAction;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomaction/3650220-initwithname
    initWithName_image_actionHandler(name: cocoascript.NSString, image: cocoascript.UIImage, actionHandler: cocoascript.UIAccessibilityCustomActionHandler):cocoascript.UIAccessibilityCustomAction;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomaction/3650221-initwithname
    initWithName_image_target_selector(name: cocoascript.NSString, image: cocoascript.UIImage, target: cocoascript.UIAccessibilityCustomAction, selector: cocoascript.SEL):cocoascript.UIAccessibilityCustomAction;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomaction/3043555-actionhandler
    actionHandler(): cocoascript.UIAccessibilityCustomActionHandler;
    setActionHandler(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomaction/3650217-image
    image(): cocoascript.UIImage;
    setImage(): void;
    //
    alloc():cocoascript.UIAccessibilityCustomAction;
    //
    init():cocoascript.UIAccessibilityCustomAction;
  }
}

declare const UIAccessibilityCustomAction: cocoascript.UIAccessibilityCustomAction;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomactionhandler
  type UIAccessibilityCustomActionHandler = cocoascript.UIAccessibilityCustomAction;
}
declare namespace cocoascript {
  /**
   * Encapsulates information about an item that should be accessible to users with disabilities, but that isn’t accessible by default.
   * doc://com.apple.documentation/documentation/uikit/uiaccessibilityelement
   */
  interface UIAccessibilityElement extends UIResponder {
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilityelement/1619582-initwithaccessibilitycontainer
    initWithAccessibilityContainer(container: cocoascript.UIAccessibilityElement):cocoascript.UIAccessibilityElement;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilityelement/1619581-accessibilitycontainer
    accessibilityContainer(): cocoascript.id;
    setAccessibilityContainer(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilityelement/1619580-isaccessibilityelement
    isAccessibilityElement(): cocoascript.BOOL;
    setIsAccessibilityElement(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilityelement/1619577-accessibilitylabel
    accessibilityLabel(): cocoascript.NSString;
    setAccessibilityLabel(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilityelement/1619585-accessibilityhint
    accessibilityHint(): cocoascript.NSString;
    setAccessibilityHint(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilityelement/1619583-accessibilityvalue
    accessibilityValue(): cocoascript.NSString;
    setAccessibilityValue(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilityelement/1619579-accessibilityframe
    accessibilityFrame(): cocoascript.CGRect;
    setAccessibilityFrame(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilityelement/1649543-accessibilityframeincontainerspa
    accessibilityFrameInContainerSpace(): cocoascript.CGRect;
    setAccessibilityFrameInContainerSpace(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilityelement/1619584-accessibilitytraits
    accessibilityTraits(): cocoascript.UIAccessibilityTraits;
    setAccessibilityTraits(): void;
    //
    alloc():cocoascript.UIAccessibilityElement;
    //
    init():cocoascript.UIAccessibilityElement;
  }
}

declare const UIAccessibilityElement: cocoascript.UIAccessibilityElement;
declare namespace cocoascript {
  /**
   * A set of methods you can implement to provide accessibility information for a scroll view.
   * doc://com.apple.documentation/documentation/uikit/uiscrollviewaccessibilitydelegate
   */
  interface UIScrollViewAccessibilityDelegate extends UIScrollViewDelegate {
    // doc://com.apple.documentation/documentation/uikit/uiscrollviewaccessibilitydelegate/1621055-accessibilityscrollstatusforscro
    accessibilityScrollStatusForScrollView(scrollView: cocoascript.UIScrollView):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uiscrollviewaccessibilitydelegate/2865789-accessibilityattributedscrollsta
    accessibilityAttributedScrollStatusForScrollView(scrollView: cocoascript.UIScrollView):cocoascript.NSAttributedString;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods you can implement to provide accessibility information for individual components of a picker view.
   * doc://com.apple.documentation/documentation/uikit/uipickerviewaccessibilitydelegate
   */
  interface UIPickerViewAccessibilityDelegate extends UIPickerViewDelegate {
    // doc://com.apple.documentation/documentation/uikit/uipickerviewaccessibilitydelegate/1621052-pickerview
    pickerView_accessibilityLabelForComponent(pickerView: cocoascript.UIPickerView, component: cocoascript.NSInteger):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uipickerviewaccessibilitydelegate/2865955-pickerview
    pickerView_accessibilityAttributedLabelForComponent(pickerView: cocoascript.UIPickerView, component: cocoascript.NSInteger):cocoascript.NSAttributedString;
    // doc://com.apple.documentation/documentation/uikit/uipickerviewaccessibilitydelegate/1621056-pickerview
    pickerView_accessibilityHintForComponent(pickerView: cocoascript.UIPickerView, component: cocoascript.NSInteger):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uipickerviewaccessibilitydelegate/2866017-pickerview
    pickerView_accessibilityAttributedHintForComponent(pickerView: cocoascript.UIPickerView, component: cocoascript.NSInteger):cocoascript.NSAttributedString;
    // doc://com.apple.documentation/documentation/uikit/uipickerviewaccessibilitydelegate/3197990-pickerview
    pickerView_accessibilityAttributedUserInputLabelsForComponent(pickerView: cocoascript.UIPickerView, component: cocoascript.NSInteger):cocoascript.NSAttributedString;
    // doc://com.apple.documentation/documentation/uikit/uipickerviewaccessibilitydelegate/3197991-pickerview
    pickerView_accessibilityUserInputLabelsForComponent(pickerView: cocoascript.UIPickerView, component: cocoascript.NSInteger):cocoascript.NSString;
  }
}
declare namespace cocoascript {
  /**
   * Methods that convey information about the contents of a table.
   * doc://com.apple.documentation/documentation/uikit/uiaccessibilitycontainerdatatable
   */
  interface UIAccessibilityContainerDataTable extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycontainerdatatable/2865804-accessibilitydatatablecellelemen
    accessibilityDataTableCellElementForRow_column(row: cocoascript.NSUInteger, column: cocoascript.NSUInteger):cocoascript.UIAccessibilityContainerDataTableCell;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycontainerdatatable/2865809-accessibilitycolumncount
    accessibilityColumnCount():cocoascript.NSUInteger;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycontainerdatatable/2865811-accessibilityrowcount
    accessibilityRowCount():cocoascript.NSUInteger;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycontainerdatatable/2865805-accessibilityheaderelementsforco
    accessibilityHeaderElementsForColumn(column: cocoascript.NSUInteger):cocoascript.UIAccessibilityContainerDataTableCell;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycontainerdatatable/2865808-accessibilityheaderelementsforro
    accessibilityHeaderElementsForRow(row: cocoascript.NSUInteger):cocoascript.UIAccessibilityContainerDataTableCell;
  }
}
declare namespace cocoascript {
  /**
   * Methods that provide the location of a cell in a table.
   * doc://com.apple.documentation/documentation/uikit/uiaccessibilitycontainerdatatablecell
   */
  interface UIAccessibilityContainerDataTableCell extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycontainerdatatablecell/2865807-accessibilitycolumnrange
    accessibilityColumnRange():cocoascript.NSRange;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycontainerdatatablecell/2865803-accessibilityrowrange
    accessibilityRowRange():cocoascript.NSRange;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycontainertype
  type UIAccessibilityContainerType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * A context-sensitive function that helps Voice Over users find the next instance of a related element.
   * doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomrotor
   */
  interface UIAccessibilityCustomRotor extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomrotor/2866000-initwithattributedname
    initWithAttributedName_itemSearchBlock(attributedName: cocoascript.NSAttributedString, itemSearchBlock: cocoascript.UIAccessibilityCustomRotorSearch):cocoascript.UIAccessibilityCustomRotor;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomrotor/1649751-initwithname
    initWithName_itemSearchBlock(name: cocoascript.NSString, itemSearchBlock: cocoascript.UIAccessibilityCustomRotorSearch):cocoascript.UIAccessibilityCustomRotor;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomrotor/2866006-initwithsystemtype
    initWithSystemType_itemSearchBlock(type: cocoascript.UIAccessibilityCustomSystemRotorType, itemSearchBlock: cocoascript.UIAccessibilityCustomRotorSearch):cocoascript.UIAccessibilityCustomRotor;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomrotor/1649800-itemsearchblock
    itemSearchBlock(): cocoascript.UIAccessibilityCustomRotorSearch;
    setItemSearchBlock(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomrotor/2865918-systemrotortype
    systemRotorType(): cocoascript.UIAccessibilityCustomSystemRotorType;
    setSystemRotorType(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomrotor/1649745-name
    name(): cocoascript.NSString;
    setName(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomrotor/2865780-attributedname
    attributedName(): cocoascript.NSAttributedString;
    setAttributedName(): void;
    //
    alloc():cocoascript.UIAccessibilityCustomRotor;
    //
    init():cocoascript.UIAccessibilityCustomRotor;
  }
}

declare const UIAccessibilityCustomRotor: cocoascript.UIAccessibilityCustomRotor;
declare namespace cocoascript {
  /**
   * A target element referenced by a custom rotor.
   * doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomrotoritemresult
   */
  interface UIAccessibilityCustomRotorItemResult extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomrotoritemresult/1649911-initwithtargetelement
    initWithTargetElement_targetRange(targetElement: cocoascript.NSObject, targetRange: cocoascript.UITextRange):cocoascript.UIAccessibilityCustomRotorItemResult;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomrotoritemresult/1649842-targetelement
    targetElement(): cocoascript.NSObject;
    setTargetElement(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomrotoritemresult/1649803-targetrange
    targetRange(): cocoascript.UITextRange;
    setTargetRange(): void;
    //
    alloc():cocoascript.UIAccessibilityCustomRotorItemResult;
    //
    init():cocoascript.UIAccessibilityCustomRotorItemResult;
  }
}

declare const UIAccessibilityCustomRotorItemResult: cocoascript.UIAccessibilityCustomRotorItemResult;
declare namespace cocoascript {
  /**
   * The search parameters that help determine the next matching custom rotor item result.
   * doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomrotorsearchpredicate
   */
  interface UIAccessibilityCustomRotorSearchPredicate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomrotorsearchpredicate/1649821-currentitem
    currentItem(): cocoascript.UIAccessibilityCustomRotorItemResult;
    setCurrentItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomrotorsearchpredicate/1649916-searchdirection
    searchDirection(): cocoascript.UIAccessibilityCustomRotorDirection;
    setSearchDirection(): void;
    //
    alloc():cocoascript.UIAccessibilityCustomRotorSearchPredicate;
    //
    init():cocoascript.UIAccessibilityCustomRotorSearchPredicate;
  }
}

declare const UIAccessibilityCustomRotorSearchPredicate: cocoascript.UIAccessibilityCustomRotorSearchPredicate;
declare namespace cocoascript {
  /**
   * An accessibility descriptor for a specific geometric point of interest within a view, for use by assistive technologies.
   * doc://com.apple.documentation/documentation/uikit/uiaccessibilitylocationdescriptor
   */
  interface UIAccessibilityLocationDescriptor extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitylocationdescriptor/2890955-initwithattributedname
    initWithAttributedName_point_inView(attributedName: cocoascript.NSAttributedString, point: cocoascript.CGPoint, view: cocoascript.UIView):cocoascript.UIAccessibilityLocationDescriptor;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitylocationdescriptor/2890962-initwithname
    initWithName_point_inView(name: cocoascript.NSString, point: cocoascript.CGPoint, view: cocoascript.UIView):cocoascript.UIAccessibilityLocationDescriptor;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitylocationdescriptor/2890958-initwithname
    initWithName_view(name: cocoascript.NSString, view: cocoascript.UIView):cocoascript.UIAccessibilityLocationDescriptor;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitylocationdescriptor/2890959-name
    name(): cocoascript.NSString;
    setName(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitylocationdescriptor/2890960-attributedname
    attributedName(): cocoascript.NSAttributedString;
    setAttributedName(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitylocationdescriptor/2890956-point
    point(): cocoascript.CGPoint;
    setPoint(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccessibilitylocationdescriptor/2890961-view
    view(): cocoascript.UIView;
    setView(): void;
    //
    alloc():cocoascript.UIAccessibilityLocationDescriptor;
    //
    init():cocoascript.UIAccessibilityLocationDescriptor;
  }
}

declare const UIAccessibilityLocationDescriptor: cocoascript.UIAccessibilityLocationDescriptor;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiaccessibilityhearingdeviceear
  type UIAccessibilityHearingDeviceEar = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * An object that contains the specific font, size, style, and weight attributes to apply to a symbol image.
   * doc://com.apple.documentation/documentation/uikit/uiimagesymbolconfiguration
   */
  interface UIImageSymbolConfiguration extends UIImageConfiguration {
    // doc://com.apple.documentation/documentation/uikit/uiimagesymbolconfiguration/3294253-unspecifiedconfiguration
    unspecifiedConfiguration(): cocoascript.UIImageSymbolConfiguration;
    setUnspecifiedConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uiimagesymbolconfiguration/3294248-configurationwithoutpointsizeand
    configurationWithoutPointSizeAndWeight():cocoascript.UIImageSymbolConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uiimagesymbolconfiguration/3294249-configurationwithoutscale
    configurationWithoutScale():cocoascript.UIImageSymbolConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uiimagesymbolconfiguration/3294250-configurationwithouttextstyle
    configurationWithoutTextStyle():cocoascript.UIImageSymbolConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uiimagesymbolconfiguration/3294251-configurationwithoutweight
    configurationWithoutWeight():cocoascript.UIImageSymbolConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uiimagesymbolconfiguration/3294252-isequaltoconfiguration
    isEqualToConfiguration(otherConfiguration: cocoascript.UIImageSymbolConfiguration):cocoascript.BOOL;
    //
    alloc():cocoascript.UIImageSymbolConfiguration;
    //
    init():cocoascript.UIImageSymbolConfiguration;
  }
}

declare const UIImageSymbolConfiguration: cocoascript.UIImageSymbolConfiguration;
declare namespace cocoascript {
  /**
   * A configuration object that contains the traits that the system uses when selecting the current image variant.
   * doc://com.apple.documentation/documentation/uikit/uiimageconfiguration
   */
  interface UIImageConfiguration extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiimageconfiguration/3294236-configurationbyapplyingconfigura
    configurationByApplyingConfiguration(otherConfiguration: cocoascript.UIImageConfiguration):cocoascript.UIImageConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uiimageconfiguration/3295946-configurationwithtraitcollection
    configurationWithTraitCollection(traitCollection: cocoascript.UITraitCollection):cocoascript.UIImageConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uiimageconfiguration/3295947-traitcollection
    traitCollection(): cocoascript.UITraitCollection;
    setTraitCollection(): void;
    //
    alloc():cocoascript.UIImageConfiguration;
    //
    init():cocoascript.UIImageConfiguration;
  }
}

declare const UIImageConfiguration: cocoascript.UIImageConfiguration;
declare namespace cocoascript {
  /**
   * An object that coordinates the creation of PDF screenshots of an app’s content.
   * doc://com.apple.documentation/documentation/uikit/uiscreenshotservice
   */
  interface UIScreenshotService extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiscreenshotservice/3213934-delegate
    delegate(): cocoascript.UIScreenshotServiceDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscreenshotservice/3213935-windowscene
    windowScene(): cocoascript.UIWindowScene;
    setWindowScene(): void;
    //
    alloc():cocoascript.UIScreenshotService;
    //
    init():cocoascript.UIScreenshotService;
  }
}

declare const UIScreenshotService: cocoascript.UIScreenshotService;
declare namespace cocoascript {
  /**
   * An abstract base class for creating graphics renderers.
   * doc://com.apple.documentation/documentation/uikit/uigraphicsrenderer
   */
  interface UIGraphicsRenderer extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uigraphicsrenderer/1648548-initwithbounds
    initWithBounds(bounds: cocoascript.CGRect):cocoascript.UIGraphicsRenderer;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsrenderer/1648558-initwithbounds
    initWithBounds_format(bounds: cocoascript.CGRect, format: cocoascript.UIGraphicsRendererFormat):cocoascript.UIGraphicsRenderer;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsrenderer/1648553-allowsimageoutput
    allowsImageOutput(): cocoascript.BOOL;
    setAllowsImageOutput(): void;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsrenderer/1648556-format
    format(): cocoascript.UIGraphicsRendererFormat;
    setFormat(): void;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsrenderer/1649839-rundrawingactions
    runDrawingActions_completionActions_error(drawingActions: cocoascript.UIGraphicsDrawingActions, completionActions: cocoascript.UIGraphicsDrawingActions, error: cocoascript.NSError):cocoascript.BOOL;
    //
    alloc():cocoascript.UIGraphicsRenderer;
    //
    init():cocoascript.UIGraphicsRenderer;
  }
}

declare const UIGraphicsRenderer: cocoascript.UIGraphicsRenderer;
declare namespace cocoascript {
  /**
   * The base class for the drawing environments for graphics renderers.
   * doc://com.apple.documentation/documentation/uikit/uigraphicsrenderercontext
   */
  interface UIGraphicsRendererContext extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uigraphicsrenderercontext/1648560-cgcontext
    CGContext(): cocoascript.CGContextRef;
    setCGContext(): void;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsrenderercontext/1648557-format
    format(): cocoascript.UIGraphicsRendererFormat;
    setFormat(): void;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsrenderercontext/1648555-strokerect
    strokeRect(rect: cocoascript.CGRect):void;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsrenderercontext/1648562-strokerect
    strokeRect_blendMode(rect: cocoascript.CGRect, blendMode: cocoascript.CGBlendMode):void;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsrenderercontext/1648552-fillrect
    fillRect_blendMode(rect: cocoascript.CGRect, blendMode: cocoascript.CGBlendMode):void;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsrenderercontext/1648554-fillrect
    fillRect(rect: cocoascript.CGRect):void;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsrenderercontext/1648549-cliptorect
    clipToRect(rect: cocoascript.CGRect):void;
    //
    alloc():cocoascript.UIGraphicsRendererContext;
    //
    init():cocoascript.UIGraphicsRendererContext;
  }
}

declare const UIGraphicsRendererContext: cocoascript.UIGraphicsRendererContext;
declare namespace cocoascript {
  /**
   * A set of drawing attributes that represents the configuration of a graphics renderer context.
   * doc://com.apple.documentation/documentation/uikit/uigraphicsrendererformat
   */
  interface UIGraphicsRendererFormat extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uigraphicsrendererformat/1648563-bounds
    bounds(): cocoascript.CGRect;
    setBounds(): void;
    //
    alloc():cocoascript.UIGraphicsRendererFormat;
    //
    init():cocoascript.UIGraphicsRendererFormat;
  }
}

declare const UIGraphicsRendererFormat: cocoascript.UIGraphicsRendererFormat;
declare namespace cocoascript {
  /**
   * A graphics renderer for creating Core Graphics-backed images.
   * doc://com.apple.documentation/documentation/uikit/uigraphicsimagerenderer
   */
  interface UIGraphicsImageRenderer extends UIGraphicsRenderer {
    // doc://com.apple.documentation/documentation/uikit/uigraphicsimagerenderer/1649229-initwithbounds
    initWithBounds_format(bounds: cocoascript.CGRect, format: cocoascript.UIGraphicsImageRendererFormat):cocoascript.UIGraphicsImageRenderer;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsimagerenderer/1649231-initwithsize
    initWithSize(size: cocoascript.CGSize):cocoascript.UIGraphicsImageRenderer;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsimagerenderer/1649236-initwithsize
    initWithSize_format(size: cocoascript.CGSize, format: cocoascript.UIGraphicsImageRendererFormat):cocoascript.UIGraphicsImageRenderer;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsimagerenderer/1649230-imagewithactions
    imageWithActions(actions: cocoascript.UIGraphicsImageDrawingActions):cocoascript.UIImage;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsimagerenderer/1649234-jpegdatawithcompressionquality
    JPEGDataWithCompressionQuality_actions(compressionQuality: cocoascript.CGFloat, actions: cocoascript.UIGraphicsImageDrawingActions):cocoascript.NSData;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsimagerenderer/1649233-pngdatawithactions
    PNGDataWithActions(actions: cocoascript.UIGraphicsImageDrawingActions):cocoascript.NSData;
    //
    alloc():cocoascript.UIGraphicsImageRenderer;
    //
    init():cocoascript.UIGraphicsImageRenderer;
  }
}

declare const UIGraphicsImageRenderer: cocoascript.UIGraphicsImageRenderer;
declare namespace cocoascript {
  /**
   * The drawing environment for an image renderer.
   * doc://com.apple.documentation/documentation/uikit/uigraphicsimagerenderercontext
   */
  interface UIGraphicsImageRendererContext extends UIGraphicsRendererContext {
    // doc://com.apple.documentation/documentation/uikit/uigraphicsimagerenderercontext/1649237-currentimage
    currentImage(): cocoascript.UIImage;
    setCurrentImage(): void;
    //
    alloc():cocoascript.UIGraphicsImageRendererContext;
    //
    init():cocoascript.UIGraphicsImageRendererContext;
  }
}

declare const UIGraphicsImageRendererContext: cocoascript.UIGraphicsImageRendererContext;
declare namespace cocoascript {
  /**
   * A set of drawing attributes that represents the configuration of an image renderer context.
   * doc://com.apple.documentation/documentation/uikit/uigraphicsimagerendererformat
   */
  interface UIGraphicsImageRendererFormat extends UIGraphicsRendererFormat {
    // doc://com.apple.documentation/documentation/uikit/uigraphicsimagerendererformat/1649238-opaque
    opaque(): cocoascript.BOOL;
    setOpaque(): void;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsimagerendererformat/1649228-scale
    scale(): cocoascript.CGFloat;
    setScale(): void;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsimagerendererformat/2998464-preferredrange
    preferredRange(): cocoascript.UIGraphicsImageRendererFormatRange;
    setPreferredRange(): void;
    // doc://com.apple.documentation/documentation/uikit/uigraphicsimagerendererformat/1649227-prefersextendedrange
    prefersExtendedRange(): cocoascript.BOOL;
    setPrefersExtendedRange(): void;
    //
    alloc():cocoascript.UIGraphicsImageRendererFormat;
    //
    init():cocoascript.UIGraphicsImageRendererFormat;
  }
}

declare const UIGraphicsImageRendererFormat: cocoascript.UIGraphicsImageRendererFormat;
declare namespace cocoascript {
  /**
   * A graphics renderer for creating PDFs.
   * doc://com.apple.documentation/documentation/uikit/uigraphicspdfrenderer
   */
  interface UIGraphicsPDFRenderer extends UIGraphicsRenderer {
    // doc://com.apple.documentation/documentation/uikit/uigraphicspdfrenderer/1649127-initwithbounds
    initWithBounds_format(bounds: cocoascript.CGRect, format: cocoascript.UIGraphicsPDFRendererFormat):cocoascript.UIGraphicsPDFRenderer;
    // doc://com.apple.documentation/documentation/uikit/uigraphicspdfrenderer/1649120-pdfdatawithactions
    PDFDataWithActions(actions: cocoascript.UIGraphicsPDFDrawingActions):cocoascript.NSData;
    // doc://com.apple.documentation/documentation/uikit/uigraphicspdfrenderer/1649119-writepdftourl
    writePDFToURL_withActions_error(url: cocoascript.NSURL, actions: cocoascript.UIGraphicsPDFDrawingActions, error: cocoascript.NSError):cocoascript.BOOL;
    //
    alloc():cocoascript.UIGraphicsPDFRenderer;
    //
    init():cocoascript.UIGraphicsPDFRenderer;
  }
}

declare const UIGraphicsPDFRenderer: cocoascript.UIGraphicsPDFRenderer;
declare namespace cocoascript {
  /**
   * The drawing environment for a PDF renderer.
   * doc://com.apple.documentation/documentation/uikit/uigraphicspdfrenderercontext
   */
  interface UIGraphicsPDFRendererContext extends UIGraphicsRendererContext {
    // doc://com.apple.documentation/documentation/uikit/uigraphicspdfrenderercontext/1649124-beginpage
    beginPage():void;
    // doc://com.apple.documentation/documentation/uikit/uigraphicspdfrenderercontext/1649126-beginpagewithbounds
    beginPageWithBounds_pageInfo(bounds: cocoascript.CGRect, pageInfo: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uigraphicspdfrenderercontext/1649122-pdfcontextbounds
    pdfContextBounds(): cocoascript.CGRect;
    setPdfContextBounds(): void;
    // doc://com.apple.documentation/documentation/uikit/uigraphicspdfrenderercontext/1649128-adddestinationwithname
    addDestinationWithName_atPoint(name: cocoascript.NSString, point: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/uigraphicspdfrenderercontext/1649118-setdestinationwithname
    setDestinationWithName_forRect(name: cocoascript.NSString, rect: cocoascript.CGRect):void;
    // doc://com.apple.documentation/documentation/uikit/uigraphicspdfrenderercontext/1649125-seturl
    setURL_forRect(url: cocoascript.NSURL, rect: cocoascript.CGRect):void;
    //
    alloc():cocoascript.UIGraphicsPDFRendererContext;
    //
    init():cocoascript.UIGraphicsPDFRendererContext;
  }
}

declare const UIGraphicsPDFRendererContext: cocoascript.UIGraphicsPDFRendererContext;
declare namespace cocoascript {
  /**
   * A set of drawing attributes that represents the configuration of a PDF renderer context.
   * doc://com.apple.documentation/documentation/uikit/uigraphicspdfrendererformat
   */
  interface UIGraphicsPDFRendererFormat extends UIGraphicsRendererFormat {
    // doc://com.apple.documentation/documentation/uikit/uigraphicspdfrendererformat/1649130-documentinfo
    documentInfo(): cocoascript.id;
    setDocumentInfo(): void;
    //
    alloc():cocoascript.UIGraphicsPDFRendererFormat;
    //
    init():cocoascript.UIGraphicsPDFRendererFormat;
  }
}

declare const UIGraphicsPDFRendererFormat: cocoascript.UIGraphicsPDFRendererFormat;
declare namespace cocoascript {
  /**
   * A path that consists of straight and curved line segments that you can render in your custom views.
   * doc://com.apple.documentation/documentation/uikit/uibezierpath
   */
  interface UIBezierPath extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624348-bezierpathbyreversingpath
    bezierPathByReversingPath():cocoascript.UIBezierPath;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624381-init
    init():cocoascript.UIBezierPath;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624346-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIBezierPath;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624343-movetopoint
    moveToPoint(point: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624354-addlinetopoint
    addLineToPoint(point: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624367-addarcwithcenter
    addArcWithCenter_radius_startAngle_endAngle_clockwise(center: cocoascript.CGPoint, radius: cocoascript.CGFloat, startAngle: cocoascript.CGFloat, endAngle: cocoascript.CGFloat, clockwise: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624357-addcurvetopoint
    addCurveToPoint_controlPoint1_controlPoint2(endPoint: cocoascript.CGPoint, controlPoint1: cocoascript.CGPoint, controlPoint2: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624351-addquadcurvetopoint
    addQuadCurveToPoint_controlPoint(endPoint: cocoascript.CGPoint, controlPoint: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624338-closepath
    closePath():void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624363-removeallpoints
    removeAllPoints():void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624377-appendpath
    appendPath(bezierPath: cocoascript.UIBezierPath):void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624342-cgpath
    CGPath(): cocoascript.CGPathRef;
    setCGPath(): void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624376-cgpath
    CGPath():cocoascript.CGPathRef;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624352-currentpoint
    currentPoint(): cocoascript.CGPoint;
    setCurrentPoint(): void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624349-linewidth
    lineWidth(): cocoascript.CGFloat;
    setLineWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624347-linecapstyle
    lineCapStyle(): cocoascript.CGLineCap;
    setLineCapStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624378-linejoinstyle
    lineJoinStyle(): cocoascript.CGLineJoin;
    setLineJoinStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624370-miterlimit
    miterLimit(): cocoascript.CGFloat;
    setMiterLimit(): void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624344-flatness
    flatness(): cocoascript.CGFloat;
    setFlatness(): void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624360-usesevenoddfillrule
    usesEvenOddFillRule(): cocoascript.BOOL;
    setUsesEvenOddFillRule(): void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624373-setlinedash
    setLineDash_count_phase(pattern: cocoascript.CGFloat, count: cocoascript.NSInteger, phase: cocoascript.CGFloat):void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624374-getlinedash
    getLineDash_count_phase(pattern: cocoascript.CGFloat, count: cocoascript.NSInteger, phase: cocoascript.CGFloat):void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624371-fill
    fill():void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624366-fillwithblendmode
    fillWithBlendMode_alpha(blendMode: cocoascript.CGBlendMode, alpha: cocoascript.CGFloat):void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624365-stroke
    stroke():void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624380-strokewithblendmode
    strokeWithBlendMode_alpha(blendMode: cocoascript.CGBlendMode, alpha: cocoascript.CGFloat):void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624341-addclip
    addClip():void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624345-containspoint
    containsPoint(point: cocoascript.CGPoint):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624382-empty
    empty(): cocoascript.BOOL;
    setEmpty(): void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624350-bounds
    bounds(): cocoascript.CGRect;
    setBounds(): void;
    // doc://com.apple.documentation/documentation/uikit/uibezierpath/1624340-applytransform
    applyTransform(transform: cocoascript.CGAffineTransform):void;
    //
    alloc():cocoascript.UIBezierPath;
    //
    init():cocoascript.UIBezierPath;
  }
}

declare const UIBezierPath: cocoascript.UIBezierPath;
declare namespace cocoascript {
  /**
   * A user interface that manages the printing of documents, images, and other printable content in iOS.
   * doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller
   */
  interface UIPrintInteractionController extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618159-sharedprintcontroller
    sharedPrintController(): cocoascript.UIPrintInteractionController;
    setSharedPrintController(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618153-delegate
    delegate(): cocoascript.UIPrintInteractionControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618183-printingavailable
    printingAvailable(): cocoascript.BOOL;
    setPrintingAvailable(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618150-printableutis
    printableUTIs(): cocoascript.NSString;
    setPrintableUTIs(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618157-printingitem
    printingItem(): cocoascript.id;
    setPrintingItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618156-printingitems
    printingItems(): cocoascript.NSArray;
    setPrintingItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618148-printpagerenderer
    printPageRenderer(): cocoascript.UIPrintPageRenderer;
    setPrintPageRenderer(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618152-printformatter
    printFormatter(): cocoascript.UIPrintFormatter;
    setPrintFormatter(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618149-presentanimated
    presentAnimated_completionHandler(animated: cocoascript.BOOL, completion: cocoascript.UIPrintInteractionCompletionHandler):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618169-presentfrombarbuttonitem
    presentFromBarButtonItem_animated_completionHandler(item: cocoascript.UIBarButtonItem, animated: cocoascript.BOOL, completion: cocoascript.UIPrintInteractionCompletionHandler):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618176-presentfromrect
    presentFromRect_inView_animated_completionHandler(rect: cocoascript.CGRect, view: cocoascript.UIView, animated: cocoascript.BOOL, completion: cocoascript.UIPrintInteractionCompletionHandler):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618166-dismissanimated
    dismissAnimated(animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618174-printtoprinter
    printToPrinter_completionHandler(printer: cocoascript.UIPrinter, completion: cocoascript.UIPrintInteractionCompletionHandler):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618171-printinfo
    printInfo(): cocoascript.UIPrintInfo;
    setPrintInfo(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618165-printpaper
    printPaper(): cocoascript.UIPrintPaper;
    setPrintPaper(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618177-showsnumberofcopies
    showsNumberOfCopies(): cocoascript.BOOL;
    setShowsNumberOfCopies(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618164-showspaperselectionforloadedpape
    showsPaperSelectionForLoadedPapers(): cocoascript.BOOL;
    setShowsPaperSelectionForLoadedPapers(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontroller/1618180-showspagerange
    showsPageRange(): cocoascript.BOOL;
    setShowsPageRange(): void;
    //
    alloc():cocoascript.UIPrintInteractionController;
    //
    init():cocoascript.UIPrintInteractionController;
  }
}

declare const UIPrintInteractionController: cocoascript.UIPrintInteractionController;
declare namespace cocoascript {
  /**
   * An object that draws pages of content that are to be printed, with or without the assistance of print formatters.
   * doc://com.apple.documentation/documentation/uikit/uiprintpagerenderer
   */
  interface UIPrintPageRenderer extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiprintpagerenderer/1621631-numberofpages
    numberOfPages(): cocoascript.NSInteger;
    setNumberOfPages(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintpagerenderer/1621633-paperrect
    paperRect(): cocoascript.CGRect;
    setPaperRect(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintpagerenderer/1621628-printablerect
    printableRect(): cocoascript.CGRect;
    setPrintableRect(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintpagerenderer/1621630-headerheight
    headerHeight(): cocoascript.CGFloat;
    setHeaderHeight(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintpagerenderer/1621634-footerheight
    footerHeight(): cocoascript.CGFloat;
    setFooterHeight(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintpagerenderer/1621632-addprintformatter
    addPrintFormatter_startingAtPageAtIndex(formatter: cocoascript.UIPrintFormatter, pageIndex: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uiprintpagerenderer/1621635-printformattersforpageatindex
    printFormattersForPageAtIndex(pageIndex: cocoascript.NSInteger):cocoascript.UIPrintFormatter;
    // doc://com.apple.documentation/documentation/uikit/uiprintpagerenderer/1621640-printformatters
    printFormatters(): cocoascript.UIPrintFormatter;
    setPrintFormatters(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintpagerenderer/1621643-preparefordrawingpages
    prepareForDrawingPages(range: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/uiprintpagerenderer/1621636-drawpageatindex
    drawPageAtIndex_inRect(pageIndex: cocoascript.NSInteger, printableRect: cocoascript.CGRect):void;
    // doc://com.apple.documentation/documentation/uikit/uiprintpagerenderer/1621639-drawheaderforpageatindex
    drawHeaderForPageAtIndex_inRect(pageIndex: cocoascript.NSInteger, headerRect: cocoascript.CGRect):void;
    // doc://com.apple.documentation/documentation/uikit/uiprintpagerenderer/1621641-drawcontentforpageatindex
    drawContentForPageAtIndex_inRect(pageIndex: cocoascript.NSInteger, contentRect: cocoascript.CGRect):void;
    // doc://com.apple.documentation/documentation/uikit/uiprintpagerenderer/1621644-drawprintformatter
    drawPrintFormatter_forPageAtIndex(printFormatter: cocoascript.UIPrintFormatter, pageIndex: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uiprintpagerenderer/1621638-drawfooterforpageatindex
    drawFooterForPageAtIndex_inRect(pageIndex: cocoascript.NSInteger, footerRect: cocoascript.CGRect):void;
    //
    alloc():cocoascript.UIPrintPageRenderer;
    //
    init():cocoascript.UIPrintPageRenderer;
  }
}

declare const UIPrintPageRenderer: cocoascript.UIPrintPageRenderer;
declare namespace cocoascript {
  /**
   * A printer on the network.
   * doc://com.apple.documentation/documentation/uikit/uiprinter
   */
  interface UIPrinter extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiprinter/1620440-url
    URL(): cocoascript.NSURL;
    setURL(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprinter/1620427-displayname
    displayName(): cocoascript.NSString;
    setDisplayName(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprinter/1620426-displaylocation
    displayLocation(): cocoascript.NSString;
    setDisplayLocation(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprinter/1620438-makeandmodel
    makeAndModel(): cocoascript.NSString;
    setMakeAndModel(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprinter/1620436-supportedjobtypes
    supportedJobTypes(): cocoascript.UIPrinterJobTypes;
    setSupportedJobTypes(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprinter/1620429-supportscolor
    supportsColor(): cocoascript.BOOL;
    setSupportsColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprinter/1620434-supportsduplex
    supportsDuplex(): cocoascript.BOOL;
    setSupportsDuplex(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprinter/1620431-contactprinter
    contactPrinter(completionHandler: void):void;
    //
    alloc():cocoascript.UIPrinter;
    //
    init():cocoascript.UIPrinter;
  }
}

declare const UIPrinter: cocoascript.UIPrinter;
declare namespace cocoascript {
  /**
   * Information about a print job.
   * doc://com.apple.documentation/documentation/uikit/uiprintinfo
   */
  interface UIPrintInfo extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiprintinfo/1623539-dictionaryrepresentation
    dictionaryRepresentation(): cocoascript.NSDictionary;
    setDictionaryRepresentation(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinfo/1623546-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIPrintInfo;
    // doc://com.apple.documentation/documentation/uikit/uiprintinfo/1623549-duplex
    duplex(): cocoascript.UIPrintInfoDuplex;
    setDuplex(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinfo/1623543-jobname
    jobName(): cocoascript.NSString;
    setJobName(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinfo/1623550-orientation
    orientation(): cocoascript.UIPrintInfoOrientation;
    setOrientation(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinfo/1623552-outputtype
    outputType(): cocoascript.UIPrintInfoOutputType;
    setOutputType(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinfo/1623535-printerid
    printerID(): cocoascript.NSString;
    setPrinterID(): void;
    //
    alloc():cocoascript.UIPrintInfo;
    //
    init():cocoascript.UIPrintInfo;
  }
}

declare const UIPrintInfo: cocoascript.UIPrintInfo;
declare namespace cocoascript {
  /**
   * The size of paper for a print job, and the rectangular area that the content prints within.
   * doc://com.apple.documentation/documentation/uikit/uiprintpaper
   */
  interface UIPrintPaper extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiprintpaper/1623529-papersize
    paperSize(): cocoascript.CGSize;
    setPaperSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintpaper/1623530-printablerect
    printableRect(): cocoascript.CGRect;
    setPrintableRect(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintpaper/1623528-printrect
    printRect():cocoascript.CGRect;
    //
    alloc():cocoascript.UIPrintPaper;
    //
    init():cocoascript.UIPrintPaper;
  }
}

declare const UIPrintPaper: cocoascript.UIPrintPaper;
declare namespace cocoascript {
  /**
   * An abstract base class for print formatters, which are objects that lay out custom printable content that can cross page boundaries.
   * doc://com.apple.documentation/documentation/uikit/uiprintformatter
   */
  interface UIPrintFormatter extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiprintformatter/1621831-perpagecontentinsets
    perPageContentInsets(): cocoascript.UIEdgeInsets;
    setPerPageContentInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintformatter/1621826-maximumcontentheight
    maximumContentHeight(): cocoascript.CGFloat;
    setMaximumContentHeight(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintformatter/1621840-maximumcontentwidth
    maximumContentWidth(): cocoascript.CGFloat;
    setMaximumContentWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintformatter/1621823-contentinsets
    contentInsets(): cocoascript.UIEdgeInsets;
    setContentInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintformatter/1621827-startpage
    startPage(): cocoascript.NSInteger;
    setStartPage(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintformatter/1621843-pagecount
    pageCount(): cocoascript.NSInteger;
    setPageCount(): void;
    // doc://com.apple.documentation/documentation/uikit/uiprintformatter/1621841-drawinrect
    drawInRect_forPageAtIndex(rect: cocoascript.CGRect, pageIndex: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uiprintformatter/1621829-rectforpageatindex
    rectForPageAtIndex(pageIndex: cocoascript.NSInteger):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uiprintformatter/1621834-removefromprintpagerenderer
    removeFromPrintPageRenderer():void;
    // doc://com.apple.documentation/documentation/uikit/uiprintformatter/1621821-printpagerenderer
    printPageRenderer(): cocoascript.UIPrintPageRenderer;
    setPrintPageRenderer(): void;
    //
    alloc():cocoascript.UIPrintFormatter;
    //
    init():cocoascript.UIPrintFormatter;
  }
}

declare const UIPrintFormatter: cocoascript.UIPrintFormatter;
declare namespace cocoascript {
  /**
   * An object that lays out the drawn content (which can span multiple pages) of a view for printing.
   * doc://com.apple.documentation/documentation/uikit/uiviewprintformatter
   */
  interface UIViewPrintFormatter extends UIPrintFormatter {
    // doc://com.apple.documentation/documentation/uikit/uiviewprintformatter/1621824-view
    view(): cocoascript.UIView;
    setView(): void;
    //
    alloc():cocoascript.UIViewPrintFormatter;
    //
    init():cocoascript.UIViewPrintFormatter;
  }
}

declare const UIViewPrintFormatter: cocoascript.UIViewPrintFormatter;
declare namespace cocoascript {
  /**
   * An object that lays out plain text for printing, possibly over multiple pages.
   * doc://com.apple.documentation/documentation/uikit/uisimpletextprintformatter
   */
  interface UISimpleTextPrintFormatter extends UIPrintFormatter {
    // doc://com.apple.documentation/documentation/uikit/uisimpletextprintformatter/1621838-initwithattributedtext
    initWithAttributedText(attributedText: cocoascript.NSAttributedString):cocoascript.UISimpleTextPrintFormatter;
    // doc://com.apple.documentation/documentation/uikit/uisimpletextprintformatter/1621822-initwithtext
    initWithText(text: cocoascript.NSString):cocoascript.UISimpleTextPrintFormatter;
    // doc://com.apple.documentation/documentation/uikit/uisimpletextprintformatter/1621820-attributedtext
    attributedText(): cocoascript.NSAttributedString;
    setAttributedText(): void;
    // doc://com.apple.documentation/documentation/uikit/uisimpletextprintformatter/1621833-text
    text(): cocoascript.NSString;
    setText(): void;
    // doc://com.apple.documentation/documentation/uikit/uisimpletextprintformatter/1621837-font
    font(): cocoascript.UIFont;
    setFont(): void;
    // doc://com.apple.documentation/documentation/uikit/uisimpletextprintformatter/1621830-color
    color(): cocoascript.UIColor;
    setColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uisimpletextprintformatter/1621832-textalignment
    textAlignment(): cocoascript.NSTextAlignment;
    setTextAlignment(): void;
    //
    alloc():cocoascript.UISimpleTextPrintFormatter;
    //
    init():cocoascript.UISimpleTextPrintFormatter;
  }
}

declare const UISimpleTextPrintFormatter: cocoascript.UISimpleTextPrintFormatter;
declare namespace cocoascript {
  /**
   * An object that lays out HTML text for a multipage print job.
   * doc://com.apple.documentation/documentation/uikit/uimarkuptextprintformatter
   */
  interface UIMarkupTextPrintFormatter extends UIPrintFormatter {
    // doc://com.apple.documentation/documentation/uikit/uimarkuptextprintformatter/1621845-initwithmarkuptext
    initWithMarkupText(markupText: cocoascript.NSString):cocoascript.UIMarkupTextPrintFormatter;
    // doc://com.apple.documentation/documentation/uikit/uimarkuptextprintformatter/1621842-markuptext
    markupText(): cocoascript.NSString;
    setMarkupText(): void;
    //
    alloc():cocoascript.UIMarkupTextPrintFormatter;
    //
    init():cocoascript.UIMarkupTextPrintFormatter;
  }
}

declare const UIMarkupTextPrintFormatter: cocoascript.UIMarkupTextPrintFormatter;
declare namespace cocoascript {
  /**
   * A font object.
   * doc://com.apple.documentation/documentation/uikit/uifont
   */
  interface UIFont extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uifont/1619032-fontwithsize
    fontWithSize(fontSize: cocoascript.CGFloat):cocoascript.UIFont;
    // doc://com.apple.documentation/documentation/uikit/uifont/1619040-familynames
    familyNames(): cocoascript.NSString;
    setFamilyNames(): void;
    // doc://com.apple.documentation/documentation/uikit/uifont/1619033-familyname
    familyName(): cocoascript.NSString;
    setFamilyName(): void;
    // doc://com.apple.documentation/documentation/uikit/uifont/1619024-fontname
    fontName(): cocoascript.NSString;
    setFontName(): void;
    // doc://com.apple.documentation/documentation/uikit/uifont/1619031-pointsize
    pointSize(): cocoascript.CGFloat;
    setPointSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uifont/1619034-ascender
    ascender(): cocoascript.CGFloat;
    setAscender(): void;
    // doc://com.apple.documentation/documentation/uikit/uifont/1619036-descender
    descender(): cocoascript.CGFloat;
    setDescender(): void;
    // doc://com.apple.documentation/documentation/uikit/uifont/1619026-leading
    leading(): cocoascript.CGFloat;
    setLeading(): void;
    // doc://com.apple.documentation/documentation/uikit/uifont/1619035-capheight
    capHeight(): cocoascript.CGFloat;
    setCapHeight(): void;
    // doc://com.apple.documentation/documentation/uikit/uifont/1619028-xheight
    xHeight(): cocoascript.CGFloat;
    setXHeight(): void;
    // doc://com.apple.documentation/documentation/uikit/uifont/1619038-lineheight
    lineHeight(): cocoascript.CGFloat;
    setLineHeight(): void;
    // doc://com.apple.documentation/documentation/uikit/uifont/1623398-labelfontsize
    labelFontSize(): cocoascript.CGFloat;
    setLabelFontSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uifont/1623410-buttonfontsize
    buttonFontSize(): cocoascript.CGFloat;
    setButtonFontSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uifont/1623399-smallsystemfontsize
    smallSystemFontSize(): cocoascript.CGFloat;
    setSmallSystemFontSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uifont/1623395-systemfontsize
    systemFontSize(): cocoascript.CGFloat;
    setSystemFontSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uifont/1619037-fontdescriptor
    fontDescriptor(): cocoascript.UIFontDescriptor;
    setFontDescriptor(): void;
    // doc://com.apple.documentation/documentation/uikit/uifont/3255206-ek_defaultoccurrencesecondarytex
    ek_defaultOccurrenceSecondaryTextFont(): cocoascript.UIFont;
    setEk_defaultOccurrenceSecondaryTextFont(): void;
    //
    alloc():cocoascript.UIFont;
    //
    init():cocoascript.UIFont;
  }
}

declare const UIFont: cocoascript.UIFont;
declare namespace cocoascript {
  /**
   * A collection of attributes that describes a font.
   * doc://com.apple.documentation/documentation/uikit/uifontdescriptor
   */
  interface UIFontDescriptor extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uifontdescriptor/1616666-fontdescriptorbyaddingattributes
    fontDescriptorByAddingAttributes(attributes: cocoascript.UIFontDescriptor):cocoascript.UIFontDescriptor;
    // doc://com.apple.documentation/documentation/uikit/uifontdescriptor/3151797-fontdescriptorwithdesign
    fontDescriptorWithDesign(design: cocoascript.UIFontDescriptorSystemDesign):cocoascript.UIFontDescriptor;
    // doc://com.apple.documentation/documentation/uikit/uifontdescriptor/1616676-fontdescriptorwithfamily
    fontDescriptorWithFamily(newFamily: cocoascript.NSString):cocoascript.UIFontDescriptor;
    // doc://com.apple.documentation/documentation/uikit/uifontdescriptor/1616681-fontdescriptorwithface
    fontDescriptorWithFace(newFace: cocoascript.NSString):cocoascript.UIFontDescriptor;
    // doc://com.apple.documentation/documentation/uikit/uifontdescriptor/1616731-fontdescriptorwithmatrix
    fontDescriptorWithMatrix(matrix: cocoascript.CGAffineTransform):cocoascript.UIFontDescriptor;
    // doc://com.apple.documentation/documentation/uikit/uifontdescriptor/1616675-fontdescriptorwithsize
    fontDescriptorWithSize(newPointSize: cocoascript.CGFloat):cocoascript.UIFontDescriptor;
    // doc://com.apple.documentation/documentation/uikit/uifontdescriptor/1616665-fontdescriptorwithsymbolictraits
    fontDescriptorWithSymbolicTraits(symbolicTraits: cocoascript.UIFontDescriptorSymbolicTraits):cocoascript.UIFontDescriptor;
    // doc://com.apple.documentation/documentation/uikit/uifontdescriptor/1616679-initwithfontattributes
    initWithFontAttributes(attributes: cocoascript.UIFontDescriptor):cocoascript.UIFontDescriptor;
    // doc://com.apple.documentation/documentation/uikit/uifontdescriptor/1616667-init
    init():cocoascript.UIFontDescriptor;
    // doc://com.apple.documentation/documentation/uikit/uifontdescriptor/1616662-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIFontDescriptor;
    // doc://com.apple.documentation/documentation/uikit/uifontdescriptor/1616699-matchingfontdescriptorswithmanda
    matchingFontDescriptorsWithMandatoryKeys(mandatoryKeys: cocoascript.UIFontDescriptorAttributeName):cocoascript.UIFontDescriptor;
    // doc://com.apple.documentation/documentation/uikit/uifontdescriptor/1616698-fontattributes
    fontAttributes(): cocoascript.id;
    setFontAttributes(): void;
    // doc://com.apple.documentation/documentation/uikit/uifontdescriptor/1616713-matrix
    matrix(): cocoascript.CGAffineTransform;
    setMatrix(): void;
    // doc://com.apple.documentation/documentation/uikit/uifontdescriptor/1616733-objectforkey
    objectForKey(anAttribute: cocoascript.UIFontDescriptorAttributeName):cocoascript.UIFontDescriptor;
    // doc://com.apple.documentation/documentation/uikit/uifontdescriptor/1616696-pointsize
    pointSize(): cocoascript.CGFloat;
    setPointSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uifontdescriptor/1616693-postscriptname
    postscriptName(): cocoascript.NSString;
    setPostscriptName(): void;
    // doc://com.apple.documentation/documentation/uikit/uifontdescriptor/1616723-symbolictraits
    symbolicTraits(): cocoascript.UIFontDescriptorSymbolicTraits;
    setSymbolicTraits(): void;
    //
    alloc():cocoascript.UIFontDescriptor;
    //
    init():cocoascript.UIFontDescriptor;
  }
}

declare const UIFontDescriptor: cocoascript.UIFontDescriptor;
declare namespace cocoascript {
  /**
   * A utility object for obtaining custom fonts that scale to support Dynamic Type.
   * doc://com.apple.documentation/documentation/uikit/uifontmetrics
   */
  interface UIFontMetrics extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uifontmetrics/2877391-initfortextstyle
    initForTextStyle(textStyle: cocoascript.UIFontTextStyle):cocoascript.UIFontMetrics;
    // doc://com.apple.documentation/documentation/uikit/uifontmetrics/2877382-defaultmetrics
    defaultMetrics(): cocoascript.UIFontMetrics;
    setDefaultMetrics(): void;
    // doc://com.apple.documentation/documentation/uikit/uifontmetrics/2877385-scaledfontforfont
    scaledFontForFont(font: cocoascript.UIFont):cocoascript.UIFont;
    // doc://com.apple.documentation/documentation/uikit/uifontmetrics/2877389-scaledfontforfont
    scaledFontForFont_compatibleWithTraitCollection(font: cocoascript.UIFont, traitCollection: cocoascript.UITraitCollection):cocoascript.UIFont;
    // doc://com.apple.documentation/documentation/uikit/uifontmetrics/2877383-scaledfontforfont
    scaledFontForFont_maximumPointSize(font: cocoascript.UIFont, maximumPointSize: cocoascript.CGFloat):cocoascript.UIFont;
    // doc://com.apple.documentation/documentation/uikit/uifontmetrics/2877390-scaledfontforfont
    scaledFontForFont_maximumPointSize_compatibleWithTraitCollection(font: cocoascript.UIFont, maximumPointSize: cocoascript.CGFloat, traitCollection: cocoascript.UITraitCollection):cocoascript.UIFont;
    // doc://com.apple.documentation/documentation/uikit/uifontmetrics/2877387-scaledvalueforvalue
    scaledValueForValue(value: cocoascript.CGFloat):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uifontmetrics/2877388-scaledvalueforvalue
    scaledValueForValue_compatibleWithTraitCollection(value: cocoascript.CGFloat, traitCollection: cocoascript.UITraitCollection):cocoascript.CGFloat;
    //
    alloc():cocoascript.UIFontMetrics;
    //
    init():cocoascript.UIFontMetrics;
  }
}

declare const UIFontMetrics: cocoascript.UIFontMetrics;
declare namespace cocoascript {
  /**
   * An object to check a string (usually the text of a document) for misspelled words.
   * doc://com.apple.documentation/documentation/uikit/uitextchecker
   */
  interface UITextChecker extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextchecker/1621029-rangeofmisspelledwordinstring
    rangeOfMisspelledWordInString_range_startingAt_wrap_language(stringToCheck: cocoascript.NSString, range: cocoascript.NSRange, startingOffset: cocoascript.NSInteger, wrapFlag: cocoascript.BOOL, language: cocoascript.NSString):cocoascript.NSRange;
    // doc://com.apple.documentation/documentation/uikit/uitextchecker/1621037-guessesforwordrange
    guessesForWordRange_inString_language(range: cocoascript.NSRange, string: cocoascript.NSString, language: cocoascript.NSString):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uitextchecker/1621034-completionsforpartialwordrange
    completionsForPartialWordRange_inString_language(range: cocoascript.NSRange, string: cocoascript.NSString, language: cocoascript.NSString):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uitextchecker/1621031-ignoreword
    ignoreWord(wordToIgnore: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uitextchecker/1621032-ignoredwords
    ignoredWords(): cocoascript.NSString;
    setIgnoredWords(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextchecker/1621033-availablelanguages
    availableLanguages(): cocoascript.NSString;
    setAvailableLanguages(): void;
    //
    alloc():cocoascript.UITextChecker;
    //
    init():cocoascript.UITextChecker;
  }
}

declare const UITextChecker: cocoascript.UITextChecker;
declare namespace cocoascript {
  /**
   * A position in a text container—that is, an index into the backing string in a text-display view.
   * doc://com.apple.documentation/documentation/uikit/uitextposition
   */
  interface UITextPosition extends NSObject {
    //
    alloc():cocoascript.UITextPosition;
    //
    init():cocoascript.UITextPosition;
  }
}

declare const UITextPosition: cocoascript.UITextPosition;
declare namespace cocoascript {
  /**
   * A range of characters in a text container with a starting index and an ending index in string backing a text-entry object.
   * doc://com.apple.documentation/documentation/uikit/uitextrange
   */
  interface UITextRange extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextrange/1614459-start
    start(): cocoascript.UITextPosition;
    setStart(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextrange/1614544-end
    end(): cocoascript.UITextPosition;
    setEnd(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextrange/1614556-empty
    empty(): cocoascript.BOOL;
    setEmpty(): void;
    //
    alloc():cocoascript.UITextRange;
    //
    init():cocoascript.UITextRange;
  }
}

declare const UITextRange: cocoascript.UITextRange;
declare namespace cocoascript {
  /**
   * An encapsulation of information about a selected range of text in a document.
   * doc://com.apple.documentation/documentation/uikit/uitextselectionrect
   */
  interface UITextSelectionRect extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextselectionrect/1614461-rect
    rect(): cocoascript.CGRect;
    setRect(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextselectionrect/1614569-writingdirection
    writingDirection(): cocoascript.NSWritingDirection;
    setWritingDirection(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextselectionrect/1614561-isvertical
    isVertical(): cocoascript.BOOL;
    setIsVertical(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextselectionrect/1614560-containsstart
    containsStart(): cocoascript.BOOL;
    setContainsStart(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextselectionrect/1614516-containsend
    containsEnd(): cocoascript.BOOL;
    setContainsEnd(): void;
    //
    alloc():cocoascript.UITextSelectionRect;
    //
    init():cocoascript.UITextSelectionRect;
  }
}

declare const UITextSelectionRect: cocoascript.UITextSelectionRect;
declare namespace cocoascript {
  /**
   * The methods that delegates of text-formatting coordinators implement to apply font panel settings to the currently selected text.
   * doc://com.apple.documentation/documentation/uikit/uitextformattingcoordinatordelegate
   */
  interface UITextFormattingCoordinatorDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextformattingcoordinatordelegate/3261469-updatetextattributeswithconversi
    updateTextAttributesWithConversionHandler(conversionHandler: cocoascript.UITextAttributesConversionHandler):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextattributesconversionhandler
  type UITextAttributesConversionHandler = cocoascript.id;
}
declare namespace cocoascript {
  /**
   * A set of methods that defines features for keyboard input to a text object.
   * doc://com.apple.documentation/documentation/uikit/uitextinputtraits
   */
  interface UITextInputTraits extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextinputtraits/1624457-keyboardtype
    keyboardType(): cocoascript.UIKeyboardType;
    setKeyboardType(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinputtraits/1624434-keyboardappearance
    keyboardAppearance(): cocoascript.UIKeyboardAppearance;
    setKeyboardAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinputtraits/1624446-returnkeytype
    returnKeyType(): cocoascript.UIReturnKeyType;
    setReturnKeyType(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinputtraits/1649656-textcontenttype
    textContentType(): cocoascript.UITextContentType;
    setTextContentType(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinputtraits/1624427-securetextentry
    secureTextEntry(): cocoascript.BOOL;
    setSecureTextEntry(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinputtraits/1624432-enablesreturnkeyautomatically
    enablesReturnKeyAutomatically(): cocoascript.BOOL;
    setEnablesReturnKeyAutomatically(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinputtraits/1624447-autocapitalizationtype
    autocapitalizationType(): cocoascript.UITextAutocapitalizationType;
    setAutocapitalizationType(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinputtraits/1624453-autocorrectiontype
    autocorrectionType(): cocoascript.UITextAutocorrectionType;
    setAutocorrectionType(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinputtraits/1624461-spellcheckingtype
    spellCheckingType(): cocoascript.UITextSpellCheckingType;
    setSpellCheckingType(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinputtraits/2865931-smartquotestype
    smartQuotesType(): cocoascript.UITextSmartQuotesType;
    setSmartQuotesType(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinputtraits/2866013-smartdashestype
    smartDashesType(): cocoascript.UITextSmartDashesType;
    setSmartDashesType(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinputtraits/2865828-smartinsertdeletetype
    smartInsertDeleteType(): cocoascript.UITextSmartInsertDeleteType;
    setSmartInsertDeleteType(): void;
  }
}
declare namespace cocoascript {
  /**
   * An object that manages bar button items that display in the shortcuts bar above the keyboard on iPad.
   * doc://com.apple.documentation/documentation/uikit/uitextinputassistantitem
   */
  interface UITextInputAssistantItem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextinputassistantitem/1614575-leadingbarbuttongroups
    leadingBarButtonGroups(): cocoascript.UIBarButtonItemGroup;
    setLeadingBarButtonGroups(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinputassistantitem/1614532-trailingbarbuttongroups
    trailingBarButtonGroups(): cocoascript.UIBarButtonItemGroup;
    setTrailingBarButtonGroups(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinputassistantitem/1614529-allowshidingshortcuts
    allowsHidingShortcuts(): cocoascript.BOOL;
    setAllowsHidingShortcuts(): void;
    //
    alloc():cocoascript.UITextInputAssistantItem;
    //
    init():cocoascript.UITextInputAssistantItem;
  }
}

declare const UITextInputAssistantItem: cocoascript.UITextInputAssistantItem;
declare namespace cocoascript {
  /**
   * An interaction that provides text selection gestures and UI to custom text views.
   * doc://com.apple.documentation/documentation/uikit/uitextinteraction
   */
  interface UITextInteraction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextinteraction/3255084-textinput
    textInput(): cocoascript.UITextInput;
    setTextInput(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinteraction/3255082-delegate
    delegate(): cocoascript.UITextInteractionDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinteraction/3255083-gesturesforfailurerequirements
    gesturesForFailureRequirements(): cocoascript.UIGestureRecognizer;
    setGesturesForFailureRequirements(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinteraction/3255086-textinteractionmode
    textInteractionMode(): cocoascript.UITextInteractionMode;
    setTextInteractionMode(): void;
    //
    alloc():cocoascript.UITextInteraction;
    //
    init():cocoascript.UITextInteraction;
  }
}

declare const UITextInteraction: cocoascript.UITextInteraction;
declare namespace cocoascript {
  /**
   * An interface that an object implements to receive information about text interaction events.
   * doc://com.apple.documentation/documentation/uikit/uitextinteractiondelegate
   */
  interface UITextInteractionDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextinteractiondelegate/3255089-interactionshouldbegin
    interactionShouldBegin_atPoint(interaction: cocoascript.UITextInteraction, point: cocoascript.CGPoint):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitextinteractiondelegate/3255090-interactionwillbegin
    interactionWillBegin(interaction: cocoascript.UITextInteraction):void;
    // doc://com.apple.documentation/documentation/uikit/uitextinteractiondelegate/3255088-interactiondidend
    interactionDidEnd(interaction: cocoascript.UITextInteraction):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextinteractionmode
  type UITextInteractionMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * A set of methods for interacting with the text input system and enabling features, such as autocorrect and multistage text input, in documents.
   * doc://com.apple.documentation/documentation/uikit/uitextinput
   */
  interface UITextInput extends UIKeyInput {
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614508-inputdelegate
    inputDelegate(): cocoascript.UITextInputDelegate;
    setInputDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614527-textinrange
    textInRange(range: cocoascript.UITextRange):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614558-replacerange
    replaceRange_withText(range: cocoascript.UITextRange, text: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614495-shouldchangetextinrange
    shouldChangeTextInRange_replacementText(range: cocoascript.UITextRange, text: cocoascript.NSString):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614541-selectedtextrange
    selectedTextRange(): cocoascript.UITextRange;
    setSelectedTextRange(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614489-markedtextrange
    markedTextRange(): cocoascript.UITextRange;
    setMarkedTextRange(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614500-markedtextstyle
    markedTextStyle(): cocoascript.id;
    setMarkedTextStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614465-setmarkedtext
    setMarkedText_selectedRange(markedText: cocoascript.NSString, selectedRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/3213955-setattributedmarkedtext
    setAttributedMarkedText_selectedRange(markedText: cocoascript.NSAttributedString, selectedRange: cocoascript.NSRange):void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614512-unmarktext
    unmarkText():void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614539-selectionaffinity
    selectionAffinity(): cocoascript.UITextStorageDirection;
    setSelectionAffinity(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614573-textrangefromposition
    textRangeFromPosition_toPosition(fromPosition: cocoascript.UITextPosition, toPosition: cocoascript.UITextPosition):cocoascript.UITextRange;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614511-positionfromposition
    positionFromPosition_offset(position: cocoascript.UITextPosition, offset: cocoascript.NSInteger):cocoascript.UITextPosition;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614515-positionfromposition
    positionFromPosition_inDirection_offset(position: cocoascript.UITextPosition, direction: cocoascript.UITextLayoutDirection, offset: cocoascript.NSInteger):cocoascript.UITextPosition;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614528-beginningofdocument
    beginningOfDocument(): cocoascript.UITextPosition;
    setBeginningOfDocument(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614555-endofdocument
    endOfDocument(): cocoascript.UITextPosition;
    setEndOfDocument(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614526-compareposition
    comparePosition_toPosition(position: cocoascript.UITextPosition, other: cocoascript.UITextPosition):cocoascript.NSComparisonResult;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614473-offsetfromposition
    offsetFromPosition_toPosition(from: cocoascript.UITextPosition, toPosition: cocoascript.UITextPosition):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614547-positionwithinrange
    positionWithinRange_farthestInDirection(range: cocoascript.UITextRange, direction: cocoascript.UITextLayoutDirection):cocoascript.UITextPosition;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614462-characterrangebyextendingpositio
    characterRangeByExtendingPosition_inDirection(position: cocoascript.UITextPosition, direction: cocoascript.UITextLayoutDirection):cocoascript.UITextRange;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614502-basewritingdirectionforposition
    baseWritingDirectionForPosition_inDirection(position: cocoascript.UITextPosition, direction: cocoascript.UITextStorageDirection):cocoascript.NSWritingDirection;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614563-setbasewritingdirection
    setBaseWritingDirection_forRange(writingDirection: cocoascript.NSWritingDirection, range: cocoascript.UITextRange):void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614570-firstrectforrange
    firstRectForRange(range: cocoascript.UITextRange):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614518-caretrectforposition
    caretRectForPosition(position: cocoascript.UITextPosition):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614523-closestpositiontopoint
    closestPositionToPoint(point: cocoascript.CGPoint):cocoascript.UITextPosition;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614458-selectionrectsforrange
    selectionRectsForRange(range: cocoascript.UITextRange):cocoascript.UITextSelectionRect;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614533-closestpositiontopoint
    closestPositionToPoint_withinRange(point: cocoascript.CGPoint, range: cocoascript.UITextRange):cocoascript.UITextPosition;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614574-characterrangeatpoint
    characterRangeAtPoint(point: cocoascript.CGPoint):cocoascript.UITextRange;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614537-tokenizer
    tokenizer(): cocoascript.UITextInputTokenizer;
    setTokenizer(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614557-beginfloatingcursoratpoint
    beginFloatingCursorAtPoint(point: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614550-updatefloatingcursoratpoint
    updateFloatingCursorAtPoint(point: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614497-endfloatingcursor
    endFloatingCursor():void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614507-dictationrecordingdidend
    dictationRecordingDidEnd():void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614519-dictationrecognitionfailed
    dictationRecognitionFailed():void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614568-insertdictationresult
    insertDictationResult(dictationResult: cocoascript.UIDictationPhrase):void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614466-insertdictationresultplaceholder
    insertDictationResultPlaceholder(): cocoascript.id;
    setInsertDictationResultPlaceholder(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614493-framefordictationresultplacehold
    frameForDictationResultPlaceholder(placeholder: cocoascript.UITextInput):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614546-removedictationresultplaceholder
    removeDictationResultPlaceholder_willInsertResult(placeholder: cocoascript.UITextInput, willInsertResult: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/3213953-inserttextplaceholderwithsize
    insertTextPlaceholderWithSize(size: cocoascript.CGSize):cocoascript.UITextPlaceholder;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/3213954-removetextplaceholder
    removeTextPlaceholder(textPlaceholder: cocoascript.UITextPlaceholder):void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/3213952-inserttext
    insertText_alternatives_style(text: cocoascript.NSString, alternatives: cocoascript.NSString, style: cocoascript.UITextAlternativeStyle):void;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614566-textstylingatposition
    textStylingAtPosition_inDirection(position: cocoascript.UITextPosition, direction: cocoascript.UITextStorageDirection):cocoascript.UITextInput;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614542-positionwithinrange
    positionWithinRange_atCharacterOffset(range: cocoascript.UITextRange, offset: cocoascript.NSInteger):cocoascript.UITextPosition;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614545-characteroffsetofposition
    characterOffsetOfPosition_withinRange(position: cocoascript.UITextPosition, range: cocoascript.UITextRange):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uitextinput/1614564-textinputview
    textInputView(): cocoascript.UIView;
    setTextInputView(): void;
  }
}
declare namespace cocoascript {
  /**
   * An intermediary between a document and the text input system.
   * doc://com.apple.documentation/documentation/uikit/uitextinputdelegate
   */
  interface UITextInputDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextinputdelegate/1614520-textwillchange
    textWillChange(textInput: cocoascript.UITextInput):void;
    // doc://com.apple.documentation/documentation/uikit/uitextinputdelegate/1614499-textdidchange
    textDidChange(textInput: cocoascript.UITextInput):void;
    // doc://com.apple.documentation/documentation/uikit/uitextinputdelegate/1614540-selectionwillchange
    selectionWillChange(textInput: cocoascript.UITextInput):void;
    // doc://com.apple.documentation/documentation/uikit/uitextinputdelegate/1614551-selectiondidchange
    selectionDidChange(textInput: cocoascript.UITextInput):void;
  }
}
declare namespace cocoascript {
  /**
   * A tokenizer, which is an object that allows the text input system to evaluate text units of different granularities.
   * doc://com.apple.documentation/documentation/uikit/uitextinputtokenizer
   */
  interface UITextInputTokenizer extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextinputtokenizer/1614553-isposition
    isPosition_atBoundary_inDirection(position: cocoascript.UITextPosition, granularity: cocoascript.UITextGranularity, direction: cocoascript.UITextDirection):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitextinputtokenizer/1614491-isposition
    isPosition_withinTextUnit_inDirection(position: cocoascript.UITextPosition, granularity: cocoascript.UITextGranularity, direction: cocoascript.UITextDirection):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitextinputtokenizer/1614513-positionfromposition
    positionFromPosition_toBoundary_inDirection(position: cocoascript.UITextPosition, granularity: cocoascript.UITextGranularity, direction: cocoascript.UITextDirection):cocoascript.UITextPosition;
    // doc://com.apple.documentation/documentation/uikit/uitextinputtokenizer/1614464-rangeenclosingposition
    rangeEnclosingPosition_withGranularity_inDirection(position: cocoascript.UITextPosition, granularity: cocoascript.UITextGranularity, direction: cocoascript.UITextDirection):cocoascript.UITextRange;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods a responder uses to implement simple text entry.
   * doc://com.apple.documentation/documentation/uikit/uikeyinput
   */
  interface UIKeyInput extends UITextInputTraits {
    // doc://com.apple.documentation/documentation/uikit/uikeyinput/1614543-inserttext
    insertText(text: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uikeyinput/1614572-deletebackward
    deleteBackward():void;
    // doc://com.apple.documentation/documentation/uikit/uikeyinput/1614457-hastext
    hasText(): cocoascript.BOOL;
    setHasText(): void;
  }
}
declare namespace cocoascript {
  /**
   * The current text-input mode.
   * doc://com.apple.documentation/documentation/uikit/uitextinputmode
   */
  interface UITextInputMode extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextinputmode/1614522-activeinputmodes
    activeInputModes(): cocoascript.UITextInputMode;
    setActiveInputModes(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextinputmode/1614535-primarylanguage
    primaryLanguage(): cocoascript.NSString;
    setPrimaryLanguage(): void;
    //
    alloc():cocoascript.UITextInputMode;
    //
    init():cocoascript.UITextInputMode;
  }
}

declare const UITextInputMode: cocoascript.UITextInputMode;
declare namespace cocoascript {
  /**
   * A base implementation of the text-input tokenizer protocol.
   * doc://com.apple.documentation/documentation/uikit/uitextinputstringtokenizer
   */
  interface UITextInputStringTokenizer extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextinputstringtokenizer/1614469-initwithtextinput
    initWithTextInput(textInput: cocoascript.UITextInput):cocoascript.UITextInputStringTokenizer;
    //
    alloc():cocoascript.UITextInputStringTokenizer;
    //
    init():cocoascript.UITextInputStringTokenizer;
  }
}

declare const UITextInputStringTokenizer: cocoascript.UITextInputStringTokenizer;
declare namespace cocoascript {
  /**
   * An object that represents the textual interpretation of a spoken phrase that the user dictates.
   * doc://com.apple.documentation/documentation/uikit/uidictationphrase
   */
  interface UIDictationPhrase extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidictationphrase/1614510-alternativeinterpretations
    alternativeInterpretations(): cocoascript.NSString;
    setAlternativeInterpretations(): void;
    // doc://com.apple.documentation/documentation/uikit/uidictationphrase/1614456-text
    text(): cocoascript.NSString;
    setText(): void;
    //
    alloc():cocoascript.UIDictationPhrase;
    //
    init():cocoascript.UIDictationPhrase;
  }
}

declare const UIDictationPhrase: cocoascript.UIDictationPhrase;
declare namespace cocoascript {
  /**
   * An object that displays and manages custom input for a view when that view becomes the first responder.
   * doc://com.apple.documentation/documentation/uikit/uiinputview
   */
  interface UIInputView extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uiinputview/1619477-initwithframe
    initWithFrame_inputViewStyle(frame: cocoascript.CGRect, inputViewStyle: cocoascript.UIInputViewStyle):cocoascript.UIInputView;
    // doc://com.apple.documentation/documentation/uikit/uiinputview/1619475-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIInputView;
    // doc://com.apple.documentation/documentation/uikit/uiinputview/1619471-inputviewstyle
    inputViewStyle(): cocoascript.UIInputViewStyle;
    setInputViewStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiinputview/1619473-allowsselfsizing
    allowsSelfSizing(): cocoascript.BOOL;
    setAllowsSelfSizing(): void;
    //
    alloc():cocoascript.UIInputView;
    //
    init():cocoascript.UIInputView;
  }
}

declare const UIInputView: cocoascript.UIInputView;
declare namespace cocoascript {
  /**
   * An object that provides information about the state of a keyboard key.
   * doc://com.apple.documentation/documentation/uikit/uikey
   */
  interface UIKey extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uikey/3526132-keycode
    keyCode(): cocoascript.UIKeyboardHIDUsage;
    setKeyCode(): void;
    // doc://com.apple.documentation/documentation/uikit/uikey/3526133-modifierflags
    modifierFlags(): cocoascript.UIKeyModifierFlags;
    setModifierFlags(): void;
    // doc://com.apple.documentation/documentation/uikit/uikey/3526130-characters
    characters(): cocoascript.NSString;
    setCharacters(): void;
    // doc://com.apple.documentation/documentation/uikit/uikey/3526131-charactersignoringmodifiers
    charactersIgnoringModifiers(): cocoascript.NSString;
    setCharactersIgnoringModifiers(): void;
    //
    alloc():cocoascript.UIKey;
    //
    init():cocoascript.UIKey;
  }
}

declare const UIKey: cocoascript.UIKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uikeyboardhidusage
  type UIKeyboardHIDUsage = cocoascript.CFIndex;
}
declare namespace cocoascript {
  /**
   * An interaction for customizing the behavior of Scribble on text input views, or for suppressing it entirely in specific cases.
   * doc://com.apple.documentation/documentation/uikit/uiscribbleinteraction
   */
  interface UIScribbleInteraction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiscribbleinteraction/3566749-initwithdelegate
    initWithDelegate(delegate: cocoascript.UIScribbleInteractionDelegate):cocoascript.UIScribbleInteraction;
    // doc://com.apple.documentation/documentation/uikit/uiscribbleinteraction/3566747-delegate
    delegate(): cocoascript.UIScribbleInteractionDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscribbleinteraction/3566748-handlingwriting
    handlingWriting(): cocoascript.BOOL;
    setHandlingWriting(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscribbleinteraction/3566750-pencilinputexpected
    pencilInputExpected(): cocoascript.BOOL;
    setPencilInputExpected(): void;
    //
    alloc():cocoascript.UIScribbleInteraction;
    //
    init():cocoascript.UIScribbleInteraction;
  }
}

declare const UIScribbleInteraction: cocoascript.UIScribbleInteraction;
declare namespace cocoascript {
  /**
   * Methods for customizing or suppressing Scribble behavior within text input views.
   * doc://com.apple.documentation/documentation/uikit/uiscribbleinteractiondelegate
   */
  interface UIScribbleInteractionDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiscribbleinteractiondelegate/3566752-scribbleinteraction
    scribbleInteraction_shouldBeginAtLocation(interaction: cocoascript.UIScribbleInteraction, location: cocoascript.CGPoint):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiscribbleinteractiondelegate/3566754-scribbleinteractionshoulddelayfo
    scribbleInteractionShouldDelayFocus(interaction: cocoascript.UIScribbleInteraction):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiscribbleinteractiondelegate/3566755-scribbleinteractionwillbeginwrit
    scribbleInteractionWillBeginWriting(interaction: cocoascript.UIScribbleInteraction):void;
    // doc://com.apple.documentation/documentation/uikit/uiscribbleinteractiondelegate/3566753-scribbleinteractiondidfinishwrit
    scribbleInteractionDidFinishWriting(interaction: cocoascript.UIScribbleInteraction):void;
  }
}
declare namespace cocoascript {
  /**
   * An interaction for using Scribble to enter text by writing on a view that isn’t formally a text input.
   * doc://com.apple.documentation/documentation/uikit/uiindirectscribbleinteraction
   */
  interface UIIndirectScribbleInteraction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiindirectscribbleinteraction/3566737-initwithdelegate
    initWithDelegate(delegate: cocoascript.UIIndirectScribbleInteractionDelegate):cocoascript.UIIndirectScribbleInteraction;
    // doc://com.apple.documentation/documentation/uikit/uiindirectscribbleinteraction/3566735-delegate
    delegate(): cocoascript.UIIndirectScribbleInteractionDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uiindirectscribbleinteraction/3566736-handlingwriting
    handlingWriting(): cocoascript.BOOL;
    setHandlingWriting(): void;
    //
    alloc():cocoascript.UIIndirectScribbleInteraction;
    //
    init():cocoascript.UIIndirectScribbleInteraction;
  }
}

declare const UIIndirectScribbleInteraction: cocoascript.UIIndirectScribbleInteraction;
declare namespace cocoascript {
  /**
   * Methods that customize behavior on views that aren’t formally text input views.
   * doc://com.apple.documentation/documentation/uikit/uiindirectscribbleinteractiondelegate
   */
  interface UIIndirectScribbleInteractionDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiindirectscribbleinteractiondelegate/3566742-indirectscribbleinteraction
    indirectScribbleInteraction_isElementFocused(interaction: cocoascript.UIIndirectScribbleInteraction, elementIdentifier: cocoascript.UIScribbleElementIdentifier):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiindirectscribbleinteractiondelegate/3566740-indirectscribbleinteraction
    indirectScribbleInteraction_focusElementIfNeeded_referencePoint_completion(interaction: cocoascript.UIIndirectScribbleInteraction, elementIdentifier: cocoascript.UIScribbleElementIdentifier, focusReferencePoint: cocoascript.CGPoint, completion: cocoascript.UITextInput):void;
    // doc://com.apple.documentation/documentation/uikit/uiindirectscribbleinteractiondelegate/3566744-indirectscribbleinteraction
    indirectScribbleInteraction_shouldDelayFocusForElement(interaction: cocoascript.UIIndirectScribbleInteraction, elementIdentifier: cocoascript.UIScribbleElementIdentifier):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiindirectscribbleinteractiondelegate/3566745-indirectscribbleinteraction
    indirectScribbleInteraction_willBeginWritingInElement(interaction: cocoascript.UIIndirectScribbleInteraction, elementIdentifier: cocoascript.UIScribbleElementIdentifier):void;
    // doc://com.apple.documentation/documentation/uikit/uiindirectscribbleinteractiondelegate/3566739-indirectscribbleinteraction
    indirectScribbleInteraction_didFinishWritingInElement(interaction: cocoascript.UIIndirectScribbleInteraction, elementIdentifier: cocoascript.UIScribbleElementIdentifier):void;
    // doc://com.apple.documentation/documentation/uikit/uiindirectscribbleinteractiondelegate/3566741-indirectscribbleinteraction
    indirectScribbleInteraction_frameForElement(interaction: cocoascript.UIIndirectScribbleInteraction, elementIdentifier: cocoascript.UIScribbleElementIdentifier):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uiindirectscribbleinteractiondelegate/3566743-indirectscribbleinteraction
    indirectScribbleInteraction_requestElementsInRect_completion(interaction: cocoascript.UIIndirectScribbleInteraction, rect: cocoascript.CGRect, completion: cocoascript.UIScribbleElementIdentifier):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiscribbleelementidentifier
  type UIScribbleElementIdentifier = cocoascript.NSObject;
}
declare namespace cocoascript {
  /**
   * A preview action, or
   * doc://com.apple.documentation/documentation/uikit/uipreviewaction
   */
  interface UIPreviewAction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipreviewaction/1621447-handler
    handler(): cocoascript.UIViewController;
    setHandler(): void;
    //
    alloc():cocoascript.UIPreviewAction;
    //
    init():cocoascript.UIPreviewAction;
  }
}

declare const UIPreviewAction: cocoascript.UIPreviewAction;
declare namespace cocoascript {
  /**
   * The
   * doc://com.apple.documentation/documentation/uikit/uiaccelerometer
   */
  interface UIAccelerometer extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiaccelerometer/1620651-updateinterval
    updateInterval(): cocoascript.NSTimeInterval;
    setUpdateInterval(): void;
    // doc://com.apple.documentation/documentation/uikit/uiaccelerometer/1620646-delegate
    delegate(): cocoascript.UIAccelerometerDelegate;
    setDelegate(): void;
    //
    alloc():cocoascript.UIAccelerometer;
    //
    init():cocoascript.UIAccelerometer;
  }
}

declare const UIAccelerometer: cocoascript.UIAccelerometer;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uiactionsheet
   */
  interface UIActionSheet extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uiactionsheet/1622875-initwithtitle
    initWithTitle_delegate_cancelButtonTitle_destructiveButtonTitle_otherButtonTitles(title: cocoascript.NSString, delegate: cocoascript.UIActionSheetDelegate, cancelButtonTitle: cocoascript.NSString, destructiveButtonTitle: cocoascript.NSString, otherButtonTitles: cocoascript.NSString):cocoascript.UIActionSheet;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheet/1622878-delegate
    delegate(): cocoascript.UIActionSheetDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheet/1622882-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheet/1622885-visible
    visible(): cocoascript.BOOL;
    setVisible(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheet/1622881-actionsheetstyle
    actionSheetStyle(): cocoascript.UIActionSheetStyle;
    setActionSheetStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheet/1622864-addbuttonwithtitle
    addButtonWithTitle(title: cocoascript.NSString):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheet/1622891-numberofbuttons
    numberOfButtons(): cocoascript.NSInteger;
    setNumberOfButtons(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheet/1622871-buttontitleatindex
    buttonTitleAtIndex(buttonIndex: cocoascript.NSInteger):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheet/1622866-cancelbuttonindex
    cancelButtonIndex(): cocoascript.NSInteger;
    setCancelButtonIndex(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheet/1622863-destructivebuttonindex
    destructiveButtonIndex(): cocoascript.NSInteger;
    setDestructiveButtonIndex(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheet/1622870-firstotherbuttonindex
    firstOtherButtonIndex(): cocoascript.NSInteger;
    setFirstOtherButtonIndex(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheet/1622872-showfromtabbar
    showFromTabBar(view: cocoascript.UITabBar):void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheet/1622874-showfromtoolbar
    showFromToolbar(view: cocoascript.UIToolbar):void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheet/1622886-showinview
    showInView(view: cocoascript.UIView):void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheet/1622869-showfrombarbuttonitem
    showFromBarButtonItem_animated(item: cocoascript.UIBarButtonItem, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheet/1622892-showfromrect
    showFromRect_inView_animated(rect: cocoascript.CGRect, view: cocoascript.UIView, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheet/1622888-dismisswithclickedbuttonindex
    dismissWithClickedButtonIndex_animated(buttonIndex: cocoascript.NSInteger, animated: cocoascript.BOOL):void;
    //
    alloc():cocoascript.UIActionSheet;
    //
    init():cocoascript.UIActionSheet;
  }
}

declare const UIActionSheet: cocoascript.UIActionSheet;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uiactionsheetdelegate
   */
  interface UIActionSheetDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiactionsheetdelegate/1622876-actionsheet
    actionSheet_clickedButtonAtIndex(actionSheet: cocoascript.UIActionSheet, buttonIndex: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheetdelegate/1622865-willpresentactionsheet
    willPresentActionSheet(actionSheet: cocoascript.UIActionSheet):void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheetdelegate/1622877-didpresentactionsheet
    didPresentActionSheet(actionSheet: cocoascript.UIActionSheet):void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheetdelegate/1622884-actionsheet
    actionSheet_willDismissWithButtonIndex(actionSheet: cocoascript.UIActionSheet, buttonIndex: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheetdelegate/1622879-actionsheet
    actionSheet_didDismissWithButtonIndex(actionSheet: cocoascript.UIActionSheet, buttonIndex: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uiactionsheetdelegate/1622867-actionsheetcancel
    actionSheetCancel(actionSheet: cocoascript.UIActionSheet):void;
  }
}
declare namespace cocoascript {
  /**
   * In apps that run in versions of iOS prior to iOS 8, use the
   * doc://com.apple.documentation/documentation/uikit/uialertview
   */
  interface UIAlertView extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uialertview/1620779-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIAlertView;
    // doc://com.apple.documentation/documentation/uikit/uialertview/1620759-initwithframe
    initWithFrame(frame: cocoascript.CGRect):cocoascript.UIAlertView;
    // doc://com.apple.documentation/documentation/uikit/uialertview/1620765-initwithtitle
    initWithTitle_message_delegate_cancelButtonTitle_otherButtonTitles(title: cocoascript.NSString, message: cocoascript.NSString, delegate: cocoascript.UIAlertView, cancelButtonTitle: cocoascript.NSString, otherButtonTitles: cocoascript.NSString):cocoascript.UIAlertView;
    // doc://com.apple.documentation/documentation/uikit/uialertview/1620769-delegate
    delegate(): cocoascript.id;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uialertview/1620780-alertviewstyle
    alertViewStyle(): cocoascript.UIAlertViewStyle;
    setAlertViewStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uialertview/1620768-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uialertview/1620758-message
    message(): cocoascript.NSString;
    setMessage(): void;
    // doc://com.apple.documentation/documentation/uikit/uialertview/1620764-visible
    visible(): cocoascript.BOOL;
    setVisible(): void;
    // doc://com.apple.documentation/documentation/uikit/uialertview/1620761-addbuttonwithtitle
    addButtonWithTitle(title: cocoascript.NSString):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uialertview/1620753-numberofbuttons
    numberOfButtons(): cocoascript.NSInteger;
    setNumberOfButtons(): void;
    // doc://com.apple.documentation/documentation/uikit/uialertview/1620756-buttontitleatindex
    buttonTitleAtIndex(buttonIndex: cocoascript.NSInteger):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uialertview/1620757-textfieldatindex
    textFieldAtIndex(textFieldIndex: cocoascript.NSInteger):cocoascript.UITextField;
    // doc://com.apple.documentation/documentation/uikit/uialertview/1620766-cancelbuttonindex
    cancelButtonIndex(): cocoascript.NSInteger;
    setCancelButtonIndex(): void;
    // doc://com.apple.documentation/documentation/uikit/uialertview/1620771-firstotherbuttonindex
    firstOtherButtonIndex(): cocoascript.NSInteger;
    setFirstOtherButtonIndex(): void;
    // doc://com.apple.documentation/documentation/uikit/uialertview/1620751-show
    show():void;
    // doc://com.apple.documentation/documentation/uikit/uialertview/1620754-dismisswithclickedbuttonindex
    dismissWithClickedButtonIndex_animated(buttonIndex: cocoascript.NSInteger, animated: cocoascript.BOOL):void;
    //
    alloc():cocoascript.UIAlertView;
    //
    init():cocoascript.UIAlertView;
  }
}

declare const UIAlertView: cocoascript.UIAlertView;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uiusernotificationaction
   */
  interface UIUserNotificationAction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiusernotificationaction/1615361-identifier
    identifier(): cocoascript.NSString;
    setIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uiusernotificationaction/1615358-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiusernotificationaction/1615329-activationmode
    activationMode(): cocoascript.UIUserNotificationActivationMode;
    setActivationMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uiusernotificationaction/1615381-authenticationrequired
    authenticationRequired(): cocoascript.BOOL;
    setAuthenticationRequired(): void;
    // doc://com.apple.documentation/documentation/uikit/uiusernotificationaction/1615385-destructive
    destructive(): cocoascript.BOOL;
    setDestructive(): void;
    // doc://com.apple.documentation/documentation/uikit/uiusernotificationaction/1615399-behavior
    behavior(): cocoascript.UIUserNotificationActionBehavior;
    setBehavior(): void;
    // doc://com.apple.documentation/documentation/uikit/uiusernotificationaction/1615337-parameters
    parameters(): cocoascript.NSDictionary;
    setParameters(): void;
    // doc://com.apple.documentation/documentation/uikit/uiusernotificationaction/1615368-init
    init():cocoascript.UIUserNotificationAction;
    // doc://com.apple.documentation/documentation/uikit/uiusernotificationaction/1615366-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIUserNotificationAction;
    //
    alloc():cocoascript.UIUserNotificationAction;
    //
    init():cocoascript.UIUserNotificationAction;
  }
}

declare const UIUserNotificationAction: cocoascript.UIUserNotificationAction;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uisearchdisplaycontroller
   */
  interface UISearchDisplayController extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaycontroller/1620411-initwithsearchbar
    initWithSearchBar_contentsController(searchBar: cocoascript.UISearchBar, viewController: cocoascript.UIViewController):cocoascript.UISearchDisplayController;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaycontroller/1620406-active
    active(): cocoascript.BOOL;
    setActive(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaycontroller/1620397-setactive
    setActive_animated(visible: cocoascript.BOOL, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaycontroller/1620388-delegate
    delegate(): cocoascript.UISearchDisplayDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaycontroller/1620387-searchbar
    searchBar(): cocoascript.UISearchBar;
    setSearchBar(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaycontroller/1620393-searchcontentscontroller
    searchContentsController(): cocoascript.UIViewController;
    setSearchContentsController(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaycontroller/1620400-searchresultstableview
    searchResultsTableView(): cocoascript.UITableView;
    setSearchResultsTableView(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaycontroller/1620390-searchresultsdatasource
    searchResultsDataSource(): cocoascript.UITableViewDataSource;
    setSearchResultsDataSource(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaycontroller/1620404-searchresultsdelegate
    searchResultsDelegate(): cocoascript.UITableViewDelegate;
    setSearchResultsDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaycontroller/1620386-searchresultstitle
    searchResultsTitle(): cocoascript.NSString;
    setSearchResultsTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaycontroller/1620394-displayssearchbarinnavigationbar
    displaysSearchBarInNavigationBar(): cocoascript.BOOL;
    setDisplaysSearchBarInNavigationBar(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaycontroller/1620408-navigationitem
    navigationItem(): cocoascript.UINavigationItem;
    setNavigationItem(): void;
    //
    alloc():cocoascript.UISearchDisplayController;
    //
    init():cocoascript.UISearchDisplayController;
  }
}

declare const UISearchDisplayController: cocoascript.UISearchDisplayController;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uisearchdisplaydelegate
   */
  interface UISearchDisplayDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaydelegate/1620399-searchdisplaycontrollerwillbegin
    searchDisplayControllerWillBeginSearch(controller: cocoascript.UISearchDisplayController):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaydelegate/1620410-searchdisplaycontrollerdidbegins
    searchDisplayControllerDidBeginSearch(controller: cocoascript.UISearchDisplayController):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaydelegate/1620389-searchdisplaycontrollerwillendse
    searchDisplayControllerWillEndSearch(controller: cocoascript.UISearchDisplayController):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaydelegate/1620402-searchdisplaycontrollerdidendsea
    searchDisplayControllerDidEndSearch(controller: cocoascript.UISearchDisplayController):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaydelegate/1620398-searchdisplaycontroller
    searchDisplayController_didLoadSearchResultsTableView(controller: cocoascript.UISearchDisplayController, tableView: cocoascript.UITableView):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaydelegate/1620401-searchdisplaycontroller
    searchDisplayController_willUnloadSearchResultsTableView(controller: cocoascript.UISearchDisplayController, tableView: cocoascript.UITableView):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaydelegate/1620391-searchdisplaycontroller
    searchDisplayController_willShowSearchResultsTableView(controller: cocoascript.UISearchDisplayController, tableView: cocoascript.UITableView):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaydelegate/1620396-searchdisplaycontroller
    searchDisplayController_didShowSearchResultsTableView(controller: cocoascript.UISearchDisplayController, tableView: cocoascript.UITableView):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaydelegate/1620407-searchdisplaycontroller
    searchDisplayController_willHideSearchResultsTableView(controller: cocoascript.UISearchDisplayController, tableView: cocoascript.UITableView):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaydelegate/1620395-searchdisplaycontroller
    searchDisplayController_didHideSearchResultsTableView(controller: cocoascript.UISearchDisplayController, tableView: cocoascript.UITableView):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaydelegate/1620403-searchdisplaycontroller
    searchDisplayController_shouldReloadTableForSearchString(controller: cocoascript.UISearchDisplayController, searchString: cocoascript.NSString):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uisearchdisplaydelegate/1620409-searchdisplaycontroller
    searchDisplayController_shouldReloadTableForSearchScope(controller: cocoascript.UISearchDisplayController, searchOption: cocoascript.NSInteger):cocoascript.BOOL;
  }
}
declare namespace cocoascript {
  /**
   * For apps that run in versions of iOS prior to iOS 8, the
   * doc://com.apple.documentation/documentation/uikit/uialertviewdelegate
   */
  interface UIAlertViewDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uialertviewdelegate/1620752-alertview
    alertView_clickedButtonAtIndex(alertView: cocoascript.UIAlertView, buttonIndex: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uialertviewdelegate/1620774-alertviewshouldenablefirstotherb
    alertViewShouldEnableFirstOtherButton(alertView: cocoascript.UIAlertView):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uialertviewdelegate/1620767-willpresentalertview
    willPresentAlertView(alertView: cocoascript.UIAlertView):void;
    // doc://com.apple.documentation/documentation/uikit/uialertviewdelegate/1620750-didpresentalertview
    didPresentAlertView(alertView: cocoascript.UIAlertView):void;
    // doc://com.apple.documentation/documentation/uikit/uialertviewdelegate/1620763-alertview
    alertView_willDismissWithButtonIndex(alertView: cocoascript.UIAlertView, buttonIndex: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uialertviewdelegate/1620772-alertview
    alertView_didDismissWithButtonIndex(alertView: cocoascript.UIAlertView, buttonIndex: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uialertviewdelegate/1620778-alertviewcancel
    alertViewCancel(alertView: cocoascript.UIAlertView):void;
  }
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uipopovercontroller
   */
  interface UIPopoverController extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipopovercontroller/1624669-initwithcontentviewcontroller
    initWithContentViewController(viewController: cocoascript.UIViewController):cocoascript.UIPopoverController;
    // doc://com.apple.documentation/documentation/uikit/uipopovercontroller/1624660-presentpopoverfromrect
    presentPopoverFromRect_inView_permittedArrowDirections_animated(rect: cocoascript.CGRect, view: cocoascript.UIView, arrowDirections: cocoascript.UIPopoverArrowDirection, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uipopovercontroller/1624668-presentpopoverfrombarbuttonitem
    presentPopoverFromBarButtonItem_permittedArrowDirections_animated(item: cocoascript.UIBarButtonItem, arrowDirections: cocoascript.UIPopoverArrowDirection, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uipopovercontroller/1624662-dismisspopoveranimated
    dismissPopoverAnimated(animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uipopovercontroller/1624672-contentviewcontroller
    contentViewController(): cocoascript.UIViewController;
    setContentViewController(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopovercontroller/1624655-setcontentviewcontroller
    setContentViewController_animated(viewController: cocoascript.UIViewController, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uipopovercontroller/1624667-popovercontentsize
    popoverContentSize(): cocoascript.CGSize;
    setPopoverContentSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopovercontroller/1624670-setpopovercontentsize
    setPopoverContentSize_animated(size: cocoascript.CGSize, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uipopovercontroller/1624654-passthroughviews
    passthroughViews(): cocoascript.UIView;
    setPassthroughViews(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopovercontroller/1624656-popovervisible
    popoverVisible(): cocoascript.BOOL;
    setPopoverVisible(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopovercontroller/1624665-popoverarrowdirection
    popoverArrowDirection(): cocoascript.UIPopoverArrowDirection;
    setPopoverArrowDirection(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopovercontroller/1624666-delegate
    delegate(): cocoascript.UIPopoverControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopovercontroller/1624657-popoverlayoutmargins
    popoverLayoutMargins(): cocoascript.UIEdgeInsets;
    setPopoverLayoutMargins(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopovercontroller/1624659-popoverbackgroundviewclass
    popoverBackgroundViewClass(): cocoascript.Class;
    setPopoverBackgroundViewClass(): void;
    // doc://com.apple.documentation/documentation/uikit/uipopovercontroller/1624673-backgroundcolor
    backgroundColor(): cocoascript.UIColor;
    setBackgroundColor(): void;
    //
    alloc():cocoascript.UIPopoverController;
    //
    init():cocoascript.UIPopoverController;
  }
}

declare const UIPopoverController: cocoascript.UIPopoverController;
declare namespace cocoascript {
  /**
   * A set of delegate methods for search controller objects.
   * doc://com.apple.documentation/documentation/uikit/uisearchcontrollerdelegate
   */
  interface UISearchControllerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uisearchcontrollerdelegate/1618651-diddismisssearchcontroller
    didDismissSearchController(searchController: cocoascript.UISearchController):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontrollerdelegate/1618646-didpresentsearchcontroller
    didPresentSearchController(searchController: cocoascript.UISearchController):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontrollerdelegate/1618648-presentsearchcontroller
    presentSearchController(searchController: cocoascript.UISearchController):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontrollerdelegate/1618655-willdismisssearchcontroller
    willDismissSearchController(searchController: cocoascript.UISearchController):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchcontrollerdelegate/1618652-willpresentsearchcontroller
    willPresentSearchController(searchController: cocoascript.UISearchController):void;
  }
}
declare namespace cocoascript {
  /**
   * A group of one or more child quick actions, each an instance of the
   * doc://com.apple.documentation/documentation/uikit/uipreviewactiongroup
   */
  interface UIPreviewActionGroup extends NSObject {
    //
    alloc():cocoascript.UIPreviewActionGroup;
    //
    init():cocoascript.UIPreviewActionGroup;
  }
}

declare const UIPreviewActionGroup: cocoascript.UIPreviewActionGroup;
declare namespace cocoascript {
  /**
   * An instance of the
   * doc://com.apple.documentation/documentation/uikit/uiacceleration
   */
  interface UIAcceleration extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiacceleration/1620652-x
    x(): cocoascript.UIAccelerationValue;
    setX(): void;
    // doc://com.apple.documentation/documentation/uikit/uiacceleration/1620644-y
    y(): cocoascript.UIAccelerationValue;
    setY(): void;
    // doc://com.apple.documentation/documentation/uikit/uiacceleration/1620643-z
    z(): cocoascript.UIAccelerationValue;
    setZ(): void;
    // doc://com.apple.documentation/documentation/uikit/uiacceleration/1620650-timestamp
    timestamp(): cocoascript.NSTimeInterval;
    setTimestamp(): void;
    //
    alloc():cocoascript.UIAcceleration;
    //
    init():cocoascript.UIAcceleration;
  }
}

declare const UIAcceleration: cocoascript.UIAcceleration;
declare namespace cocoascript {
  /**
   * A list of all the available document providers for a given file type and mode, in addition to custom menu items that you add.
   * doc://com.apple.documentation/documentation/uikit/uidocumentmenuviewcontroller
   */
  interface UIDocumentMenuViewController extends UIViewController {
    // doc://com.apple.documentation/documentation/uikit/uidocumentmenuviewcontroller/1614187-initwithdocumenttypes
    initWithDocumentTypes_inMode(allowedUTIs: cocoascript.NSString, mode: cocoascript.UIDocumentPickerMode):cocoascript.UIDocumentMenuViewController;
    // doc://com.apple.documentation/documentation/uikit/uidocumentmenuviewcontroller/1614191-initwithurl
    initWithURL_inMode(url: cocoascript.NSURL, mode: cocoascript.UIDocumentPickerMode):cocoascript.UIDocumentMenuViewController;
    // doc://com.apple.documentation/documentation/uikit/uidocumentmenuviewcontroller/1614182-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIDocumentMenuViewController;
    // doc://com.apple.documentation/documentation/uikit/uidocumentmenuviewcontroller/1614192-delegate
    delegate(): cocoascript.UIDocumentMenuDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentmenuviewcontroller/1614193-addoptionwithtitle
    addOptionWithTitle_image_order_handler(title: cocoascript.NSString, image: cocoascript.UIImage, order: cocoascript.UIDocumentMenuOrder, handler: void):void;
    //
    alloc():cocoascript.UIDocumentMenuViewController;
    //
    init():cocoascript.UIDocumentMenuViewController;
  }
}

declare const UIDocumentMenuViewController: cocoascript.UIDocumentMenuViewController;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uilocalnotification
   */
  interface UILocalNotification extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uilocalnotification/1616650-firedate
    fireDate(): cocoascript.NSDate;
    setFireDate(): void;
    // doc://com.apple.documentation/documentation/uikit/uilocalnotification/1616659-timezone
    timeZone(): cocoascript.NSTimeZone;
    setTimeZone(): void;
    // doc://com.apple.documentation/documentation/uikit/uilocalnotification/1616643-repeatinterval
    repeatInterval(): cocoascript.NSCalendarUnit;
    setRepeatInterval(): void;
    // doc://com.apple.documentation/documentation/uikit/uilocalnotification/1616656-repeatcalendar
    repeatCalendar(): cocoascript.NSCalendar;
    setRepeatCalendar(): void;
    // doc://com.apple.documentation/documentation/uikit/uilocalnotification/1616644-region
    region(): cocoascript.CLRegion;
    setRegion(): void;
    // doc://com.apple.documentation/documentation/uikit/uilocalnotification/1616654-regiontriggersonce
    regionTriggersOnce(): cocoascript.BOOL;
    setRegionTriggersOnce(): void;
    // doc://com.apple.documentation/documentation/uikit/uilocalnotification/1616646-alertbody
    alertBody(): cocoascript.NSString;
    setAlertBody(): void;
    // doc://com.apple.documentation/documentation/uikit/uilocalnotification/1616648-alertaction
    alertAction(): cocoascript.NSString;
    setAlertAction(): void;
    // doc://com.apple.documentation/documentation/uikit/uilocalnotification/1616647-alerttitle
    alertTitle(): cocoascript.NSString;
    setAlertTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uilocalnotification/1616649-hasaction
    hasAction(): cocoascript.BOOL;
    setHasAction(): void;
    // doc://com.apple.documentation/documentation/uikit/uilocalnotification/1616660-alertlaunchimage
    alertLaunchImage(): cocoascript.NSString;
    setAlertLaunchImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uilocalnotification/1616655-category
    category(): cocoascript.NSString;
    setCategory(): void;
    // doc://com.apple.documentation/documentation/uikit/uilocalnotification/1616658-applicationiconbadgenumber
    applicationIconBadgeNumber(): cocoascript.NSInteger;
    setApplicationIconBadgeNumber(): void;
    // doc://com.apple.documentation/documentation/uikit/uilocalnotification/1616651-soundname
    soundName(): cocoascript.NSString;
    setSoundName(): void;
    // doc://com.apple.documentation/documentation/uikit/uilocalnotification/1616657-userinfo
    userInfo(): cocoascript.NSDictionary;
    setUserInfo(): void;
    // doc://com.apple.documentation/documentation/uikit/uilocalnotification/1616645-init
    init():cocoascript.UILocalNotification;
    // doc://com.apple.documentation/documentation/uikit/uilocalnotification/1616653-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UILocalNotification;
    //
    alloc():cocoascript.UILocalNotification;
    //
    init():cocoascript.UILocalNotification;
  }
}

declare const UILocalNotification: cocoascript.UILocalNotification;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uimutableusernotificationaction
   */
  interface UIMutableUserNotificationAction extends UIUserNotificationAction {
    // doc://com.apple.documentation/documentation/uikit/uimutableusernotificationaction/1615379-identifier
    identifier(): cocoascript.NSString;
    setIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uimutableusernotificationaction/1615370-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uimutableusernotificationaction/1615372-activationmode
    activationMode(): cocoascript.UIUserNotificationActivationMode;
    setActivationMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uimutableusernotificationaction/1615389-authenticationrequired
    authenticationRequired(): cocoascript.BOOL;
    setAuthenticationRequired(): void;
    // doc://com.apple.documentation/documentation/uikit/uimutableusernotificationaction/1615322-destructive
    destructive(): cocoascript.BOOL;
    setDestructive(): void;
    // doc://com.apple.documentation/documentation/uikit/uimutableusernotificationaction/1615395-behavior
    behavior(): cocoascript.UIUserNotificationActionBehavior;
    setBehavior(): void;
    // doc://com.apple.documentation/documentation/uikit/uimutableusernotificationaction/1615354-parameters
    parameters(): cocoascript.NSDictionary;
    setParameters(): void;
    //
    alloc():cocoascript.UIMutableUserNotificationAction;
    //
    init():cocoascript.UIMutableUserNotificationAction;
  }
}

declare const UIMutableUserNotificationAction: cocoascript.UIMutableUserNotificationAction;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uimutableusernotificationcategory
   */
  interface UIMutableUserNotificationCategory extends UIUserNotificationCategory {
    // doc://com.apple.documentation/documentation/uikit/uimutableusernotificationcategory/1615376-identifier
    identifier(): cocoascript.NSString;
    setIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uimutableusernotificationcategory/1615397-setactions
    setActions_forContext(actions: cocoascript.UIUserNotificationAction, context: cocoascript.UIUserNotificationActionContext):void;
    //
    alloc():cocoascript.UIMutableUserNotificationCategory;
    //
    init():cocoascript.UIMutableUserNotificationCategory;
  }
}

declare const UIMutableUserNotificationCategory: cocoascript.UIMutableUserNotificationCategory;
declare namespace cocoascript {
  /**
   * The
   * doc://com.apple.documentation/documentation/uikit/uistoryboardpopoversegue
   */
  interface UIStoryboardPopoverSegue extends UIStoryboardSegue {
    // doc://com.apple.documentation/documentation/uikit/uistoryboardpopoversegue/1624759-popovercontroller
    popoverController(): cocoascript.UIPopoverController;
    setPopoverController(): void;
    //
    alloc():cocoascript.UIStoryboardPopoverSegue;
    //
    init():cocoascript.UIStoryboardPopoverSegue;
  }
}

declare const UIStoryboardPopoverSegue: cocoascript.UIStoryboardPopoverSegue;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uiusernotificationcategory
   */
  interface UIUserNotificationCategory extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiusernotificationcategory/1615383-identifier
    identifier(): cocoascript.NSString;
    setIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uiusernotificationcategory/1615374-actionsforcontext
    actionsForContext(context: cocoascript.UIUserNotificationActionContext):cocoascript.UIUserNotificationAction;
    // doc://com.apple.documentation/documentation/uikit/uiusernotificationcategory/1615327-init
    init():cocoascript.UIUserNotificationCategory;
    // doc://com.apple.documentation/documentation/uikit/uiusernotificationcategory/1615391-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIUserNotificationCategory;
    //
    alloc():cocoascript.UIUserNotificationCategory;
    //
    init():cocoascript.UIUserNotificationCategory;
  }
}

declare const UIUserNotificationCategory: cocoascript.UIUserNotificationCategory;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uiusernotificationsettings
   */
  interface UIUserNotificationSettings extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiusernotificationsettings/1615321-types
    types(): cocoascript.UIUserNotificationType;
    setTypes(): void;
    // doc://com.apple.documentation/documentation/uikit/uiusernotificationsettings/1615365-categories
    categories(): cocoascript.UIUserNotificationCategory;
    setCategories(): void;
    //
    alloc():cocoascript.UIUserNotificationSettings;
    //
    init():cocoascript.UIUserNotificationSettings;
  }
}

declare const UIUserNotificationSettings: cocoascript.UIUserNotificationSettings;
declare namespace cocoascript {
  /**
   * A set of methods that define the interface for configuring a previewing view controller on devices that support 3D Touch.
   * doc://com.apple.documentation/documentation/uikit/uiviewcontrollerpreviewing
   */
  interface UIViewControllerPreviewing extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollerpreviewing/1621431-sourcerect
    sourceRect(): cocoascript.CGRect;
    setSourceRect(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollerpreviewing/1621467-previewinggesturerecognizerforfa
    previewingGestureRecognizerForFailureRelationship(): cocoascript.UIGestureRecognizer;
    setPreviewingGestureRecognizerForFailureRelationship(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollerpreviewing/1621422-delegate
    delegate(): cocoascript.UIViewControllerPreviewingDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollerpreviewing/1621436-sourceview
    sourceView(): cocoascript.UIView;
    setSourceView(): void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods used by the delegate to respond, with a preview view controller and a commit view controller, to the user pressing a view object on the screen of a device that supports 3D Touch.
   * doc://com.apple.documentation/documentation/uikit/uiviewcontrollerpreviewingdelegate
   */
  interface UIViewControllerPreviewingDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollerpreviewingdelegate/1621464-previewingcontext
    previewingContext_viewControllerForLocation(previewingContext: cocoascript.UIViewControllerPreviewing, location: cocoascript.CGPoint):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollerpreviewingdelegate/1621366-previewingcontext
    previewingContext_commitViewController(previewingContext: cocoascript.UIViewControllerPreviewing, viewControllerToCommit: cocoascript.UIViewController):void;
  }
}
declare namespace cocoascript {
  /**
   * The
   * doc://com.apple.documentation/documentation/uikit/uiaccelerometerdelegate
   */
  interface UIAccelerometerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiaccelerometerdelegate/1620653-accelerometer
    accelerometer_didAccelerate(accelerometer: cocoascript.UIAccelerometer, acceleration: cocoascript.UIAcceleration):void;
  }
}
declare namespace cocoascript {
  /**
   * The
   * doc://com.apple.documentation/documentation/uikit/uipopovercontrollerdelegate
   */
  interface UIPopoverControllerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipopovercontrollerdelegate/1624664-popovercontroller
    popoverController_willRepositionPopoverToRect_inView(popoverController: cocoascript.UIPopoverController, rect: cocoascript.CGRect, view: cocoascript.UIView):void;
    // doc://com.apple.documentation/documentation/uikit/uipopovercontrollerdelegate/1624661-popovercontrollershoulddismisspo
    popoverControllerShouldDismissPopover(popoverController: cocoascript.UIPopoverController):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uipopovercontrollerdelegate/1624671-popovercontrollerdiddismisspopov
    popoverControllerDidDismissPopover(popoverController: cocoascript.UIPopoverController):void;
  }
}
declare namespace cocoascript {
  /**
   * An interface for providing the timing information needed to perform animations.
   * doc://com.apple.documentation/documentation/uikit/uitimingcurveprovider
   */
  interface UITimingCurveProvider extends NSCoding {
    // doc://com.apple.documentation/documentation/uikit/uitimingcurveprovider/1648030-timingcurvetype
    timingCurveType(): cocoascript.UITimingCurveType;
    setTimingCurveType(): void;
    // doc://com.apple.documentation/documentation/uikit/uitimingcurveprovider/1648036-cubictimingparameters
    cubicTimingParameters(): cocoascript.UICubicTimingParameters;
    setCubicTimingParameters(): void;
    // doc://com.apple.documentation/documentation/uikit/uitimingcurveprovider/1648031-springtimingparameters
    springTimingParameters(): cocoascript.UISpringTimingParameters;
    setSpringTimingParameters(): void;
  }
}
declare namespace cocoascript {
  /**
   * A view that presents data using rows arranged in a single column.
   * doc://com.apple.documentation/documentation/uikit/uitableview
   */
  interface UITableView extends UIScrollView {
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614886-initwithframe
    initWithFrame_style(frame: cocoascript.CGRect, style: cocoascript.UITableViewStyle):cocoascript.UITableView;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614859-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UITableView;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614955-datasource
    dataSource(): cocoascript.UITableViewDataSource;
    setDataSource(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1771763-prefetchdatasource
    prefetchDataSource(): cocoascript.UITableViewDataSourcePrefetching;
    setPrefetchDataSource(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614937-registernib
    registerNib_forCellReuseIdentifier(nib: cocoascript.UINib, identifier: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614888-registerclass
    registerClass_forCellReuseIdentifier(cellClass: cocoascript.Class, identifier: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614878-dequeuereusablecellwithidentifie
    dequeueReusableCellWithIdentifier_forIndexPath(identifier: cocoascript.NSString, indexPath: cocoascript.NSIndexPath):cocoascript.UITableViewCell;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614891-dequeuereusablecellwithidentifie
    dequeueReusableCellWithIdentifier(identifier: cocoascript.NSString):cocoascript.UITableViewCell;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614921-registernib
    registerNib_forHeaderFooterViewReuseIdentifier(nib: cocoascript.UINib, identifier: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614964-registerclass
    registerClass_forHeaderFooterViewReuseIdentifier(aClass: cocoascript.Class, identifier: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614975-dequeuereusableheaderfootervieww
    dequeueReusableHeaderFooterViewWithIdentifier(identifier: cocoascript.NSString):cocoascript.UITableViewHeaderFooterView;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614894-delegate
    delegate(): cocoascript.UITableViewDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614913-style
    style(): cocoascript.UITableViewStyle;
    setStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614904-tableheaderview
    tableHeaderView(): cocoascript.UIView;
    setTableHeaderView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614976-tablefooterview
    tableFooterView(): cocoascript.UIView;
    setTableFooterView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614986-backgroundview
    backgroundView(): cocoascript.UIView;
    setBackgroundView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614852-rowheight
    rowHeight(): cocoascript.CGFloat;
    setRowHeight(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614925-estimatedrowheight
    estimatedRowHeight(): cocoascript.CGFloat;
    setEstimatedRowHeight(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614849-celllayoutmarginsfollowreadablew
    cellLayoutMarginsFollowReadableWidth(): cocoascript.BOOL;
    setCellLayoutMarginsFollowReadableWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/2921665-insetscontentviewstosafearea
    insetsContentViewsToSafeArea(): cocoascript.BOOL;
    setInsetsContentViewsToSafeArea(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614863-sectionheaderheight
    sectionHeaderHeight(): cocoascript.CGFloat;
    setSectionHeaderHeight(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614846-sectionfooterheight
    sectionFooterHeight(): cocoascript.CGFloat;
    setSectionFooterHeight(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614957-estimatedsectionheaderheight
    estimatedSectionHeaderHeight(): cocoascript.CGFloat;
    setEstimatedSectionHeaderHeight(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614979-estimatedsectionfooterheight
    estimatedSectionFooterHeight(): cocoascript.CGFloat;
    setEstimatedSectionFooterHeight(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614909-separatorstyle
    separatorStyle(): cocoascript.UITableViewCellSeparatorStyle;
    setSeparatorStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614984-separatorcolor
    separatorColor(): cocoascript.UIColor;
    setSeparatorColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614865-separatoreffect
    separatorEffect(): cocoascript.UIVisualEffect;
    setSeparatorEffect(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614851-separatorinset
    separatorInset(): cocoascript.UIEdgeInsets;
    setSeparatorInset(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/2887517-separatorinsetreference
    separatorInsetReference(): cocoascript.UITableViewSeparatorInsetReference;
    setSeparatorInsetReference(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614952-numberofrowsinsection
    numberOfRowsInSection(section: cocoascript.NSInteger):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614924-numberofsections
    numberOfSections(): cocoascript.NSInteger;
    setNumberOfSections(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614983-cellforrowatindexpath
    cellForRowAtIndexPath(indexPath: cocoascript.NSIndexPath):cocoascript.UITableViewCell;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614965-headerviewforsection
    headerViewForSection(section: cocoascript.NSInteger):cocoascript.UITableViewHeaderFooterView;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614972-footerviewforsection
    footerViewForSection(section: cocoascript.NSInteger):cocoascript.UITableViewHeaderFooterView;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614881-indexpathforcell
    indexPathForCell(cell: cocoascript.UITableViewCell):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614874-indexpathforrowatpoint
    indexPathForRowAtPoint(point: cocoascript.CGPoint):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614991-indexpathsforrowsinrect
    indexPathsForRowsInRect(rect: cocoascript.CGRect):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614896-visiblecells
    visibleCells(): cocoascript.UITableViewCell;
    setVisibleCells(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614885-indexpathsforvisiblerows
    indexPathsForVisibleRows(): cocoascript.NSIndexPath;
    setIndexPathsForVisibleRows(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1615000-indexpathforselectedrow
    indexPathForSelectedRow(): cocoascript.NSIndexPath;
    setIndexPathForSelectedRow(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614864-indexpathsforselectedrows
    indexPathsForSelectedRows(): cocoascript.NSIndexPath;
    setIndexPathsForSelectedRows(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614875-selectrowatindexpath
    selectRowAtIndexPath_animated_scrollPosition(indexPath: cocoascript.NSIndexPath, animated: cocoascript.BOOL, scrollPosition: cocoascript.UITableViewScrollPosition):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614989-deselectrowatindexpath
    deselectRowAtIndexPath_animated(indexPath: cocoascript.NSIndexPath, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614911-allowsselection
    allowsSelection(): cocoascript.BOOL;
    setAllowsSelection(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614938-allowsmultipleselection
    allowsMultipleSelection(): cocoascript.BOOL;
    setAllowsMultipleSelection(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614889-allowsselectionduringediting
    allowsSelectionDuringEditing(): cocoascript.BOOL;
    setAllowsSelectionDuringEditing(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614944-allowsmultipleselectionduringedi
    allowsMultipleSelectionDuringEditing(): cocoascript.BOOL;
    setAllowsMultipleSelectionDuringEditing(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/3573921-selectionfollowsfocus
    selectionFollowsFocus(): cocoascript.BOOL;
    setSelectionFollowsFocus(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614879-insertrowsatindexpaths
    insertRowsAtIndexPaths_withRowAnimation(indexPaths: cocoascript.NSIndexPath, animation: cocoascript.UITableViewRowAnimation):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614960-deleterowsatindexpaths
    deleteRowsAtIndexPaths_withRowAnimation(indexPaths: cocoascript.NSIndexPath, animation: cocoascript.UITableViewRowAnimation):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614892-insertsections
    insertSections_withRowAnimation(sections: cocoascript.NSIndexSet, animation: cocoascript.UITableViewRowAnimation):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614922-deletesections
    deleteSections_withRowAnimation(sections: cocoascript.NSIndexSet, animation: cocoascript.UITableViewRowAnimation):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614987-moverowatindexpath
    moveRowAtIndexPath_toIndexPath(indexPath: cocoascript.NSIndexPath, newIndexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614940-movesection
    moveSection_toSection(section: cocoascript.NSInteger, newSection: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/2887515-performbatchupdates
    performBatchUpdates_completion(updates: void, completion: void):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614908-beginupdates
    beginUpdates():void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614890-endupdates
    endUpdates():void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614903-sectionindexminimumdisplayrowcou
    sectionIndexMinimumDisplayRowCount(): cocoascript.NSInteger;
    setSectionIndexMinimumDisplayRowCount(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614915-sectionindexcolor
    sectionIndexColor(): cocoascript.UIColor;
    setSectionIndexColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614918-sectionindexbackgroundcolor
    sectionIndexBackgroundColor(): cocoascript.UIColor;
    setSectionIndexBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614992-sectionindextrackingbackgroundco
    sectionIndexTrackingBackgroundColor(): cocoascript.UIColor;
    setSectionIndexTrackingBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/2891097-hasuncommittedupdates
    hasUncommittedUpdates(): cocoascript.BOOL;
    setHasUncommittedUpdates(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614862-reloaddata
    reloadData():void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614935-reloadrowsatindexpaths
    reloadRowsAtIndexPaths_withRowAnimation(indexPaths: cocoascript.NSIndexPath, animation: cocoascript.UITableViewRowAnimation):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614954-reloadsections
    reloadSections_withRowAnimation(sections: cocoascript.NSIndexSet, animation: cocoascript.UITableViewRowAnimation):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614932-reloadsectionindextitles
    reloadSectionIndexTitles():void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/2897362-dragdelegate
    dragDelegate(): cocoascript.UITableViewDragDelegate;
    setDragDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/2897381-hasactivedrag
    hasActiveDrag(): cocoascript.BOOL;
    setHasActiveDrag(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/2909064-draginteractionenabled
    dragInteractionEnabled(): cocoascript.BOOL;
    setDragInteractionEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/2897372-dropdelegate
    dropDelegate(): cocoascript.UITableViewDropDelegate;
    setDropDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/2897323-hasactivedrop
    hasActiveDrop(): cocoascript.BOOL;
    setHasActiveDrop(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614997-scrolltorowatindexpath
    scrollToRowAtIndexPath_atScrollPosition_animated(indexPath: cocoascript.NSIndexPath, scrollPosition: cocoascript.UITableViewScrollPosition, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614910-scrolltonearestselectedrowatscro
    scrollToNearestSelectedRowAtScrollPosition_animated(scrollPosition: cocoascript.UITableViewScrollPosition, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614876-setediting
    setEditing_animated(editing: cocoascript.BOOL, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1615001-editing
    editing(): cocoascript.BOOL;
    setEditing(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614951-rectforsection
    rectForSection(section: cocoascript.NSInteger):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614974-rectforrowatindexpath
    rectForRowAtIndexPath(indexPath: cocoascript.NSIndexPath):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614999-rectforfooterinsection
    rectForFooterInSection(section: cocoascript.NSInteger):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614872-rectforheaderinsection
    rectForHeaderInSection(section: cocoascript.NSInteger):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uitableview/1614858-rememberslastfocusedindexpath
    remembersLastFocusedIndexPath(): cocoascript.BOOL;
    setRemembersLastFocusedIndexPath(): void;
    //
    alloc():cocoascript.UITableView;
    //
    init():cocoascript.UITableView;
  }
}

declare const UITableView: cocoascript.UITableView;
declare const UITableViewIndexSearch: cocoascript.NSString;
declare namespace cocoascript {
  /**
   * An abstract base class for generating layout information for a collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout
   */
  interface UICollectionViewLayout extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617734-init
    init():cocoascript.UICollectionViewLayout;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617766-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UICollectionViewLayout;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617751-collectionview
    collectionView(): cocoascript.UICollectionView;
    setCollectionView(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617796-collectionviewcontentsize
    collectionViewContentSize(): cocoascript.CGSize;
    setCollectionViewContentSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617774-layoutattributesclass
    layoutAttributesClass(): cocoascript.Class;
    setLayoutAttributesClass(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617752-preparelayout
    prepareLayout():void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617769-layoutattributesforelementsinrec
    layoutAttributesForElementsInRect(rect: cocoascript.CGRect):cocoascript.UICollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617797-layoutattributesforitematindexpa
    layoutAttributesForItemAtIndexPath(indexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617788-layoutattributesforinteractively
    layoutAttributesForInteractivelyMovingItemAtIndexPath_withTargetPosition(indexPath: cocoascript.NSIndexPath, position: cocoascript.CGPoint):cocoascript.UICollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617792-layoutattributesforsupplementary
    layoutAttributesForSupplementaryViewOfKind_atIndexPath(elementKind: cocoascript.NSString, indexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617809-layoutattributesfordecorationvie
    layoutAttributesForDecorationViewOfKind_atIndexPath(elementKind: cocoascript.NSString, indexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617724-targetcontentoffsetforproposedco
    targetContentOffsetForProposedContentOffset(proposedContentOffset: cocoascript.CGPoint):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617729-targetcontentoffsetforproposedco
    targetContentOffsetForProposedContentOffset_withScrollingVelocity(proposedContentOffset: cocoascript.CGPoint, velocity: cocoascript.CGPoint):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617784-prepareforcollectionviewupdates
    prepareForCollectionViewUpdates(updateItems: cocoascript.UICollectionViewUpdateItem):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617787-finalizecollectionviewupdates
    finalizeCollectionViewUpdates():void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617770-indexpathstoinsertforsupplementa
    indexPathsToInsertForSupplementaryViewOfKind(elementKind: cocoascript.NSString):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617750-indexpathstoinsertfordecorationv
    indexPathsToInsertForDecorationViewOfKind(elementKind: cocoascript.NSString):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617789-initiallayoutattributesforappear
    initialLayoutAttributesForAppearingItemAtIndexPath(itemIndexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617737-initiallayoutattributesforappear
    initialLayoutAttributesForAppearingSupplementaryElementOfKind_atIndexPath(elementKind: cocoascript.NSString, elementIndexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617726-initiallayoutattributesforappear
    initialLayoutAttributesForAppearingDecorationElementOfKind_atIndexPath(elementKind: cocoascript.NSString, decorationIndexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617807-indexpathstodeleteforsupplementa
    indexPathsToDeleteForSupplementaryViewOfKind(elementKind: cocoascript.NSString):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617730-indexpathstodeletefordecorationv
    indexPathsToDeleteForDecorationViewOfKind(elementKind: cocoascript.NSString):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617740-finallayoutattributesfordisappea
    finalLayoutAttributesForDisappearingItemAtIndexPath(itemIndexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617742-finallayoutattributesfordisappea
    finalLayoutAttributesForDisappearingSupplementaryElementOfKind_atIndexPath(elementKind: cocoascript.NSString, elementIndexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617762-finallayoutattributesfordisappea
    finalLayoutAttributesForDisappearingDecorationElementOfKind_atIndexPath(elementKind: cocoascript.NSString, decorationIndexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617778-targetindexpathforinteractivelym
    targetIndexPathForInteractivelyMovingItem_withPosition(previousIndexPath: cocoascript.NSIndexPath, position: cocoascript.CGPoint):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617728-invalidatelayout
    invalidateLayout():void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617771-invalidatelayoutwithcontext
    invalidateLayoutWithContext(context: cocoascript.UICollectionViewLayoutInvalidationContext):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617790-invalidationcontextclass
    invalidationContextClass(): cocoascript.Class;
    setInvalidationContextClass(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617781-shouldinvalidatelayoutforboundsc
    shouldInvalidateLayoutForBoundsChange(newBounds: cocoascript.CGRect):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617754-invalidationcontextforboundschan
    invalidationContextForBoundsChange(newBounds: cocoascript.CGRect):cocoascript.UICollectionViewLayoutInvalidationContext;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617746-shouldinvalidatelayoutforpreferr
    shouldInvalidateLayoutForPreferredLayoutAttributes_withOriginalAttributes(preferredAttributes: cocoascript.UICollectionViewLayoutAttributes, originalAttributes: cocoascript.UICollectionViewLayoutAttributes):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617767-invalidationcontextforpreferredl
    invalidationContextForPreferredLayoutAttributes_withOriginalAttributes(preferredAttributes: cocoascript.UICollectionViewLayoutAttributes, originalAttributes: cocoascript.UICollectionViewLayoutAttributes):cocoascript.UICollectionViewLayoutInvalidationContext;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617757-invalidationcontextforinteractiv
    invalidationContextForInteractivelyMovingItems_withTargetPosition_previousIndexPaths_previousPosition(targetIndexPaths: cocoascript.NSIndexPath, targetPosition: cocoascript.CGPoint, previousIndexPaths: cocoascript.NSIndexPath, previousPosition: cocoascript.CGPoint):cocoascript.UICollectionViewLayoutInvalidationContext;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617755-invalidationcontextforendinginte
    invalidationContextForEndingInteractiveMovementOfItemsToFinalIndexPaths_previousIndexPaths_movementCancelled(indexPaths: cocoascript.NSIndexPath, previousIndexPaths: cocoascript.NSIndexPath, movementCancelled: cocoascript.BOOL):cocoascript.UICollectionViewLayoutInvalidationContext;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617761-prepareforanimatedboundschange
    prepareForAnimatedBoundsChange(oldBounds: cocoascript.CGRect):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617745-finalizeanimatedboundschange
    finalizeAnimatedBoundsChange():void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617802-preparefortransitionfromlayout
    prepareForTransitionFromLayout(oldLayout: cocoascript.UICollectionViewLayout):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617791-preparefortransitiontolayout
    prepareForTransitionToLayout(newLayout: cocoascript.UICollectionViewLayout):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617794-finalizelayouttransition
    finalizeLayoutTransition():void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617739-registerclass
    registerClass_forDecorationViewOfKind(viewClass: cocoascript.Class, elementKind: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/1617732-registernib
    registerNib_forDecorationViewOfKind(nib: cocoascript.UINib, elementKind: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/2891100-developmentlayoutdirection
    developmentLayoutDirection(): cocoascript.UIUserInterfaceLayoutDirection;
    setDevelopmentLayoutDirection(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayout/2891099-flipshorizontallyinoppositelayou
    flipsHorizontallyInOppositeLayoutDirection(): cocoascript.BOOL;
    setFlipsHorizontallyInOppositeLayoutDirection(): void;
    //
    alloc():cocoascript.UICollectionViewLayout;
    //
    init():cocoascript.UICollectionViewLayout;
  }
}

declare const UICollectionViewLayout: cocoascript.UICollectionViewLayout;
declare namespace cocoascript {
  /**
   * A shape for use in UIKit Dynamics.
   * doc://com.apple.documentation/documentation/uikit/uiregion
   */
  interface UIRegion extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiregion/1621896-infiniteregion
    infiniteRegion(): cocoascript.UIRegion;
    setInfiniteRegion(): void;
    // doc://com.apple.documentation/documentation/uikit/uiregion/1621891-initwithsize
    initWithSize(size: cocoascript.CGSize):cocoascript.UIRegion;
    // doc://com.apple.documentation/documentation/uikit/uiregion/1621889-initwithradius
    initWithRadius(radius: cocoascript.CGFloat):cocoascript.UIRegion;
    // doc://com.apple.documentation/documentation/uikit/uiregion/1621894-inverseregion
    inverseRegion():cocoascript.UIRegion;
    // doc://com.apple.documentation/documentation/uikit/uiregion/1621892-regionbydifferencefromregion
    regionByDifferenceFromRegion(region: cocoascript.UIRegion):cocoascript.UIRegion;
    // doc://com.apple.documentation/documentation/uikit/uiregion/1621895-regionbyintersectionwithregion
    regionByIntersectionWithRegion(region: cocoascript.UIRegion):cocoascript.UIRegion;
    // doc://com.apple.documentation/documentation/uikit/uiregion/1621890-regionbyunionwithregion
    regionByUnionWithRegion(region: cocoascript.UIRegion):cocoascript.UIRegion;
    // doc://com.apple.documentation/documentation/uikit/uiregion/1621893-containspoint
    containsPoint(point: cocoascript.CGPoint):cocoascript.BOOL;
    //
    alloc():cocoascript.UIRegion;
    //
    init():cocoascript.UIRegion;
  }
}

declare const UIRegion: cocoascript.UIRegion;
declare namespace cocoascript {
  /**
   * An abstract superclass for defining motion-based modifiers for views.
   * doc://com.apple.documentation/documentation/uikit/uimotioneffect
   */
  interface UIMotionEffect extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uimotioneffect/1622375-init
    init():cocoascript.UIMotionEffect;
    // doc://com.apple.documentation/documentation/uikit/uimotioneffect/1622371-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIMotionEffect;
    // doc://com.apple.documentation/documentation/uikit/uimotioneffect/1622380-keypathsandrelativevaluesforview
    keyPathsAndRelativeValuesForViewerOffset(viewerOffset: cocoascript.UIOffset):cocoascript.UIMotionEffect;
    //
    alloc():cocoascript.UIMotionEffect;
    //
    init():cocoascript.UIMotionEffect;
  }
}

declare const UIMotionEffect: cocoascript.UIMotionEffect;
declare namespace cocoascript {
  /**
   * The visual representation of a single row in a table view.
   * doc://com.apple.documentation/documentation/uikit/uitableviewcell
   */
  interface UITableViewCell extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623276-initwithstyle
    initWithStyle_reuseIdentifier(style: cocoascript.UITableViewCellStyle, reuseIdentifier: cocoascript.NSString):cocoascript.UITableViewCell;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623220-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UITableViewCell;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623246-reuseidentifier
    reuseIdentifier(): cocoascript.NSString;
    setReuseIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623223-prepareforreuse
    prepareForReuse():void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/3600586-backgroundconfiguration
    backgroundConfiguration(): cocoascript.UIBackgroundConfiguration;
    setBackgroundConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/3600584-automaticallyupdatesbackgroundco
    automaticallyUpdatesBackgroundConfiguration(): cocoascript.BOOL;
    setAutomaticallyUpdatesBackgroundConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623260-backgroundview
    backgroundView(): cocoascript.UIView;
    setBackgroundView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623226-selectedbackgroundview
    selectedBackgroundView(): cocoascript.UIView;
    setSelectedBackgroundView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623275-multipleselectionbackgroundview
    multipleSelectionBackgroundView(): cocoascript.UIView;
    setMultipleSelectionBackgroundView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/3600589-defaultcontentconfiguration
    defaultContentConfiguration():cocoascript.UIListContentConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/3600588-contentconfiguration
    contentConfiguration(): cocoascript.UIContentConfiguration;
    setContentConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/3600585-automaticallyupdatescontentconfi
    automaticallyUpdatesContentConfiguration(): cocoascript.BOOL;
    setAutomaticallyUpdatesContentConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623229-contentview
    contentView(): cocoascript.UIView;
    setContentView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623210-textlabel
    textLabel(): cocoascript.UILabel;
    setTextLabel(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623273-detailtextlabel
    detailTextLabel(): cocoascript.UILabel;
    setDetailTextLabel(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623270-imageview
    imageView(): cocoascript.UIImageView;
    setImageView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/3600587-configurationstate
    configurationState(): cocoascript.UICellConfigurationState;
    setConfigurationState(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/3600590-setneedsupdateconfiguration
    setNeedsUpdateConfiguration():void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/3600591-updateconfigurationusingstate
    updateConfigurationUsingState(state: cocoascript.UICellConfigurationState):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623228-accessorytype
    accessoryType(): cocoascript.UITableViewCellAccessoryType;
    setAccessoryType(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623219-accessoryview
    accessoryView(): cocoascript.UIView;
    setAccessoryView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623266-editingaccessorytype
    editingAccessoryType(): cocoascript.UITableViewCellAccessoryType;
    setEditingAccessoryType(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623264-editingaccessoryview
    editingAccessoryView(): cocoascript.UIView;
    setEditingAccessoryView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623221-selectionstyle
    selectionStyle(): cocoascript.UITableViewCellSelectionStyle;
    setSelectionStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623263-selected
    selected(): cocoascript.BOOL;
    setSelected(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623255-setselected
    setSelected_animated(selected: cocoascript.BOOL, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623241-highlighted
    highlighted(): cocoascript.BOOL;
    setHighlighted(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623280-sethighlighted
    setHighlighted_animated(highlighted: cocoascript.BOOL, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623268-editing
    editing(): cocoascript.BOOL;
    setEditing(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623222-setediting
    setEditing_animated(editing: cocoascript.BOOL, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623234-editingstyle
    editingStyle(): cocoascript.UITableViewCellEditingStyle;
    setEditingStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623211-showingdeleteconfirmation
    showingDeleteConfirmation(): cocoascript.BOOL;
    setShowingDeleteConfirmation(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623243-showsreordercontrol
    showsReorderControl(): cocoascript.BOOL;
    setShowsReorderControl(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/2897414-userinteractionenabledwhiledragg
    userInteractionEnabledWhileDragging(): cocoascript.BOOL;
    setUserInteractionEnabledWhileDragging(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/2897452-dragstatedidchange
    dragStateDidChange(dragState: cocoascript.UITableViewCellDragState):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623240-willtransitiontostate
    willTransitionToState(state: cocoascript.UITableViewCellStateMask):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623274-didtransitiontostate
    didTransitionToState(state: cocoascript.UITableViewCellStateMask):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623252-indentationlevel
    indentationLevel(): cocoascript.NSInteger;
    setIndentationLevel(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623247-indentationwidth
    indentationWidth(): cocoascript.CGFloat;
    setIndentationWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623214-shouldindentwhileediting
    shouldIndentWhileEditing(): cocoascript.BOOL;
    setShouldIndentWhileEditing(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623250-separatorinset
    separatorInset(): cocoascript.UIEdgeInsets;
    setSeparatorInset(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623248-focusstyle
    focusStyle(): cocoascript.UITableViewCellFocusStyle;
    setFocusStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623218-initwithframe
    initWithFrame_reuseIdentifier(frame: cocoascript.CGRect, reuseIdentifier: cocoascript.NSString):cocoascript.UITableViewCell;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623237-text
    text(): cocoascript.NSString;
    setText(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623236-font
    font(): cocoascript.UIFont;
    setFont(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623284-textalignment
    textAlignment(): cocoascript.NSTextAlignment;
    setTextAlignment(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623235-textcolor
    textColor(): cocoascript.UIColor;
    setTextColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623251-selectedtextcolor
    selectedTextColor(): cocoascript.UIColor;
    setSelectedTextColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623259-linebreakmode
    lineBreakMode(): cocoascript.NSLineBreakMode;
    setLineBreakMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623213-image
    image(): cocoascript.UIImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623215-selectedimage
    selectedImage(): cocoascript.UIImage;
    setSelectedImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623230-hidesaccessorywhenediting
    hidesAccessoryWhenEditing(): cocoascript.BOOL;
    setHidesAccessoryWhenEditing(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623272-target
    target(): cocoascript.id;
    setTarget(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623206-editaction
    editAction(): cocoascript.SEL;
    setEditAction(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewcell/1623249-accessoryaction
    accessoryAction(): cocoascript.SEL;
    setAccessoryAction(): void;
    //
    alloc():cocoascript.UITableViewCell;
    //
    init():cocoascript.UITableViewCell;
  }
}

declare const UITableViewCell: cocoascript.UITableViewCell;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uibuttontype
  type UIButtonType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uibuttonpointerstyleprovider
  type UIButtonPointerStyleProvider = cocoascript.UIPointerShape;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uibuttonrole
  type UIButtonRole = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiswitchstyle
  type UISwitchStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipagecontrolbackgroundstyle
  type UIPageControlBackgroundStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipagecontrolinteractionstate
  type UIPageControlInteractionState = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * The methods adopted by the object you use to manage data and provide cells for a table view.
   * doc://com.apple.documentation/documentation/uikit/uitableviewdatasource
   */
  interface UITableViewDataSource extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitableviewdatasource/1614931-tableview
    tableView_numberOfRowsInSection(tableView: cocoascript.UITableView, section: cocoascript.NSInteger):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdatasource/1614860-numberofsectionsintableview
    numberOfSectionsInTableView(tableView: cocoascript.UITableView):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdatasource/1614861-tableview
    tableView_cellForRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.UITableViewCell;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdatasource/1614850-tableview
    tableView_titleForHeaderInSection(tableView: cocoascript.UITableView, section: cocoascript.NSInteger):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdatasource/1614994-tableview
    tableView_titleForFooterInSection(tableView: cocoascript.UITableView, section: cocoascript.NSInteger):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdatasource/1614871-tableview
    tableView_commitEditingStyle_forRowAtIndexPath(tableView: cocoascript.UITableView, editingStyle: cocoascript.UITableViewCellEditingStyle, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdatasource/1614900-tableview
    tableView_canEditRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdatasource/1614927-tableview
    tableView_canMoveRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdatasource/1614867-tableview
    tableView_moveRowAtIndexPath_toIndexPath(tableView: cocoascript.UITableView, sourceIndexPath: cocoascript.NSIndexPath, destinationIndexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdatasource/1614857-sectionindextitlesfortableview
    sectionIndexTitlesForTableView(tableView: cocoascript.UITableView):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdatasource/1614933-tableview
    tableView_sectionForSectionIndexTitle_atIndex(tableView: cocoascript.UITableView, title: cocoascript.NSString, index: cocoascript.NSInteger):cocoascript.NSInteger;
  }
}
declare namespace cocoascript {
  /**
   * A protocol that provides advance warning of the data requirements for a table view, allowing you to start potentially long-running data operations early.
   * doc://com.apple.documentation/documentation/uikit/uitableviewdatasourceprefetching
   */
  interface UITableViewDataSourcePrefetching extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitableviewdatasourceprefetching/1771764-tableview
    tableView_prefetchRowsAtIndexPaths(tableView: cocoascript.UITableView, indexPaths: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdatasourceprefetching/1771765-tableview
    tableView_cancelPrefetchingForRowsAtIndexPaths(tableView: cocoascript.UITableView, indexPaths: cocoascript.NSIndexPath):void;
  }
}
declare namespace cocoascript {
  /**
   * The object you use to manage data and provide cells for a table view.
   * doc://com.apple.documentation/documentation/uikit/uitableviewdiffabledatasource
   */
  interface UITableViewDiffableDataSource extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitableviewdiffabledatasource/3182933-initwithtableview
    initWithTableView_cellProvider(tableView: cocoascript.UITableView, cellProvider: cocoascript.UITableViewDiffableDataSourceCellProvider):cocoascript.UITableViewDiffableDataSource;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdiffabledatasource/3182934-itemidentifierforindexpath
    itemIdentifierForIndexPath(indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdiffabledatasource/3182932-indexpathforitemidentifier
    indexPathForItemIdentifier(identifier: cocoascript.):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdiffabledatasource/3182935-snapshot
    snapshot():cocoascript.NSDiffableDataSourceSnapshot;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdiffabledatasource/3182930-applysnapshot
    applySnapshot_animatingDifferences(snapshot: cocoascript.NSDiffableDataSourceSnapshot, animatingDifferences: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdiffabledatasource/3356326-applysnapshot
    applySnapshot_animatingDifferences_completion(snapshot: cocoascript.NSDiffableDataSourceSnapshot, animatingDifferences: cocoascript.BOOL, completion: void):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdiffabledatasource/3182931-defaultrowanimation
    defaultRowAnimation(): cocoascript.UITableViewRowAnimation;
    setDefaultRowAnimation(): void;
    //
    alloc():cocoascript.UITableViewDiffableDataSource;
    //
    init():cocoascript.UITableViewDiffableDataSource;
  }
}

declare const UITableViewDiffableDataSource: cocoascript.UITableViewDiffableDataSource;
declare namespace cocoascript {
  /**
   * An object that organizes, sorts, and localizes the data for a table view that has a section index.
   * doc://com.apple.documentation/documentation/uikit/uilocalizedindexedcollation
   */
  interface UILocalizedIndexedCollation extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uilocalizedindexedcollation/1620378-sectionforobject
    sectionForObject_collationStringSelector(object: cocoascript.UILocalizedIndexedCollation, selector: cocoascript.SEL):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uilocalizedindexedcollation/1620382-sortedarrayfromarray
    sortedArrayFromArray_collationStringSelector(array: cocoascript.NSArray, selector: cocoascript.SEL):cocoascript.NSArray;
    // doc://com.apple.documentation/documentation/uikit/uilocalizedindexedcollation/1620379-sectiontitles
    sectionTitles(): cocoascript.NSString;
    setSectionTitles(): void;
    // doc://com.apple.documentation/documentation/uikit/uilocalizedindexedcollation/1620383-sectionindextitles
    sectionIndexTitles(): cocoascript.NSString;
    setSectionIndexTitles(): void;
    // doc://com.apple.documentation/documentation/uikit/uilocalizedindexedcollation/1620380-sectionforsectionindextitleatind
    sectionForSectionIndexTitleAtIndex(indexTitleIndex: cocoascript.NSInteger):cocoascript.NSInteger;
    //
    alloc():cocoascript.UILocalizedIndexedCollation;
    //
    init():cocoascript.UILocalizedIndexedCollation;
  }
}

declare const UILocalizedIndexedCollation: cocoascript.UILocalizedIndexedCollation;
declare namespace cocoascript {
  /**
   * An advanced interface for managing a data source object.
   * doc://com.apple.documentation/documentation/uikit/uidatasourcetranslating
   */
  interface UIDataSourceTranslating extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidatasourcetranslating/2897405-presentationindexpathfordatasour
    presentationIndexPathForDataSourceIndexPath(dataSourceIndexPath: cocoascript.NSIndexPath):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uidatasourcetranslating/2897315-datasourceindexpathforpresentati
    dataSourceIndexPathForPresentationIndexPath(presentationIndexPath: cocoascript.NSIndexPath):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uidatasourcetranslating/2897352-presentationsectionindexfordatas
    presentationSectionIndexForDataSourceSectionIndex(dataSourceSectionIndex: cocoascript.NSInteger):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uidatasourcetranslating/2897423-datasourcesectionindexforpresent
    dataSourceSectionIndexForPresentationSectionIndex(presentationSectionIndex: cocoascript.NSInteger):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uidatasourcetranslating/2897368-performusingpresentationvalues
    performUsingPresentationValues(actionsToTranslate: void):void;
  }
}
declare namespace cocoascript {
  /**
   * An object representing an alternative action for a command.
   * doc://com.apple.documentation/documentation/uikit/uicommandalternate
   */
  interface UICommandAlternate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicommandalternate/3175316-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UICommandAlternate;
    // doc://com.apple.documentation/documentation/uikit/uicommandalternate/3175318-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uicommandalternate/3175314-action
    action(): cocoascript.SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/uikit/uicommandalternate/3175317-modifierflags
    modifierFlags(): cocoascript.UIKeyModifierFlags;
    setModifierFlags(): void;
    //
    alloc():cocoascript.UICommandAlternate;
    //
    init():cocoascript.UICommandAlternate;
  }
}

declare const UICommandAlternate: cocoascript.UICommandAlternate;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uikeymodifierflags
  type UIKeyModifierFlags = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicontrolstate
  type UIControlState = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiuserinterfacestyle
  type UIUserInterfaceStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiuserinterfacelevel
  type UIUserInterfaceLevel = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitraitenvironmentlayoutdirection
  type UITraitEnvironmentLayoutDirection = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycontrast
  type UIAccessibilityContrast = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uilegibilityweight
  type UILegibilityWeight = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiuserinterfaceactiveappearance
  type UIUserInterfaceActiveAppearance = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerbackgroundstyle
  type UISplitViewControllerBackgroundStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiactionidentifier
  type UIActionIdentifier = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiactionhandler
  type UIActionHandler = cocoascript.UIAction;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uimenuidentifier
  type UIMenuIdentifier = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uimenuoptions
  type UIMenuOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiactivityindicatorviewstyle
  type UIActivityIndicatorViewStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uialertcontrollerstyle
  type UIAlertControllerStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidatepickerstyle
  type UIDatePickerStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidatepickermode
  type UIDatePickerMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * The
   * doc://com.apple.documentation/documentation/uikit/uipickerviewdatasource
   */
  interface UIPickerViewDataSource extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipickerviewdatasource/1614377-numberofcomponentsinpickerview
    numberOfComponentsInPickerView(pickerView: cocoascript.UIPickerView):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uipickerviewdatasource/1614388-pickerview
    pickerView_numberOfRowsInComponent(pickerView: cocoascript.UIPickerView, component: cocoascript.NSInteger):cocoascript.NSInteger;
  }
}
declare namespace cocoascript {
  /**
   * The delegate of a
   * doc://com.apple.documentation/documentation/uikit/uipickerviewdelegate
   */
  interface UIPickerViewDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipickerviewdelegate/1614386-pickerview
    pickerView_rowHeightForComponent(pickerView: cocoascript.UIPickerView, component: cocoascript.NSInteger):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uipickerviewdelegate/1614378-pickerview
    pickerView_widthForComponent(pickerView: cocoascript.UIPickerView, component: cocoascript.NSInteger):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uipickerviewdelegate/1614384-pickerview
    pickerView_titleForRow_forComponent(pickerView: cocoascript.UIPickerView, row: cocoascript.NSInteger, component: cocoascript.NSInteger):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uipickerviewdelegate/1614375-pickerview
    pickerView_attributedTitleForRow_forComponent(pickerView: cocoascript.UIPickerView, row: cocoascript.NSInteger, component: cocoascript.NSInteger):cocoascript.NSAttributedString;
    // doc://com.apple.documentation/documentation/uikit/uipickerviewdelegate/1614389-pickerview
    pickerView_viewForRow_forComponent_reusingView(pickerView: cocoascript.UIPickerView, row: cocoascript.NSInteger, component: cocoascript.NSInteger, view: cocoascript.UIView):cocoascript.UIView;
    // doc://com.apple.documentation/documentation/uikit/uipickerviewdelegate/1614371-pickerview
    pickerView_didSelectRow_inComponent(pickerView: cocoascript.UIPickerView, row: cocoascript.NSInteger, component: cocoascript.NSInteger):void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that your delegate object must implement to interact with the image picker interface.
   * doc://com.apple.documentation/documentation/uikit/uiimagepickercontrollerdelegate
   */
  interface UIImagePickerControllerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontrollerdelegate/1619126-imagepickercontroller
    imagePickerController_didFinishPickingMediaWithInfo(picker: cocoascript.UIImagePickerController, info: cocoascript.UIImagePickerControllerDelegate):void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontrollerdelegate/1619133-imagepickercontrollerdidcancel
    imagePickerControllerDidCancel(picker: cocoascript.UIImagePickerController):void;
    // doc://com.apple.documentation/documentation/uikit/uiimagepickercontrollerdelegate/1619152-imagepickercontroller
    imagePickerController_didFinishPickingImage_editingInfo(picker: cocoascript.UIImagePickerController, image: cocoascript.UIImage, editingInfo: cocoascript.UIImagePickerControllerDelegate):void;
  }
}
declare const UIImagePickerControllerLivePhoto: cocoascript.UIImagePickerControllerInfoKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiimagepickercontrollersourcetype
  type UIImagePickerControllerSourceType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiimagepickercontrollerqualitytype
  type UIImagePickerControllerQualityType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiimagepickercontrollercameradevice
  type UIImagePickerControllerCameraDevice = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiimagepickercontrollercameracapturemode
  type UIImagePickerControllerCameraCaptureMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiimagepickercontrollercameraflashmode
  type UIImagePickerControllerCameraFlashMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiimagepickercontrollerimageurlexportpreset
  type UIImagePickerControllerImageURLExportPreset = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiprogressviewstyle
  type UIProgressViewStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * A collection of optional methods that you implement to make a search bar control functional.
   * doc://com.apple.documentation/documentation/uikit/uisearchbardelegate
   */
  interface UISearchBarDelegate extends UIBarPositioningDelegate {
    // doc://com.apple.documentation/documentation/uikit/uisearchbardelegate/1624299-searchbar
    searchBar_textDidChange(searchBar: cocoascript.UISearchBar, searchText: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbardelegate/1624328-searchbar
    searchBar_shouldChangeTextInRange_replacementText(searchBar: cocoascript.UISearchBar, range: cocoascript.NSRange, text: cocoascript.NSString):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uisearchbardelegate/1624306-searchbarshouldbeginediting
    searchBarShouldBeginEditing(searchBar: cocoascript.UISearchBar):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uisearchbardelegate/1624303-searchbartextdidbeginediting
    searchBarTextDidBeginEditing(searchBar: cocoascript.UISearchBar):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbardelegate/1624329-searchbarshouldendediting
    searchBarShouldEndEditing(searchBar: cocoascript.UISearchBar):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uisearchbardelegate/1624301-searchbartextdidendediting
    searchBarTextDidEndEditing(searchBar: cocoascript.UISearchBar):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbardelegate/1624312-searchbarbookmarkbuttonclicked
    searchBarBookmarkButtonClicked(searchBar: cocoascript.UISearchBar):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbardelegate/1624314-searchbarcancelbuttonclicked
    searchBarCancelButtonClicked(searchBar: cocoascript.UISearchBar):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbardelegate/1624294-searchbarsearchbuttonclicked
    searchBarSearchButtonClicked(searchBar: cocoascript.UISearchBar):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbardelegate/1624305-searchbarresultslistbuttonclicke
    searchBarResultsListButtonClicked(searchBar: cocoascript.UISearchBar):void;
    // doc://com.apple.documentation/documentation/uikit/uisearchbardelegate/1624280-searchbar
    searchBar_selectedScopeButtonIndexDidChange(searchBar: cocoascript.UISearchBar, selectedScope: cocoascript.NSInteger):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uisearchbarstyle
  type UISearchBarStyle = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uibarstyle
  type UIBarStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uisearchbaricon
  type UISearchBarIcon = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrolstyle
  type UISegmentedControlStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uisegmentedcontrolsegment
  type UISegmentedControlSegment = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uistackviewdistribution
  type UIStackViewDistribution = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uistackviewalignment
  type UIStackViewAlignment = cocoascript.NSInteger;
}
declare const UIStackViewSpacingUseDefault: cocoascript.CGFloat;
declare const UIStackViewSpacingUseSystem: cocoascript.CGFloat;
declare const UIKeyboardWillShowNotification: cocoascript.NSNotificationName;
declare const UIKeyboardDidShowNotification: cocoascript.NSNotificationName;
declare const UIKeyboardWillHideNotification: cocoascript.NSNotificationName;
declare const UIKeyboardDidHideNotification: cocoascript.NSNotificationName;
declare const UIKeyboardWillChangeFrameNotification: cocoascript.NSNotificationName;
declare const UIKeyboardDidChangeFrameNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  /**
   * A set of optional methods to manage the editing and validation of text in a text field object.
   * doc://com.apple.documentation/documentation/uikit/uitextfielddelegate
   */
  interface UITextFieldDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextfielddelegate/1619601-textfieldshouldbeginediting
    textFieldShouldBeginEditing(textField: cocoascript.UITextField):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitextfielddelegate/1619590-textfielddidbeginediting
    textFieldDidBeginEditing(textField: cocoascript.UITextField):void;
    // doc://com.apple.documentation/documentation/uikit/uitextfielddelegate/1619592-textfieldshouldendediting
    textFieldShouldEndEditing(textField: cocoascript.UITextField):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitextfielddelegate/2352220-textfielddidendediting
    textFieldDidEndEditing_reason(textField: cocoascript.UITextField, reason: cocoascript.UITextFieldDidEndEditingReason):void;
    // doc://com.apple.documentation/documentation/uikit/uitextfielddelegate/1619591-textfielddidendediting
    textFieldDidEndEditing(textField: cocoascript.UITextField):void;
    // doc://com.apple.documentation/documentation/uikit/uitextfielddelegate/1619599-textfield
    textField_shouldChangeCharactersInRange_replacementString(textField: cocoascript.UITextField, range: cocoascript.NSRange, string: cocoascript.NSString):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitextfielddelegate/1619594-textfieldshouldclear
    textFieldShouldClear(textField: cocoascript.UITextField):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitextfielddelegate/1619603-textfieldshouldreturn
    textFieldShouldReturn(textField: cocoascript.UITextField):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitextfielddelegate/3114542-textfielddidchangeselection
    textFieldDidChangeSelection(textField: cocoascript.UITextField):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextborderstyle
  type UITextBorderStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextfielddidendeditingreason
  type UITextFieldDidEndEditingReason = cocoascript.NSInteger;
}
declare const UITextFieldTextDidBeginEditingNotification: cocoascript.NSNotificationName;
declare const UITextFieldTextDidChangeNotification: cocoascript.NSNotificationName;
declare const UITextFieldTextDidEndEditingNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextfieldviewmode
  type UITextFieldViewMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * The methods for receiving editing-related messages for text view objects.
   * doc://com.apple.documentation/documentation/uikit/uitextviewdelegate
   */
  interface UITextViewDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextviewdelegate/1618608-textviewshouldbeginediting
    textViewShouldBeginEditing(textView: cocoascript.UITextView):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitextviewdelegate/1618610-textviewdidbeginediting
    textViewDidBeginEditing(textView: cocoascript.UITextView):void;
    // doc://com.apple.documentation/documentation/uikit/uitextviewdelegate/1618603-textviewshouldendediting
    textViewShouldEndEditing(textView: cocoascript.UITextView):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitextviewdelegate/1618628-textviewdidendediting
    textViewDidEndEditing(textView: cocoascript.UITextView):void;
    // doc://com.apple.documentation/documentation/uikit/uitextviewdelegate/1618630-textview
    textView_shouldChangeTextInRange_replacementText(textView: cocoascript.UITextView, range: cocoascript.NSRange, text: cocoascript.NSString):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitextviewdelegate/1618599-textviewdidchange
    textViewDidChange(textView: cocoascript.UITextView):void;
    // doc://com.apple.documentation/documentation/uikit/uitextviewdelegate/1618620-textviewdidchangeselection
    textViewDidChangeSelection(textView: cocoascript.UITextView):void;
    // doc://com.apple.documentation/documentation/uikit/uitextviewdelegate/1649336-textview
    textView_shouldInteractWithTextAttachment_inRange_interaction(textView: cocoascript.UITextView, textAttachment: cocoascript.NSTextAttachment, characterRange: cocoascript.NSRange, interaction: cocoascript.UITextItemInteraction):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitextviewdelegate/1649337-textview
    textView_shouldInteractWithURL_inRange_interaction(textView: cocoascript.UITextView, URL: cocoascript.NSURL, characterRange: cocoascript.NSRange, interaction: cocoascript.UITextItemInteraction):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitextviewdelegate/1618621-textview
    textView_shouldInteractWithTextAttachment_inRange(textView: cocoascript.UITextView, textAttachment: cocoascript.NSTextAttachment, characterRange: cocoascript.NSRange):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitextviewdelegate/1618606-textview
    textView_shouldInteractWithURL_inRange(textView: cocoascript.UITextView, URL: cocoascript.NSURL, characterRange: cocoascript.NSRange):cocoascript.BOOL;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidatadetectortypes
  type UIDataDetectorTypes = cocoascript.NSUInteger;
}
declare const UITextViewTextDidBeginEditingNotification: cocoascript.NSNotificationName;
declare const UITextViewTextDidChangeNotification: cocoascript.NSNotificationName;
declare const UITextViewTextDidEndEditingNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  /**
   * The
   * doc://com.apple.documentation/documentation/uikit/uitoolbardelegate
   */
  interface UIToolbarDelegate extends UIBarPositioningDelegate {
  }
}
declare namespace cocoascript {
  /**
   * A class that animates changes to views and allows the dynamic modification of those animations.
   * doc://com.apple.documentation/documentation/uikit/uiviewpropertyanimator
   */
  interface UIViewPropertyAnimator extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiviewpropertyanimator/1648366-initwithduration
    initWithDuration_curve_animations(duration: cocoascript.NSTimeInterval, curve: cocoascript.UIViewAnimationCurve, animations: void):cocoascript.UIViewPropertyAnimator;
    // doc://com.apple.documentation/documentation/uikit/uiviewpropertyanimator/1648368-initwithduration
    initWithDuration_controlPoint1_controlPoint2_animations(duration: cocoascript.NSTimeInterval, point1: cocoascript.CGPoint, point2: cocoascript.CGPoint, animations: void):cocoascript.UIViewPropertyAnimator;
    // doc://com.apple.documentation/documentation/uikit/uiviewpropertyanimator/1648369-initwithduration
    initWithDuration_dampingRatio_animations(duration: cocoascript.NSTimeInterval, ratio: cocoascript.CGFloat, animations: void):cocoascript.UIViewPropertyAnimator;
    // doc://com.apple.documentation/documentation/uikit/uiviewpropertyanimator/1648362-initwithduration
    initWithDuration_timingParameters(duration: cocoascript.NSTimeInterval, parameters: cocoascript.UITimingCurveProvider):cocoascript.UIViewPropertyAnimator;
    // doc://com.apple.documentation/documentation/uikit/uiviewpropertyanimator/1648374-addanimations
    addAnimations(animation: void):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewpropertyanimator/1648370-addanimations
    addAnimations_delayFactor(animation: void, delayFactor: cocoascript.CGFloat):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewpropertyanimator/1648373-addcompletion
    addCompletion(completion: cocoascript.UIViewAnimatingPosition):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewpropertyanimator/1648371-continueanimationwithtimingparam
    continueAnimationWithTimingParameters_durationFactor(parameters: cocoascript.UITimingCurveProvider, durationFactor: cocoascript.CGFloat):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewpropertyanimator/1648375-duration
    duration(): cocoascript.NSTimeInterval;
    setDuration(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewpropertyanimator/2097549-delay
    delay(): cocoascript.NSTimeInterval;
    setDelay(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewpropertyanimator/1648363-timingparameters
    timingParameters(): cocoascript.UITimingCurveProvider;
    setTimingParameters(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewpropertyanimator/1648372-interruptible
    interruptible(): cocoascript.BOOL;
    setInterruptible(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewpropertyanimator/1648365-userinteractionenabled
    userInteractionEnabled(): cocoascript.BOOL;
    setUserInteractionEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewpropertyanimator/2097548-manualhittestingenabled
    manualHitTestingEnabled(): cocoascript.BOOL;
    setManualHitTestingEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewpropertyanimator/2873966-scrubslinearly
    scrubsLinearly(): cocoascript.BOOL;
    setScrubsLinearly(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewpropertyanimator/2909004-pausesoncompletion
    pausesOnCompletion(): cocoascript.BOOL;
    setPausesOnCompletion(): void;
    //
    alloc():cocoascript.UIViewPropertyAnimator;
    //
    init():cocoascript.UIViewPropertyAnimator;
  }
}

declare const UIViewPropertyAnimator: cocoascript.UIViewPropertyAnimator;
declare namespace cocoascript {
  /**
   * A set of methods that can make a custom object eligible to participate in UIKit Dynamics.
   * doc://com.apple.documentation/documentation/uikit/uidynamicitem
   */
  interface UIDynamicItem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidynamicitem/1618495-bounds
    bounds(): cocoascript.CGRect;
    setBounds(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitem/1618491-center
    center(): cocoascript.CGPoint;
    setCenter(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitem/1618483-transform
    transform(): cocoascript.CGAffineTransform;
    setTransform(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitem/1618493-collisionboundstype
    collisionBoundsType(): cocoascript.UIDynamicItemCollisionBoundsType;
    setCollisionBoundsType(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitem/1618494-collisionboundingpath
    collisionBoundingPath(): cocoascript.UIBezierPath;
    setCollisionBoundingPath(): void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiviewcontentmode
  type UIViewContentMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * The protocol that an interaction implements to access the view that owns it.
   * doc://com.apple.documentation/documentation/uikit/uiinteraction
   */
  interface UIInteraction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiinteraction/2890990-view
    view(): cocoascript.UIView;
    setView(): void;
    // doc://com.apple.documentation/documentation/uikit/uiinteraction/2891009-didmovetoview
    didMoveToView(view: cocoascript.UIView):void;
    // doc://com.apple.documentation/documentation/uikit/uiinteraction/2891039-willmovetoview
    willMoveToView(view: cocoascript.UIView):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiviewanimationoptions
  type UIViewAnimationOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiviewanimationcurve
  type UIViewAnimationCurve = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiviewanimationtransition
  type UIViewAnimationTransition = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uisystemanimation
  type UISystemAnimation = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiviewkeyframeanimationoptions
  type UIViewKeyframeAnimationOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiviewtintadjustmentmode
  type UIViewTintAdjustmentMode = cocoascript.NSInteger;
}
declare const UILayoutFittingCompressedSize: cocoascript.CGSize;
declare const UILayoutFittingExpandedSize: cocoascript.CGSize;
declare const UIViewNoIntrinsicMetric: cocoascript.CGFloat;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiviewautoresizing
  type UIViewAutoresizing = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uisemanticcontentattribute
  type UISemanticContentAttribute = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * A specific type of scene that manages one or more windows for your app.
   * doc://com.apple.documentation/documentation/uikit/uiwindowscene
   */
  interface UIWindowScene extends UIScene {
    // doc://com.apple.documentation/documentation/uikit/uiwindowscene/3198091-windows
    windows(): cocoascript.UIWindow;
    setWindows(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwindowscene/3198089-screen
    screen(): cocoascript.UIScreen;
    setScreen(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwindowscene/3198090-traitcollection
    traitCollection(): cocoascript.UITraitCollection;
    setTraitCollection(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwindowscene/3198087-coordinatespace
    coordinateSpace(): cocoascript.UICoordinateSpace;
    setCoordinateSpace(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwindowscene/3198088-interfaceorientation
    interfaceOrientation(): cocoascript.UIInterfaceOrientation;
    setInterfaceOrientation(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwindowscene/3368166-sizerestrictions
    sizeRestrictions(): cocoascript.UISceneSizeRestrictions;
    setSizeRestrictions(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwindowscene/3213938-screenshotservice
    screenshotService(): cocoascript.UIScreenshotService;
    setScreenshotService(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwindowscene/3213943-statusbarmanager
    statusBarManager(): cocoascript.UIStatusBarManager;
    setStatusBarManager(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwindowscene/3375831-titlebar
    titlebar(): cocoascript.UITitlebar;
    setTitlebar(): void;
    //
    alloc():cocoascript.UIWindowScene;
    //
    init():cocoascript.UIWindowScene;
  }
}

declare const UIWindowScene: cocoascript.UIWindowScene;
declare namespace cocoascript {
  /**
   * An object that you use to configure the title bar of a window in a Mac app built with Mac Catalyst.
   * doc://com.apple.documentation/documentation/uikit/uititlebar
   */
  interface UITitlebar extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uititlebar/3664137-separatorstyle
    separatorStyle(): cocoascript.UITitlebarSeparatorStyle;
    setSeparatorStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uititlebar/3375824-titlevisibility
    titleVisibility(): cocoascript.UITitlebarTitleVisibility;
    setTitleVisibility(): void;
    // doc://com.apple.documentation/documentation/uikit/uititlebar/3375823-representedurl
    representedURL(): cocoascript.NSURL;
    setRepresentedURL(): void;
    // doc://com.apple.documentation/documentation/uikit/uititlebar/3375825-toolbar
    toolbar(): cocoascript.NSToolbar;
    setToolbar(): void;
    // doc://com.apple.documentation/documentation/uikit/uititlebar/3604076-toolbarstyle
    toolbarStyle(): cocoascript.UITitlebarToolbarStyle;
    setToolbarStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uititlebar/3375822-autohidestoolbarinfullscreen
    autoHidesToolbarInFullScreen(): cocoascript.BOOL;
    setAutoHidesToolbarInFullScreen(): void;
    //
    alloc():cocoascript.UITitlebar;
    //
    init():cocoascript.UITitlebar;
  }
}

declare const UITitlebar: cocoascript.UITitlebar;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uititlebartitlevisibility
  type UITitlebarTitleVisibility = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uititlebarseparatorstyle
  type UITitlebarSeparatorStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uititlebartoolbarstyle
  type UITitlebarToolbarStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteractionappearance
  type UIContextMenuInteractionAppearance = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * An object containing the configuration details for the contextual menu.
   * doc://com.apple.documentation/documentation/uikit/uicontextmenuconfiguration
   */
  interface UIContextMenuConfiguration extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicontextmenuconfiguration/3295923-identifier
    identifier(): cocoascript.NSCopying;
    setIdentifier(): void;
    //
    alloc():cocoascript.UIContextMenuConfiguration;
    //
    init():cocoascript.UIContextMenuConfiguration;
  }
}

declare const UIContextMenuConfiguration: cocoascript.UIContextMenuConfiguration;
declare namespace cocoascript {
  /**
   * Methods adopted by system-supplied animator objects when committing preview-related animations.
   * doc://com.apple.documentation/documentation/uikit/uicontextmenuinteractioncommitanimating
   */
  interface UIContextMenuInteractionCommitAnimating extends UIContextMenuInteractionAnimating {
    // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteractioncommitanimating/3295931-preferredcommitstyle
    preferredCommitStyle(): cocoascript.UIContextMenuInteractionCommitStyle;
    setPreferredCommitStyle(): void;
  }
}
declare namespace cocoascript {
  /**
   * Methods adopted by system-supplied animator objects when interacting with context menus.
   * doc://com.apple.documentation/documentation/uikit/uicontextmenuinteractionanimating
   */
  interface UIContextMenuInteractionAnimating extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteractionanimating/3375802-addanimations
    addAnimations(animations: void):void;
    // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteractionanimating/3375803-addcompletion
    addCompletion(completion: void):void;
    // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteractionanimating/3375804-previewviewcontroller
    previewViewController(): cocoascript.UIViewController;
    setPreviewViewController(): void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uimenucontrollerarrowdirection
  type UIMenuControllerArrowDirection = cocoascript.NSInteger;
}
declare const UIMenuControllerWillShowMenuNotification: cocoascript.NSNotificationName;
declare const UIMenuControllerDidShowMenuNotification: cocoascript.NSNotificationName;
declare const UIMenuControllerWillHideMenuNotification: cocoascript.NSNotificationName;
declare const UIMenuControllerDidHideMenuNotification: cocoascript.NSNotificationName;
declare const UIMenuControllerMenuFrameDidChangeNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uieditinginteractionconfiguration
  type UIEditingInteractionConfiguration = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiinterfaceorientation
  type UIInterfaceOrientation = cocoascript.NSInteger;
}
declare const UIApplicationDidChangeStatusBarOrientationNotification: cocoascript.NSNotificationName;
declare const UIApplicationWillChangeStatusBarOrientationNotification: cocoascript.NSNotificationName;
declare const UIApplicationDidChangeStatusBarFrameNotification: cocoascript.NSNotificationName;
declare const UIApplicationWillChangeStatusBarFrameNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiapplicationstate
  type UIApplicationState = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uibackgroundrefreshstatus
  type UIBackgroundRefreshStatus = cocoascript.NSInteger;
}
declare const UIApplicationBackgroundRefreshStatusDidChangeNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uibackgroundtaskidentifier
  type UIBackgroundTaskIdentifier = cocoascript.NSUInteger;
}
declare const UIApplicationBackgroundFetchIntervalMinimum: cocoascript.NSTimeInterval;
declare const UIApplicationBackgroundFetchIntervalNever: cocoascript.NSTimeInterval;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiapplicationopenexternalurloptionskey
  type UIApplicationOpenExternalURLOptionsKey = cocoascript.NSString;
}
declare const UIApplicationProtectedDataDidBecomeAvailable: cocoascript.NSNotificationName;
declare const UIApplicationProtectedDataWillBecomeUnavailable: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiuserinterfacelayoutdirection
  type UIUserInterfaceLayoutDirection = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicontentsizecategory
  type UIContentSizeCategory = cocoascript.NSString;
}
declare const UIContentSizeCategoryDidChangeNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uistatusbarstyle
  type UIStatusBarStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uistatusbaranimation
  type UIStatusBarAnimation = cocoascript.NSInteger;
}
declare const UITrackingRunLoopMode: cocoascript.NSRunLoopMode;
declare const UIApplicationUserDidTakeScreenshotNotification: cocoascript.NSNotificationName;
declare const UIMinimumKeepAliveTimeout: cocoascript.NSTimeInterval;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiremotenotificationtype
  type UIRemoteNotificationType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uigesturerecognizerstate
  type UIGestureRecognizerState = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiscrolltypemask
  type UIScrollTypeMask = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiscrolltype
  type UIScrollType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uirectedge
  type UIRectEdge = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiswipegesturerecognizerdirection
  type UISwipeGestureRecognizerDirection = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uimodalpresentationstyle
  type UIModalPresentationStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uimodaltransitionstyle
  type UIModalTransitionStyle = cocoascript.NSInteger;
}
declare const UIViewControllerShowDetailTargetDidChangeNotification: cocoascript.NSNotificationName;
declare const UIViewControllerHierarchyInconsistencyException: cocoascript.NSExceptionName;
declare namespace cocoascript {
  /**
   * The core methods you use to respond to life-cycle events occurring within a scene.
   * doc://com.apple.documentation/documentation/uikit/uiscenedelegate
   */
  interface UISceneDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiscenedelegate/3197914-scene
    scene_willConnectToSession_options(scene: cocoascript.UIScene, session: cocoascript.UISceneSession, connectionOptions: cocoascript.UISceneConnectionOptions):void;
    // doc://com.apple.documentation/documentation/uikit/uiscenedelegate/3197916-scenediddisconnect
    sceneDidDisconnect(scene: cocoascript.UIScene):void;
    // doc://com.apple.documentation/documentation/uikit/uiscenedelegate/3197918-scenewillenterforeground
    sceneWillEnterForeground(scene: cocoascript.UIScene):void;
    // doc://com.apple.documentation/documentation/uikit/uiscenedelegate/3197915-scenedidbecomeactive
    sceneDidBecomeActive(scene: cocoascript.UIScene):void;
    // doc://com.apple.documentation/documentation/uikit/uiscenedelegate/3197919-scenewillresignactive
    sceneWillResignActive(scene: cocoascript.UIScene):void;
    // doc://com.apple.documentation/documentation/uikit/uiscenedelegate/3197917-scenedidenterbackground
    sceneDidEnterBackground(scene: cocoascript.UIScene):void;
    // doc://com.apple.documentation/documentation/uikit/uiscenedelegate/3238059-scene
    scene_openURLContexts(scene: cocoascript.UIScene, URLContexts: cocoascript.UIOpenURLContext):void;
    // doc://com.apple.documentation/documentation/uikit/uiscenedelegate/3238060-scene
    scene_willContinueUserActivityWithType(scene: cocoascript.UIScene, userActivityType: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uiscenedelegate/3238056-scene
    scene_continueUserActivity(scene: cocoascript.UIScene, userActivity: cocoascript.NSUserActivity):void;
    // doc://com.apple.documentation/documentation/uikit/uiscenedelegate/3238057-scene
    scene_didFailToContinueUserActivityWithType_error(scene: cocoascript.UIScene, userActivityType: cocoascript.NSString, error: cocoascript.NSError):void;
    // doc://com.apple.documentation/documentation/uikit/uiscenedelegate/3238061-staterestorationactivityforscene
    stateRestorationActivityForScene(scene: cocoascript.UIScene):cocoascript.NSUserActivity;
    // doc://com.apple.documentation/documentation/uikit/uiscenedelegate/3238058-scene
    scene_didUpdateUserActivity(scene: cocoascript.UIScene, userActivity: cocoascript.NSUserActivity):void;
  }
}
declare const UIApplicationLaunchOptionsRemoteNotificationKey: cocoascript.UIApplicationLaunchOptionsKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiapplicationlaunchoptionskey
  type UIApplicationLaunchOptionsKey = cocoascript.NSString;
}
declare const UIApplicationDidFinishLaunchingNotification: cocoascript.NSNotificationName;
declare const UIApplicationDidBecomeActiveNotification: cocoascript.NSNotificationName;
declare const UIApplicationDidEnterBackgroundNotification: cocoascript.NSNotificationName;
declare const UIApplicationWillEnterForegroundNotification: cocoascript.NSNotificationName;
declare const UIApplicationWillResignActiveNotification: cocoascript.NSNotificationName;
declare const UIApplicationWillTerminateNotification: cocoascript.NSNotificationName;
declare const UIApplicationDidReceiveMemoryWarningNotification: cocoascript.NSNotificationName;
declare const UIApplicationSignificantTimeChangeNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uibackgroundfetchresult
  type UIBackgroundFetchResult = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiapplicationopenurloptionskey
  type UIApplicationOpenURLOptionsKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiapplicationextensionpointidentifier
  type UIApplicationExtensionPointIdentifier = cocoascript.NSString;
}
declare const UIApplicationKeyboardExtensionPointIdentifier: cocoascript.UIApplicationExtensionPointIdentifier;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiinterfaceorientationmask
  type UIInterfaceOrientationMask = cocoascript.NSUInteger;
}
declare const UIApplicationInvalidInterfaceOrientationException: cocoascript.NSExceptionName;
declare namespace cocoascript {
  /**
   * Additional methods that you use to manage app-specific tasks occurring in a scene.
   * doc://com.apple.documentation/documentation/uikit/uiwindowscenedelegate
   */
  interface UIWindowSceneDelegate extends UISceneDelegate {
    // doc://com.apple.documentation/documentation/uikit/uiwindowscenedelegate/3198093-window
    window(): cocoascript.UIWindow;
    setWindow(): void;
    // doc://com.apple.documentation/documentation/uikit/uiwindowscenedelegate/3198094-windowscene
    windowScene_didUpdateCoordinateSpace_interfaceOrientation_traitCollection(windowScene: cocoascript.UIWindowScene, previousCoordinateSpace: cocoascript.UICoordinateSpace, previousInterfaceOrientation: cocoascript.UIInterfaceOrientation, previousTraitCollection: cocoascript.UITraitCollection):void;
    // doc://com.apple.documentation/documentation/uikit/uiwindowscenedelegate/3238088-windowscene
    windowScene_performActionForShortcutItem_completionHandler(windowScene: cocoascript.UIWindowScene, shortcutItem: cocoascript.UIApplicationShortcutItem, completionHandler: void):void;
    // doc://com.apple.documentation/documentation/uikit/uiwindowscenedelegate/3238089-windowscene
    windowScene_userDidAcceptCloudKitShareWithMetadata(windowScene: cocoascript.UIWindowScene, cloudKitShareMetadata: cocoascript.CKShareMetadata):void;
  }
}
declare namespace cocoascript {
  /**
   * An object that represents one instance of your app's user interface.
   * doc://com.apple.documentation/documentation/uikit/uiscene
   */
  interface UIScene extends UIResponder {
    // doc://com.apple.documentation/documentation/uikit/uiscene/3197910-initwithsession
    initWithSession_connectionOptions(session: cocoascript.UISceneSession, connectionOptions: cocoascript.UISceneConnectionOptions):cocoascript.UIScene;
    // doc://com.apple.documentation/documentation/uikit/uiscene/3197909-delegate
    delegate(): cocoascript.UISceneDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscene/3197908-activationstate
    activationState(): cocoascript.UISceneActivationState;
    setActivationState(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscene/3197912-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscene/3238055-activationconditions
    activationConditions(): cocoascript.UISceneActivationConditions;
    setActivationConditions(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscene/3197911-session
    session(): cocoascript.UISceneSession;
    setSession(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscene/3327319-openurl
    openURL_options_completionHandler(url: cocoascript.NSURL, options: cocoascript.UISceneOpenExternalURLOptions, completion: void):void;
    // doc://com.apple.documentation/documentation/uikit/uiscene/3601229-pointerlockstate
    pointerLockState(): cocoascript.UIPointerLockState;
    setPointerLockState(): void;
    //
    alloc():cocoascript.UIScene;
    //
    init():cocoascript.UIScene;
  }
}

declare const UIScene: cocoascript.UIScene;
declare namespace cocoascript {
  /**
   * Information about the objects and storyboard for UKit to use when creating a particular scene.
   * doc://com.apple.documentation/documentation/uikit/uisceneconfiguration
   */
  interface UISceneConfiguration extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uisceneconfiguration/3197949-initwithname
    initWithName_sessionRole(name: cocoascript.NSString, sessionRole: cocoascript.UISceneSessionRole):cocoascript.UISceneConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uisceneconfiguration/3197952-sceneclass
    sceneClass(): cocoascript.Class;
    setSceneClass(): void;
    // doc://com.apple.documentation/documentation/uikit/uisceneconfiguration/3197948-delegateclass
    delegateClass(): cocoascript.Class;
    setDelegateClass(): void;
    // doc://com.apple.documentation/documentation/uikit/uisceneconfiguration/3197953-storyboard
    storyboard(): cocoascript.UIStoryboard;
    setStoryboard(): void;
    // doc://com.apple.documentation/documentation/uikit/uisceneconfiguration/3197950-name
    name(): cocoascript.NSString;
    setName(): void;
    // doc://com.apple.documentation/documentation/uikit/uisceneconfiguration/3197951-role
    role(): cocoascript.UISceneSessionRole;
    setRole(): void;
    //
    alloc():cocoascript.UISceneConfiguration;
    //
    init():cocoascript.UISceneConfiguration;
  }
}

declare const UISceneConfiguration: cocoascript.UISceneConfiguration;
declare namespace cocoascript {
  /**
   * An object containing information about one of your app's scenes.
   * doc://com.apple.documentation/documentation/uikit/uiscenesession
   */
  interface UISceneSession extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiscenesession/3197958-scene
    scene(): cocoascript.UIScene;
    setScene(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscenesession/3197957-role
    role(): cocoascript.UISceneSessionRole;
    setRole(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscenesession/3197955-configuration
    configuration(): cocoascript.UISceneConfiguration;
    setConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscenesession/3197956-persistentidentifier
    persistentIdentifier(): cocoascript.NSString;
    setPersistentIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscenesession/3197959-staterestorationactivity
    stateRestorationActivity(): cocoascript.NSUserActivity;
    setStateRestorationActivity(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscenesession/3197960-userinfo
    userInfo(): cocoascript.id;
    setUserInfo(): void;
    //
    alloc():cocoascript.UISceneSession;
    //
    init():cocoascript.UISceneSession;
  }
}

declare const UISceneSession: cocoascript.UISceneSession;
declare namespace cocoascript {
  /**
   * The set of conditions that define when UIKit activates the current scene.
   * doc://com.apple.documentation/documentation/uikit/uisceneactivationconditions
   */
  interface UISceneActivationConditions extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uisceneactivationconditions/3238065-init
    init():cocoascript.UISceneActivationConditions;
    // doc://com.apple.documentation/documentation/uikit/uisceneactivationconditions/3238066-initwithcoder
    initWithCoder(aDecoder: cocoascript.NSCoder):cocoascript.UISceneActivationConditions;
    // doc://com.apple.documentation/documentation/uikit/uisceneactivationconditions/3238067-preferstoactivatefortargetconten
    prefersToActivateForTargetContentIdentifierPredicate(): cocoascript.NSPredicate;
    setPrefersToActivateForTargetContentIdentifierPredicate(): void;
    // doc://com.apple.documentation/documentation/uikit/uisceneactivationconditions/3238064-canactivatefortargetcontentident
    canActivateForTargetContentIdentifierPredicate(): cocoascript.NSPredicate;
    setCanActivateForTargetContentIdentifierPredicate(): void;
    //
    alloc():cocoascript.UISceneActivationConditions;
    //
    init():cocoascript.UISceneActivationConditions;
  }
}

declare const UISceneActivationConditions: cocoascript.UISceneActivationConditions;
declare namespace cocoascript {
  /**
   * An object containing information you want the system to use when activating the session associated with a scene.
   * doc://com.apple.documentation/documentation/uikit/uisceneactivationrequestoptions
   */
  interface UISceneActivationRequestOptions extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uisceneactivationrequestoptions/3197937-requestingscene
    requestingScene(): cocoascript.UIScene;
    setRequestingScene(): void;
    // doc://com.apple.documentation/documentation/uikit/uisceneactivationrequestoptions/3623235-collectionjoinbehavior
    collectionJoinBehavior(): cocoascript.UISceneCollectionJoinBehavior;
    setCollectionJoinBehavior(): void;
    //
    alloc():cocoascript.UISceneActivationRequestOptions;
    //
    init():cocoascript.UISceneActivationRequestOptions;
  }
}

declare const UISceneActivationRequestOptions: cocoascript.UISceneActivationRequestOptions;
declare namespace cocoascript {
  /**
   * An object containing information to use when removing a window scene from your app.
   * doc://com.apple.documentation/documentation/uikit/uiwindowscenedestructionrequestoptions
   */
  interface UIWindowSceneDestructionRequestOptions extends UISceneDestructionRequestOptions {
    // doc://com.apple.documentation/documentation/uikit/uiwindowscenedestructionrequestoptions/3197964-windowdismissalanimation
    windowDismissalAnimation(): cocoascript.UIWindowSceneDismissalAnimation;
    setWindowDismissalAnimation(): void;
    //
    alloc():cocoascript.UIWindowSceneDestructionRequestOptions;
    //
    init():cocoascript.UIWindowSceneDestructionRequestOptions;
  }
}

declare const UIWindowSceneDestructionRequestOptions: cocoascript.UIWindowSceneDestructionRequestOptions;
declare namespace cocoascript {
  /**
   * An object you pass to UIKit when you want to permanently remove a scene and its associated session from your app.
   * doc://com.apple.documentation/documentation/uikit/uiscenedestructionrequestoptions
   */
  interface UISceneDestructionRequestOptions extends NSObject {
    //
    alloc():cocoascript.UISceneDestructionRequestOptions;
    //
    init():cocoascript.UISceneDestructionRequestOptions;
  }
}

declare const UISceneDestructionRequestOptions: cocoascript.UISceneDestructionRequestOptions;
declare namespace cocoascript {
  /**
   * A system-provided object that contains the information you need to open a single URL.
   * doc://com.apple.documentation/documentation/uikit/uiopenurlcontext
   */
  interface UIOpenURLContext extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiopenurlcontext/3238053-url
    URL(): cocoascript.NSURL;
    setURL(): void;
    // doc://com.apple.documentation/documentation/uikit/uiopenurlcontext/3238054-options
    options(): cocoascript.UISceneOpenURLOptions;
    setOptions(): void;
    //
    alloc():cocoascript.UIOpenURLContext;
    //
    init():cocoascript.UIOpenURLContext;
  }
}

declare const UIOpenURLContext: cocoascript.UIOpenURLContext;
declare namespace cocoascript {
  /**
   * Options you specify when asking a scene to open a URL.
   * doc://com.apple.documentation/documentation/uikit/uisceneopenexternalurloptions
   */
  interface UISceneOpenExternalURLOptions extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uisceneopenexternalurloptions/3197941-universallinksonly
    universalLinksOnly(): cocoascript.BOOL;
    setUniversalLinksOnly(): void;
    //
    alloc():cocoascript.UISceneOpenExternalURLOptions;
    //
    init():cocoascript.UISceneOpenExternalURLOptions;
  }
}

declare const UISceneOpenExternalURLOptions: cocoascript.UISceneOpenExternalURLOptions;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uisceneerrorcode
  type UISceneErrorCode = cocoascript.NSInteger;
}
declare const UISceneErrorDomain: cocoascript.NSErrorDomain;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiforcetouchcapability
  type UIForceTouchCapability = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiuserinterfacesizeclass
  type UIUserInterfaceSizeClass = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidisplaygamut
  type UIDisplayGamut = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * The methods of the
   * doc://com.apple.documentation/documentation/uikit/uipopoverpresentationcontrollerdelegate
   */
  interface UIPopoverPresentationControllerDelegate extends UIAdaptivePresentationControllerDelegate {
    // doc://com.apple.documentation/documentation/uikit/uipopoverpresentationcontrollerdelegate/1622317-prepareforpopoverpresentation
    prepareForPopoverPresentation(popoverPresentationController: cocoascript.UIPopoverPresentationController):void;
    // doc://com.apple.documentation/documentation/uikit/uipopoverpresentationcontrollerdelegate/1622321-popoverpresentationcontrollersho
    popoverPresentationControllerShouldDismissPopover(popoverPresentationController: cocoascript.UIPopoverPresentationController):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uipopoverpresentationcontrollerdelegate/1622322-popoverpresentationcontrollerdid
    popoverPresentationControllerDidDismissPopover(popoverPresentationController: cocoascript.UIPopoverPresentationController):void;
    // doc://com.apple.documentation/documentation/uikit/uipopoverpresentationcontrollerdelegate/1622326-popoverpresentationcontroller
    popoverPresentationController_willRepositionPopoverToRect_inView(popoverPresentationController: cocoascript.UIPopoverPresentationController, rect: cocoascript.CGRect, view: cocoascript.UIView):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiguidedaccessrestrictionstate
  type UIGuidedAccessRestrictionState = cocoascript.NSInteger;
}
declare const UIDocumentStateChangedNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidocumentchangekind
  type UIDocumentChangeKind = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidocumentsaveoperation
  type UIDocumentSaveOperation = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidocumentstate
  type UIDocumentState = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * An object that manages an ordered collection of data items and presents them using customizable layouts.
   * doc://com.apple.documentation/documentation/uikit/uicollectionview
   */
  interface UICollectionView extends UIScrollView {
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618053-initwithframe
    initWithFrame_collectionViewLayout(frame: cocoascript.CGRect, layout: cocoascript.UICollectionViewLayout):cocoascript.UICollectionView;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618065-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UICollectionView;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618091-datasource
    dataSource(): cocoascript.UICollectionViewDataSource;
    setDataSource(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1771771-prefetchingenabled
    prefetchingEnabled(): cocoascript.BOOL;
    setPrefetchingEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1771768-prefetchdatasource
    prefetchDataSource(): cocoascript.UICollectionViewDataSourcePrefetching;
    setPrefetchDataSource(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618033-delegate
    delegate(): cocoascript.UICollectionViewDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/3600423-dequeueconfiguredreusablecellwit
    dequeueConfiguredReusableCellWithRegistration_forIndexPath_item(registration: cocoascript.UICollectionViewCellRegistration, indexPath: cocoascript.NSIndexPath, item: cocoascript.UICollectionView):cocoascript.UICollectionViewCell;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618089-registerclass
    registerClass_forCellWithReuseIdentifier(cellClass: cocoascript.Class, identifier: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618083-registernib
    registerNib_forCellWithReuseIdentifier(nib: cocoascript.UINib, identifier: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618063-dequeuereusablecellwithreuseiden
    dequeueReusableCellWithReuseIdentifier_forIndexPath(identifier: cocoascript.NSString, indexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewCell;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/3600424-dequeueconfiguredreusablesupplem
    dequeueConfiguredReusableSupplementaryViewWithRegistration_forIndexPath(registration: cocoascript.UICollectionViewSupplementaryRegistration, indexPath: cocoascript.NSIndexPath):cocoascript.UICollectionReusableView;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618103-registerclass
    registerClass_forSupplementaryViewOfKind_withReuseIdentifier(viewClass: cocoascript.Class, elementKind: cocoascript.NSString, identifier: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618101-registernib
    registerNib_forSupplementaryViewOfKind_withReuseIdentifier(nib: cocoascript.UINib, kind: cocoascript.NSString, identifier: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618068-dequeuereusablesupplementaryview
    dequeueReusableSupplementaryViewOfKind_withReuseIdentifier_forIndexPath(elementKind: cocoascript.NSString, identifier: cocoascript.NSString, indexPath: cocoascript.NSIndexPath):cocoascript.UICollectionReusableView;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618074-backgroundview
    backgroundView(): cocoascript.UIView;
    setBackgroundView(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618047-collectionviewlayout
    collectionViewLayout(): cocoascript.UICollectionViewLayout;
    setCollectionViewLayout(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618086-setcollectionviewlayout
    setCollectionViewLayout_animated(layout: cocoascript.UICollectionViewLayout, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618017-setcollectionviewlayout
    setCollectionViewLayout_animated_completion(layout: cocoascript.UICollectionViewLayout, animated: cocoascript.BOOL, completion: void):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618098-startinteractivetransitiontocoll
    startInteractiveTransitionToCollectionViewLayout_completion(layout: cocoascript.UICollectionViewLayout, completion: cocoascript.UICollectionViewLayoutInteractiveTransitionCompletion):cocoascript.UICollectionViewTransitionLayout;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618080-finishinteractivetransition
    finishInteractiveTransition():void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618075-cancelinteractivetransition
    cancelInteractiveTransition():void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618028-numberofsections
    numberOfSections(): cocoascript.NSInteger;
    setNumberOfSections(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618016-numberofitemsinsection
    numberOfItemsInSection(section: cocoascript.NSInteger):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618056-visiblecells
    visibleCells(): cocoascript.UICollectionViewCell;
    setVisibleCells(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618097-insertitemsatindexpaths
    insertItemsAtIndexPaths(indexPaths: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618059-moveitematindexpath
    moveItemAtIndexPath_toIndexPath(indexPath: cocoascript.NSIndexPath, newIndexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618060-deleteitemsatindexpaths
    deleteItemsAtIndexPaths(indexPaths: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618090-insertsections
    insertSections(sections: cocoascript.NSIndexSet):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618042-movesection
    moveSection_toSection(section: cocoascript.NSInteger, newSection: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618102-deletesections
    deleteSections(sections: cocoascript.NSIndexSet):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618019-begininteractivemovementforitema
    beginInteractiveMovementForItemAtIndexPath(indexPath: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618079-updateinteractivemovementtargetp
    updateInteractiveMovementTargetPosition(targetPosition: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618082-endinteractivemovement
    endInteractiveMovement():void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618076-cancelinteractivemovement
    cancelInteractiveMovement():void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/2897404-dragdelegate
    dragDelegate(): cocoascript.UICollectionViewDragDelegate;
    setDragDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/2897415-hasactivedrag
    hasActiveDrag(): cocoascript.BOOL;
    setHasActiveDrag(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/2909041-draginteractionenabled
    dragInteractionEnabled(): cocoascript.BOOL;
    setDragInteractionEnabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/2897491-dropdelegate
    dropDelegate(): cocoascript.UICollectionViewDropDelegate;
    setDropDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/2897433-hasactivedrop
    hasActiveDrop(): cocoascript.BOOL;
    setHasActiveDrop(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/2897347-reorderingcadence
    reorderingCadence(): cocoascript.UICollectionViewReorderingCadence;
    setReorderingCadence(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618099-indexpathsforselecteditems
    indexPathsForSelectedItems(): cocoascript.NSIndexPath;
    setIndexPathsForSelectedItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618057-selectitematindexpath
    selectItemAtIndexPath_animated_scrollPosition(indexPath: cocoascript.NSIndexPath, animated: cocoascript.BOOL, scrollPosition: cocoascript.UICollectionViewScrollPosition):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618040-deselectitematindexpath
    deselectItemAtIndexPath_animated(indexPath: cocoascript.NSIndexPath, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618009-allowsselection
    allowsSelection(): cocoascript.BOOL;
    setAllowsSelection(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618024-allowsmultipleselection
    allowsMultipleSelection(): cocoascript.BOOL;
    setAllowsMultipleSelection(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/3600422-allowsselectionduringediting
    allowsSelectionDuringEditing(): cocoascript.BOOL;
    setAllowsSelectionDuringEditing(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/3600421-allowsmultipleselectionduringedi
    allowsMultipleSelectionDuringEditing(): cocoascript.BOOL;
    setAllowsMultipleSelectionDuringEditing(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/3573920-selectionfollowsfocus
    selectionFollowsFocus(): cocoascript.BOOL;
    setSelectionFollowsFocus(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/3600425-editing
    editing(): cocoascript.BOOL;
    setEditing(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618030-indexpathforitematpoint
    indexPathForItemAtPoint(point: cocoascript.CGPoint):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618020-indexpathsforvisibleitems
    indexPathsForVisibleItems(): cocoascript.NSIndexPath;
    setIndexPathsForVisibleItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618094-indexpathforcell
    indexPathForCell(cell: cocoascript.UICollectionViewCell):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618088-cellforitematindexpath
    cellForItemAtIndexPath(indexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewCell;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618034-indexpathsforvisiblesupplementar
    indexPathsForVisibleSupplementaryElementsOfKind(elementKind: cocoascript.NSString):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618041-supplementaryviewforelementkind
    supplementaryViewForElementKind_atIndexPath(elementKind: cocoascript.NSString, indexPath: cocoascript.NSIndexPath):cocoascript.UICollectionReusableView;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618026-visiblesupplementaryviewsofkind
    visibleSupplementaryViewsOfKind(elementKind: cocoascript.NSString):cocoascript.UICollectionReusableView;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618093-layoutattributesforitematindexpa
    layoutAttributesForItemAtIndexPath(indexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618012-layoutattributesforsupplementary
    layoutAttributesForSupplementaryElementOfKind_atIndexPath(kind: cocoascript.NSString, indexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618046-scrolltoitematindexpath
    scrollToItemAtIndexPath_atScrollPosition_animated(indexPath: cocoascript.NSIndexPath, scrollPosition: cocoascript.UICollectionViewScrollPosition, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618045-performbatchupdates
    performBatchUpdates_completion(updates: void, completion: void):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/2891094-hasuncommittedupdates
    hasUncommittedUpdates(): cocoascript.BOOL;
    setHasUncommittedUpdates(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618078-reloaddata
    reloadData():void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618092-reloadsections
    reloadSections(sections: cocoascript.NSIndexSet):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618055-reloaditemsatindexpaths
    reloadItemsAtIndexPaths(indexPaths: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionview/1618022-rememberslastfocusedindexpath
    remembersLastFocusedIndexPath(): cocoascript.BOOL;
    setRemembersLastFocusedIndexPath(): void;
    //
    alloc():cocoascript.UICollectionView;
    //
    init():cocoascript.UICollectionView;
  }
}

declare const UICollectionView: cocoascript.UICollectionView;
declare const UICollectionElementKindSectionFooter: cocoascript.NSString;
declare const UICollectionElementKindSectionHeader: cocoascript.NSString;
declare const UIPasteboardNameGeneral: cocoascript.UIPasteboardName;
declare const UIPasteboardOptionLocalOnly: cocoascript.UIPasteboardOption;
declare const UIPasteboardOptionExpirationDate: cocoascript.UIPasteboardOption;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipasteboarddetectionpattern
  type UIPasteboardDetectionPattern = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipasteboardname
  type UIPasteboardName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipasteboardoption
  type UIPasteboardOption = cocoascript.NSString;
}
declare const UIPasteboardChangedNotification: cocoascript.NSNotificationName;
declare const UIPasteboardRemovedNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  /**
   * The interface for text-oriented responder objects to participate in the unified paste and drop system in iOS.
   * doc://com.apple.documentation/documentation/uikit/uitextpasteconfigurationsupporting
   */
  interface UITextPasteConfigurationSupporting extends UIPasteConfigurationSupporting {
    // doc://com.apple.documentation/documentation/uikit/uitextpasteconfigurationsupporting/2887494-pastedelegate
    pasteDelegate(): cocoascript.UITextPasteDelegate;
    setPasteDelegate(): void;
  }
}
declare const UINibExternalObjects: cocoascript.UINibOptionsKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiniboptionskey
  type UINibOptionsKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uikeyboardtype
  type UIKeyboardType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiactivitycategory
  type UIActivityCategory = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiactivitytype
  type UIActivityType = cocoascript.NSString;
}
declare namespace cocoascript {
  /**
   * A configuration that allows a responder to export data through a variety of interactions.
   * doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfiguration
   */
  interface UIActivityItemsConfiguration extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfiguration/3368122-initwithitemproviders
    initWithItemProviders(itemProviders: cocoascript.NSItemProvider):cocoascript.UIActivityItemsConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfiguration/3368123-initwithobjects
    initWithObjects(objects: cocoascript.NSItemProviderWriting):cocoascript.UIActivityItemsConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfiguration/3368124-localobject
    localObject(): cocoascript.id;
    setLocalObject(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfiguration/3368125-metadataprovider
    metadataProvider(): cocoascript.UIActivityItemsConfigurationMetadataKey;
    setMetadataProvider(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfiguration/3368126-peritemmetadataprovider
    perItemMetadataProvider(): cocoascript.UIActivityItemsConfigurationMetadataKey;
    setPerItemMetadataProvider(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfiguration/3368121-applicationactivitiesprovider
    applicationActivitiesProvider(): void;
    setApplicationActivitiesProvider(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfiguration/3368128-supportedinteractions
    supportedInteractions(): cocoascript.UIActivityItemsConfigurationInteraction;
    setSupportedInteractions(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfiguration/3368127-previewprovider
    previewProvider(): cocoascript.CGSize;
    setPreviewProvider(): void;
    //
    alloc():cocoascript.UIActivityItemsConfiguration;
    //
    init():cocoascript.UIActivityItemsConfiguration;
  }
}

declare const UIActivityItemsConfiguration: cocoascript.UIActivityItemsConfiguration;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfigurationreading
   */
  interface UIActivityItemsConfigurationReading extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfigurationreading/3368148-applicationactivitiesforactivity
    applicationActivitiesForActivityItemsConfiguration(): cocoascript.UIActivity;
    setApplicationActivitiesForActivityItemsConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfigurationreading/3368149-itemprovidersforactivityitemscon
    itemProvidersForActivityItemsConfiguration(): cocoascript.NSItemProvider;
    setItemProvidersForActivityItemsConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfigurationreading/3368144-activityitemsconfigurationmetada
    activityItemsConfigurationMetadataForKey(key: cocoascript.UIActivityItemsConfigurationMetadataKey):cocoascript.UIActivityItemsConfigurationReading;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfigurationreading/3368145-activityitemsconfigurationmetada
    activityItemsConfigurationMetadataForItemAtIndex_key(index: cocoascript.NSInteger, key: cocoascript.UIActivityItemsConfigurationMetadataKey):cocoascript.UIActivityItemsConfigurationReading;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfigurationreading/3368146-activityitemsconfigurationprevie
    activityItemsConfigurationPreviewForItemAtIndex_intent_suggestedSize(index: cocoascript.NSInteger, intent: cocoascript.UIActivityItemsConfigurationPreviewIntent, suggestedSize: cocoascript.CGSize):cocoascript.NSItemProvider;
    // doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfigurationreading/3368147-activityitemsconfigurationsuppor
    activityItemsConfigurationSupportsInteraction(interaction: cocoascript.UIActivityItemsConfigurationInteraction):cocoascript.BOOL;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiactivityviewcontrollercompletionwithitemshandler
  type UIActivityViewControllerCompletionWithItemsHandler = cocoascript.NSError;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiactivityviewcontrollercompletionhandler
  type UIActivityViewControllerCompletionHandler = cocoascript.BOOL;
}
declare namespace cocoascript {
  /**
   * An optional set of methods that the delegate of the shared print-interaction controller implements.
   * doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontrollerdelegate
   */
  interface UIPrintInteractionControllerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontrollerdelegate/1618162-printinteractioncontrollerparent
    printInteractionControllerParentViewController(printInteractionController: cocoascript.UIPrintInteractionController):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontrollerdelegate/1618160-printinteractioncontroller
    printInteractionController_choosePaper(printInteractionController: cocoascript.UIPrintInteractionController, paperList: cocoascript.UIPrintPaper):cocoascript.UIPrintPaper;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontrollerdelegate/1618179-printinteractioncontroller
    printInteractionController_cutLengthForPaper(printInteractionController: cocoascript.UIPrintInteractionController, paper: cocoascript.UIPrintPaper):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontrollerdelegate/1618178-printinteractioncontroller
    printInteractionController_chooseCutterBehavior(printInteractionController: cocoascript.UIPrintInteractionController, availableBehaviors: cocoascript.NSArray):cocoascript.UIPrinterCutterBehavior;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontrollerdelegate/1618168-printinteractioncontrollerwillpr
    printInteractionControllerWillPresentPrinterOptions(printInteractionController: cocoascript.UIPrintInteractionController):void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontrollerdelegate/1618158-printinteractioncontrollerdidpre
    printInteractionControllerDidPresentPrinterOptions(printInteractionController: cocoascript.UIPrintInteractionController):void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontrollerdelegate/1618151-printinteractioncontrollerwilldi
    printInteractionControllerWillDismissPrinterOptions(printInteractionController: cocoascript.UIPrintInteractionController):void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontrollerdelegate/1618175-printinteractioncontrollerdiddis
    printInteractionControllerDidDismissPrinterOptions(printInteractionController: cocoascript.UIPrintInteractionController):void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontrollerdelegate/1618185-printinteractioncontrollerwillst
    printInteractionControllerWillStartJob(printInteractionController: cocoascript.UIPrintInteractionController):void;
    // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncontrollerdelegate/1618154-printinteractioncontrollerdidfin
    printInteractionControllerDidFinishJob(printInteractionController: cocoascript.UIPrintInteractionController):void;
  }
}
declare namespace cocoascript {
  /**
   * The
   * doc://com.apple.documentation/documentation/uikit/uiwebviewdelegate
   */
  interface UIWebViewDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiwebviewdelegate/1617945-webview
    webView_shouldStartLoadWithRequest_navigationType(webView: cocoascript.UIWebView, request: cocoascript.NSURLRequest, navigationType: cocoascript.UIWebViewNavigationType):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiwebviewdelegate/1617947-webviewdidstartload
    webViewDidStartLoad(webView: cocoascript.UIWebView):void;
    // doc://com.apple.documentation/documentation/uikit/uiwebviewdelegate/1617969-webviewdidfinishload
    webViewDidFinishLoad(webView: cocoascript.UIWebView):void;
    // doc://com.apple.documentation/documentation/uikit/uiwebviewdelegate/1617970-webview
    webView_didFailLoadWithError(webView: cocoascript.UIWebView, error: cocoascript.NSError):void;
  }
}
declare namespace cocoascript {
  /**
   * The interface for handling drops in a table view.
   * doc://com.apple.documentation/documentation/uikit/uitableviewdropdelegate
   */
  interface UITableViewDropDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropdelegate/2897434-tableview
    tableView_canHandleDropSession(tableView: cocoascript.UITableView, session: cocoascript.UIDropSession):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropdelegate/2921669-tableview
    tableView_dropPreviewParametersForRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.UIDragPreviewParameters;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropdelegate/2897427-tableview
    tableView_performDropWithCoordinator(tableView: cocoascript.UITableView, coordinator: cocoascript.UITableViewDropCoordinator):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropdelegate/2897302-tableview
    tableView_dropSessionDidUpdate_withDestinationIndexPath(tableView: cocoascript.UITableView, session: cocoascript.UIDropSession, destinationIndexPath: cocoascript.NSIndexPath):cocoascript.UITableViewDropProposal;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropdelegate/2897458-tableview
    tableView_dropSessionDidEnter(tableView: cocoascript.UITableView, session: cocoascript.UIDropSession):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropdelegate/2897303-tableview
    tableView_dropSessionDidExit(tableView: cocoascript.UITableView, session: cocoascript.UIDropSession):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropdelegate/2897342-tableview
    tableView_dropSessionDidEnd(tableView: cocoascript.UITableView, session: cocoascript.UIDropSession):void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that vend objects used to manage a fixed-length or interactive transition between view controllers.
   * doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioningdelegate
   */
  interface UIViewControllerTransitioningDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioningdelegate/1622037-animationcontrollerforpresentedc
    animationControllerForPresentedController_presentingController_sourceController(presented: cocoascript.UIViewController, presenting: cocoascript.UIViewController, source: cocoascript.UIViewController):cocoascript.UIViewControllerAnimatedTransitioning;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioningdelegate/1622047-animationcontrollerfordismissedc
    animationControllerForDismissedController(dismissed: cocoascript.UIViewController):cocoascript.UIViewControllerAnimatedTransitioning;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioningdelegate/1622050-interactioncontrollerforpresenta
    interactionControllerForPresentation(animator: cocoascript.UIViewControllerAnimatedTransitioning):cocoascript.UIViewControllerInteractiveTransitioning;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioningdelegate/1622030-interactioncontrollerfordismissa
    interactionControllerForDismissal(animator: cocoascript.UIViewControllerAnimatedTransitioning):cocoascript.UIViewControllerInteractiveTransitioning;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioningdelegate/1622057-presentationcontrollerforpresent
    presentationControllerForPresentedViewController_presentingViewController_sourceViewController(presented: cocoascript.UIViewController, presenting: cocoascript.UIViewController, source: cocoascript.UIViewController):cocoascript.UIPresentationController;
  }
}
declare namespace cocoascript {
  /**
   * An interface for coordinating your custom drop-related actions with the collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewdropcoordinator
   */
  interface UICollectionViewDropCoordinator extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropcoordinator/2897482-items
    items(): cocoascript.UICollectionViewDropItem;
    setItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropcoordinator/2897284-destinationindexpath
    destinationIndexPath(): cocoascript.NSIndexPath;
    setDestinationIndexPath(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropcoordinator/2897310-dropitem
    dropItem_toItemAtIndexPath(dragItem: cocoascript.UIDragItem, indexPath: cocoascript.NSIndexPath):cocoascript.UIDragAnimating;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropcoordinator/2909040-dropitem
    dropItem_intoItemAtIndexPath_rect(dragItem: cocoascript.UIDragItem, indexPath: cocoascript.NSIndexPath, rect: cocoascript.CGRect):cocoascript.UIDragAnimating;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropcoordinator/2897364-dropitem
    dropItem_toTarget(dragItem: cocoascript.UIDragItem, target: cocoascript.UIDragPreviewTarget):cocoascript.UIDragAnimating;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropcoordinator/2921634-dropitem
    dropItem_toPlaceholder(dragItem: cocoascript.UIDragItem, placeholder: cocoascript.UICollectionViewDropPlaceholder):cocoascript.UICollectionViewDropPlaceholderContext;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropcoordinator/2897462-session
    session(): cocoascript.UIDropSession;
    setSession(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropcoordinator/2897465-proposal
    proposal(): cocoascript.UICollectionViewDropProposal;
    setProposal(): void;
  }
}
declare namespace cocoascript {
  /**
   * The data associated with an item being dropped into the collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewdropitem
   */
  interface UICollectionViewDropItem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropitem/2897456-dragitem
    dragItem(): cocoascript.UIDragItem;
    setDragItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropitem/2897437-previewsize
    previewSize(): cocoascript.CGSize;
    setPreviewSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropitem/2897392-sourceindexpath
    sourceIndexPath(): cocoascript.NSIndexPath;
    setSourceIndexPath(): void;
  }
}
declare namespace cocoascript {
  /**
   * The requirements for an object that provides the configuration for a content view.
   * doc://com.apple.documentation/documentation/uikit/uicontentconfiguration
   */
  interface UIContentConfiguration extends NSCopying {
    // doc://com.apple.documentation/documentation/uikit/uicontentconfiguration/3600486-makecontentview
    makeContentView():cocoascript.UIContentView;
    // doc://com.apple.documentation/documentation/uikit/uicontentconfiguration/3600487-updatedconfigurationforstate
    updatedConfigurationForState(state: cocoascript.UIConfigurationState):cocoascript.UIContentConfiguration;
  }
}
declare namespace cocoascript {
  /**
   * The interface for customizing the behavior of a drag activity for a text view.
   * doc://com.apple.documentation/documentation/uikit/uitextdragdelegate
   */
  interface UITextDragDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextdragdelegate/2890907-textdraggableview
    textDraggableView_dragSessionWillBegin(textDraggableView: cocoascript.UITextDraggable, session: cocoascript.UIDragSession):void;
    // doc://com.apple.documentation/documentation/uikit/uitextdragdelegate/2890902-textdraggableview
    textDraggableView_dragSessionDidEnd_withOperation(textDraggableView: cocoascript.UITextDraggable, session: cocoascript.UIDragSession, operation: cocoascript.UIDropOperation):void;
    // doc://com.apple.documentation/documentation/uikit/uitextdragdelegate/2919989-textdraggableview
    textDraggableView_willAnimateLiftWithAnimator_session(textDraggableView: cocoascript.UITextDraggable, animator: cocoascript.UIDragAnimating, session: cocoascript.UIDragSession):void;
    // doc://com.apple.documentation/documentation/uikit/uitextdragdelegate/2890908-textdraggableview
    textDraggableView_itemsForDrag(textDraggableView: cocoascript.UITextDraggable, dragRequest: cocoascript.UITextDragRequest):cocoascript.UIDragItem;
    // doc://com.apple.documentation/documentation/uikit/uitextdragdelegate/2890904-textdraggableview
    textDraggableView_dragPreviewForLiftingItem_session(textDraggableView: cocoascript.UITextDraggable, item: cocoascript.UIDragItem, session: cocoascript.UIDragSession):cocoascript.UITargetedDragPreview;
  }
}
declare namespace cocoascript {
  /**
   * Methods you use to generate PDF data that accompanies a user-requested screenshot.
   * doc://com.apple.documentation/documentation/uikit/uiscreenshotservicedelegate
   */
  interface UIScreenshotServiceDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiscreenshotservicedelegate/3213937-screenshotservice
    screenshotService_generatePDFRepresentationWithCompletion(screenshotService: cocoascript.UIScreenshotService, completionHandler: cocoascript.CGRect):void;
  }
}
declare namespace cocoascript {
  /**
   * The interface for initiating drags from a collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewdragdelegate
   */
  interface UICollectionViewDragDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdragdelegate/2897389-collectionview
    collectionView_itemsForBeginningDragSession_atIndexPath(collectionView: cocoascript.UICollectionView, session: cocoascript.UIDragSession, indexPath: cocoascript.NSIndexPath):cocoascript.UIDragItem;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdragdelegate/2897367-collectionview
    collectionView_itemsForAddingToDragSession_atIndexPath_point(collectionView: cocoascript.UICollectionView, session: cocoascript.UIDragSession, indexPath: cocoascript.NSIndexPath, point: cocoascript.CGPoint):cocoascript.UIDragItem;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdragdelegate/2897440-collectionview
    collectionView_dragSessionWillBegin(collectionView: cocoascript.UICollectionView, session: cocoascript.UIDragSession):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdragdelegate/2897477-collectionview
    collectionView_dragSessionDidEnd(collectionView: cocoascript.UICollectionView, session: cocoascript.UIDragSession):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdragdelegate/2897459-collectionview
    collectionView_dragPreviewParametersForItemAtIndexPath(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath):cocoascript.UIDragPreviewParameters;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdragdelegate/2919964-collectionview
    collectionView_dragSessionAllowsMoveOperation(collectionView: cocoascript.UICollectionView, session: cocoascript.UIDragSession):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdragdelegate/2919963-collectionview
    collectionView_dragSessionIsRestrictedToDraggingApplication(collectionView: cocoascript.UICollectionView, session: cocoascript.UIDragSession):cocoascript.BOOL;
  }
}
declare namespace cocoascript {
  /**
   * To respond to the pausing or resumption of UIKit dynamic animation, configure a custom class to adopt the
   * doc://com.apple.documentation/documentation/uikit/uidynamicanimatordelegate
   */
  interface UIDynamicAnimatorDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidynamicanimatordelegate/1621193-dynamicanimatordidpause
    dynamicAnimatorDidPause(animator: cocoascript.UIDynamicAnimator):void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicanimatordelegate/1621188-dynamicanimatorwillresume
    dynamicAnimatorWillResume(animator: cocoascript.UIDynamicAnimator):void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that your delegate object must implement to respond to the video editor.
   * doc://com.apple.documentation/documentation/uikit/uivideoeditorcontrollerdelegate
   */
  interface UIVideoEditorControllerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uivideoeditorcontrollerdelegate/1622336-videoeditorcontroller
    videoEditorController_didSaveEditedVideoToPath(editor: cocoascript.UIVideoEditorController, editedVideoPath: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uivideoeditorcontrollerdelegate/1622335-videoeditorcontrollerdidcancel
    videoEditorControllerDidCancel(editor: cocoascript.UIVideoEditorController):void;
    // doc://com.apple.documentation/documentation/uikit/uivideoeditorcontrollerdelegate/1622342-videoeditorcontroller
    videoEditorController_didFailWithError(editor: cocoascript.UIVideoEditorController, error: cocoascript.NSError):void;
  }
}
declare namespace cocoascript {
  /**
   * The delegate of a page view controller must adopt the
   * doc://com.apple.documentation/documentation/uikit/uipageviewcontrollerdelegate
   */
  interface UIPageViewControllerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontrollerdelegate/1614091-pageviewcontroller
    pageViewController_willTransitionToViewControllers(pageViewController: cocoascript.UIPageViewController, pendingViewControllers: cocoascript.UIViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontrollerdelegate/1614090-pageviewcontroller
    pageViewController_didFinishAnimating_previousViewControllers_transitionCompleted(pageViewController: cocoascript.UIPageViewController, finished: cocoascript.BOOL, previousViewControllers: cocoascript.UIViewController, completed: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontrollerdelegate/1614083-pageviewcontroller
    pageViewController_spineLocationForInterfaceOrientation(pageViewController: cocoascript.UIPageViewController, orientation: cocoascript.UIInterfaceOrientation):cocoascript.UIPageViewControllerSpineLocation;
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontrollerdelegate/1614100-pageviewcontrollersupportedinter
    pageViewControllerSupportedInterfaceOrientations(pageViewController: cocoascript.UIPageViewController):cocoascript.UIInterfaceOrientationMask;
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontrollerdelegate/1614119-pageviewcontrollerpreferredinter
    pageViewControllerPreferredInterfaceOrientationForPresentation(pageViewController: cocoascript.UIPageViewController):cocoascript.UIInterfaceOrientation;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that provides information about an in-progress view controller transition.
   * doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext
   */
  interface UIViewControllerTransitionCoordinatorContext extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619293-viewcontrollerforkey
    viewControllerForKey(key: cocoascript.UITransitionContextViewControllerKey):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619302-viewforkey
    viewForKey(key: cocoascript.UITransitionContextViewKey):cocoascript.UIView;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619280-containerview
    containerView(): cocoascript.UIView;
    setContainerView(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619287-presentationstyle
    presentationStyle(): cocoascript.UIModalPresentationStyle;
    setPresentationStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619286-transitionduration
    transitionDuration(): cocoascript.NSTimeInterval;
    setTransitionDuration(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619299-completioncurve
    completionCurve(): cocoascript.UIViewAnimationCurve;
    setCompletionCurve(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619282-completionvelocity
    completionVelocity(): cocoascript.CGFloat;
    setCompletionVelocity(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619290-percentcomplete
    percentComplete(): cocoascript.CGFloat;
    setPercentComplete(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619285-initiallyinteractive
    initiallyInteractive(): cocoascript.BOOL;
    setInitiallyInteractive(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/2097567-interactive
    interactive(): cocoascript.BOOL;
    setInteractive(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/2097566-animated
    animated(): cocoascript.BOOL;
    setAnimated(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/2097568-cancelled
    cancelled(): cocoascript.BOOL;
    setCancelled(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1829390-isinterruptible
    isInterruptible(): cocoascript.BOOL;
    setIsInterruptible(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinatorcontext/1619289-targettransform
    targetTransform(): cocoascript.CGAffineTransform;
    setTargetTransform(): void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods you can implement to respond to messages from a document interaction controller.
   * doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontrollerdelegate
   */
  interface UIDocumentInteractionControllerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontrollerdelegate/1616799-documentinteractioncontrollervie
    documentInteractionControllerViewControllerForPreview(controller: cocoascript.UIDocumentInteractionController):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontrollerdelegate/1616819-documentinteractioncontrollervie
    documentInteractionControllerViewForPreview(controller: cocoascript.UIDocumentInteractionController):cocoascript.UIView;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontrollerdelegate/1616805-documentinteractioncontrollerrec
    documentInteractionControllerRectForPreview(controller: cocoascript.UIDocumentInteractionController):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontrollerdelegate/1616806-documentinteractioncontrollerwil
    documentInteractionControllerWillBeginPreview(controller: cocoascript.UIDocumentInteractionController):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontrollerdelegate/1616809-documentinteractioncontrollerdid
    documentInteractionControllerDidEndPreview(controller: cocoascript.UIDocumentInteractionController):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontrollerdelegate/1616822-documentinteractioncontrollerwil
    documentInteractionControllerWillPresentOptionsMenu(controller: cocoascript.UIDocumentInteractionController):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontrollerdelegate/1616803-documentinteractioncontrollerdid
    documentInteractionControllerDidDismissOptionsMenu(controller: cocoascript.UIDocumentInteractionController):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontrollerdelegate/1616818-documentinteractioncontrollerwil
    documentInteractionControllerWillPresentOpenInMenu(controller: cocoascript.UIDocumentInteractionController):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontrollerdelegate/1616826-documentinteractioncontrollerdid
    documentInteractionControllerDidDismissOpenInMenu(controller: cocoascript.UIDocumentInteractionController):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontrollerdelegate/1616825-documentinteractioncontroller
    documentInteractionController_willBeginSendingToApplication(controller: cocoascript.UIDocumentInteractionController, application: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontrollerdelegate/1616824-documentinteractioncontroller
    documentInteractionController_didEndSendingToApplication(controller: cocoascript.UIDocumentInteractionController, application: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontrollerdelegate/1616800-documentinteractioncontroller
    documentInteractionController_canPerformAction(controller: cocoascript.UIDocumentInteractionController, action: cocoascript.SEL):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uidocumentinteractioncontrollerdelegate/1616823-documentinteractioncontroller
    documentInteractionController_performAction(controller: cocoascript.UIDocumentInteractionController, action: cocoascript.SEL):cocoascript.BOOL;
  }
}
declare namespace cocoascript {
  /**
   * The interface for handling drops in a collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewdropdelegate
   */
  interface UICollectionViewDropDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropdelegate/2897386-collectionview
    collectionView_canHandleDropSession(collectionView: cocoascript.UICollectionView, session: cocoascript.UIDropSession):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropdelegate/2897304-collectionview
    collectionView_performDropWithCoordinator(collectionView: cocoascript.UICollectionView, coordinator: cocoascript.UICollectionViewDropCoordinator):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropdelegate/2897375-collectionview
    collectionView_dropSessionDidUpdate_withDestinationIndexPath(collectionView: cocoascript.UICollectionView, session: cocoascript.UIDropSession, destinationIndexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewDropProposal;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropdelegate/2897329-collectionview
    collectionView_dropSessionDidEnter(collectionView: cocoascript.UICollectionView, session: cocoascript.UIDropSession):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropdelegate/2897416-collectionview
    collectionView_dropSessionDidExit(collectionView: cocoascript.UICollectionView, session: cocoascript.UIDropSession):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropdelegate/2897291-collectionview
    collectionView_dropSessionDidEnd(collectionView: cocoascript.UICollectionView, session: cocoascript.UIDropSession):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropdelegate/2921636-collectionview
    collectionView_dropPreviewParametersForItemAtIndexPath(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath):cocoascript.UIDragPreviewParameters;
  }
}
declare namespace cocoascript {
  /**
   * An item that's currently visible within the bounds of a section.
   * doc://com.apple.documentation/documentation/uikit/nscollectionlayoutvisibleitem
   */
  interface NSCollectionLayoutVisibleItem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutvisibleitem/3199122-name
    name(): cocoascript.NSString;
    setName(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutvisibleitem/3199124-representedelementkind
    representedElementKind(): cocoascript.NSString;
    setRepresentedElementKind(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutvisibleitem/3199123-representedelementcategory
    representedElementCategory(): cocoascript.UICollectionElementCategory;
    setRepresentedElementCategory(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutvisibleitem/3199120-indexpath
    indexPath(): cocoascript.NSIndexPath;
    setIndexPath(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutvisibleitem/3199116-alpha
    alpha(): cocoascript.CGFloat;
    setAlpha(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutvisibleitem/3199121-hidden
    hidden(): cocoascript.BOOL;
    setHidden(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutvisibleitem/3199119-frame
    frame(): cocoascript.CGRect;
    setFrame(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutvisibleitem/3199117-bounds
    bounds(): cocoascript.CGRect;
    setBounds(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutvisibleitem/3199118-center
    center(): cocoascript.CGPoint;
    setCenter(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutvisibleitem/3199125-transform
    transform(): cocoascript.CGAffineTransform;
    setTransform(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutvisibleitem/3199126-transform3d
    transform3D(): cocoascript.CATransform3D;
    setTransform3D(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutvisibleitem/3199127-zindex
    zIndex(): cocoascript.NSInteger;
    setZIndex(): void;
  }
}
declare namespace cocoascript {
  /**
   * The
   * doc://com.apple.documentation/documentation/uikit/uipageviewcontrollerdatasource
   */
  interface UIPageViewControllerDataSource extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontrollerdatasource/1614086-pageviewcontroller
    pageViewController_viewControllerBeforeViewController(pageViewController: cocoascript.UIPageViewController, viewController: cocoascript.UIViewController):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontrollerdatasource/1614118-pageviewcontroller
    pageViewController_viewControllerAfterViewController(pageViewController: cocoascript.UIPageViewController, viewController: cocoascript.UIViewController):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontrollerdatasource/1614095-presentationcountforpageviewcont
    presentationCountForPageViewController(pageViewController: cocoascript.UIPageViewController):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uipageviewcontrollerdatasource/1614116-presentationindexforpageviewcont
    presentationIndexForPageViewController(pageViewController: cocoascript.UIPageViewController):cocoascript.NSInteger;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods for managing the presentation and dismissal of a printer picker interface.
   * doc://com.apple.documentation/documentation/uikit/uiprinterpickercontrollerdelegate
   */
  interface UIPrinterPickerControllerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiprinterpickercontrollerdelegate/1620503-printerpickercontroller
    printerPickerController_shouldShowPrinter(printerPickerController: cocoascript.UIPrinterPickerController, printer: cocoascript.UIPrinter):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiprinterpickercontrollerdelegate/1620504-printerpickercontrollerdidselect
    printerPickerControllerDidSelectPrinter(printerPickerController: cocoascript.UIPrinterPickerController):void;
    // doc://com.apple.documentation/documentation/uikit/uiprinterpickercontrollerdelegate/1620518-printerpickercontrollerparentvie
    printerPickerControllerParentViewController(printerPickerController: cocoascript.UIPrinterPickerController):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uiprinterpickercontrollerdelegate/1620513-printerpickercontrollerwillprese
    printerPickerControllerWillPresent(printerPickerController: cocoascript.UIPrinterPickerController):void;
    // doc://com.apple.documentation/documentation/uikit/uiprinterpickercontrollerdelegate/1620508-printerpickercontrollerdidpresen
    printerPickerControllerDidPresent(printerPickerController: cocoascript.UIPrinterPickerController):void;
    // doc://com.apple.documentation/documentation/uikit/uiprinterpickercontrollerdelegate/1620519-printerpickercontrollerwilldismi
    printerPickerControllerWillDismiss(printerPickerController: cocoascript.UIPrinterPickerController):void;
    // doc://com.apple.documentation/documentation/uikit/uiprinterpickercontrollerdelegate/1620510-printerpickercontrollerdiddismis
    printerPickerControllerDidDismiss(printerPickerController: cocoascript.UIPrinterPickerController):void;
  }
}
declare namespace cocoascript {
  /**
   * The interface for handling pasting and dropping of text, using item providers.
   * doc://com.apple.documentation/documentation/uikit/uitextpastedelegate
   */
  interface UITextPasteDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextpastedelegate/2887483-textpasteconfigurationsupporting
    textPasteConfigurationSupporting_transformPasteItem(textPasteConfigurationSupporting: cocoascript.UITextPasteConfigurationSupporting, item: cocoascript.UITextPasteItem):void;
    // doc://com.apple.documentation/documentation/uikit/uitextpastedelegate/2887490-textpasteconfigurationsupporting
    textPasteConfigurationSupporting_combineItemAttributedStrings_forRange(textPasteConfigurationSupporting: cocoascript.UITextPasteConfigurationSupporting, itemStrings: cocoascript.NSAttributedString, textRange: cocoascript.UITextRange):cocoascript.NSAttributedString;
    // doc://com.apple.documentation/documentation/uikit/uitextpastedelegate/2887492-textpasteconfigurationsupporting
    textPasteConfigurationSupporting_performPasteOfAttributedString_toRange(textPasteConfigurationSupporting: cocoascript.UITextPasteConfigurationSupporting, attributedString: cocoascript.NSAttributedString, textRange: cocoascript.UITextRange):cocoascript.UITextRange;
    // doc://com.apple.documentation/documentation/uikit/uitextpastedelegate/2909062-textpasteconfigurationsupporting
    textPasteConfigurationSupporting_shouldAnimatePasteOfAttributedString_toRange(textPasteConfigurationSupporting: cocoascript.UITextPasteConfigurationSupporting, attributedString: cocoascript.NSAttributedString, textRange: cocoascript.UITextRange):cocoascript.BOOL;
  }
}
declare namespace cocoascript {
  /**
   * Information about focusing animations being performed by the system.
   * doc://com.apple.documentation/documentation/uikit/uifocusanimationcontext
   */
  interface UIFocusAnimationContext extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uifocusanimationcontext/2887568-duration
    duration(): cocoascript.NSTimeInterval;
    setDuration(): void;
  }
}
declare namespace cocoascript {
  /**
   * To respond to UIKit dynamic item collisions, configure a custom class to adopt the
   * doc://com.apple.documentation/documentation/uikit/uicollisionbehaviordelegate
   */
  interface UICollisionBehaviorDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehaviordelegate/1624816-collisionbehavior
    collisionBehavior_beganContactForItem_withBoundaryIdentifier_atPoint(behavior: cocoascript.UICollisionBehavior, item: cocoascript.UIDynamicItem, identifier: cocoascript.NSCopying, p: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehaviordelegate/1624835-collisionbehavior
    collisionBehavior_beganContactForItem_withItem_atPoint(behavior: cocoascript.UICollisionBehavior, item1: cocoascript.UIDynamicItem, item2: cocoascript.UIDynamicItem, p: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehaviordelegate/1624834-collisionbehavior
    collisionBehavior_endedContactForItem_withBoundaryIdentifier(behavior: cocoascript.UICollisionBehavior, item: cocoascript.UIDynamicItem, identifier: cocoascript.NSCopying):void;
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehaviordelegate/1624833-collisionbehavior
    collisionBehavior_endedContactForItem_withItem(behavior: cocoascript.UICollisionBehavior, item1: cocoascript.UIDynamicItem, item2: cocoascript.UIDynamicItem):void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods you implement to customize the behavior of a tab bar.
   * doc://com.apple.documentation/documentation/uikit/uitabbarcontrollerdelegate
   */
  interface UITabBarControllerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitabbarcontrollerdelegate/1621166-tabbarcontroller
    tabBarController_shouldSelectViewController(tabBarController: cocoascript.UITabBarController, viewController: cocoascript.UIViewController):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitabbarcontrollerdelegate/1621173-tabbarcontroller
    tabBarController_didSelectViewController(tabBarController: cocoascript.UITabBarController, viewController: cocoascript.UIViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarcontrollerdelegate/1621179-tabbarcontroller
    tabBarController_willBeginCustomizingViewControllers(tabBarController: cocoascript.UITabBarController, viewControllers: cocoascript.UIViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarcontrollerdelegate/1621178-tabbarcontroller
    tabBarController_willEndCustomizingViewControllers_changed(tabBarController: cocoascript.UITabBarController, viewControllers: cocoascript.UIViewController, changed: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarcontrollerdelegate/1621168-tabbarcontroller
    tabBarController_didEndCustomizingViewControllers_changed(tabBarController: cocoascript.UITabBarController, viewControllers: cocoascript.UIViewController, changed: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uitabbarcontrollerdelegate/1621180-tabbarcontrollersupportedinterfa
    tabBarControllerSupportedInterfaceOrientations(tabBarController: cocoascript.UITabBarController):cocoascript.UIInterfaceOrientationMask;
    // doc://com.apple.documentation/documentation/uikit/uitabbarcontrollerdelegate/1621176-tabbarcontrollerpreferredinterfa
    tabBarControllerPreferredInterfaceOrientationForPresentation(tabBarController: cocoascript.UITabBarController):cocoascript.UIInterfaceOrientation;
    // doc://com.apple.documentation/documentation/uikit/uitabbarcontrollerdelegate/1621167-tabbarcontroller
    tabBarController_animationControllerForTransitionFromViewController_toViewController(tabBarController: cocoascript.UITabBarController, fromVC: cocoascript.UIViewController, toVC: cocoascript.UIViewController):cocoascript.UIViewControllerAnimatedTransitioning;
    // doc://com.apple.documentation/documentation/uikit/uitabbarcontrollerdelegate/1621170-tabbarcontroller
    tabBarController_interactionControllerForAnimationController(tabBarController: cocoascript.UITabBarController, animationController: cocoascript.UIViewControllerAnimatedTransitioning):cocoascript.UIViewControllerInteractiveTransitioning;
  }
}
declare namespace cocoascript {
  /**
   * The interface for describing the attributes of a drag activity originating in a text view.
   * doc://com.apple.documentation/documentation/uikit/uitextdragrequest
   */
  interface UITextDragRequest extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextdragrequest/2890912-existingitems
    existingItems(): cocoascript.UIDragItem;
    setExistingItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdragrequest/2890900-suggesteditems
    suggestedItems(): cocoascript.UIDragItem;
    setSuggestedItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdragrequest/2890901-dragrange
    dragRange(): cocoascript.UITextRange;
    setDragRange(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdragrequest/2890906-selected
    selected(): cocoascript.BOOL;
    setSelected(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdragrequest/2890910-dragsession
    dragSession(): cocoascript.UIDragSession;
    setDragSession(): void;
  }
}
declare namespace cocoascript {
  /**
   * The interface for initiating drags from a table view.
   * doc://com.apple.documentation/documentation/uikit/uitableviewdragdelegate
   */
  interface UITableViewDragDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitableviewdragdelegate/2897492-tableview
    tableView_itemsForBeginningDragSession_atIndexPath(tableView: cocoascript.UITableView, session: cocoascript.UIDragSession, indexPath: cocoascript.NSIndexPath):cocoascript.UIDragItem;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdragdelegate/2897293-tableview
    tableView_itemsForAddingToDragSession_atIndexPath_point(tableView: cocoascript.UITableView, session: cocoascript.UIDragSession, indexPath: cocoascript.NSIndexPath, point: cocoascript.CGPoint):cocoascript.UIDragItem;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdragdelegate/2897382-tableview
    tableView_dragSessionWillBegin(tableView: cocoascript.UITableView, session: cocoascript.UIDragSession):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdragdelegate/2897428-tableview
    tableView_dragSessionDidEnd(tableView: cocoascript.UITableView, session: cocoascript.UIDragSession):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdragdelegate/2919982-tableview
    tableView_dragSessionIsRestrictedToDraggingApplication(tableView: cocoascript.UITableView, session: cocoascript.UIDragSession):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdragdelegate/2919983-tableview
    tableView_dragSessionAllowsMoveOperation(tableView: cocoascript.UITableView, session: cocoascript.UIDragSession):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdragdelegate/2897353-tableview
    tableView_dragPreviewParametersForRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.UIDragPreviewParameters;
  }
}
declare namespace cocoascript {
  /**
   * The methods adopted by the object you use to manage data and provide cells for a collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewdatasource
   */
  interface UICollectionViewDataSource extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdatasource/1618058-collectionview
    collectionView_numberOfItemsInSection(collectionView: cocoascript.UICollectionView, section: cocoascript.NSInteger):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdatasource/1618023-numberofsectionsincollectionview
    numberOfSectionsInCollectionView(collectionView: cocoascript.UICollectionView):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdatasource/1618029-collectionview
    collectionView_cellForItemAtIndexPath(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewCell;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdatasource/1618037-collectionview
    collectionView_viewForSupplementaryElementOfKind_atIndexPath(collectionView: cocoascript.UICollectionView, kind: cocoascript.NSString, indexPath: cocoascript.NSIndexPath):cocoascript.UICollectionReusableView;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdatasource/1618015-collectionview
    collectionView_canMoveItemAtIndexPath(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdatasource/1618064-collectionview
    collectionView_moveItemAtIndexPath_toIndexPath(collectionView: cocoascript.UICollectionView, sourceIndexPath: cocoascript.NSIndexPath, destinationIndexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdatasource/2851455-indextitlesforcollectionview
    indexTitlesForCollectionView(collectionView: cocoascript.UICollectionView):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdatasource/2851456-collectionview
    collectionView_indexPathForIndexTitle_atIndex(collectionView: cocoascript.UICollectionView, title: cocoascript.NSString, index: cocoascript.NSInteger):cocoascript.NSIndexPath;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that provide contextual information for transition animations between view controllers.
   * doc://com.apple.documentation/documentation/uikit/uiviewcontrollercontexttransitioning
   */
  interface UIViewControllerContextTransitioning extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollercontexttransitioning/1622045-containerview
    containerView(): cocoascript.UIView;
    setContainerView(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollercontexttransitioning/1622043-viewcontrollerforkey
    viewControllerForKey(key: cocoascript.UITransitionContextViewControllerKey):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollercontexttransitioning/1622055-viewforkey
    viewForKey(key: cocoascript.UITransitionContextViewKey):cocoascript.UIView;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollercontexttransitioning/1622033-initialframeforviewcontroller
    initialFrameForViewController(vc: cocoascript.UIViewController):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollercontexttransitioning/1622024-finalframeforviewcontroller
    finalFrameForViewController(vc: cocoascript.UIViewController):cocoascript.CGRect;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollercontexttransitioning/2097569-animated
    animated(): cocoascript.BOOL;
    setAnimated(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollercontexttransitioning/2097570-interactive
    interactive(): cocoascript.BOOL;
    setInteractive(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollercontexttransitioning/1622049-presentationstyle
    presentationStyle(): cocoascript.UIModalPresentationStyle;
    setPresentationStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollercontexttransitioning/1622042-completetransition
    completeTransition(didComplete: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollercontexttransitioning/1622025-updateinteractivetransition
    updateInteractiveTransition(percentComplete: cocoascript.CGFloat):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollercontexttransitioning/1829437-pauseinteractivetransition
    pauseInteractiveTransition():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollercontexttransitioning/1622056-finishinteractivetransition
    finishInteractiveTransition():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollercontexttransitioning/1622038-cancelinteractivetransition
    cancelInteractiveTransition():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollercontexttransitioning/1622039-transitionwascancelled
    transitionWasCancelled(): cocoascript.BOOL;
    setTransitionWasCancelled(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollercontexttransitioning/1622036-targettransform
    targetTransform(): cocoascript.CGAffineTransform;
    setTargetTransform(): void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that enable an object (such as a navigation controller) to drive a view controller transition.
   * doc://com.apple.documentation/documentation/uikit/uiviewcontrollerinteractivetransitioning
   */
  interface UIViewControllerInteractiveTransitioning extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollerinteractivetransitioning/1622028-startinteractivetransition
    startInteractiveTransition(transitionContext: cocoascript.UIViewControllerContextTransitioning):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollerinteractivetransitioning/1829433-wantsinteractivestart
    wantsInteractiveStart(): cocoascript.BOOL;
    setWantsInteractiveStart(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollerinteractivetransitioning/1622027-completioncurve
    completionCurve(): cocoascript.UIViewAnimationCurve;
    setCompletionCurve(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollerinteractivetransitioning/1622031-completionspeed
    completionSpeed(): cocoascript.CGFloat;
    setCompletionSpeed(): void;
  }
}
declare namespace cocoascript {
  /**
   * An interface for specifying output from a focus debugger object.
   * doc://com.apple.documentation/documentation/uikit/uifocusdebuggeroutput
   */
  interface UIFocusDebuggerOutput extends NSObject {
  }
}
declare namespace cocoascript {
  /**
   * The protocol you implement to provide additional information to, and receive notifications from, the CloudKit sharing controller.
   * doc://com.apple.documentation/documentation/uikit/uicloudsharingcontrollerdelegate
   */
  interface UICloudSharingControllerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicloudsharingcontrollerdelegate/2274280-itemtitleforcloudsharingcontroll
    itemTitleForCloudSharingController(csc: cocoascript.UICloudSharingController):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uicloudsharingcontrollerdelegate/2274281-itemtypeforcloudsharingcontrolle
    itemTypeForCloudSharingController(csc: cocoascript.UICloudSharingController):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uicloudsharingcontrollerdelegate/2274282-itemthumbnaildataforcloudsharing
    itemThumbnailDataForCloudSharingController(csc: cocoascript.UICloudSharingController):cocoascript.NSData;
    // doc://com.apple.documentation/documentation/uikit/uicloudsharingcontrollerdelegate/1649606-cloudsharingcontroller
    cloudSharingController_failedToSaveShareWithError(csc: cocoascript.UICloudSharingController, error: cocoascript.NSError):void;
    // doc://com.apple.documentation/documentation/uikit/uicloudsharingcontrollerdelegate/1649604-cloudsharingcontrollerdidstopsha
    cloudSharingControllerDidStopSharing(csc: cocoascript.UICloudSharingController):void;
    // doc://com.apple.documentation/documentation/uikit/uicloudsharingcontrollerdelegate/1649605-cloudsharingcontrollerdidsavesha
    cloudSharingControllerDidSaveShare(csc: cocoascript.UICloudSharingController):void;
  }
}
declare namespace cocoascript {
  /**
   * The data associated with an item being dropped into the table view.
   * doc://com.apple.documentation/documentation/uikit/uitableviewdropitem
   */
  interface UITableViewDropItem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropitem/2897402-dragitem
    dragItem(): cocoascript.UIDragItem;
    setDragItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropitem/2897464-previewsize
    previewSize(): cocoascript.CGSize;
    setPreviewSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropitem/2897479-sourceindexpath
    sourceIndexPath(): cocoascript.NSIndexPath;
    setSourceIndexPath(): void;
  }
}
declare namespace cocoascript {
  /**
   * Methods for managing selections, configuring section headers and footers, deleting and reordering cells, and performing other actions in a table view.
   * doc://com.apple.documentation/documentation/uikit/uitableviewdelegate
   */
  interface UITableViewDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614883-tableview
    tableView_willDisplayCell_forRowAtIndexPath(tableView: cocoascript.UITableView, cell: cocoascript.UITableViewCell, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614966-tableview
    tableView_indentationLevelForRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/2897335-tableview
    tableView_shouldSpringLoadRowAtIndexPath_withContext(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath, context: cocoascript.UISpringLoadedInteractionContext):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614943-tableview
    tableView_willSelectRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614877-tableview
    tableView_didSelectRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614977-tableview
    tableView_willDeselectRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614916-tableview
    tableView_didDeselectRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/3183943-tableview
    tableView_shouldBeginMultipleSelectionInteractionAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/3183942-tableview
    tableView_didBeginMultipleSelectionInteractionAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/3183944-tableviewdidendmultipleselection
    tableViewDidEndMultipleSelectionInteraction(tableView: cocoascript.UITableView):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614901-tableview
    tableView_viewForHeaderInSection(tableView: cocoascript.UITableView, section: cocoascript.NSInteger):cocoascript.UIView;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614946-tableview
    tableView_viewForFooterInSection(tableView: cocoascript.UITableView, section: cocoascript.NSInteger):cocoascript.UIView;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614905-tableview
    tableView_willDisplayHeaderView_forSection(tableView: cocoascript.UITableView, view: cocoascript.UIView, section: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614941-tableview
    tableView_willDisplayFooterView_forSection(tableView: cocoascript.UITableView, view: cocoascript.UIView, section: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614998-tableview
    tableView_heightForRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614855-tableview
    tableView_heightForHeaderInSection(tableView: cocoascript.UITableView, section: cocoascript.NSInteger):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614967-tableview
    tableView_heightForFooterInSection(tableView: cocoascript.UITableView, section: cocoascript.NSInteger):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614926-tableview
    tableView_estimatedHeightForRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614854-tableview
    tableView_estimatedHeightForHeaderInSection(tableView: cocoascript.UITableView, section: cocoascript.NSInteger):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614939-tableview
    tableView_estimatedHeightForFooterInSection(tableView: cocoascript.UITableView, section: cocoascript.NSInteger):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614948-tableview
    tableView_accessoryTypeForRowWithIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.UITableViewCellAccessoryType;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614996-tableview
    tableView_accessoryButtonTappedForRowWithIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/3295956-tableview
    tableView_contextMenuConfigurationForRowAtIndexPath_point(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath, point: cocoascript.CGPoint):cocoascript.UIContextMenuConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/3295957-tableview
    tableView_previewForDismissingContextMenuWithConfiguration(tableView: cocoascript.UITableView, configuration: cocoascript.UIContextMenuConfiguration):cocoascript.UITargetedPreview;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/3295958-tableview
    tableView_previewForHighlightingContextMenuWithConfiguration(tableView: cocoascript.UITableView, configuration: cocoascript.UIContextMenuConfiguration):cocoascript.UITargetedPreview;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/3601231-tableview
    tableView_willDisplayContextMenuWithConfiguration_animator(tableView: cocoascript.UITableView, configuration: cocoascript.UIContextMenuConfiguration, animator: cocoascript.UIContextMenuInteractionAnimating):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/3601232-tableview
    tableView_willEndContextMenuInteractionWithConfiguration_animator(tableView: cocoascript.UITableView, configuration: cocoascript.UIContextMenuConfiguration, animator: cocoascript.UIContextMenuInteractionAnimating):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/3375810-tableview
    tableView_willPerformPreviewActionForMenuWithConfiguration_animator(tableView: cocoascript.UITableView, configuration: cocoascript.UIContextMenuConfiguration, animator: cocoascript.UIContextMenuInteractionCommitAnimating):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/2902366-tableview
    tableView_leadingSwipeActionsConfigurationForRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.UISwipeActionsConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/2902367-tableview
    tableView_trailingSwipeActionsConfigurationForRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.UISwipeActionsConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614950-tableview
    tableView_shouldShowMenuForRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614898-tableview
    tableView_canPerformAction_forRowAtIndexPath_withSender(tableView: cocoascript.UITableView, action: cocoascript.SEL, indexPath: cocoascript.NSIndexPath, sender: cocoascript.UITableViewDelegate):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614980-tableview
    tableView_performAction_forRowAtIndexPath_withSender(tableView: cocoascript.UITableView, action: cocoascript.SEL, indexPath: cocoascript.NSIndexPath, sender: cocoascript.UITableViewDelegate):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614956-tableview
    tableView_editActionsForRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.UITableViewRowAction;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614988-tableview
    tableView_shouldHighlightRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614982-tableview
    tableView_didHighlightRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614868-tableview
    tableView_didUnhighlightRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614907-tableview
    tableView_willBeginEditingRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614963-tableview
    tableView_didEndEditingRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614869-tableview
    tableView_editingStyleForRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.UITableViewCellEditingStyle;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614970-tableview
    tableView_titleForDeleteConfirmationButtonForRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.NSString;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614873-tableview
    tableView_shouldIndentWhileEditingRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614953-tableview
    tableView_targetIndexPathForMoveFromRowAtIndexPath_toProposedIndexPath(tableView: cocoascript.UITableView, sourceIndexPath: cocoascript.NSIndexPath, proposedDestinationIndexPath: cocoascript.NSIndexPath):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614870-tableview
    tableView_didEndDisplayingCell_forRowAtIndexPath(tableView: cocoascript.UITableView, cell: cocoascript.UITableViewCell, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614971-tableview
    tableView_didEndDisplayingHeaderView_forSection(tableView: cocoascript.UITableView, view: cocoascript.UIView, section: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614856-tableview
    tableView_didEndDisplayingFooterView_forSection(tableView: cocoascript.UITableView, view: cocoascript.UIView, section: cocoascript.NSInteger):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614973-tableview
    tableView_canFocusRowAtIndexPath(tableView: cocoascript.UITableView, indexPath: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614949-tableview
    tableView_shouldUpdateFocusInContext(tableView: cocoascript.UITableView, context: cocoascript.UITableViewFocusUpdateContext):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614945-tableview
    tableView_didUpdateFocusInContext_withAnimationCoordinator(tableView: cocoascript.UITableView, context: cocoascript.UITableViewFocusUpdateContext, coordinator: cocoascript.UIFocusAnimationCoordinator):void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdelegate/1614929-indexpathforpreferredfocusedview
    indexPathForPreferredFocusedViewInTableView(tableView: cocoascript.UITableView):cocoascript.NSIndexPath;
  }
}
declare namespace cocoascript {
  /**
   * An interface for implementing custom animator objects.
   * doc://com.apple.documentation/documentation/uikit/uiviewanimating
   */
  interface UIViewAnimating extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiviewanimating/1649786-startanimation
    startAnimation():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewanimating/2097540-startanimationafterdelay
    startAnimationAfterDelay(delay: cocoascript.NSTimeInterval):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewanimating/1649843-pauseanimation
    pauseAnimation():void;
    // doc://com.apple.documentation/documentation/uikit/uiviewanimating/1649750-stopanimation
    stopAnimation(withoutFinishing: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewanimating/1649796-finishanimationatposition
    finishAnimationAtPosition(finalPosition: cocoascript.UIViewAnimatingPosition):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewanimating/1649787-fractioncomplete
    fractionComplete(): cocoascript.CGFloat;
    setFractionComplete(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewanimating/1649804-reversed
    reversed(): cocoascript.BOOL;
    setReversed(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewanimating/1649743-state
    state(): cocoascript.UIViewAnimatingState;
    setState(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewanimating/1649785-running
    running(): cocoascript.BOOL;
    setRunning(): void;
  }
}
declare namespace cocoascript {
  /**
   * A protocol that provides advance warning of the data requirements for a collection view, allowing the triggering of asynchronous data load operations.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewdatasourceprefetching
   */
  interface UICollectionViewDataSourcePrefetching extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdatasourceprefetching/1771767-collectionview
    collectionView_prefetchItemsAtIndexPaths(collectionView: cocoascript.UICollectionView, indexPaths: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdatasourceprefetching/1771769-collectionview
    collectionView_cancelPrefetchingForItemsAtIndexPaths(collectionView: cocoascript.UICollectionView, indexPaths: cocoascript.NSIndexPath):void;
  }
}
declare namespace cocoascript {
  /**
   * The interface for configuring a text view’s drop behavior.
   * doc://com.apple.documentation/documentation/uikit/uitextdropdelegate
   */
  interface UITextDropDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextdropdelegate/2890851-textdroppableview
    textDroppableView_proposalForDrop(textDroppableView: cocoascript.UITextDroppable, drop: cocoascript.UITextDropRequest):cocoascript.UITextDropProposal;
    // doc://com.apple.documentation/documentation/uikit/uitextdropdelegate/2890856-textdroppableview
    textDroppableView_willBecomeEditableForDrop(textDroppableView: cocoascript.UITextDroppable, drop: cocoascript.UITextDropRequest):cocoascript.UITextDropEditability;
    // doc://com.apple.documentation/documentation/uikit/uitextdropdelegate/2890850-textdroppableview
    textDroppableView_dropSessionDidEnter(textDroppableView: cocoascript.UITextDroppable, session: cocoascript.UIDropSession):void;
    // doc://com.apple.documentation/documentation/uikit/uitextdropdelegate/2890854-textdroppableview
    textDroppableView_dropSessionDidExit(textDroppableView: cocoascript.UITextDroppable, session: cocoascript.UIDropSession):void;
    // doc://com.apple.documentation/documentation/uikit/uitextdropdelegate/2890861-textdroppableview
    textDroppableView_dropSessionDidUpdate(textDroppableView: cocoascript.UITextDroppable, session: cocoascript.UIDropSession):void;
    // doc://com.apple.documentation/documentation/uikit/uitextdropdelegate/2890857-textdroppableview
    textDroppableView_dropSessionDidEnd(textDroppableView: cocoascript.UITextDroppable, session: cocoascript.UIDropSession):void;
    // doc://com.apple.documentation/documentation/uikit/uitextdropdelegate/2890858-textdroppableview
    textDroppableView_willPerformDrop(textDroppableView: cocoascript.UITextDroppable, drop: cocoascript.UITextDropRequest):void;
    // doc://com.apple.documentation/documentation/uikit/uitextdropdelegate/2909033-textdroppableview
    textDroppableView_previewForDroppingAllItemsWithDefault(textDroppableView: cocoascript.UITextDroppable, defaultPreview: cocoascript.UITargetedDragPreview):cocoascript.UITargetedDragPreview;
  }
}
declare namespace cocoascript {
  /**
   * The protocol you implement to respond as the user interacts with the document browser.
   * doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontrollerdelegate
   */
  interface UIDocumentBrowserViewControllerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontrollerdelegate/2874199-documentbrowser
    documentBrowser_didRequestDocumentCreationWithHandler(controller: cocoascript.UIDocumentBrowserViewController, importHandler: cocoascript.UIDocumentBrowserImportMode):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontrollerdelegate/2874196-documentbrowser
    documentBrowser_didImportDocumentAtURL_toDestinationURL(controller: cocoascript.UIDocumentBrowserViewController, sourceURL: cocoascript.NSURL, destinationURL: cocoascript.NSURL):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontrollerdelegate/2874190-documentbrowser
    documentBrowser_failedToImportDocumentAtURL_error(controller: cocoascript.UIDocumentBrowserViewController, documentURL: cocoascript.NSURL, error: cocoascript.NSError):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontrollerdelegate/3019588-documentbrowser
    documentBrowser_didPickDocumentsAtURLs(controller: cocoascript.UIDocumentBrowserViewController, documentURLs: cocoascript.NSURL):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontrollerdelegate/2874186-documentbrowser
    documentBrowser_willPresentActivityViewController(controller: cocoascript.UIDocumentBrowserViewController, activityViewController: cocoascript.UIActivityViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontrollerdelegate/2874194-documentbrowser
    documentBrowser_applicationActivitiesForDocumentURLs(controller: cocoascript.UIDocumentBrowserViewController, documentURLs: cocoascript.NSURL):cocoascript.UIActivity;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserviewcontrollerdelegate/2874187-documentbrowser
    documentBrowser_didPickDocumentURLs(controller: cocoascript.UIDocumentBrowserViewController, documentURLs: cocoascript.NSURL):void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods for implementing the animations for a custom view controller transition.
   * doc://com.apple.documentation/documentation/uikit/uiviewcontrolleranimatedtransitioning
   */
  interface UIViewControllerAnimatedTransitioning extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrolleranimatedtransitioning/1622061-animatetransition
    animateTransition(transitionContext: cocoascript.UIViewControllerContextTransitioning):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrolleranimatedtransitioning/1622059-animationended
    animationEnded(transitionCompleted: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrolleranimatedtransitioning/1622032-transitionduration
    transitionDuration(transitionContext: cocoascript.UIViewControllerContextTransitioning):cocoascript.NSTimeInterval;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrolleranimatedtransitioning/1829434-interruptibleanimatorfortransiti
    interruptibleAnimatorForTransition(transitionContext: cocoascript.UIViewControllerContextTransitioning):cocoascript.UIViewImplicitlyAnimating;
  }
}
declare namespace cocoascript {
  /**
   * A protocol used to provide information about the layout's container and environment traits, such as size classes and display scale factor.
   * doc://com.apple.documentation/documentation/uikit/nscollectionlayoutenvironment
   */
  interface NSCollectionLayoutEnvironment extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutenvironment/3199073-container
    container(): cocoascript.NSCollectionLayoutContainer;
    setContainer(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutenvironment/3199074-traitcollection
    traitCollection(): cocoascript.UITraitCollection;
    setTraitCollection(): void;
  }
}
declare namespace cocoascript {
  /**
   * Use a navigation controller delegate (a custom object that implements this protocol) to modify behavior when a view controller is pushed or popped from the navigation stack of a
   * doc://com.apple.documentation/documentation/uikit/uinavigationcontrollerdelegate
   */
  interface UINavigationControllerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontrollerdelegate/1621878-navigationcontroller
    navigationController_willShowViewController_animated(navigationController: cocoascript.UINavigationController, viewController: cocoascript.UIViewController, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontrollerdelegate/1621848-navigationcontroller
    navigationController_didShowViewController_animated(navigationController: cocoascript.UINavigationController, viewController: cocoascript.UIViewController, animated: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontrollerdelegate/1621846-navigationcontroller
    navigationController_animationControllerForOperation_fromViewController_toViewController(navigationController: cocoascript.UINavigationController, operation: cocoascript.UINavigationControllerOperation, fromVC: cocoascript.UIViewController, toVC: cocoascript.UIViewController):cocoascript.UIViewControllerAnimatedTransitioning;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontrollerdelegate/1621880-navigationcontroller
    navigationController_interactionControllerForAnimationController(navigationController: cocoascript.UINavigationController, animationController: cocoascript.UIViewControllerAnimatedTransitioning):cocoascript.UIViewControllerInteractiveTransitioning;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontrollerdelegate/1621864-navigationcontrollerpreferredint
    navigationControllerPreferredInterfaceOrientationForPresentation(navigationController: cocoascript.UINavigationController):cocoascript.UIInterfaceOrientation;
    // doc://com.apple.documentation/documentation/uikit/uinavigationcontrollerdelegate/1621884-navigationcontrollersupportedint
    navigationControllerSupportedInterfaceOrientations(navigationController: cocoascript.UINavigationController):cocoascript.UIInterfaceOrientationMask;
  }
}
declare namespace cocoascript {
  /**
   * The
   * doc://com.apple.documentation/documentation/uikit/uitabbardelegate
   */
  interface UITabBarDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitabbardelegate/1623451-tabbar
    tabBar_willBeginCustomizingItems(tabBar: cocoascript.UITabBar, items: cocoascript.UITabBarItem):void;
    // doc://com.apple.documentation/documentation/uikit/uitabbardelegate/1623471-tabbar
    tabBar_didBeginCustomizingItems(tabBar: cocoascript.UITabBar, items: cocoascript.UITabBarItem):void;
    // doc://com.apple.documentation/documentation/uikit/uitabbardelegate/1623464-tabbar
    tabBar_willEndCustomizingItems_changed(tabBar: cocoascript.UITabBar, items: cocoascript.UITabBarItem, changed: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uitabbardelegate/1623447-tabbar
    tabBar_didEndCustomizingItems_changed(tabBar: cocoascript.UITabBar, items: cocoascript.UITabBarItem, changed: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uitabbardelegate/1623463-tabbar
    tabBar_didSelectItem(tabBar: cocoascript.UITabBar, item: cocoascript.UITabBarItem):void;
  }
}
declare namespace cocoascript {
  /**
   * The interface for obtaining information about, and interacting with, a text item for pasting or dropping.
   * doc://com.apple.documentation/documentation/uikit/uitextpasteitem
   */
  interface UITextPasteItem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextpasteitem/2887489-itemprovider
    itemProvider(): cocoascript.NSItemProvider;
    setItemProvider(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextpasteitem/2887485-localobject
    localObject(): cocoascript.id;
    setLocalObject(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextpasteitem/2887486-defaultattributes
    defaultAttributes(): cocoascript.id;
    setDefaultAttributes(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextpasteitem/2887487-setstringresult
    setStringResult(string: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uitextpasteitem/2887482-setattributedstringresult
    setAttributedStringResult(string: cocoascript.NSAttributedString):void;
    // doc://com.apple.documentation/documentation/uikit/uitextpasteitem/2887484-setattachmentresult
    setAttachmentResult(textAttachment: cocoascript.NSTextAttachment):void;
    // doc://com.apple.documentation/documentation/uikit/uitextpasteitem/2919974-setdefaultresult
    setDefaultResult():void;
    // doc://com.apple.documentation/documentation/uikit/uitextpasteitem/2887491-setnoresult
    setNoResult():void;
  }
}
declare namespace cocoascript {
  /**
   * The requirements for a content view that you create using a configuration.
   * doc://com.apple.documentation/documentation/uikit/uicontentview
   */
  interface UIContentView extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicontentview/3600489-configuration
    configuration(): cocoascript.UIContentConfiguration;
    setConfiguration(): void;
  }
}
declare namespace cocoascript {
  /**
   * An interface for coordinating your custom drop-related actions with the table view.
   * doc://com.apple.documentation/documentation/uikit/uitableviewdropcoordinator
   */
  interface UITableViewDropCoordinator extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropcoordinator/2897439-items
    items(): cocoascript.UITableViewDropItem;
    setItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropcoordinator/2897496-destinationindexpath
    destinationIndexPath(): cocoascript.NSIndexPath;
    setDestinationIndexPath(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropcoordinator/2897301-dropitem
    dropItem_toRowAtIndexPath(dragItem: cocoascript.UIDragItem, indexPath: cocoascript.NSIndexPath):cocoascript.UIDragAnimating;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropcoordinator/2909061-dropitem
    dropItem_intoRowAtIndexPath_rect(dragItem: cocoascript.UIDragItem, indexPath: cocoascript.NSIndexPath, rect: cocoascript.CGRect):cocoascript.UIDragAnimating;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropcoordinator/2897290-dropitem
    dropItem_toTarget(dragItem: cocoascript.UIDragItem, target: cocoascript.UIDragPreviewTarget):cocoascript.UIDragAnimating;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropcoordinator/2921667-dropitem
    dropItem_toPlaceholder(dragItem: cocoascript.UIDragItem, placeholder: cocoascript.UITableViewDropPlaceholder):cocoascript.UITableViewDropPlaceholderContext;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropcoordinator/2897324-session
    session(): cocoascript.UIDropSession;
    setSession(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropcoordinator/2897451-proposal
    proposal(): cocoascript.UITableViewDropProposal;
    setProposal(): void;
  }
}
declare namespace cocoascript {
  /**
   * A protocol used to provide information about the size and content insets of a layout's container.
   * doc://com.apple.documentation/documentation/uikit/nscollectionlayoutcontainer
   */
  interface NSCollectionLayoutContainer extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutcontainer/3199047-contentsize
    contentSize(): cocoascript.CGSize;
    setContentSize(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutcontainer/3199049-effectivecontentsize
    effectiveContentSize(): cocoascript.CGSize;
    setEffectiveContentSize(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutcontainer/3199046-contentinsets
    contentInsets(): cocoascript.NSDirectionalEdgeInsets;
    setContentInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutcontainer/3199048-effectivecontentinsets
    effectiveContentInsets(): cocoascript.NSDirectionalEdgeInsets;
    setEffectiveContentInsets(): void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that you implement to track when the user selects a document or destination, or to track when the operation is canceled.
   * doc://com.apple.documentation/documentation/uikit/uidocumentpickerdelegate
   */
  interface UIDocumentPickerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerdelegate/2902364-documentpicker
    documentPicker_didPickDocumentsAtURLs(controller: cocoascript.UIDocumentPickerViewController, urls: cocoascript.NSURL):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerdelegate/1618679-documentpickerwascancelled
    documentPickerWasCancelled(controller: cocoascript.UIDocumentPickerViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentpickerdelegate/1618680-documentpicker
    documentPicker_didPickDocumentAtURL(controller: cocoascript.UIDocumentPickerViewController, url: cocoascript.NSURL):void;
  }
}
declare namespace cocoascript {
  /**
   * The methods declared by the
   * doc://com.apple.documentation/documentation/uikit/uiscrollviewdelegate
   */
  interface UIScrollViewDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiscrollviewdelegate/1619392-scrollviewdidscroll
    scrollViewDidScroll(scrollView: cocoascript.UIScrollView):void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollviewdelegate/1619394-scrollviewwillbegindragging
    scrollViewWillBeginDragging(scrollView: cocoascript.UIScrollView):void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollviewdelegate/1619385-scrollviewwillenddragging
    scrollViewWillEndDragging_withVelocity_targetContentOffset(scrollView: cocoascript.UIScrollView, velocity: cocoascript.CGPoint, targetContentOffset: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollviewdelegate/1619436-scrollviewdidenddragging
    scrollViewDidEndDragging_willDecelerate(scrollView: cocoascript.UIScrollView, decelerate: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollviewdelegate/1619378-scrollviewshouldscrolltotop
    scrollViewShouldScrollToTop(scrollView: cocoascript.UIScrollView):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiscrollviewdelegate/1619382-scrollviewdidscrolltotop
    scrollViewDidScrollToTop(scrollView: cocoascript.UIScrollView):void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollviewdelegate/1619386-scrollviewwillbegindecelerating
    scrollViewWillBeginDecelerating(scrollView: cocoascript.UIScrollView):void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollviewdelegate/1619417-scrollviewdidenddecelerating
    scrollViewDidEndDecelerating(scrollView: cocoascript.UIScrollView):void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollviewdelegate/1619426-viewforzoominginscrollview
    viewForZoomingInScrollView(scrollView: cocoascript.UIScrollView):cocoascript.UIView;
    // doc://com.apple.documentation/documentation/uikit/uiscrollviewdelegate/1619396-scrollviewwillbeginzooming
    scrollViewWillBeginZooming_withView(scrollView: cocoascript.UIScrollView, view: cocoascript.UIView):void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollviewdelegate/1619407-scrollviewdidendzooming
    scrollViewDidEndZooming_withView_atScale(scrollView: cocoascript.UIScrollView, view: cocoascript.UIView, scale: cocoascript.CGFloat):void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollviewdelegate/1619409-scrollviewdidzoom
    scrollViewDidZoom(scrollView: cocoascript.UIScrollView):void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollviewdelegate/1619379-scrollviewdidendscrollinganimati
    scrollViewDidEndScrollingAnimation(scrollView: cocoascript.UIScrollView):void;
    // doc://com.apple.documentation/documentation/uikit/uiscrollviewdelegate/2902256-scrollviewdidchangeadjustedconte
    scrollViewDidChangeAdjustedContentInset(scrollView: cocoascript.UIScrollView):void;
  }
}
declare namespace cocoascript {
  /**
   * The interface for specifying the attributes of a drop request for a text view.
   * doc://com.apple.documentation/documentation/uikit/uitextdroprequest
   */
  interface UITextDropRequest extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextdroprequest/2890859-dropposition
    dropPosition(): cocoascript.UITextPosition;
    setDropPosition(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdroprequest/2890844-sameview
    sameView(): cocoascript.BOOL;
    setSameView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdroprequest/2890845-suggestedproposal
    suggestedProposal(): cocoascript.UITextDropProposal;
    setSuggestedProposal(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdroprequest/2890853-dropsession
    dropSession(): cocoascript.UIDropSession;
    setDropSession(): void;
  }
}
declare namespace cocoascript {
  /**
   * The requirements for an object that encapsulates a view’s state.
   * doc://com.apple.documentation/documentation/uikit/uiconfigurationstate
   */
  interface UIConfigurationState extends NSCopying {
    // doc://com.apple.documentation/documentation/uikit/uiconfigurationstate/3600978-traitcollection
    traitCollection(): cocoascript.UITraitCollection;
    setTraitCollection(): void;
    // doc://com.apple.documentation/documentation/uikit/uiconfigurationstate/3600478-customstateforkey
    customStateForKey(key: cocoascript.UIConfigurationStateCustomKey):cocoascript.UIConfigurationState;
    // doc://com.apple.documentation/documentation/uikit/uiconfigurationstate/3600481-setcustomstate
    setCustomState_forKey(customState: cocoascript.UIConfigurationState, key: cocoascript.UIConfigurationStateCustomKey):void;
    // doc://com.apple.documentation/documentation/uikit/uiconfigurationstate/3600480-objectforkeyedsubscript
    objectForKeyedSubscript(key: cocoascript.UIConfigurationStateCustomKey):cocoascript.UIConfigurationState;
    // doc://com.apple.documentation/documentation/uikit/uiconfigurationstate/3600482-setobject
    setObject_forKeyedSubscript(obj: cocoascript.UIConfigurationState, key: cocoascript.UIConfigurationStateCustomKey):void;
    // doc://com.apple.documentation/documentation/uikit/uiconfigurationstate/3600479-initwithtraitcollection
    initWithTraitCollection(traitCollection: cocoascript.UITraitCollection):cocoascript.UIConfigurationState;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that you must implement to track user interactions with a document menu view controller.
   * doc://com.apple.documentation/documentation/uikit/uidocumentmenudelegate
   */
  interface UIDocumentMenuDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidocumentmenudelegate/1614188-documentmenu
    documentMenu_didPickDocumentPicker(documentMenu: cocoascript.UIDocumentMenuViewController, documentPicker: cocoascript.UIDocumentPickerViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentmenudelegate/1614190-documentmenuwascancelled
    documentMenuWasCancelled(documentMenu: cocoascript.UIDocumentMenuViewController):void;
  }
}
declare namespace cocoascript {
  /**
   * A selectable search parameter.
   * doc://com.apple.documentation/documentation/uikit/uisearchsuggestion
   */
  interface UISearchSuggestion extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uisearchsuggestion/3584826-localizedsuggestion
    localizedSuggestion(): cocoascript.NSString;
    setLocalizedSuggestion(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchsuggestion/3584825-localizeddescription
    localizedDescription(): cocoascript.NSString;
    setLocalizedDescription(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchsuggestion/3584824-iconimage
    iconImage(): cocoascript.UIImage;
    setIconImage(): void;
  }
}
declare namespace cocoascript {
  /**
   * A single action to present when the user swipes horizontally in a table row.
   * doc://com.apple.documentation/documentation/uikit/uitableviewrowaction
   */
  interface UITableViewRowAction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitableviewrowaction/1614887-style
    style(): cocoascript.UITableViewRowActionStyle;
    setStyle(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewrowaction/1614993-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewrowaction/1614995-backgroundcolor
    backgroundColor(): cocoascript.UIColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewrowaction/1614990-backgroundeffect
    backgroundEffect(): cocoascript.UIVisualEffect;
    setBackgroundEffect(): void;
    //
    alloc():cocoascript.UITableViewRowAction;
    //
    init():cocoascript.UITableViewRowAction;
  }
}

declare const UITableViewRowAction: cocoascript.UITableViewRowAction;
declare namespace cocoascript {
  /**
   * A layout object that manages the layout-related attributes for a given item in a collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutattributes
   */
  interface UICollectionViewLayoutAttributes extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutattributes/1617776-indexpath
    indexPath(): cocoascript.NSIndexPath;
    setIndexPath(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutattributes/1617738-representedelementcategory
    representedElementCategory(): cocoascript.UICollectionElementCategory;
    setRepresentedElementCategory(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutattributes/1617806-representedelementkind
    representedElementKind(): cocoascript.NSString;
    setRepresentedElementKind(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutattributes/1617753-frame
    frame(): cocoascript.CGRect;
    setFrame(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutattributes/1617782-bounds
    bounds(): cocoascript.CGRect;
    setBounds(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutattributes/1617735-center
    center(): cocoascript.CGPoint;
    setCenter(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutattributes/1617733-size
    size(): cocoascript.CGSize;
    setSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutattributes/1617764-transform3d
    transform3D(): cocoascript.CATransform3D;
    setTransform3D(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutattributes/1617779-transform
    transform(): cocoascript.CGAffineTransform;
    setTransform(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutattributes/1617743-alpha
    alpha(): cocoascript.CGFloat;
    setAlpha(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutattributes/1617768-zindex
    zIndex(): cocoascript.NSInteger;
    setZIndex(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutattributes/1617799-hidden
    hidden(): cocoascript.BOOL;
    setHidden(): void;
    //
    alloc():cocoascript.UICollectionViewLayoutAttributes;
    //
    init():cocoascript.UICollectionViewLayoutAttributes;
  }
}

declare const UICollectionViewLayoutAttributes: cocoascript.UICollectionViewLayoutAttributes;
declare namespace cocoascript {
  /**
   * A proposed configuration for the behavior of a text drop interaction.
   * doc://com.apple.documentation/documentation/uikit/uitextdropproposal
   */
  interface UITextDropProposal extends UIDropProposal {
    // doc://com.apple.documentation/documentation/uikit/uitextdropproposal/2891037-dropaction
    dropAction(): cocoascript.UITextDropAction;
    setDropAction(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdropproposal/2919992-dropperformer
    dropPerformer(): cocoascript.UITextDropPerformer;
    setDropPerformer(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdropproposal/2890989-dropprogressmode
    dropProgressMode(): cocoascript.UITextDropProgressMode;
    setDropProgressMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdropproposal/2891034-usefastsameviewoperations
    useFastSameViewOperations(): cocoascript.BOOL;
    setUseFastSameViewOperations(): void;
    //
    alloc():cocoascript.UITextDropProposal;
    //
    init():cocoascript.UITextDropProposal;
  }
}

declare const UITextDropProposal: cocoascript.UITextDropProposal;
declare namespace cocoascript {
  /**
   * A class that represents password rules for a text input field.
   * doc://com.apple.documentation/documentation/uikit/uitextinputpasswordrules
   */
  interface UITextInputPasswordRules extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextinputpasswordrules/2980932-passwordrulesdescriptor
    passwordRulesDescriptor(): cocoascript.NSString;
    setPasswordRulesDescriptor(): void;
    //
    alloc():cocoascript.UITextInputPasswordRules;
    //
    init():cocoascript.UITextInputPasswordRules;
  }
}

declare const UITextInputPasswordRules: cocoascript.UITextInputPasswordRules;
declare namespace cocoascript {
  /**
   * An object that defines how to attach a supplementary item to an item in a collection view.
   * doc://com.apple.documentation/documentation/uikit/nscollectionlayoutanchor
   */
  interface NSCollectionLayoutAnchor extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutanchor/3199030-edges
    edges(): cocoascript.NSDirectionalRectEdge;
    setEdges(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutanchor/3199037-offset
    offset(): cocoascript.CGPoint;
    setOffset(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutanchor/3213811-isabsoluteoffset
    isAbsoluteOffset(): cocoascript.BOOL;
    setIsAbsoluteOffset(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutanchor/3213812-isfractionaloffset
    isFractionalOffset(): cocoascript.BOOL;
    setIsFractionalOffset(): void;
    //
    alloc():cocoascript.NSCollectionLayoutAnchor;
    //
    init():cocoascript.NSCollectionLayoutAnchor;
  }
}

declare const NSCollectionLayoutAnchor: cocoascript.NSCollectionLayoutAnchor;
declare namespace cocoascript {
  /**
   * An object used to add headers or footers to a collection view.
   * doc://com.apple.documentation/documentation/uikit/nscollectionlayoutboundarysupplementaryitem
   */
  interface NSCollectionLayoutBoundarySupplementaryItem extends NSCollectionLayoutSupplementaryItem {
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutboundarysupplementaryitem/3199044-pintovisiblebounds
    pinToVisibleBounds(): cocoascript.BOOL;
    setPinToVisibleBounds(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutboundarysupplementaryitem/3199043-offset
    offset(): cocoascript.CGPoint;
    setOffset(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutboundarysupplementaryitem/3199039-alignment
    alignment(): cocoascript.NSRectAlignment;
    setAlignment(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutboundarysupplementaryitem/3199040-extendsboundary
    extendsBoundary(): cocoascript.BOOL;
    setExtendsBoundary(): void;
    //
    alloc():cocoascript.NSCollectionLayoutBoundarySupplementaryItem;
    //
    init():cocoascript.NSCollectionLayoutBoundarySupplementaryItem;
  }
}

declare const NSCollectionLayoutBoundarySupplementaryItem: cocoascript.NSCollectionLayoutBoundarySupplementaryItem;
declare namespace cocoascript {
  /**
   * An object used to add a background to a section of a collection view.
   * doc://com.apple.documentation/documentation/uikit/nscollectionlayoutdecorationitem
   */
  interface NSCollectionLayoutDecorationItem extends NSCollectionLayoutItem {
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutdecorationitem/3213831-elementkind
    elementKind(): cocoascript.NSString;
    setElementKind(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutdecorationitem/3199053-zindex
    zIndex(): cocoascript.NSInteger;
    setZIndex(): void;
    //
    alloc():cocoascript.NSCollectionLayoutDecorationItem;
    //
    init():cocoascript.NSCollectionLayoutDecorationItem;
  }
}

declare const NSCollectionLayoutDecorationItem: cocoascript.NSCollectionLayoutDecorationItem;
declare namespace cocoascript {
  /**
   * An individual dimension of an item's size (width or height) in a collection view.
   * doc://com.apple.documentation/documentation/uikit/nscollectionlayoutdimension
   */
  interface NSCollectionLayoutDimension extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutdimension/3199056-dimension
    dimension(): cocoascript.CGFloat;
    setDimension(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutdimension/3199060-isabsolute
    isAbsolute(): cocoascript.BOOL;
    setIsAbsolute(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutdimension/3199061-isestimated
    isEstimated(): cocoascript.BOOL;
    setIsEstimated(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutdimension/3199062-isfractionalheight
    isFractionalHeight(): cocoascript.BOOL;
    setIsFractionalHeight(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutdimension/3199063-isfractionalwidth
    isFractionalWidth(): cocoascript.BOOL;
    setIsFractionalWidth(): void;
    //
    alloc():cocoascript.NSCollectionLayoutDimension;
    //
    init():cocoascript.NSCollectionLayoutDimension;
  }
}

declare const NSCollectionLayoutDimension: cocoascript.NSCollectionLayoutDimension;
declare namespace cocoascript {
  /**
   * An object that defines the space around the edges of items in a collection view.
   * doc://com.apple.documentation/documentation/uikit/nscollectionlayoutedgespacing
   */
  interface NSCollectionLayoutEdgeSpacing extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutedgespacing/3199069-leading
    leading(): cocoascript.NSCollectionLayoutSpacing;
    setLeading(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutedgespacing/3199070-top
    top(): cocoascript.NSCollectionLayoutSpacing;
    setTop(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutedgespacing/3199071-trailing
    trailing(): cocoascript.NSCollectionLayoutSpacing;
    setTrailing(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutedgespacing/3199065-bottom
    bottom(): cocoascript.NSCollectionLayoutSpacing;
    setBottom(): void;
    //
    alloc():cocoascript.NSCollectionLayoutEdgeSpacing;
    //
    init():cocoascript.NSCollectionLayoutEdgeSpacing;
  }
}

declare const NSCollectionLayoutEdgeSpacing: cocoascript.NSCollectionLayoutEdgeSpacing;
declare namespace cocoascript {
  /**
   * A container for a set of items that lays out the items along a path.
   * doc://com.apple.documentation/documentation/uikit/nscollectionlayoutgroup
   */
  interface NSCollectionLayoutGroup extends NSCollectionLayoutItem {
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutgroup/3213857-subitems
    subitems(): cocoascript.NSCollectionLayoutItem;
    setSubitems(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutgroup/3199079-supplementaryitems
    supplementaryItems(): cocoascript.NSCollectionLayoutSupplementaryItem;
    setSupplementaryItems(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutgroup/3199078-interitemspacing
    interItemSpacing(): cocoascript.NSCollectionLayoutSpacing;
    setInterItemSpacing(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutgroup/3199082-visualdescription
    visualDescription():cocoascript.NSString;
    //
    alloc():cocoascript.NSCollectionLayoutGroup;
    //
    init():cocoascript.NSCollectionLayoutGroup;
  }
}

declare const NSCollectionLayoutGroup: cocoascript.NSCollectionLayoutGroup;
declare namespace cocoascript {
  /**
   * An item used in a group with a custom layout arrangement.
   * doc://com.apple.documentation/documentation/uikit/nscollectionlayoutgroupcustomitem
   */
  interface NSCollectionLayoutGroupCustomItem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutgroupcustomitem/3213865-frame
    frame(): cocoascript.CGRect;
    setFrame(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutgroupcustomitem/3213866-zindex
    zIndex(): cocoascript.NSInteger;
    setZIndex(): void;
    //
    alloc():cocoascript.NSCollectionLayoutGroupCustomItem;
    //
    init():cocoascript.NSCollectionLayoutGroupCustomItem;
  }
}

declare const NSCollectionLayoutGroupCustomItem: cocoascript.NSCollectionLayoutGroupCustomItem;
declare namespace cocoascript {
  /**
   * The most basic component of a collection view's layout.
   * doc://com.apple.documentation/documentation/uikit/nscollectionlayoutitem
   */
  interface NSCollectionLayoutItem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutitem/3213873-layoutsize
    layoutSize(): cocoascript.NSCollectionLayoutSize;
    setLayoutSize(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutitem/3213874-supplementaryitems
    supplementaryItems(): cocoascript.NSCollectionLayoutSupplementaryItem;
    setSupplementaryItems(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutitem/3199085-edgespacing
    edgeSpacing(): cocoascript.NSCollectionLayoutEdgeSpacing;
    setEdgeSpacing(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutitem/3199084-contentinsets
    contentInsets(): cocoascript.NSDirectionalEdgeInsets;
    setContentInsets(): void;
    //
    alloc():cocoascript.NSCollectionLayoutItem;
    //
    init():cocoascript.NSCollectionLayoutItem;
  }
}

declare const NSCollectionLayoutItem: cocoascript.NSCollectionLayoutItem;
declare namespace cocoascript {
  /**
   * A container that combines a set of groups into distinct visual groupings.
   * doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsection
   */
  interface NSCollectionLayoutSection extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsection/3199094-orthogonalscrollingbehavior
    orthogonalScrollingBehavior(): cocoascript.UICollectionLayoutSectionOrthogonalScrollingBehavior;
    setOrthogonalScrollingBehavior(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsection/3199093-intergroupspacing
    interGroupSpacing(): cocoascript.CGFloat;
    setInterGroupSpacing(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsection/3199090-contentinsets
    contentInsets(): cocoascript.NSDirectionalEdgeInsets;
    setContentInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsection/3600434-contentinsetsreference
    contentInsetsReference(): cocoascript.UIContentInsetsReference;
    setContentInsetsReference(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsection/3199095-supplementariesfollowcontentinse
    supplementariesFollowContentInsets(): cocoascript.BOOL;
    setSupplementariesFollowContentInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsection/3199089-boundarysupplementaryitems
    boundarySupplementaryItems(): cocoascript.NSCollectionLayoutBoundarySupplementaryItem;
    setBoundarySupplementaryItems(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsection/3199091-decorationitems
    decorationItems(): cocoascript.NSCollectionLayoutDecorationItem;
    setDecorationItems(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsection/3199096-visibleitemsinvalidationhandler
    visibleItemsInvalidationHandler(): cocoascript.NSCollectionLayoutSectionVisibleItemsInvalidationHandler;
    setVisibleItemsInvalidationHandler(): void;
    //
    alloc():cocoascript.NSCollectionLayoutSection;
    //
    init():cocoascript.NSCollectionLayoutSection;
  }
}

declare const NSCollectionLayoutSection: cocoascript.NSCollectionLayoutSection;
declare namespace cocoascript {
  /**
   * The width and the height of an item in a collection view.
   * doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsize
   */
  interface NSCollectionLayoutSize extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsize/3213888-widthdimension
    widthDimension(): cocoascript.NSCollectionLayoutDimension;
    setWidthDimension(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsize/3213886-heightdimension
    heightDimension(): cocoascript.NSCollectionLayoutDimension;
    setHeightDimension(): void;
    //
    alloc():cocoascript.NSCollectionLayoutSize;
    //
    init():cocoascript.NSCollectionLayoutSize;
  }
}

declare const NSCollectionLayoutSize: cocoascript.NSCollectionLayoutSize;
declare namespace cocoascript {
  /**
   * An object that defines the space between or around items in a collection view.
   * doc://com.apple.documentation/documentation/uikit/nscollectionlayoutspacing
   */
  interface NSCollectionLayoutSpacing extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutspacing/3199107-spacing
    spacing(): cocoascript.CGFloat;
    setSpacing(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutspacing/3199105-isfixedspacing
    isFixedSpacing(): cocoascript.BOOL;
    setIsFixedSpacing(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutspacing/3199106-isflexiblespacing
    isFlexibleSpacing(): cocoascript.BOOL;
    setIsFlexibleSpacing(): void;
    //
    alloc():cocoascript.NSCollectionLayoutSpacing;
    //
    init():cocoascript.NSCollectionLayoutSpacing;
  }
}

declare const NSCollectionLayoutSpacing: cocoascript.NSCollectionLayoutSpacing;
declare namespace cocoascript {
  /**
   * An object used to add an extra visual decoration, such as a badge or a frame, to an item in a collection view.
   * doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsupplementaryitem
   */
  interface NSCollectionLayoutSupplementaryItem extends NSCollectionLayoutItem {
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsupplementaryitem/3199113-itemanchor
    itemAnchor(): cocoascript.NSCollectionLayoutAnchor;
    setItemAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsupplementaryitem/3199109-containeranchor
    containerAnchor(): cocoascript.NSCollectionLayoutAnchor;
    setContainerAnchor(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsupplementaryitem/3199110-elementkind
    elementKind(): cocoascript.NSString;
    setElementKind(): void;
    // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsupplementaryitem/3199114-zindex
    zIndex(): cocoascript.NSInteger;
    setZIndex(): void;
    //
    alloc():cocoascript.NSCollectionLayoutSupplementaryItem;
    //
    init():cocoascript.NSCollectionLayoutSupplementaryItem;
  }
}

declare const NSCollectionLayoutSupplementaryItem: cocoascript.NSCollectionLayoutSupplementaryItem;
declare namespace cocoascript {
  /**
   * An object that defines scroll direction, section spacing, and headers or footers for the layout.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewcompositionallayoutconfiguration
   */
  interface UICollectionViewCompositionalLayoutConfiguration extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcompositionallayoutconfiguration/3199222-scrolldirection
    scrollDirection(): cocoascript.UICollectionViewScrollDirection;
    setScrollDirection(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcompositionallayoutconfiguration/3199221-intersectionspacing
    interSectionSpacing(): cocoascript.CGFloat;
    setInterSectionSpacing(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcompositionallayoutconfiguration/3600435-contentinsetsreference
    contentInsetsReference(): cocoascript.UIContentInsetsReference;
    setContentInsetsReference(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcompositionallayoutconfiguration/3199219-boundarysupplementaryitems
    boundarySupplementaryItems(): cocoascript.NSCollectionLayoutBoundarySupplementaryItem;
    setBoundarySupplementaryItems(): void;
    //
    alloc():cocoascript.UICollectionViewCompositionalLayoutConfiguration;
    //
    init():cocoascript.UICollectionViewCompositionalLayoutConfiguration;
  }
}

declare const UICollectionViewCompositionalLayoutConfiguration: cocoascript.UICollectionViewCompositionalLayoutConfiguration;
declare namespace cocoascript {
  /**
   * A representation of the state of the data in a layout section at a specific point in time.
   * doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot
   */
  interface NSDiffableDataSourceSectionSnapshot extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600297-init
    init():cocoascript.NSDiffableDataSourceSectionSnapshot;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600310-snapshotofparentitem
    snapshotOfParentItem(parentItem: cocoascript.):cocoascript.NSDiffableDataSourceSectionSnapshot;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600311-snapshotofparentitem
    snapshotOfParentItem(parentItem: cocoascript.BOOL):cocoascript.NSDiffableDataSourceSectionSnapshot;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600288-appenditems
    appendItems(items: cocoascript.NSArray):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600289-appenditems
    appendItems_intoParentItem(items: cocoascript.NSArray, parentItem: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600304-items
    items():cocoascript.NSArray;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600305-items
    items(): cocoascript.ItemIdentifierType;
    setItems(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600309-rootitems
    rootItems(): cocoascript.ItemIdentifierType;
    setRootItems(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600312-visibleitems
    visibleItems(): cocoascript.ItemIdentifierType;
    setVisibleItems(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600296-indexofitem
    indexOfItem(item: cocoascript.):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600306-levelofitem
    levelOfItem(item: cocoascript.):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600307-parentofchilditem
    parentOfChildItem(childItem: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600291-containsitem
    containsItem(item: cocoascript.):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600303-isvisible
    isVisible(item: cocoascript.):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600298-insertitems
    insertItems_afterItem(items: cocoascript.NSArray, afterIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600300-insertsnapshot
    insertSnapshot_afterItem(snapshot: cocoascript.NSDiffableDataSourceSectionSnapshot, item: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600299-insertitems
    insertItems_beforeItem(items: cocoascript.NSArray, beforeIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600301-insertsnapshot
    insertSnapshot_beforeItem(snapshot: cocoascript.NSDiffableDataSourceSectionSnapshot, item: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600293-deleteitems
    deleteItems(items: cocoascript.NSArray):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600292-deleteallitems
    deleteAllItems():void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600308-replacechildrenofparentitem
    replaceChildrenOfParentItem(parentItem: cocoascript.NSDiffableDataSourceSectionSnapshot):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600302-isexpanded
    isExpanded(item: cocoascript.):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600294-expanditems
    expandItems(items: cocoascript.NSArray):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600290-collapseitems
    collapseItems(items: cocoascript.NSArray):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600295-expandeditems
    expandedItems():cocoascript.NSArray;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectionsnapshot/3600313-visualdescription
    visualDescription():cocoascript.NSString;
    //
    alloc():cocoascript.NSDiffableDataSourceSectionSnapshot;
    //
    init():cocoascript.NSDiffableDataSourceSectionSnapshot;
  }
}

declare const NSDiffableDataSourceSectionSnapshot: cocoascript.NSDiffableDataSourceSectionSnapshot;
declare namespace cocoascript {
  /**
   * A configuration that describes a specific background appearance.
   * doc://com.apple.documentation/documentation/uikit/uibackgroundconfiguration
   */
  interface UIBackgroundConfiguration extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uibackgroundconfiguration/3600322-customview
    customView(): cocoascript.UIView;
    setCustomView(): void;
    // doc://com.apple.documentation/documentation/uikit/uibackgroundconfiguration/3600321-cornerradius
    cornerRadius(): cocoascript.CGFloat;
    setCornerRadius(): void;
    // doc://com.apple.documentation/documentation/uikit/uibackgroundconfiguration/3600319-backgroundinsets
    backgroundInsets(): cocoascript.NSDirectionalEdgeInsets;
    setBackgroundInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uibackgroundconfiguration/3600323-edgesaddinglayoutmarginstobackgr
    edgesAddingLayoutMarginsToBackgroundInsets(): cocoascript.NSDirectionalRectEdge;
    setEdgesAddingLayoutMarginsToBackgroundInsets(): void;
    // doc://com.apple.documentation/documentation/uikit/uibackgroundconfiguration/3600317-backgroundcolor
    backgroundColor(): cocoascript.UIColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uibackgroundconfiguration/3600318-backgroundcolortransformer
    backgroundColorTransformer(): cocoascript.UIConfigurationColorTransformer;
    setBackgroundColorTransformer(): void;
    // doc://com.apple.documentation/documentation/uikit/uibackgroundconfiguration/3600330-resolvedbackgroundcolorfortintco
    resolvedBackgroundColorForTintColor(tintColor: cocoascript.UIColor):cocoascript.UIColor;
    // doc://com.apple.documentation/documentation/uikit/uibackgroundconfiguration/3600337-visualeffect
    visualEffect(): cocoascript.UIVisualEffect;
    setVisualEffect(): void;
    // doc://com.apple.documentation/documentation/uikit/uibackgroundconfiguration/3600332-strokecolor
    strokeColor(): cocoascript.UIColor;
    setStrokeColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uibackgroundconfiguration/3600333-strokecolortransformer
    strokeColorTransformer(): cocoascript.UIConfigurationColorTransformer;
    setStrokeColorTransformer(): void;
    // doc://com.apple.documentation/documentation/uikit/uibackgroundconfiguration/3600331-resolvedstrokecolorfortintcolor
    resolvedStrokeColorForTintColor(tintColor: cocoascript.UIColor):cocoascript.UIColor;
    // doc://com.apple.documentation/documentation/uikit/uibackgroundconfiguration/3600335-strokewidth
    strokeWidth(): cocoascript.CGFloat;
    setStrokeWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uibackgroundconfiguration/3600334-strokeoutset
    strokeOutset(): cocoascript.CGFloat;
    setStrokeOutset(): void;
    // doc://com.apple.documentation/documentation/uikit/uibackgroundconfiguration/3600336-updatedconfigurationforstate
    updatedConfigurationForState(state: cocoascript.UIConfigurationState):cocoascript.UIBackgroundConfiguration;
    //
    alloc():cocoascript.UIBackgroundConfiguration;
    //
    init():cocoascript.UIBackgroundConfiguration;
  }
}

declare const UIBackgroundConfiguration: cocoascript.UIBackgroundConfiguration;
declare namespace cocoascript {
  /**
   * An accessory in a collection view list cell.
   * doc://com.apple.documentation/documentation/uikit/uicellaccessory
   */
  interface UICellAccessory extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicellaccessory/3600353-init
    init():cocoascript.UICellAccessory;
    // doc://com.apple.documentation/documentation/uikit/uicellaccessory/3600354-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UICellAccessory;
    // doc://com.apple.documentation/documentation/uikit/uicellaccessory/3667726-hidden
    hidden(): cocoascript.BOOL;
    setHidden(): void;
    // doc://com.apple.documentation/documentation/uikit/uicellaccessory/3600356-tintcolor
    tintColor(): cocoascript.UIColor;
    setTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uicellaccessory/3600352-displayedstate
    displayedState(): cocoascript.UICellAccessoryDisplayedState;
    setDisplayedState(): void;
    // doc://com.apple.documentation/documentation/uikit/uicellaccessory/3600355-reservedlayoutwidth
    reservedLayoutWidth(): cocoascript.CGFloat;
    setReservedLayoutWidth(): void;
    //
    alloc():cocoascript.UICellAccessory;
    //
    init():cocoascript.UICellAccessory;
  }
}

declare const UICellAccessory: cocoascript.UICellAccessory;
declare const UICellAccessoryPositionAfterAccessoryOfClass: cocoascript.Class;
declare const UICellAccessoryPositionBeforeAccessoryOfClass: cocoascript.Class;
declare namespace cocoascript {
  /**
   * A configuration for creating a list layout.
   * doc://com.apple.documentation/documentation/uikit/uicollectionlayoutlistconfiguration
   */
  interface UICollectionLayoutListConfiguration extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionlayoutlistconfiguration/3600412-initwithappearance
    initWithAppearance(appearance: cocoascript.UICollectionLayoutListAppearance):cocoascript.UICollectionLayoutListConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uicollectionlayoutlistconfiguration/3600408-appearance
    appearance(): cocoascript.UICollectionLayoutListAppearance;
    setAppearance(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionlayoutlistconfiguration/3600409-backgroundcolor
    backgroundColor(): cocoascript.UIColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionlayoutlistconfiguration/3601202-showsseparators
    showsSeparators(): cocoascript.BOOL;
    setShowsSeparators(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionlayoutlistconfiguration/3600411-headermode
    headerMode(): cocoascript.UICollectionLayoutListHeaderMode;
    setHeaderMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionlayoutlistconfiguration/3600410-footermode
    footerMode(): cocoascript.UICollectionLayoutListFooterMode;
    setFooterMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionlayoutlistconfiguration/3650427-leadingswipeactionsconfiguration
    leadingSwipeActionsConfigurationProvider(): cocoascript.UICollectionLayoutListSwipeActionsConfigurationProvider;
    setLeadingSwipeActionsConfigurationProvider(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionlayoutlistconfiguration/3650428-trailingswipeactionsconfiguratio
    trailingSwipeActionsConfigurationProvider(): cocoascript.UICollectionLayoutListSwipeActionsConfigurationProvider;
    setTrailingSwipeActionsConfigurationProvider(): void;
    //
    alloc():cocoascript.UICollectionLayoutListConfiguration;
    //
    init():cocoascript.UICollectionLayoutListConfiguration;
  }
}

declare const UICollectionLayoutListConfiguration: cocoascript.UICollectionLayoutListConfiguration;
declare namespace cocoascript {
  /**
   * Handlers for reordering items.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasourcereorderinghandlers
   */
  interface UICollectionViewDiffableDataSourceReorderingHandlers extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasourcereorderinghandlers/3600517-canreorderitemhandler
    canReorderItemHandler(): cocoascript.ItemType;
    setCanReorderItemHandler(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasourcereorderinghandlers/3600519-willreorderhandler
    willReorderHandler(): cocoascript.ItemType;
    setWillReorderHandler(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasourcereorderinghandlers/3600518-didreorderhandler
    didReorderHandler(): cocoascript.ItemType;
    setDidReorderHandler(): void;
    //
    alloc():cocoascript.UICollectionViewDiffableDataSourceReorderingHandlers;
    //
    init():cocoascript.UICollectionViewDiffableDataSourceReorderingHandlers;
  }
}

declare const UICollectionViewDiffableDataSourceReorderingHandlers: cocoascript.UICollectionViewDiffableDataSourceReorderingHandlers;
declare namespace cocoascript {
  /**
   * Handlers for expanding and collapsing items.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasourcesectionsnapshothandlers
   */
  interface UICollectionViewDiffableDataSourceSectionSnapshotHandlers extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasourcesectionsnapshothandlers/3600521-shouldcollapseitemhandler
    shouldCollapseItemHandler(): cocoascript.ItemType;
    setShouldCollapseItemHandler(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasourcesectionsnapshothandlers/3600522-shouldexpanditemhandler
    shouldExpandItemHandler(): cocoascript.ItemType;
    setShouldExpandItemHandler(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasourcesectionsnapshothandlers/3600524-willcollapseitemhandler
    willCollapseItemHandler(): cocoascript.ItemType;
    setWillCollapseItemHandler(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasourcesectionsnapshothandlers/3600525-willexpanditemhandler
    willExpandItemHandler(): cocoascript.ItemType;
    setWillExpandItemHandler(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasourcesectionsnapshothandlers/3600523-snapshotforexpandingparentitemha
    snapshotForExpandingParentItemHandler(): cocoascript.ItemType;
    setSnapshotForExpandingParentItemHandler(): void;
    //
    alloc():cocoascript.UICollectionViewDiffableDataSourceSectionSnapshotHandlers;
    //
    init():cocoascript.UICollectionViewDiffableDataSourceSectionSnapshotHandlers;
  }
}

declare const UICollectionViewDiffableDataSourceSectionSnapshotHandlers: cocoascript.UICollectionViewDiffableDataSourceSectionSnapshotHandlers;
declare namespace cocoascript {
  /**
   * Properties that affect the list content configuration’s image.
   * doc://com.apple.documentation/documentation/uikit/uilistcontentimageproperties
   */
  interface UIListContentImageProperties extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uilistcontentimageproperties/3600558-preferredsymbolconfiguration
    preferredSymbolConfiguration(): cocoascript.UIImageSymbolConfiguration;
    setPreferredSymbolConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentimageproperties/3600560-tintcolor
    tintColor(): cocoascript.UIColor;
    setTintColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentimageproperties/3606377-tintcolortransformer
    tintColorTransformer(): cocoascript.UIConfigurationColorTransformer;
    setTintColorTransformer(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentimageproperties/3606376-resolvedtintcolorfortintcolor
    resolvedTintColorForTintColor(tintColor: cocoascript.UIColor):cocoascript.UIColor;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentimageproperties/3600556-cornerradius
    cornerRadius(): cocoascript.CGFloat;
    setCornerRadius(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentimageproperties/3600557-maximumsize
    maximumSize(): cocoascript.CGSize;
    setMaximumSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentimageproperties/3600559-reservedlayoutsize
    reservedLayoutSize(): cocoascript.CGSize;
    setReservedLayoutSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentimageproperties/3667733-accessibilityignoresinvertcolors
    accessibilityIgnoresInvertColors(): cocoascript.BOOL;
    setAccessibilityIgnoresInvertColors(): void;
    //
    alloc():cocoascript.UIListContentImageProperties;
    //
    init():cocoascript.UIListContentImageProperties;
  }
}

declare const UIListContentImageProperties: cocoascript.UIListContentImageProperties;
declare namespace cocoascript {
  /**
   * Properties that affect the list content configuration’s text.
   * doc://com.apple.documentation/documentation/uikit/uilistcontenttextproperties
   */
  interface UIListContentTextProperties extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uilistcontenttextproperties/3600572-font
    font(): cocoascript.UIFont;
    setFont(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontenttextproperties/3600571-color
    color(): cocoascript.UIColor;
    setColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontenttextproperties/3606378-colortransformer
    colorTransformer(): cocoascript.UIConfigurationColorTransformer;
    setColorTransformer(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontenttextproperties/3606379-resolvedcolor
    resolvedColor():cocoascript.UIColor;
    // doc://com.apple.documentation/documentation/uikit/uilistcontenttextproperties/3600569-alignment
    alignment(): cocoascript.UIListContentTextAlignment;
    setAlignment(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontenttextproperties/3600573-linebreakmode
    lineBreakMode(): cocoascript.NSLineBreakMode;
    setLineBreakMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontenttextproperties/3600575-numberoflines
    numberOfLines(): cocoascript.NSInteger;
    setNumberOfLines(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontenttextproperties/3600568-adjustsfontsizetofitwidth
    adjustsFontSizeToFitWidth(): cocoascript.BOOL;
    setAdjustsFontSizeToFitWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontenttextproperties/3600574-minimumscalefactor
    minimumScaleFactor(): cocoascript.CGFloat;
    setMinimumScaleFactor(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontenttextproperties/3600570-allowsdefaulttighteningfortrunca
    allowsDefaultTighteningForTruncation(): cocoascript.BOOL;
    setAllowsDefaultTighteningForTruncation(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontenttextproperties/3600567-adjustsfontforcontentsizecategor
    adjustsFontForContentSizeCategory(): cocoascript.BOOL;
    setAdjustsFontForContentSizeCategory(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontenttextproperties/3650227-transform
    transform(): cocoascript.UIListContentTextTransform;
    setTransform(): void;
    //
    alloc():cocoascript.UIListContentTextProperties;
    //
    init():cocoascript.UIListContentTextProperties;
  }
}

declare const UIListContentTextProperties: cocoascript.UIListContentTextProperties;
declare namespace cocoascript {
  /**
   * A representation of the state of the data in a view at a specific point in time.
   * doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot
   */
  interface NSDiffableDataSourceSnapshot extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182897-appendsectionswithidentifiers
    appendSectionsWithIdentifiers(sectionIdentifiers: cocoascript.NSArray):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182896-appenditemswithidentifiers
    appendItemsWithIdentifiers_intoSectionWithIdentifier(identifiers: cocoascript.NSArray, sectionIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182895-appenditemswithidentifiers
    appendItemsWithIdentifiers(identifiers: cocoascript.NSArray):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182913-numberofitems
    numberOfItems(): cocoascript.NSInteger;
    setNumberOfItems(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182915-numberofsections
    numberOfSections(): cocoascript.NSInteger;
    setNumberOfSections(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182914-numberofitemsinsection
    numberOfItemsInSection(sectionIdentifier: cocoascript.):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182907-itemidentifiers
    itemIdentifiers(): cocoascript.ItemIdentifierType;
    setItemIdentifiers(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182919-sectionidentifiers
    sectionIdentifiers(): cocoascript.SectionIdentifierType;
    setSectionIdentifiers(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182901-indexofitemidentifier
    indexOfItemIdentifier(itemIdentifier: cocoascript.):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182902-indexofsectionidentifier
    indexOfSectionIdentifier(sectionIdentifier: cocoascript.):cocoascript.NSInteger;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182908-itemidentifiersinsectionwithiden
    itemIdentifiersInSectionWithIdentifier(sectionIdentifier: cocoascript.):cocoascript.NSArray;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182918-sectionidentifierforsectionconta
    sectionIdentifierForSectionContainingItemIdentifier(itemIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182903-insertitemswithidentifiers
    insertItemsWithIdentifiers_afterItemWithIdentifier(identifiers: cocoascript.NSArray, itemIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182904-insertitemswithidentifiers
    insertItemsWithIdentifiers_beforeItemWithIdentifier(identifiers: cocoascript.NSArray, itemIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182905-insertsectionswithidentifiers
    insertSectionsWithIdentifiers_afterSectionWithIdentifier(sectionIdentifiers: cocoascript.NSArray, toSectionIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182906-insertsectionswithidentifiers
    insertSectionsWithIdentifiers_beforeSectionWithIdentifier(sectionIdentifiers: cocoascript.NSArray, toSectionIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182898-deleteallitems
    deleteAllItems():void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182899-deleteitemswithidentifiers
    deleteItemsWithIdentifiers(identifiers: cocoascript.NSArray):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182900-deletesectionswithidentifiers
    deleteSectionsWithIdentifiers(sectionIdentifiers: cocoascript.NSArray):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182909-moveitemwithidentifier
    moveItemWithIdentifier(toIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182910-moveitemwithidentifier
    moveItemWithIdentifier(toIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182911-movesectionwithidentifier
    moveSectionWithIdentifier(toSectionIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182912-movesectionwithidentifier
    moveSectionWithIdentifier(toSectionIdentifier: cocoascript.):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182916-reloaditemswithidentifiers
    reloadItemsWithIdentifiers(identifiers: cocoascript.NSArray):void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesnapshot/3182917-reloadsectionswithidentifiers
    reloadSectionsWithIdentifiers(sectionIdentifiers: cocoascript.NSArray):void;
    //
    alloc():cocoascript.NSDiffableDataSourceSnapshot;
    //
    init():cocoascript.NSDiffableDataSourceSnapshot;
  }
}

declare const NSDiffableDataSourceSnapshot: cocoascript.NSDiffableDataSourceSnapshot;
declare namespace cocoascript {
  /**
   * The object you use to manage data and provide cells for a collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasource
   */
  interface UICollectionViewDiffableDataSource extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasource/3182923-initwithcollectionview
    initWithCollectionView_cellProvider(collectionView: cocoascript.UICollectionView, cellProvider: cocoascript.UICollectionViewDiffableDataSourceCellProvider):cocoascript.UICollectionViewDiffableDataSource;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasource/3182926-supplementaryviewprovider
    supplementaryViewProvider(): cocoascript.UICollectionViewDiffableDataSourceSupplementaryViewProvider;
    setSupplementaryViewProvider(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasource/3182924-itemidentifierforindexpath
    itemIdentifierForIndexPath(indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasource/3182922-indexpathforitemidentifier
    indexPathForItemIdentifier(identifier: cocoascript.):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasource/3182925-snapshot
    snapshot():cocoascript.NSDiffableDataSourceSnapshot;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasource/3182921-applysnapshot
    applySnapshot_animatingDifferences(snapshot: cocoascript.NSDiffableDataSourceSnapshot, animatingDifferences: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasource/3356324-applysnapshot
    applySnapshot_animatingDifferences_completion(snapshot: cocoascript.NSDiffableDataSourceSnapshot, animatingDifferences: cocoascript.BOOL, completion: void):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasource/3600515-snapshotforsection
    snapshotForSection(section: cocoascript.):cocoascript.NSDiffableDataSourceSectionSnapshot;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasource/3600511-applysnapshot
    applySnapshot_toSection(snapshot: cocoascript.NSDiffableDataSourceSectionSnapshot, sectionIdentifier: cocoascript.BOOL):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasource/3600512-applysnapshot
    applySnapshot_toSection_completion(snapshot: cocoascript.NSDiffableDataSourceSectionSnapshot, sectionIdentifier: cocoascript.BOOL, completion: void):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasource/3600513-reorderinghandlers
    reorderingHandlers(): cocoascript.ItemIdentifierType;
    setReorderingHandlers(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasource/3600514-sectionsnapshothandlers
    sectionSnapshotHandlers(): cocoascript.ItemIdentifierType;
    setSectionSnapshotHandlers(): void;
    //
    alloc():cocoascript.UICollectionViewDiffableDataSource;
    //
    init():cocoascript.UICollectionViewDiffableDataSource;
  }
}

declare const UICollectionViewDiffableDataSource: cocoascript.UICollectionViewDiffableDataSource;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionlayoutsectionorthogonalscrollingbehavior
  type UICollectionLayoutSectionOrthogonalScrollingBehavior = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * A collection view cell that provides list features and default styling.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewlistcell
   */
  interface UICollectionViewListCell extends UICollectionViewCell {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlistcell/3600459-defaultcontentconfiguration
    defaultContentConfiguration():cocoascript.UIListContentConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlistcell/3600458-accessories
    accessories(): cocoascript.UICellAccessory;
    setAccessories(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlistcell/3600460-indentationlevel
    indentationLevel(): cocoascript.NSInteger;
    setIndentationLevel(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlistcell/3600461-indentationwidth
    indentationWidth(): cocoascript.CGFloat;
    setIndentationWidth(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlistcell/3600462-indentsaccessories
    indentsAccessories(): cocoascript.BOOL;
    setIndentsAccessories(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlistcell/3601206-separatorlayoutguide
    separatorLayoutGuide(): cocoascript.UILayoutGuide;
    setSeparatorLayoutGuide(): void;
    //
    alloc():cocoascript.UICollectionViewListCell;
    //
    init():cocoascript.UICollectionViewListCell;
  }
}

declare const UICollectionViewListCell: cocoascript.UICollectionViewListCell;
declare const UILayoutPriorityDragThatCanResizeScene: cocoascript.UILayoutPriority;
declare const UILayoutPriorityDragThatCannotResizeScene: cocoascript.UILayoutPriority;
declare const UILayoutPrioritySceneSizeStayPut: cocoascript.UILayoutPriority;
declare const UIFontTextStyleHeadline: cocoascript.UIFontTextStyle;
declare const UIFontTextStyleBody: cocoascript.UIFontTextStyle;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uifonttextstyle
  type UIFontTextStyle = cocoascript.NSString;
}
declare namespace cocoascript {
  /**
   * A content configuration for a list-based content view.
   * doc://com.apple.documentation/documentation/uikit/uilistcontentconfiguration
   */
  interface UIListContentConfiguration extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uilistcontentconfiguration/3600533-image
    image(): cocoascript.UIImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentconfiguration/3600546-text
    text(): cocoascript.NSString;
    setText(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentconfiguration/3600527-attributedtext
    attributedText(): cocoascript.NSAttributedString;
    setAttributedText(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentconfiguration/3600540-secondarytext
    secondaryText(): cocoascript.NSString;
    setSecondaryText(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentconfiguration/3600539-secondaryattributedtext
    secondaryAttributedText(): cocoascript.NSAttributedString;
    setSecondaryAttributedText(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentconfiguration/3600534-imageproperties
    imageProperties(): cocoascript.UIListContentImageProperties;
    setImageProperties(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentconfiguration/3600547-textproperties
    textProperties(): cocoascript.UIListContentTextProperties;
    setTextProperties(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentconfiguration/3600541-secondarytextproperties
    secondaryTextProperties(): cocoascript.UIListContentTextProperties;
    setSecondaryTextProperties(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentconfiguration/3600528-axespreservingsuperviewlayoutmar
    axesPreservingSuperviewLayoutMargins(): cocoascript.UIAxis;
    setAxesPreservingSuperviewLayoutMargins(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentconfiguration/3600530-directionallayoutmargins
    directionalLayoutMargins(): cocoascript.NSDirectionalEdgeInsets;
    setDirectionalLayoutMargins(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentconfiguration/3600538-preferssidebysidetextandsecondar
    prefersSideBySideTextAndSecondaryText(): cocoascript.BOOL;
    setPrefersSideBySideTextAndSecondaryText(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentconfiguration/3600535-imagetotextpadding
    imageToTextPadding(): cocoascript.CGFloat;
    setImageToTextPadding(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentconfiguration/3600548-texttosecondarytexthorizontalpad
    textToSecondaryTextHorizontalPadding(): cocoascript.CGFloat;
    setTextToSecondaryTextHorizontalPadding(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentconfiguration/3600549-texttosecondarytextverticalpaddi
    textToSecondaryTextVerticalPadding(): cocoascript.CGFloat;
    setTextToSecondaryTextVerticalPadding(): void;
    //
    alloc():cocoascript.UIListContentConfiguration;
    //
    init():cocoascript.UIListContentConfiguration;
  }
}

declare const UIListContentConfiguration: cocoascript.UIListContentConfiguration;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uispringloadedinteractioneffectstate
  type UISpringLoadedInteractionEffectState = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * An object that contains information about a placeholder in the collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewdropplaceholdercontext
   */
  interface UICollectionViewDropPlaceholderContext extends UIDragAnimating {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropplaceholdercontext/2897447-commitinsertionwithdatasourceupd
    commitInsertionWithDataSourceUpdates(dataSourceUpdates: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropplaceholdercontext/2897490-setneedscellupdate
    setNeedsCellUpdate():void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropplaceholdercontext/2897339-deleteplaceholder
    deletePlaceholder():cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropplaceholdercontext/2897430-dragitem
    dragItem(): cocoascript.UIDragItem;
    setDragItem(): void;
  }
}
declare namespace cocoascript {
  /**
   * An object for tracking a placeholder cell that you added to your table during a drop operation.
   * doc://com.apple.documentation/documentation/uikit/uitableviewdropplaceholdercontext
   */
  interface UITableViewDropPlaceholderContext extends UIDragAnimating {
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropplaceholdercontext/2897487-commitinsertionwithdatasourceupd
    commitInsertionWithDataSourceUpdates(dataSourceUpdates: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropplaceholdercontext/2897343-deleteplaceholder
    deletePlaceholder():cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropplaceholdercontext/2897407-dragitem
    dragItem(): cocoascript.UIDragItem;
    setDragItem(): void;
  }
}
declare namespace cocoascript {
  /**
   * Your proposed solution for handling a drop in a table view.
   * doc://com.apple.documentation/documentation/uikit/uitableviewdropproposal
   */
  interface UITableViewDropProposal extends UIDropProposal {
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropproposal/2897298-initwithdropoperation
    initWithDropOperation_intent(operation: cocoascript.UIDropOperation, intent: cocoascript.UITableViewDropIntent):cocoascript.UITableViewDropProposal;
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropproposal/2897495-intent
    intent(): cocoascript.UITableViewDropIntent;
    setIntent(): void;
    //
    alloc():cocoascript.UITableViewDropProposal;
    //
    init():cocoascript.UITableViewDropProposal;
  }
}

declare const UITableViewDropProposal: cocoascript.UITableViewDropProposal;
declare namespace cocoascript {
  /**
   * Your proposed solution for handling a drop in a collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewdropproposal
   */
  interface UICollectionViewDropProposal extends UIDropProposal {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropproposal/2897391-initwithdropoperation
    initWithDropOperation_intent(operation: cocoascript.UIDropOperation, intent: cocoascript.UICollectionViewDropIntent):cocoascript.UICollectionViewDropProposal;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropproposal/2897338-intent
    intent(): cocoascript.UICollectionViewDropIntent;
    setIntent(): void;
    //
    alloc():cocoascript.UICollectionViewDropProposal;
    //
    init():cocoascript.UICollectionViewDropProposal;
  }
}

declare const UICollectionViewDropProposal: cocoascript.UICollectionViewDropProposal;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipreferredpresentationstyle
  type UIPreferredPresentationStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiimageorientation
  type UIImageOrientation = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiimageresizingmode
  type UIImageResizingMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiimagerenderingmode
  type UIImageRenderingMode = cocoascript.NSInteger;
}
declare const NSTextScalingDocumentAttribute: cocoascript.NSAttributedStringDocumentAttributeKey;
declare const NSSourceTextScalingDocumentAttribute: cocoascript.NSAttributedStringDocumentAttributeKey;
declare const NSTargetTextScalingDocumentOption: cocoascript.NSAttributedStringDocumentReadingOptionKey;
declare const NSSourceTextScalingDocumentOption: cocoascript.NSAttributedStringDocumentReadingOptionKey;
declare const NSDocumentTypeDocumentAttribute: cocoascript.NSAttributedStringDocumentAttributeKey;
declare const NSHTMLTextDocumentType: cocoascript.NSAttributedStringDocumentType;
declare const NSCharacterEncodingDocumentAttribute: cocoascript.NSAttributedStringDocumentAttributeKey;
declare const NSDefaultAttributesDocumentAttribute: cocoascript.NSAttributedStringDocumentAttributeKey;
declare const NSDocumentTypeDocumentOption: cocoascript.NSAttributedStringDocumentReadingOptionKey;
declare const UIAccessibilitySpeechAttributeIPANotation: cocoascript.NSAttributedStringKey;
declare const UIAccessibilitySpeechAttributeLanguage: cocoascript.NSAttributedStringKey;
declare const UIAccessibilitySpeechAttributePitch: cocoascript.NSAttributedStringKey;
declare const UIAccessibilitySpeechAttributePunctuation: cocoascript.NSAttributedStringKey;
declare const UIAccessibilitySpeechAttributeQueueAnnouncement: cocoascript.NSAttributedStringKey;
declare const UIAccessibilitySpeechAttributeSpellOut: cocoascript.NSAttributedStringKey;
declare const UIAccessibilityTextAttributeCustom: cocoascript.NSAttributedStringKey;
declare const UIAccessibilityTextAttributeHeadingLevel: cocoascript.NSAttributedStringKey;
declare const UIAccessibilityTextAttributeContext: cocoascript.NSAttributedStringKey;
declare const NSTrackingAttributeName: cocoascript.NSAttributedStringKey;
declare const NSTextEffectLetterpressStyle: cocoascript.NSTextEffectStyle;
declare const NSUnderlinePatternSolid: cocoascript.NSUnderlineStyle;
declare const NSUnderlinePatternDot: cocoascript.NSUnderlineStyle;
declare const NSUnderlinePatternDash: cocoascript.NSUnderlineStyle;
declare const NSUnderlinePatternDashDot: cocoascript.NSUnderlineStyle;
declare const NSUnderlinePatternDashDotDot: cocoascript.NSUnderlineStyle;
declare const NSUnderlineByWord: cocoascript.NSUnderlineStyle;
declare const NSBackgroundColorDocumentAttribute: cocoascript.NSAttributedStringDocumentAttributeKey;
declare const NSCocoaVersionDocumentAttribute: cocoascript.NSAttributedStringDocumentAttributeKey;
declare const NSDefaultTabIntervalDocumentAttribute: cocoascript.NSAttributedStringDocumentAttributeKey;
declare const NSHyphenationFactorDocumentAttribute: cocoascript.NSAttributedStringDocumentAttributeKey;
declare const NSPaperMarginDocumentAttribute: cocoascript.NSAttributedStringDocumentAttributeKey;
declare const NSPaperSizeDocumentAttribute: cocoascript.NSAttributedStringDocumentAttributeKey;
declare const NSReadOnlyDocumentAttribute: cocoascript.NSAttributedStringDocumentAttributeKey;
declare const NSTextLayoutSectionsAttribute: cocoascript.NSAttributedStringDocumentAttributeKey;
declare const NSViewModeDocumentAttribute: cocoascript.NSAttributedStringDocumentAttributeKey;
declare const NSViewSizeDocumentAttribute: cocoascript.NSAttributedStringDocumentAttributeKey;
declare const NSViewZoomDocumentAttribute: cocoascript.NSAttributedStringDocumentAttributeKey;
declare const NSPlainTextDocumentType: cocoascript.NSAttributedStringDocumentType;
declare const NSRTFTextDocumentType: cocoascript.NSAttributedStringDocumentType;
declare const NSRTFDTextDocumentType: cocoascript.NSAttributedStringDocumentType;
declare const NSTextLayoutSectionOrientation: cocoascript.NSTextLayoutSectionKey;
declare const NSTextLayoutSectionRange: cocoascript.NSTextLayoutSectionKey;
declare const NSTabColumnTerminatorsAttributeName: cocoascript.NSTextTabOptionKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uifontdescriptorclass
  type UIFontDescriptorClass = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicontrolevents
  type UIControlEvents = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicontrolcontentverticalalignment
  type UIControlContentVerticalAlignment = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicontrolcontenthorizontalalignment
  type UIControlContentHorizontalAlignment = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uibarmetrics
  type UIBarMetrics = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uibarposition
  type UIBarPosition = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * The methods adopted by the object you use to manage user interactions with items in a collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate
   */
  interface UICollectionViewDelegate extends UIScrollViewDelegate {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618095-collectionview
    collectionView_shouldSelectItemAtIndexPath(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618032-collectionview
    collectionView_didSelectItemAtIndexPath(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618067-collectionview
    collectionView_shouldDeselectItemAtIndexPath(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618035-collectionview
    collectionView_didDeselectItemAtIndexPath(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/3183916-collectionview
    collectionView_shouldBeginMultipleSelectionInteractionAtIndexPath(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/3183915-collectionview
    collectionView_didBeginMultipleSelectionInteractionAtIndexPath(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/3183917-collectionviewdidendmultiplesele
    collectionViewDidEndMultipleSelectionInteraction(collectionView: cocoascript.UICollectionView):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618070-collectionview
    collectionView_shouldHighlightItemAtIndexPath(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618049-collectionview
    collectionView_didHighlightItemAtIndexPath(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618027-collectionview
    collectionView_didUnhighlightItemAtIndexPath(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618087-collectionview
    collectionView_willDisplayCell_forItemAtIndexPath(collectionView: cocoascript.UICollectionView, cell: cocoascript.UICollectionViewCell, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618062-collectionview
    collectionView_willDisplaySupplementaryView_forElementKind_atIndexPath(collectionView: cocoascript.UICollectionView, view: cocoascript.UICollectionReusableView, elementKind: cocoascript.NSString, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618006-collectionview
    collectionView_didEndDisplayingCell_forItemAtIndexPath(collectionView: cocoascript.UICollectionView, cell: cocoascript.UICollectionViewCell, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618036-collectionview
    collectionView_didEndDisplayingSupplementaryView_forElementOfKind_atIndexPath(collectionView: cocoascript.UICollectionView, view: cocoascript.UICollectionReusableView, elementKind: cocoascript.NSString, indexPath: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618100-collectionview
    collectionView_transitionLayoutForOldLayout_newLayout(collectionView: cocoascript.UICollectionView, fromLayout: cocoascript.UICollectionViewLayout, toLayout: cocoascript.UICollectionViewLayout):cocoascript.UICollectionViewTransitionLayout;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618007-collectionview
    collectionView_targetContentOffsetForProposedContentOffset(collectionView: cocoascript.UICollectionView, proposedContentOffset: cocoascript.CGPoint):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618052-collectionview
    collectionView_targetIndexPathForMoveFromItemAtIndexPath_toProposedIndexPath(collectionView: cocoascript.UICollectionView, originalIndexPath: cocoascript.NSIndexPath, proposedIndexPath: cocoascript.NSIndexPath):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/3295917-collectionview
    collectionView_contextMenuConfigurationForItemAtIndexPath_point(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath, point: cocoascript.CGPoint):cocoascript.UIContextMenuConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/3295918-collectionview
    collectionView_previewForDismissingContextMenuWithConfiguration(collectionView: cocoascript.UICollectionView, configuration: cocoascript.UIContextMenuConfiguration):cocoascript.UITargetedPreview;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/3295919-collectionview
    collectionView_previewForHighlightingContextMenuWithConfiguration(collectionView: cocoascript.UICollectionView, configuration: cocoascript.UIContextMenuConfiguration):cocoascript.UITargetedPreview;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/3601203-collectionview
    collectionView_willDisplayContextMenuWithConfiguration_animator(collectionView: cocoascript.UICollectionView, configuration: cocoascript.UIContextMenuConfiguration, animator: cocoascript.UIContextMenuInteractionAnimating):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/3601204-collectionview
    collectionView_willEndContextMenuInteractionWithConfiguration_animator(collectionView: cocoascript.UICollectionView, configuration: cocoascript.UIContextMenuConfiguration, animator: cocoascript.UIContextMenuInteractionAnimating):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/3375794-collectionview
    collectionView_willPerformPreviewActionForMenuWithConfiguration_animator(collectionView: cocoascript.UICollectionView, configuration: cocoascript.UIContextMenuConfiguration, animator: cocoascript.UIContextMenuInteractionCommitAnimating):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618013-collectionview
    collectionView_canFocusItemAtIndexPath(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618066-indexpathforpreferredfocusedview
    indexPathForPreferredFocusedViewInCollectionView(collectionView: cocoascript.UICollectionView):cocoascript.NSIndexPath;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618072-collectionview
    collectionView_shouldUpdateFocusInContext(collectionView: cocoascript.UICollectionView, context: cocoascript.UICollectionViewFocusUpdateContext):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618081-collectionview
    collectionView_didUpdateFocusInContext_withAnimationCoordinator(collectionView: cocoascript.UICollectionView, context: cocoascript.UICollectionViewFocusUpdateContext, coordinator: cocoascript.UIFocusAnimationCoordinator):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/3600426-collectionview
    collectionView_canEditItemAtIndexPath(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/2897333-collectionview
    collectionView_shouldSpringLoadItemAtIndexPath_withContext(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath, context: cocoascript.UISpringLoadedInteractionContext):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618010-collectionview
    collectionView_shouldShowMenuForItemAtIndexPath(collectionView: cocoascript.UICollectionView, indexPath: cocoascript.NSIndexPath):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618051-collectionview
    collectionView_canPerformAction_forItemAtIndexPath_withSender(collectionView: cocoascript.UICollectionView, action: cocoascript.SEL, indexPath: cocoascript.NSIndexPath, sender: cocoascript.UICollectionViewDelegate):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegate/1618073-collectionview
    collectionView_performAction_forItemAtIndexPath_withSender(collectionView: cocoascript.UICollectionView, action: cocoascript.SEL, indexPath: cocoascript.NSIndexPath, sender: cocoascript.UICollectionViewDelegate):void;
  }
}
declare namespace cocoascript {
  /**
   * A single data item when that item is within the collection view’s visible bounds.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewcell
   */
  interface UICollectionViewCell extends UICollectionReusableView {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcell/3600429-backgroundconfiguration
    backgroundConfiguration(): cocoascript.UIBackgroundConfiguration;
    setBackgroundConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcell/3600427-automaticallyupdatesbackgroundco
    automaticallyUpdatesBackgroundConfiguration(): cocoascript.BOOL;
    setAutomaticallyUpdatesBackgroundConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcell/1620131-backgroundview
    backgroundView(): cocoascript.UIView;
    setBackgroundView(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcell/1620138-selectedbackgroundview
    selectedBackgroundView(): cocoascript.UIView;
    setSelectedBackgroundView(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcell/3600431-contentconfiguration
    contentConfiguration(): cocoascript.UIContentConfiguration;
    setContentConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcell/3600428-automaticallyupdatescontentconfi
    automaticallyUpdatesContentConfiguration(): cocoascript.BOOL;
    setAutomaticallyUpdatesContentConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcell/1620133-contentview
    contentView(): cocoascript.UIView;
    setContentView(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcell/3600430-configurationstate
    configurationState(): cocoascript.UICellConfigurationState;
    setConfigurationState(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcell/3600432-setneedsupdateconfiguration
    setNeedsUpdateConfiguration():void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcell/3600433-updateconfigurationusingstate
    updateConfigurationUsingState(state: cocoascript.UICellConfigurationState):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcell/1620130-selected
    selected(): cocoascript.BOOL;
    setSelected(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcell/1620134-highlighted
    highlighted(): cocoascript.BOOL;
    setHighlighted(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcell/2897262-dragstatedidchange
    dragStateDidChange(dragState: cocoascript.UICollectionViewCellDragState):void;
    //
    alloc():cocoascript.UICollectionViewCell;
    //
    init():cocoascript.UICollectionViewCell;
  }
}

declare const UICollectionViewCell: cocoascript.UICollectionViewCell;
declare namespace cocoascript {
  /**
   * A view that defines the behavior for all cells and supplementary views presented by a collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionreusableview
   */
  interface UICollectionReusableView extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uicollectionreusableview/1620136-reuseidentifier
    reuseIdentifier(): cocoascript.NSString;
    setReuseIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionreusableview/1620141-prepareforreuse
    prepareForReuse():void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionreusableview/1620132-preferredlayoutattributesfitting
    preferredLayoutAttributesFittingAttributes(layoutAttributes: cocoascript.UICollectionViewLayoutAttributes):cocoascript.UICollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/uikit/uicollectionreusableview/1620139-applylayoutattributes
    applyLayoutAttributes(layoutAttributes: cocoascript.UICollectionViewLayoutAttributes):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionreusableview/1620140-willtransitionfromlayout
    willTransitionFromLayout_toLayout(oldLayout: cocoascript.UICollectionViewLayout, newLayout: cocoascript.UICollectionViewLayout):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionreusableview/1620129-didtransitionfromlayout
    didTransitionFromLayout_toLayout(oldLayout: cocoascript.UICollectionViewLayout, newLayout: cocoascript.UICollectionViewLayout):void;
    //
    alloc():cocoascript.UICollectionReusableView;
    //
    init():cocoascript.UICollectionReusableView;
  }
}

declare const UICollectionReusableView: cocoascript.UICollectionReusableView;
declare namespace cocoascript {
  /**
   * A placeholder for an item dropped on a collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewdropplaceholder
   */
  interface UICollectionViewDropPlaceholder extends UICollectionViewPlaceholder {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropplaceholder/2921637-previewparametersprovider
    previewParametersProvider(): cocoascript.UICollectionViewCell;
    setPreviewParametersProvider(): void;
    //
    alloc():cocoascript.UICollectionViewDropPlaceholder;
    //
    init():cocoascript.UICollectionViewDropPlaceholder;
  }
}

declare const UICollectionViewDropPlaceholder: cocoascript.UICollectionViewDropPlaceholder;
declare namespace cocoascript {
  /**
   * A placeholder for an item dragged or dropped on a collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewplaceholder
   */
  interface UICollectionViewPlaceholder extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewplaceholder/2921639-initwithinsertionindexpath
    initWithInsertionIndexPath_reuseIdentifier(insertionIndexPath: cocoascript.NSIndexPath, reuseIdentifier: cocoascript.NSString):cocoascript.UICollectionViewPlaceholder;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewplaceholder/2921635-cellupdatehandler
    cellUpdateHandler(): cocoascript.UICollectionViewCell;
    setCellUpdateHandler(): void;
    //
    alloc():cocoascript.UICollectionViewPlaceholder;
    //
    init():cocoascript.UICollectionViewPlaceholder;
  }
}

declare const UICollectionViewPlaceholder: cocoascript.UICollectionViewPlaceholder;
declare namespace cocoascript {
  /**
   * A context object that provides information relevant to a specific focus update from one view to another.
   * doc://com.apple.documentation/documentation/uikit/uitableviewfocusupdatecontext
   */
  interface UITableViewFocusUpdateContext extends UIFocusUpdateContext {
    // doc://com.apple.documentation/documentation/uikit/uitableviewfocusupdatecontext/1614930-previouslyfocusedindexpath
    previouslyFocusedIndexPath(): cocoascript.NSIndexPath;
    setPreviouslyFocusedIndexPath(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewfocusupdatecontext/1614919-nextfocusedindexpath
    nextFocusedIndexPath(): cocoascript.NSIndexPath;
    setNextFocusedIndexPath(): void;
    //
    alloc():cocoascript.UITableViewFocusUpdateContext;
    //
    init():cocoascript.UITableViewFocusUpdateContext;
  }
}

declare const UITableViewFocusUpdateContext: cocoascript.UITableViewFocusUpdateContext;
declare namespace cocoascript {
  /**
   * A reusable view that you place at the top or bottom of a table section to display additional information for that section.
   * doc://com.apple.documentation/documentation/uikit/uitableviewheaderfooterview
   */
  interface UITableViewHeaderFooterView extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uitableviewheaderfooterview/1624918-initwithreuseidentifier
    initWithReuseIdentifier(reuseIdentifier: cocoascript.NSString):cocoascript.UITableViewHeaderFooterView;
    // doc://com.apple.documentation/documentation/uikit/uitableviewheaderfooterview/1624917-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UITableViewHeaderFooterView;
    // doc://com.apple.documentation/documentation/uikit/uitableviewheaderfooterview/1624909-reuseidentifier
    reuseIdentifier(): cocoascript.NSString;
    setReuseIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewheaderfooterview/1624916-prepareforreuse
    prepareForReuse():void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewheaderfooterview/3600594-backgroundconfiguration
    backgroundConfiguration(): cocoascript.UIBackgroundConfiguration;
    setBackgroundConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewheaderfooterview/3600592-automaticallyupdatesbackgroundco
    automaticallyUpdatesBackgroundConfiguration(): cocoascript.BOOL;
    setAutomaticallyUpdatesBackgroundConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewheaderfooterview/1624913-backgroundview
    backgroundView(): cocoascript.UIView;
    setBackgroundView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewheaderfooterview/3600597-defaultcontentconfiguration
    defaultContentConfiguration():cocoascript.UIListContentConfiguration;
    // doc://com.apple.documentation/documentation/uikit/uitableviewheaderfooterview/3600596-contentconfiguration
    contentConfiguration(): cocoascript.UIContentConfiguration;
    setContentConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewheaderfooterview/3600593-automaticallyupdatescontentconfi
    automaticallyUpdatesContentConfiguration(): cocoascript.BOOL;
    setAutomaticallyUpdatesContentConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewheaderfooterview/1624914-contentview
    contentView(): cocoascript.UIView;
    setContentView(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewheaderfooterview/1624912-textlabel
    textLabel(): cocoascript.UILabel;
    setTextLabel(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewheaderfooterview/1624910-detailtextlabel
    detailTextLabel(): cocoascript.UILabel;
    setDetailTextLabel(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewheaderfooterview/3600595-configurationstate
    configurationState(): cocoascript.UIViewConfigurationState;
    setConfigurationState(): void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewheaderfooterview/3600598-setneedsupdateconfiguration
    setNeedsUpdateConfiguration():void;
    // doc://com.apple.documentation/documentation/uikit/uitableviewheaderfooterview/3600599-updateconfigurationusingstate
    updateConfigurationUsingState(state: cocoascript.UIViewConfigurationState):void;
    //
    alloc():cocoascript.UITableViewHeaderFooterView;
    //
    init():cocoascript.UITableViewHeaderFooterView;
  }
}

declare const UITableViewHeaderFooterView: cocoascript.UITableViewHeaderFooterView;
declare namespace cocoascript {
  /**
   * The set of actions to perform when swiping on rows of a table.
   * doc://com.apple.documentation/documentation/uikit/uiswipeactionsconfiguration
   */
  interface UISwipeActionsConfiguration extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiswipeactionsconfiguration/2902360-actions
    actions(): cocoascript.UIContextualAction;
    setActions(): void;
    // doc://com.apple.documentation/documentation/uikit/uiswipeactionsconfiguration/2902361-performsfirstactionwithfullswipe
    performsFirstActionWithFullSwipe(): cocoascript.BOOL;
    setPerformsFirstActionWithFullSwipe(): void;
    //
    alloc():cocoascript.UISwipeActionsConfiguration;
    //
    init():cocoascript.UISwipeActionsConfiguration;
  }
}

declare const UISwipeActionsConfiguration: cocoascript.UISwipeActionsConfiguration;
declare namespace cocoascript {
  /**
   * An action to display when the user swipes a table row.
   * doc://com.apple.documentation/documentation/uikit/uicontextualaction
   */
  interface UIContextualAction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicontextualaction/2902342-title
    title(): cocoascript.NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontextualaction/2902335-backgroundcolor
    backgroundColor(): cocoascript.UIColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontextualaction/2902337-image
    image(): cocoascript.UIImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontextualaction/2902341-handler
    handler(): cocoascript.UIContextualActionHandler;
    setHandler(): void;
    // doc://com.apple.documentation/documentation/uikit/uicontextualaction/2902334-style
    style(): cocoascript.UIContextualActionStyle;
    setStyle(): void;
    //
    alloc():cocoascript.UIContextualAction;
    //
    init():cocoascript.UIContextualAction;
  }
}

declare const UIContextualAction: cocoascript.UIContextualAction;
declare namespace cocoascript {
  /**
   * A placeholder cell that supports customizing the drop preview parameters.
   * doc://com.apple.documentation/documentation/uikit/uitableviewdropplaceholder
   */
  interface UITableViewDropPlaceholder extends UITableViewPlaceholder {
    // doc://com.apple.documentation/documentation/uikit/uitableviewdropplaceholder/2921668-previewparametersprovider
    previewParametersProvider(): cocoascript.UITableViewCell;
    setPreviewParametersProvider(): void;
    //
    alloc():cocoascript.UITableViewDropPlaceholder;
    //
    init():cocoascript.UITableViewDropPlaceholder;
  }
}

declare const UITableViewDropPlaceholder: cocoascript.UITableViewDropPlaceholder;
declare namespace cocoascript {
  /**
   * An object that contains information about a placeholder cell being inserted into a table.
   * doc://com.apple.documentation/documentation/uikit/uitableviewplaceholder
   */
  interface UITableViewPlaceholder extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitableviewplaceholder/2921666-initwithinsertionindexpath
    initWithInsertionIndexPath_reuseIdentifier_rowHeight(insertionIndexPath: cocoascript.NSIndexPath, reuseIdentifier: cocoascript.NSString, rowHeight: cocoascript.CGFloat):cocoascript.UITableViewPlaceholder;
    // doc://com.apple.documentation/documentation/uikit/uitableviewplaceholder/2921671-cellupdatehandler
    cellUpdateHandler(): cocoascript.UITableViewCell;
    setCellUpdateHandler(): void;
    //
    alloc():cocoascript.UITableViewPlaceholder;
    //
    init():cocoascript.UITableViewPlaceholder;
  }
}

declare const UITableViewPlaceholder: cocoascript.UITableViewPlaceholder;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiscrollviewcontentinsetadjustmentbehavior
  type UIScrollViewContentInsetAdjustmentBehavior = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiscrollviewdecelerationrate
  type UIScrollViewDecelerationRate = cocoascript.CGFloat;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiscrollviewindicatorstyle
  type UIScrollViewIndicatorStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiscrollviewkeyboarddismissmode
  type UIScrollViewKeyboardDismissMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiscrollviewindexdisplaymode
  type UIScrollViewIndexDisplayMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiwebviewnavigationtype
  type UIWebViewNavigationType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiwebpaginationbreakingmode
  type UIWebPaginationBreakingMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiwebpaginationmode
  type UIWebPaginationMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * The interface that determines if a text view is a drag source.
   * doc://com.apple.documentation/documentation/uikit/uitextdraggable
   */
  interface UITextDraggable extends UITextInput {
    // doc://com.apple.documentation/documentation/uikit/uitextdraggable/2890913-textdragactive
    textDragActive(): cocoascript.BOOL;
    setTextDragActive(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdraggable/2890911-textdraginteraction
    textDragInteraction(): cocoascript.UIDragInteraction;
    setTextDragInteraction(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdraggable/2890903-textdragdelegate
    textDragDelegate(): cocoascript.UITextDragDelegate;
    setTextDragDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdraggable/2897255-textdragoptions
    textDragOptions(): cocoascript.UITextDragOptions;
    setTextDragOptions(): void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextdragoptions
  type UITextDragOptions = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * The interface that determines if a text view is a drop destination.
   * doc://com.apple.documentation/documentation/uikit/uitextdroppable
   */
  interface UITextDroppable extends UITextInput {
    // doc://com.apple.documentation/documentation/uikit/uitextdroppable/2890852-textdropactive
    textDropActive(): cocoascript.BOOL;
    setTextDropActive(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdroppable/2890862-textdropinteraction
    textDropInteraction(): cocoascript.UIDropInteraction;
    setTextDropInteraction(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdroppable/2890860-textdropdelegate
    textDropDelegate(): cocoascript.UITextDropDelegate;
    setTextDropDelegate(): void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextdropeditability
  type UITextDropEditability = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * Renders previews of text dragged by the user.
   * doc://com.apple.documentation/documentation/uikit/uitextdragpreviewrenderer
   */
  interface UITextDragPreviewRenderer extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextdragpreviewrenderer/2890970-initwithlayoutmanager
    initWithLayoutManager_range(layoutManager: cocoascript.NSLayoutManager, range: cocoascript.NSRange):cocoascript.UITextDragPreviewRenderer;
    // doc://com.apple.documentation/documentation/uikit/uitextdragpreviewrenderer/2891008-initwithlayoutmanager
    initWithLayoutManager_range_unifyRects(layoutManager: cocoascript.NSLayoutManager, range: cocoascript.NSRange, unifyRects: cocoascript.BOOL):cocoascript.UITextDragPreviewRenderer;
    // doc://com.apple.documentation/documentation/uikit/uitextdragpreviewrenderer/2890974-bodyrect
    bodyRect(): cocoascript.CGRect;
    setBodyRect(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdragpreviewrenderer/2891020-firstlinerect
    firstLineRect(): cocoascript.CGRect;
    setFirstLineRect(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdragpreviewrenderer/2891017-lastlinerect
    lastLineRect(): cocoascript.CGRect;
    setLastLineRect(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdragpreviewrenderer/2890984-adjustfirstlinerect
    adjustFirstLineRect_bodyRect_lastLineRect_textOrigin(firstLineRect: cocoascript.CGRect, bodyRect: cocoascript.CGRect, lastLineRect: cocoascript.CGRect, origin: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/uitextdragpreviewrenderer/2891018-image
    image(): cocoascript.UIImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uitextdragpreviewrenderer/2891019-layoutmanager
    layoutManager(): cocoascript.NSLayoutManager;
    setLayoutManager(): void;
    //
    alloc():cocoascript.UITextDragPreviewRenderer;
    //
    init():cocoascript.UITextDragPreviewRenderer;
  }
}

declare const UITextDragPreviewRenderer: cocoascript.UITextDragPreviewRenderer;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextdropaction
  type UITextDropAction = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextdropperformer
  type UITextDropPerformer = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextdropprogressmode
  type UITextDropProgressMode = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * A protocol that supports pasting tokens.
   * doc://com.apple.documentation/documentation/uikit/uisearchtextfieldpasteitem
   */
  interface UISearchTextFieldPasteItem extends UITextPasteItem {
    // doc://com.apple.documentation/documentation/uikit/uisearchtextfieldpasteitem/3295955-setsearchtokenresult
    setSearchTokenResult(token: cocoascript.UISearchToken):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uivibrancyeffectstyle
  type UIVibrancyEffectStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiblureffectstyle
  type UIBlurEffectStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uibarbuttonsystemitem
  type UIBarButtonSystemItem = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uibarbuttonitemstyle
  type UIBarButtonItemStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * The
   * doc://com.apple.documentation/documentation/uikit/uinavigationbardelegate
   */
  interface UINavigationBarDelegate extends UIBarPositioningDelegate {
    // doc://com.apple.documentation/documentation/uikit/uinavigationbardelegate/1624941-navigationbar
    navigationBar_shouldPushItem(navigationBar: cocoascript.UINavigationBar, item: cocoascript.UINavigationItem):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbardelegate/1624964-navigationbar
    navigationBar_didPushItem(navigationBar: cocoascript.UINavigationBar, item: cocoascript.UINavigationItem):void;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbardelegate/1624944-navigationbar
    navigationBar_shouldPopItem(navigationBar: cocoascript.UINavigationBar, item: cocoascript.UINavigationItem):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uinavigationbardelegate/1624948-navigationbar
    navigationBar_didPopItem(navigationBar: cocoascript.UINavigationBar, item: cocoascript.UINavigationItem):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitabbarsystemitem
  type UITabBarSystemItem = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * A relationship between two dynamic items, or between a dynamic item and an anchor point.
   * doc://com.apple.documentation/documentation/uikit/uiattachmentbehavior
   */
  interface UIAttachmentBehavior extends UIDynamicBehavior {
    // doc://com.apple.documentation/documentation/uikit/uiattachmentbehavior/1621297-initwithitem
    initWithItem_attachedToAnchor(item: cocoascript.UIDynamicItem, point: cocoascript.CGPoint):cocoascript.UIAttachmentBehavior;
    // doc://com.apple.documentation/documentation/uikit/uiattachmentbehavior/1621309-initwithitem
    initWithItem_attachedToItem(item1: cocoascript.UIDynamicItem, item2: cocoascript.UIDynamicItem):cocoascript.UIAttachmentBehavior;
    // doc://com.apple.documentation/documentation/uikit/uiattachmentbehavior/1621301-initwithitem
    initWithItem_offsetFromCenter_attachedToAnchor(item: cocoascript.UIDynamicItem, offset: cocoascript.UIOffset, point: cocoascript.CGPoint):cocoascript.UIAttachmentBehavior;
    // doc://com.apple.documentation/documentation/uikit/uiattachmentbehavior/1621298-initwithitem
    initWithItem_offsetFromCenter_attachedToItem_offsetFromCenter(item1: cocoascript.UIDynamicItem, offset1: cocoascript.UIOffset, item2: cocoascript.UIDynamicItem, offset2: cocoascript.UIOffset):cocoascript.UIAttachmentBehavior;
    // doc://com.apple.documentation/documentation/uikit/uiattachmentbehavior/1621311-items
    items(): cocoascript.UIDynamicItem;
    setItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uiattachmentbehavior/1621315-anchorpoint
    anchorPoint(): cocoascript.CGPoint;
    setAnchorPoint(): void;
    // doc://com.apple.documentation/documentation/uikit/uiattachmentbehavior/1621312-attachedbehaviortype
    attachedBehaviorType(): cocoascript.UIAttachmentBehaviorType;
    setAttachedBehaviorType(): void;
    // doc://com.apple.documentation/documentation/uikit/uiattachmentbehavior/1621302-damping
    damping(): cocoascript.CGFloat;
    setDamping(): void;
    // doc://com.apple.documentation/documentation/uikit/uiattachmentbehavior/1621321-frequency
    frequency(): cocoascript.CGFloat;
    setFrequency(): void;
    // doc://com.apple.documentation/documentation/uikit/uiattachmentbehavior/1621304-length
    length(): cocoascript.CGFloat;
    setLength(): void;
    // doc://com.apple.documentation/documentation/uikit/uiattachmentbehavior/1621307-frictiontorque
    frictionTorque(): cocoascript.CGFloat;
    setFrictionTorque(): void;
    // doc://com.apple.documentation/documentation/uikit/uiattachmentbehavior/1621294-attachmentrange
    attachmentRange(): cocoascript.UIFloatRange;
    setAttachmentRange(): void;
    //
    alloc():cocoascript.UIAttachmentBehavior;
    //
    init():cocoascript.UIAttachmentBehavior;
  }
}

declare const UIAttachmentBehavior: cocoascript.UIAttachmentBehavior;
declare const UIOffsetZero: cocoascript.UIOffset;
declare const UIEdgeInsetsZero: cocoascript.UIEdgeInsets;
declare const NSDirectionalEdgeInsetsZero: cocoascript.NSDirectionalEdgeInsets;
declare const UINavigationControllerHideShowBarDuration: cocoascript.CGFloat;
declare namespace cocoascript {
  /**
   * The methods adopted by the object you use to manage changes to a split view interface.
   * doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate
   */
  interface UISplitViewControllerDelegate {
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/1623169-splitviewcontrollerpreferredinte
    splitViewControllerPreferredInterfaceOrientationForPresentation(splitViewController: cocoascript.UISplitViewController):cocoascript.UIInterfaceOrientation;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/1623178-splitviewcontrollersupportedinte
    splitViewControllerSupportedInterfaceOrientations(splitViewController: cocoascript.UISplitViewController):cocoascript.UIInterfaceOrientationMask;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/1623176-splitviewcontroller
    splitViewController_willChangeToDisplayMode(svc: cocoascript.UISplitViewController, displayMode: cocoascript.UISplitViewControllerDisplayMode):void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/1623192-targetdisplaymodeforactioninspli
    targetDisplayModeForActionInSplitViewController(svc: cocoascript.UISplitViewController):cocoascript.UISplitViewControllerDisplayMode;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/3580925-splitviewcontroller
    splitViewController_topColumnForCollapsingToProposedTopColumn(svc: cocoascript.UISplitViewController, proposedTopColumn: cocoascript.UISplitViewControllerColumn):cocoascript.UISplitViewControllerColumn;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/3580926-splitviewcontroller
    splitViewController_willHideColumn(svc: cocoascript.UISplitViewController, column: cocoascript.UISplitViewControllerColumn):void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/3580928-splitviewcontrollerdidcollapse
    splitViewControllerDidCollapse(svc: cocoascript.UISplitViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/3580924-splitviewcontroller
    splitViewController_displayModeForExpandingToProposedDisplayMode(svc: cocoascript.UISplitViewController, proposedDisplayMode: cocoascript.UISplitViewControllerDisplayMode):cocoascript.UISplitViewControllerDisplayMode;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/3580927-splitviewcontroller
    splitViewController_willShowColumn(svc: cocoascript.UISplitViewController, column: cocoascript.UISplitViewControllerColumn):void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/3580929-splitviewcontrollerdidexpand
    splitViewControllerDidExpand(svc: cocoascript.UISplitViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/3650237-splitviewcontrollerinteractivepr
    splitViewControllerInteractivePresentationGestureWillBegin(svc: cocoascript.UISplitViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/3650236-splitviewcontrollerinteractivepr
    splitViewControllerInteractivePresentationGestureDidEnd(svc: cocoascript.UISplitViewController):void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/1623197-primaryviewcontrollerforcollapsi
    primaryViewControllerForCollapsingSplitViewController(splitViewController: cocoascript.UISplitViewController):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/1623184-splitviewcontroller
    splitViewController_collapseSecondaryViewController_ontoPrimaryViewController(splitViewController: cocoascript.UISplitViewController, secondaryViewController: cocoascript.UIViewController, primaryViewController: cocoascript.UIViewController):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/1623188-primaryviewcontrollerforexpandin
    primaryViewControllerForExpandingSplitViewController(splitViewController: cocoascript.UISplitViewController):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/1623189-splitviewcontroller
    splitViewController_separateSecondaryViewControllerFromPrimaryViewController(splitViewController: cocoascript.UISplitViewController, primaryViewController: cocoascript.UIViewController):cocoascript.UIViewController;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/1623168-splitviewcontroller
    splitViewController_showViewController_sender(splitViewController: cocoascript.UISplitViewController, vc: cocoascript.UIViewController, sender: cocoascript.UISplitViewControllerDelegate):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/1623204-splitviewcontroller
    splitViewController_showDetailViewController_sender(splitViewController: cocoascript.UISplitViewController, vc: cocoascript.UIViewController, sender: cocoascript.UISplitViewControllerDelegate):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/1623174-splitviewcontroller
    splitViewController_shouldHideViewController_inOrientation(svc: cocoascript.UISplitViewController, vc: cocoascript.UIViewController, orientation: cocoascript.UIInterfaceOrientation):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/1623175-splitviewcontroller
    splitViewController_willHideViewController_withBarButtonItem_forPopoverController(svc: cocoascript.UISplitViewController, aViewController: cocoascript.UIViewController, barButtonItem: cocoascript.UIBarButtonItem, pc: cocoascript.UIPopoverController):void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/1623202-splitviewcontroller
    splitViewController_willShowViewController_invalidatingBarButtonItem(svc: cocoascript.UISplitViewController, aViewController: cocoascript.UIViewController, barButtonItem: cocoascript.UIBarButtonItem):void;
    // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdelegate/1623186-splitviewcontroller
    splitViewController_popoverController_willPresentViewController(svc: cocoascript.UISplitViewController, pc: cocoascript.UIPopoverController, aViewController: cocoascript.UIViewController):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerdisplaymode
  type UISplitViewControllerDisplayMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollersplitbehavior
  type UISplitViewControllerSplitBehavior = cocoascript.NSInteger;
}
declare const UISplitViewControllerAutomaticDimension: cocoascript.CGFloat;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerstyle
  type UISplitViewControllerStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollercolumn
  type UISplitViewControllerColumn = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uisplitviewcontrollerprimaryedge
  type UISplitViewControllerPrimaryEdge = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uinavigationitemlargetitledisplaymode
  type UINavigationItemLargeTitleDisplayMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uinavigationitembackbuttondisplaymode
  type UINavigationItemBackButtonDisplayMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipageviewcontrolleroptionskey
  type UIPageViewControllerOptionsKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipageviewcontrollernavigationdirection
  type UIPageViewControllerNavigationDirection = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipageviewcontrollernavigationorientation
  type UIPageViewControllerNavigationOrientation = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipageviewcontrollerspinelocation
  type UIPageViewControllerSpineLocation = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipageviewcontrollertransitionstyle
  type UIPageViewControllerTransitionStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * A selectable search parameter.
   * doc://com.apple.documentation/documentation/uikit/uisearchsuggestionitem
   */
  interface UISearchSuggestionItem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uisearchsuggestionitem/3584831-initwithlocalizedsuggestion
    initWithLocalizedSuggestion_localizedDescription_iconImage(suggestion: cocoascript.NSString, description: cocoascript.NSString, iconImage: cocoascript.UIImage):cocoascript.UISearchSuggestionItem;
    // doc://com.apple.documentation/documentation/uikit/uisearchsuggestionitem/3584830-initwithlocalizedsuggestion
    initWithLocalizedSuggestion_localizedDescription(suggestion: cocoascript.NSString, description: cocoascript.NSString):cocoascript.UISearchSuggestionItem;
    // doc://com.apple.documentation/documentation/uikit/uisearchsuggestionitem/3584829-initwithlocalizedsuggestion
    initWithLocalizedSuggestion(suggestion: cocoascript.NSString):cocoascript.UISearchSuggestionItem;
    // doc://com.apple.documentation/documentation/uikit/uisearchsuggestionitem/3584833-localizedsuggestion
    localizedSuggestion(): cocoascript.NSString;
    setLocalizedSuggestion(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchsuggestionitem/3584832-localizeddescription
    localizedDescription(): cocoascript.NSString;
    setLocalizedDescription(): void;
    // doc://com.apple.documentation/documentation/uikit/uisearchsuggestionitem/3584828-iconimage
    iconImage(): cocoascript.UIImage;
    setIconImage(): void;
    //
    alloc():cocoascript.UISearchSuggestionItem;
    //
    init():cocoascript.UISearchSuggestionItem;
  }
}

declare const UISearchSuggestionItem: cocoascript.UISearchSuggestionItem;
declare namespace cocoascript {
  /**
   * An object that implements the standard loading and transition animations for a document browser.
   * doc://com.apple.documentation/documentation/uikit/uidocumentbrowsertransitioncontroller
   */
  interface UIDocumentBrowserTransitionController extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowsertransitioncontroller/2874195-loadingprogress
    loadingProgress(): cocoascript.NSProgress;
    setLoadingProgress(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowsertransitioncontroller/2874176-targetview
    targetView(): cocoascript.UIView;
    setTargetView(): void;
    //
    alloc():cocoascript.UIDocumentBrowserTransitionController;
    //
    init():cocoascript.UIDocumentBrowserTransitionController;
  }
}

declare const UIDocumentBrowserTransitionController: cocoascript.UIDocumentBrowserTransitionController;
declare namespace cocoascript {
  /**
   * A custom action that you can create and add to a document browser's Edit Menu or navigation bar.
   * doc://com.apple.documentation/documentation/uikit/uidocumentbrowseraction
   */
  interface UIDocumentBrowserAction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowseraction/2874075-initwithidentifier
    initWithIdentifier_localizedTitle_availability_handler(identifier: cocoascript.NSString, localizedTitle: cocoascript.NSString, availability: cocoascript.UIDocumentBrowserActionAvailability, handler: cocoascript.NSURL):cocoascript.UIDocumentBrowserAction;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowseraction/2874076-image
    image(): cocoascript.UIImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowseraction/2874070-supportedcontenttypes
    supportedContentTypes(): cocoascript.NSString;
    setSupportedContentTypes(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowseraction/2874074-supportsmultipleitems
    supportsMultipleItems(): cocoascript.BOOL;
    setSupportsMultipleItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowseraction/2874069-identifier
    identifier(): cocoascript.NSString;
    setIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowseraction/2874071-localizedtitle
    localizedTitle(): cocoascript.NSString;
    setLocalizedTitle(): void;
    // doc://com.apple.documentation/documentation/uikit/uidocumentbrowseraction/2874078-availability
    availability(): cocoascript.UIDocumentBrowserActionAvailability;
    setAvailability(): void;
    //
    alloc():cocoascript.UIDocumentBrowserAction;
    //
    init():cocoascript.UIDocumentBrowserAction;
  }
}

declare const UIDocumentBrowserAction: cocoascript.UIDocumentBrowserAction;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidocumentbrowseruserinterfacestyle
  type UIDocumentBrowserUserInterfaceStyle = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidocumentbrowsererrorcode
  type UIDocumentBrowserErrorCode = cocoascript.NSInteger;
}
declare const UIDocumentBrowserErrorDomain: cocoascript.NSErrorDomain;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidocumentpickermode
  type UIDocumentPickerMode = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicloudsharingpermissionoptions
  type UICloudSharingPermissionOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiprinterpickercompletionhandler
  type UIPrinterPickerCompletionHandler = cocoascript.NSError;
}
declare namespace cocoascript {
  /**
   * A content view for displaying list-based content.
   * doc://com.apple.documentation/documentation/uikit/uilistcontentview
   */
  interface UIListContentView extends UIView {
    // doc://com.apple.documentation/documentation/uikit/uilistcontentview/3600554-initwithconfiguration
    initWithConfiguration(configuration: cocoascript.UIListContentConfiguration):cocoascript.UIListContentView;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentview/3600553-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIListContentView;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentview/3600552-configuration
    configuration(): cocoascript.UIListContentConfiguration;
    setConfiguration(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentview/3650226-textlayoutguide
    textLayoutGuide(): cocoascript.UILayoutGuide;
    setTextLayoutGuide(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentview/3650225-secondarytextlayoutguide
    secondaryTextLayoutGuide(): cocoascript.UILayoutGuide;
    setSecondaryTextLayoutGuide(): void;
    // doc://com.apple.documentation/documentation/uikit/uilistcontentview/3650224-imagelayoutguide
    imageLayoutGuide(): cocoascript.UILayoutGuide;
    setImageLayoutGuide(): void;
    //
    alloc():cocoascript.UIListContentView;
    //
    init():cocoascript.UIListContentView;
  }
}

declare const UIListContentView: cocoascript.UIListContentView;
declare namespace cocoascript {
  /**
   * An object that encapsulates a view’s state.
   * doc://com.apple.documentation/documentation/uikit/uiviewconfigurationstate
   */
  interface UIViewConfigurationState extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiviewconfigurationstate/3601076-traitcollection
    traitCollection(): cocoascript.UITraitCollection;
    setTraitCollection(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewconfigurationstate/3601074-selected
    selected(): cocoascript.BOOL;
    setSelected(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewconfigurationstate/3601073-highlighted
    highlighted(): cocoascript.BOOL;
    setHighlighted(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewconfigurationstate/3601072-focused
    focused(): cocoascript.BOOL;
    setFocused(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewconfigurationstate/3601071-disabled
    disabled(): cocoascript.BOOL;
    setDisabled(): void;
    // doc://com.apple.documentation/documentation/uikit/uiviewconfigurationstate/3600605-initwithtraitcollection
    initWithTraitCollection(traitCollection: cocoascript.UITraitCollection):cocoascript.UIViewConfigurationState;
    // doc://com.apple.documentation/documentation/uikit/uiviewconfigurationstate/3600604-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIViewConfigurationState;
    //
    alloc():cocoascript.UIViewConfigurationState;
    //
    init():cocoascript.UIViewConfigurationState;
  }
}

declare const UIViewConfigurationState: cocoascript.UIViewConfigurationState;
declare namespace cocoascript {
  /**
   * An object that encapsulates a cell’s state.
   * doc://com.apple.documentation/documentation/uikit/uicellconfigurationstate
   */
  interface UICellConfigurationState extends UIViewConfigurationState {
    // doc://com.apple.documentation/documentation/uikit/uicellconfigurationstate/3600400-editing
    editing(): cocoascript.BOOL;
    setEditing(): void;
    // doc://com.apple.documentation/documentation/uikit/uicellconfigurationstate/3600402-swiped
    swiped(): cocoascript.BOOL;
    setSwiped(): void;
    // doc://com.apple.documentation/documentation/uikit/uicellconfigurationstate/3600401-expanded
    expanded(): cocoascript.BOOL;
    setExpanded(): void;
    // doc://com.apple.documentation/documentation/uikit/uicellconfigurationstate/3601198-celldragstate
    cellDragState(): cocoascript.UICellConfigurationDragState;
    setCellDragState(): void;
    // doc://com.apple.documentation/documentation/uikit/uicellconfigurationstate/3601199-celldropstate
    cellDropState(): cocoascript.UICellConfigurationDropState;
    setCellDropState(): void;
    // doc://com.apple.documentation/documentation/uikit/uicellconfigurationstate/3672180-reordering
    reordering(): cocoascript.BOOL;
    setReordering(): void;
    //
    alloc():cocoascript.UICellConfigurationState;
    //
    init():cocoascript.UICellConfigurationState;
  }
}

declare const UICellConfigurationState: cocoascript.UICellConfigurationState;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiconfigurationstatecustomkey
  type UIConfigurationStateCustomKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiconfigurationcolortransformer
  type UIConfigurationColorTransformer = cocoascript.UIColor;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitabbaritemappearancestyle
  type UITabBarItemAppearanceStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * The timing information for animations that mimics the behavior of a spring.
   * doc://com.apple.documentation/documentation/uikit/uispringtimingparameters
   */
  interface UISpringTimingParameters extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uispringtimingparameters/1649802-init
    init():cocoascript.UISpringTimingParameters;
    // doc://com.apple.documentation/documentation/uikit/uispringtimingparameters/1649835-initwithdampingratio
    initWithDampingRatio(ratio: cocoascript.CGFloat):cocoascript.UISpringTimingParameters;
    // doc://com.apple.documentation/documentation/uikit/uispringtimingparameters/1649832-initwithdampingratio
    initWithDampingRatio_initialVelocity(ratio: cocoascript.CGFloat, velocity: cocoascript.CGVector):cocoascript.UISpringTimingParameters;
    // doc://com.apple.documentation/documentation/uikit/uispringtimingparameters/1649764-initwithmass
    initWithMass_stiffness_damping_initialVelocity(mass: cocoascript.CGFloat, stiffness: cocoascript.CGFloat, damping: cocoascript.CGFloat, velocity: cocoascript.CGVector):cocoascript.UISpringTimingParameters;
    // doc://com.apple.documentation/documentation/uikit/uispringtimingparameters/1649919-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UISpringTimingParameters;
    // doc://com.apple.documentation/documentation/uikit/uispringtimingparameters/1649909-initialvelocity
    initialVelocity(): cocoascript.CGVector;
    setInitialVelocity(): void;
    //
    alloc():cocoascript.UISpringTimingParameters;
    //
    init():cocoascript.UISpringTimingParameters;
  }
}

declare const UISpringTimingParameters: cocoascript.UISpringTimingParameters;
declare namespace cocoascript {
  /**
   * The timing information for animations in the form of a cubic Bézier curve.
   * doc://com.apple.documentation/documentation/uikit/uicubictimingparameters
   */
  interface UICubicTimingParameters extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicubictimingparameters/1649799-init
    init():cocoascript.UICubicTimingParameters;
    // doc://com.apple.documentation/documentation/uikit/uicubictimingparameters/1649749-initwithanimationcurve
    initWithAnimationCurve(curve: cocoascript.UIViewAnimationCurve):cocoascript.UICubicTimingParameters;
    // doc://com.apple.documentation/documentation/uikit/uicubictimingparameters/1649854-initwithcontrolpoint1
    initWithControlPoint1_controlPoint2(point1: cocoascript.CGPoint, point2: cocoascript.CGPoint):cocoascript.UICubicTimingParameters;
    // doc://com.apple.documentation/documentation/uikit/uicubictimingparameters/1649910-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UICubicTimingParameters;
    // doc://com.apple.documentation/documentation/uikit/uicubictimingparameters/1649841-animationcurve
    animationCurve(): cocoascript.UIViewAnimationCurve;
    setAnimationCurve(): void;
    // doc://com.apple.documentation/documentation/uikit/uicubictimingparameters/1649914-controlpoint1
    controlPoint1(): cocoascript.CGPoint;
    setControlPoint1(): void;
    // doc://com.apple.documentation/documentation/uikit/uicubictimingparameters/1649907-controlpoint2
    controlPoint2(): cocoascript.CGPoint;
    setControlPoint2(): void;
    //
    alloc():cocoascript.UICubicTimingParameters;
    //
    init():cocoascript.UICubicTimingParameters;
  }
}

declare const UICubicTimingParameters: cocoascript.UICubicTimingParameters;
declare namespace cocoascript {
  /**
   * An interface for modifying an animation while it is running.
   * doc://com.apple.documentation/documentation/uikit/uiviewimplicitlyanimating
   */
  interface UIViewImplicitlyAnimating extends UIViewAnimating {
    // doc://com.apple.documentation/documentation/uikit/uiviewimplicitlyanimating/1829436-addanimations
    addAnimations(animation: void):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewimplicitlyanimating/1829428-addanimations
    addAnimations_delayFactor(animation: void, delayFactor: cocoascript.CGFloat):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewimplicitlyanimating/1829432-addcompletion
    addCompletion(completion: cocoascript.UIViewAnimatingPosition):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewimplicitlyanimating/1829444-continueanimationwithtimingparam
    continueAnimationWithTimingParameters_durationFactor(parameters: cocoascript.UITimingCurveProvider, durationFactor: cocoascript.CGFloat):void;
  }
}
declare namespace cocoascript {
  /**
   * An object that drives an interactive animation between one view controller and another.
   * doc://com.apple.documentation/documentation/uikit/uipercentdriveninteractivetransition
   */
  interface UIPercentDrivenInteractiveTransition extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uipercentdriveninteractivetransition/1829439-timingcurve
    timingCurve(): cocoascript.UITimingCurveProvider;
    setTimingCurve(): void;
    // doc://com.apple.documentation/documentation/uikit/uipercentdriveninteractivetransition/1622048-completioncurve
    completionCurve(): cocoascript.UIViewAnimationCurve;
    setCompletionCurve(): void;
    // doc://com.apple.documentation/documentation/uikit/uipercentdriveninteractivetransition/1622029-duration
    duration(): cocoascript.CGFloat;
    setDuration(): void;
    // doc://com.apple.documentation/documentation/uikit/uipercentdriveninteractivetransition/1622053-percentcomplete
    percentComplete(): cocoascript.CGFloat;
    setPercentComplete(): void;
    // doc://com.apple.documentation/documentation/uikit/uipercentdriveninteractivetransition/1622052-completionspeed
    completionSpeed(): cocoascript.CGFloat;
    setCompletionSpeed(): void;
    // doc://com.apple.documentation/documentation/uikit/uipercentdriveninteractivetransition/1829427-wantsinteractivestart
    wantsInteractiveStart(): cocoascript.BOOL;
    setWantsInteractiveStart(): void;
    // doc://com.apple.documentation/documentation/uikit/uipercentdriveninteractivetransition/1622051-updateinteractivetransition
    updateInteractiveTransition(percentComplete: cocoascript.CGFloat):void;
    // doc://com.apple.documentation/documentation/uikit/uipercentdriveninteractivetransition/1829435-pauseinteractivetransition
    pauseInteractiveTransition():void;
    // doc://com.apple.documentation/documentation/uikit/uipercentdriveninteractivetransition/1622026-cancelinteractivetransition
    cancelInteractiveTransition():void;
    // doc://com.apple.documentation/documentation/uikit/uipercentdriveninteractivetransition/1622035-finishinteractivetransition
    finishInteractiveTransition():void;
    //
    alloc():cocoascript.UIPercentDrivenInteractiveTransition;
    //
    init():cocoascript.UIPercentDrivenInteractiveTransition;
  }
}

declare const UIPercentDrivenInteractiveTransition: cocoascript.UIPercentDrivenInteractiveTransition;
declare namespace cocoascript {
  /**
   * A set of methods that provides support for animations associated with a view controller transition.
   * doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinator
   */
  interface UIViewControllerTransitionCoordinator extends UIViewControllerTransitionCoordinatorContext {
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinator/1619300-animatealongsidetransition
    animateAlongsideTransition_completion(animation: cocoascript.UIViewControllerTransitionCoordinatorContext, completion: cocoascript.UIViewControllerTransitionCoordinatorContext):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinator/1619295-animatealongsidetransitioninview
    animateAlongsideTransitionInView_animation_completion(view: cocoascript.UIView, animation: cocoascript.UIViewControllerTransitionCoordinatorContext, completion: cocoascript.UIViewControllerTransitionCoordinatorContext):cocoascript.BOOL;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinator/1829391-notifywheninteractionchangesusin
    notifyWhenInteractionChangesUsingBlock(handler: cocoascript.UIViewControllerTransitionCoordinatorContext):void;
    // doc://com.apple.documentation/documentation/uikit/uiviewcontrollertransitioncoordinator/1619292-notifywheninteractionendsusingbl
    notifyWhenInteractionEndsUsingBlock(handler: cocoascript.UIViewControllerTransitionCoordinatorContext):void;
  }
}
declare namespace cocoascript {
  /**
   * An object that provides physics-related capabilities and animations for its dynamic items, and provides the context for those animations.
   * doc://com.apple.documentation/documentation/uikit/uidynamicanimator
   */
  interface UIDynamicAnimator extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidynamicanimator/1621203-initwithreferenceview
    initWithReferenceView(view: cocoascript.UIView):cocoascript.UIDynamicAnimator;
    // doc://com.apple.documentation/documentation/uikit/uidynamicanimator/1621196-initwithcollectionviewlayout
    initWithCollectionViewLayout(layout: cocoascript.UICollectionViewLayout):cocoascript.UIDynamicAnimator;
    // doc://com.apple.documentation/documentation/uikit/uidynamicanimator/1621191-itemsinrect
    itemsInRect(rect: cocoascript.CGRect):cocoascript.UIDynamicItem;
    // doc://com.apple.documentation/documentation/uikit/uidynamicanimator/1621189-addbehavior
    addBehavior(behavior: cocoascript.UIDynamicBehavior):void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicanimator/1621201-removebehavior
    removeBehavior(behavior: cocoascript.UIDynamicBehavior):void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicanimator/1621197-removeallbehaviors
    removeAllBehaviors():void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicanimator/1621199-delegate
    delegate(): cocoascript.UIDynamicAnimatorDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicanimator/1621202-elapsedtime
    elapsedTime(): cocoascript.NSTimeInterval;
    setElapsedTime(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicanimator/1621192-running
    running(): cocoascript.BOOL;
    setRunning(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicanimator/1621198-behaviors
    behaviors(): cocoascript.UIDynamicBehavior;
    setBehaviors(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicanimator/1621200-referenceview
    referenceView(): cocoascript.UIView;
    setReferenceView(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicanimator/1621190-updateitemusingcurrentstate
    updateItemUsingCurrentState(item: cocoascript.UIDynamicItem):void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicanimator/1621204-layoutattributesforcellatindexpa
    layoutAttributesForCellAtIndexPath(indexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/uikit/uidynamicanimator/1621195-layoutattributesfordecorationvie
    layoutAttributesForDecorationViewOfKind_atIndexPath(decorationViewKind: cocoascript.NSString, indexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/uikit/uidynamicanimator/1621186-layoutattributesforsupplementary
    layoutAttributesForSupplementaryViewOfKind_atIndexPath(kind: cocoascript.NSString, indexPath: cocoascript.NSIndexPath):cocoascript.UICollectionViewLayoutAttributes;
    //
    alloc():cocoascript.UIDynamicAnimator;
    //
    init():cocoascript.UIDynamicAnimator;
  }
}

declare const UIDynamicAnimator: cocoascript.UIDynamicAnimator;
declare namespace cocoascript {
  /**
   * A base dynamic animation configuration for one or more dynamic items.
   * doc://com.apple.documentation/documentation/uikit/uidynamicitembehavior
   */
  interface UIDynamicItemBehavior extends UIDynamicBehavior {
    // doc://com.apple.documentation/documentation/uikit/uidynamicitembehavior/1624393-additem
    addItem(item: cocoascript.UIDynamicItem):void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitembehavior/1624397-initwithitems
    initWithItems(items: cocoascript.UIDynamicItem):cocoascript.UIDynamicItemBehavior;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitembehavior/1624385-removeitem
    removeItem(item: cocoascript.UIDynamicItem):void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitembehavior/1624400-items
    items(): cocoascript.UIDynamicItem;
    setItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitembehavior/1624384-addangularvelocity
    addAngularVelocity_forItem(velocity: cocoascript.CGFloat, item: cocoascript.UIDynamicItem):void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitembehavior/1624391-addlinearvelocity
    addLinearVelocity_forItem(velocity: cocoascript.CGPoint, item: cocoascript.UIDynamicItem):void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitembehavior/1624386-allowsrotation
    allowsRotation(): cocoascript.BOOL;
    setAllowsRotation(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitembehavior/1624396-angularresistance
    angularResistance(): cocoascript.CGFloat;
    setAngularResistance(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitembehavior/1624389-angularvelocityforitem
    angularVelocityForItem(item: cocoascript.UIDynamicItem):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitembehavior/1624388-linearvelocityforitem
    linearVelocityForItem(item: cocoascript.UIDynamicItem):cocoascript.CGPoint;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitembehavior/1624395-density
    density(): cocoascript.CGFloat;
    setDensity(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitembehavior/1624387-elasticity
    elasticity(): cocoascript.CGFloat;
    setElasticity(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitembehavior/1624392-friction
    friction(): cocoascript.CGFloat;
    setFriction(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitembehavior/1624399-resistance
    resistance(): cocoascript.CGFloat;
    setResistance(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitembehavior/1624390-charge
    charge(): cocoascript.CGFloat;
    setCharge(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitembehavior/1624394-anchored
    anchored(): cocoascript.BOOL;
    setAnchored(): void;
    //
    alloc():cocoascript.UIDynamicItemBehavior;
    //
    init():cocoascript.UIDynamicItemBehavior;
  }
}

declare const UIDynamicItemBehavior: cocoascript.UIDynamicItemBehavior;
declare namespace cocoascript {
  /**
   * A dynamic item that comprises multiple other dynamic items.
   * doc://com.apple.documentation/documentation/uikit/uidynamicitemgroup
   */
  interface UIDynamicItemGroup extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidynamicitemgroup/1618485-initwithitems
    initWithItems(items: cocoascript.UIDynamicItem):cocoascript.UIDynamicItemGroup;
    // doc://com.apple.documentation/documentation/uikit/uidynamicitemgroup/1618489-items
    items(): cocoascript.UIDynamicItem;
    setItems(): void;
    //
    alloc():cocoascript.UIDynamicItemGroup;
    //
    init():cocoascript.UIDynamicItemGroup;
  }
}

declare const UIDynamicItemGroup: cocoascript.UIDynamicItemGroup;
declare namespace cocoascript {
  /**
   * An object that confers a behavioral configuration on one or more dynamic items, for their participation in 2D animation.
   * doc://com.apple.documentation/documentation/uikit/uidynamicbehavior
   */
  interface UIDynamicBehavior extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uidynamicbehavior/1618499-action
    action(): void;
    setAction(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicbehavior/1618496-addchildbehavior
    addChildBehavior(behavior: cocoascript.UIDynamicBehavior):void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicbehavior/1618482-childbehaviors
    childBehaviors(): cocoascript.UIDynamicBehavior;
    setChildBehaviors(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicbehavior/1618486-removechildbehavior
    removeChildBehavior(behavior: cocoascript.UIDynamicBehavior):void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicbehavior/1618501-dynamicanimator
    dynamicAnimator(): cocoascript.UIDynamicAnimator;
    setDynamicAnimator(): void;
    // doc://com.apple.documentation/documentation/uikit/uidynamicbehavior/1618488-willmovetoanimator
    willMoveToAnimator(dynamicAnimator: cocoascript.UIDynamicAnimator):void;
    //
    alloc():cocoascript.UIDynamicBehavior;
    //
    init():cocoascript.UIDynamicBehavior;
  }
}

declare const UIDynamicBehavior: cocoascript.UIDynamicBehavior;
declare namespace cocoascript {
  /**
   * An object that confers to a specified array of dynamic items the ability to engage in collisions with each other and with the behavior’s specified boundaries.
   * doc://com.apple.documentation/documentation/uikit/uicollisionbehavior
   */
  interface UICollisionBehavior extends UIDynamicBehavior {
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehavior/1624829-additem
    addItem(item: cocoascript.UIDynamicItem):void;
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehavior/1624820-initwithitems
    initWithItems(items: cocoascript.UIDynamicItem):cocoascript.UICollisionBehavior;
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehavior/1624830-removeitem
    removeItem(item: cocoascript.UIDynamicItem):void;
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehavior/1624819-items
    items(): cocoascript.UIDynamicItem;
    setItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehavior/1624828-collisiondelegate
    collisionDelegate(): cocoascript.UICollisionBehaviorDelegate;
    setCollisionDelegate(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehavior/1624822-addboundarywithidentifier
    addBoundaryWithIdentifier_forPath(identifier: cocoascript.NSCopying, bezierPath: cocoascript.UIBezierPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehavior/1624821-addboundarywithidentifier
    addBoundaryWithIdentifier_fromPoint_toPoint(identifier: cocoascript.NSCopying, p1: cocoascript.CGPoint, p2: cocoascript.CGPoint):void;
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehavior/1624812-boundaryidentifiers
    boundaryIdentifiers(): cocoascript.NSCopying;
    setBoundaryIdentifiers(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehavior/1624825-boundarywithidentifier
    boundaryWithIdentifier(identifier: cocoascript.NSCopying):cocoascript.UIBezierPath;
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehavior/1624832-collisionmode
    collisionMode(): cocoascript.UICollisionBehaviorMode;
    setCollisionMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehavior/1624827-removeallboundaries
    removeAllBoundaries():void;
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehavior/1624823-removeboundarywithidentifier
    removeBoundaryWithIdentifier(identifier: cocoascript.NSCopying):void;
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehavior/1624818-settranslatesreferenceboundsinto
    setTranslatesReferenceBoundsIntoBoundaryWithInsets(insets: cocoascript.UIEdgeInsets):void;
    // doc://com.apple.documentation/documentation/uikit/uicollisionbehavior/1624826-translatesreferenceboundsintobou
    translatesReferenceBoundsIntoBoundary(): cocoascript.BOOL;
    setTranslatesReferenceBoundsIntoBoundary(): void;
    //
    alloc():cocoascript.UICollisionBehavior;
    //
    init():cocoascript.UICollisionBehavior;
  }
}

declare const UICollisionBehavior: cocoascript.UICollisionBehavior;
declare namespace cocoascript {
  /**
   * An object that applies field-based physics to dynamic items.
   * doc://com.apple.documentation/documentation/uikit/uifieldbehavior
   */
  interface UIFieldBehavior extends UIDynamicBehavior {
    // doc://com.apple.documentation/documentation/uikit/uifieldbehavior/1624996-additem
    addItem(item: cocoascript.UIDynamicItem):void;
    // doc://com.apple.documentation/documentation/uikit/uifieldbehavior/1624993-removeitem
    removeItem(item: cocoascript.UIDynamicItem):void;
    // doc://com.apple.documentation/documentation/uikit/uifieldbehavior/1625002-items
    items(): cocoascript.UIDynamicItem;
    setItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uifieldbehavior/1625003-position
    position(): cocoascript.CGPoint;
    setPosition(): void;
    // doc://com.apple.documentation/documentation/uikit/uifieldbehavior/1625005-region
    region(): cocoascript.UIRegion;
    setRegion(): void;
    // doc://com.apple.documentation/documentation/uikit/uifieldbehavior/1624997-strength
    strength(): cocoascript.CGFloat;
    setStrength(): void;
    // doc://com.apple.documentation/documentation/uikit/uifieldbehavior/1624988-falloff
    falloff(): cocoascript.CGFloat;
    setFalloff(): void;
    // doc://com.apple.documentation/documentation/uikit/uifieldbehavior/1624994-minimumradius
    minimumRadius(): cocoascript.CGFloat;
    setMinimumRadius(): void;
    // doc://com.apple.documentation/documentation/uikit/uifieldbehavior/1624987-direction
    direction(): cocoascript.CGVector;
    setDirection(): void;
    // doc://com.apple.documentation/documentation/uikit/uifieldbehavior/1624998-smoothness
    smoothness(): cocoascript.CGFloat;
    setSmoothness(): void;
    // doc://com.apple.documentation/documentation/uikit/uifieldbehavior/1624986-animationspeed
    animationSpeed(): cocoascript.CGFloat;
    setAnimationSpeed(): void;
    //
    alloc():cocoascript.UIFieldBehavior;
    //
    init():cocoascript.UIFieldBehavior;
  }
}

declare const UIFieldBehavior: cocoascript.UIFieldBehavior;
declare namespace cocoascript {
  /**
   * An object that applies a gravity-like force to all of its associated dynamic items.
   * doc://com.apple.documentation/documentation/uikit/uigravitybehavior
   */
  interface UIGravityBehavior extends UIDynamicBehavior {
    // doc://com.apple.documentation/documentation/uikit/uigravitybehavior/1620416-initwithitems
    initWithItems(items: cocoascript.UIDynamicItem):cocoascript.UIGravityBehavior;
    // doc://com.apple.documentation/documentation/uikit/uigravitybehavior/1620420-items
    items(): cocoascript.UIDynamicItem;
    setItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uigravitybehavior/1620415-additem
    addItem(item: cocoascript.UIDynamicItem):void;
    // doc://com.apple.documentation/documentation/uikit/uigravitybehavior/1620422-removeitem
    removeItem(item: cocoascript.UIDynamicItem):void;
    // doc://com.apple.documentation/documentation/uikit/uigravitybehavior/1620423-gravitydirection
    gravityDirection(): cocoascript.CGVector;
    setGravityDirection(): void;
    // doc://com.apple.documentation/documentation/uikit/uigravitybehavior/1620417-angle
    angle(): cocoascript.CGFloat;
    setAngle(): void;
    // doc://com.apple.documentation/documentation/uikit/uigravitybehavior/1620418-magnitude
    magnitude(): cocoascript.CGFloat;
    setMagnitude(): void;
    // doc://com.apple.documentation/documentation/uikit/uigravitybehavior/1620414-setangle
    setAngle_magnitude(angle: cocoascript.CGFloat, magnitude: cocoascript.CGFloat):void;
    //
    alloc():cocoascript.UIGravityBehavior;
    //
    init():cocoascript.UIGravityBehavior;
  }
}

declare const UIGravityBehavior: cocoascript.UIGravityBehavior;
declare namespace cocoascript {
  /**
   * A behavior that applies a continuous or instantaneous force to one or more dynamic items, causing those items to change position accordingly.
   * doc://com.apple.documentation/documentation/uikit/uipushbehavior
   */
  interface UIPushBehavior extends UIDynamicBehavior {
    // doc://com.apple.documentation/documentation/uikit/uipushbehavior/1623336-active
    active(): cocoascript.BOOL;
    setActive(): void;
    // doc://com.apple.documentation/documentation/uikit/uipushbehavior/1623333-additem
    addItem(item: cocoascript.UIDynamicItem):void;
    // doc://com.apple.documentation/documentation/uikit/uipushbehavior/1623329-initwithitems
    initWithItems_mode(items: cocoascript.UIDynamicItem, mode: cocoascript.UIPushBehaviorMode):cocoascript.UIPushBehavior;
    // doc://com.apple.documentation/documentation/uikit/uipushbehavior/1623343-removeitem
    removeItem(item: cocoascript.UIDynamicItem):void;
    // doc://com.apple.documentation/documentation/uikit/uipushbehavior/1623339-items
    items(): cocoascript.UIDynamicItem;
    setItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uipushbehavior/1623335-setangle
    setAngle_magnitude(angle: cocoascript.CGFloat, magnitude: cocoascript.CGFloat):void;
    // doc://com.apple.documentation/documentation/uikit/uipushbehavior/1623332-angle
    angle(): cocoascript.CGFloat;
    setAngle(): void;
    // doc://com.apple.documentation/documentation/uikit/uipushbehavior/1623330-magnitude
    magnitude(): cocoascript.CGFloat;
    setMagnitude(): void;
    // doc://com.apple.documentation/documentation/uikit/uipushbehavior/1623340-mode
    mode(): cocoascript.UIPushBehaviorMode;
    setMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uipushbehavior/1623341-settargetoffsetfromcenter
    setTargetOffsetFromCenter_forItem(o: cocoascript.UIOffset, item: cocoascript.UIDynamicItem):void;
    // doc://com.apple.documentation/documentation/uikit/uipushbehavior/1623338-targetoffsetfromcenterforitem
    targetOffsetFromCenterForItem(item: cocoascript.UIDynamicItem):cocoascript.UIOffset;
    // doc://com.apple.documentation/documentation/uikit/uipushbehavior/1623331-pushdirection
    pushDirection(): cocoascript.CGVector;
    setPushDirection(): void;
    //
    alloc():cocoascript.UIPushBehavior;
    //
    init():cocoascript.UIPushBehavior;
  }
}

declare const UIPushBehavior: cocoascript.UIPushBehavior;
declare namespace cocoascript {
  /**
   * A spring-like behavior whose initial motion is damped over time so that the object settles at a specific point.
   * doc://com.apple.documentation/documentation/uikit/uisnapbehavior
   */
  interface UISnapBehavior extends UIDynamicBehavior {
    // doc://com.apple.documentation/documentation/uikit/uisnapbehavior/1621011-initwithitem
    initWithItem_snapToPoint(item: cocoascript.UIDynamicItem, point: cocoascript.CGPoint):cocoascript.UISnapBehavior;
    // doc://com.apple.documentation/documentation/uikit/uisnapbehavior/1621013-snappoint
    snapPoint(): cocoascript.CGPoint;
    setSnapPoint(): void;
    // doc://com.apple.documentation/documentation/uikit/uisnapbehavior/1621012-damping
    damping(): cocoascript.CGFloat;
    setDamping(): void;
    //
    alloc():cocoascript.UISnapBehavior;
    //
    init():cocoascript.UISnapBehavior;
  }
}

declare const UISnapBehavior: cocoascript.UISnapBehavior;
declare namespace cocoascript {
  /**
   * A collection of motion effects that you want to apply to a view at the same time.
   * doc://com.apple.documentation/documentation/uikit/uimotioneffectgroup
   */
  interface UIMotionEffectGroup extends UIMotionEffect {
    // doc://com.apple.documentation/documentation/uikit/uimotioneffectgroup/1622374-motioneffects
    motionEffects(): cocoascript.UIMotionEffect;
    setMotionEffects(): void;
    //
    alloc():cocoascript.UIMotionEffectGroup;
    //
    init():cocoascript.UIMotionEffectGroup;
  }
}

declare const UIMotionEffectGroup: cocoascript.UIMotionEffectGroup;
declare namespace cocoascript {
  /**
   * An object that maps the horizontal or vertical tilt of a device to values that you specify so that UIKit can apply those values to your views.
   * doc://com.apple.documentation/documentation/uikit/uiinterpolatingmotioneffect
   */
  interface UIInterpolatingMotionEffect extends UIMotionEffect {
    // doc://com.apple.documentation/documentation/uikit/uiinterpolatingmotioneffect/1622372-initwithkeypath
    initWithKeyPath_type(keyPath: cocoascript.NSString, type: cocoascript.UIInterpolatingMotionEffectType):cocoascript.UIInterpolatingMotionEffect;
    // doc://com.apple.documentation/documentation/uikit/uiinterpolatingmotioneffect/1622368-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UIInterpolatingMotionEffect;
    // doc://com.apple.documentation/documentation/uikit/uiinterpolatingmotioneffect/1622378-keypath
    keyPath(): cocoascript.NSString;
    setKeyPath(): void;
    // doc://com.apple.documentation/documentation/uikit/uiinterpolatingmotioneffect/1622377-type
    type(): cocoascript.UIInterpolatingMotionEffectType;
    setType(): void;
    // doc://com.apple.documentation/documentation/uikit/uiinterpolatingmotioneffect/1622365-minimumrelativevalue
    minimumRelativeValue(): cocoascript.id;
    setMinimumRelativeValue(): void;
    // doc://com.apple.documentation/documentation/uikit/uiinterpolatingmotioneffect/1622376-maximumrelativevalue
    maximumRelativeValue(): cocoascript.id;
    setMaximumRelativeValue(): void;
    //
    alloc():cocoascript.UIInterpolatingMotionEffect;
    //
    init():cocoascript.UIInterpolatingMotionEffect;
  }
}

declare const UIInterpolatingMotionEffect: cocoascript.UIInterpolatingMotionEffect;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiimpactfeedbackstyle
  type UIImpactFeedbackStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uinotificationfeedbacktype
  type UINotificationFeedbackType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiscreenoverscancompensation
  type UIScreenOverscanCompensation = cocoascript.NSInteger;
}
declare const UIScreenDidConnectNotification: cocoascript.NSNotificationName;
declare const UIScreenDidDisconnectNotification: cocoascript.NSNotificationName;
declare const UIScreenModeDidChangeNotification: cocoascript.NSNotificationName;
declare const UIScreenBrightnessDidChangeNotification: cocoascript.NSNotificationName;
declare const UIScreenCapturedDidChangeNotification: cocoascript.NSNotificationName;
declare const UIWindowDidBecomeKeyNotification: cocoascript.NSNotificationName;
declare const UIWindowDidResignKeyNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiwindowlevel
  type UIWindowLevel = cocoascript.CGFloat;
}
declare const UIWindowDidBecomeVisibleNotification: cocoascript.NSNotificationName;
declare const UIWindowDidBecomeHiddenNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uialertactionstyle
  type UIAlertActionStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uieventbuttonmask
  type UIEventButtonMask = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uieventtype
  type UIEventType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uieventsubtype
  type UIEventSubtype = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitouchtype
  type UITouchType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitouchphase
  type UITouchPhase = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitouchproperties
  type UITouchProperties = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipressphase
  type UIPressPhase = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipresstype
  type UIPressType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipreviewactionstyle
  type UIPreviewActionStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * An effect where the pointer slides under the given view and morphs into the view's shape.
   * doc://com.apple.documentation/documentation/uikit/uipointerhighlighteffect
   */
  interface UIPointerHighlightEffect extends UIPointerEffect {
    //
    alloc():cocoascript.UIPointerHighlightEffect;
    //
    init():cocoascript.UIPointerHighlightEffect;
  }
}

declare const UIPointerHighlightEffect: cocoascript.UIPointerHighlightEffect;
declare namespace cocoascript {
  /**
   * An effect where visual changes are applied to the view and the pointer retains its default shape.
   * doc://com.apple.documentation/documentation/uikit/uipointerhovereffect
   */
  interface UIPointerHoverEffect extends UIPointerEffect {
    // doc://com.apple.documentation/documentation/uikit/uipointerhovereffect/3539015-preferredtintmode
    preferredTintMode(): cocoascript.UIPointerEffectTintMode;
    setPreferredTintMode(): void;
    // doc://com.apple.documentation/documentation/uikit/uipointerhovereffect/3539016-prefersscaledcontent
    prefersScaledContent(): cocoascript.BOOL;
    setPrefersScaledContent(): void;
    // doc://com.apple.documentation/documentation/uikit/uipointerhovereffect/3539017-prefersshadow
    prefersShadow(): cocoascript.BOOL;
    setPrefersShadow(): void;
    //
    alloc():cocoascript.UIPointerHoverEffect;
    //
    init():cocoascript.UIPointerHoverEffect;
  }
}

declare const UIPointerHoverEffect: cocoascript.UIPointerHoverEffect;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipencilpreferredaction
  type UIPencilPreferredAction = cocoascript.NSInteger;
}
declare const UIFocusMovementDidFailNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uifocussoundidentifier
  type UIFocusSoundIdentifier = cocoascript.NSString;
}
declare const UIFocusDidUpdateNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uifocusheading
  type UIFocusHeading = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiapplicationshortcuticontype
  type UIApplicationShortcutIconType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiaccessibilitytraits
  type UIAccessibilityTraits = cocoascript.uint64_t;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiaccessibilityassistivetechnologyidentifier
  type UIAccessibilityAssistiveTechnologyIdentifier = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiaccessibilitynotifications
  type UIAccessibilityNotifications = number;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiaccessibilitynavigationstyle
  type UIAccessibilityNavigationStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiaccessibilityzoomtype
  type UIAccessibilityZoomType = cocoascript.NSInteger;
}
declare const UIAccessibilityTextualContextConsole: cocoascript.UIAccessibilityTextualContext;
declare const UIAccessibilityTextualContextFileSystem: cocoascript.UIAccessibilityTextualContext;
declare const UIAccessibilityTextualContextMessaging: cocoascript.UIAccessibilityTextualContext;
declare const UIAccessibilityTextualContextNarrative: cocoascript.UIAccessibilityTextualContext;
declare const UIAccessibilityTextualContextSourceCode: cocoascript.UIAccessibilityTextualContext;
declare const UIAccessibilityTextualContextSpreadsheet: cocoascript.UIAccessibilityTextualContext;
declare const UIAccessibilityTextualContextWordProcessing: cocoascript.UIAccessibilityTextualContext;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiaccessibilityscrolldirection
  type UIAccessibilityScrollDirection = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomrotorsearch
  type UIAccessibilityCustomRotorSearch = cocoascript.UIAccessibilityCustomRotorSearchPredicate;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomrotordirection
  type UIAccessibilityCustomRotorDirection = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiaccessibilitycustomsystemrotortype
  type UIAccessibilityCustomSystemRotorType = cocoascript.NSInteger;
}
declare const UIAccessibilitySwitchControlStatusDidChangeNotification: cocoascript.NSNotificationName;
declare const UIAccessibilityElementFocusedNotification: cocoascript.NSNotificationName;
declare const UIAccessibilityReduceTransparencyStatusDidChangeNotification: cocoascript.NSNotificationName;
declare const UIAccessibilityVoiceOverStatusDidChangeNotification: cocoascript.NSNotificationName;
declare const UIAccessibilityAnnouncementDidFinishNotification: cocoascript.NSNotificationName;
declare const UIAccessibilityBoldTextStatusDidChangeNotification: cocoascript.NSNotificationName;
declare const UIAccessibilityClosedCaptioningStatusDidChangeNotification: cocoascript.NSNotificationName;
declare const UIAccessibilityDarkerSystemColorsStatusDidChangeNotification: cocoascript.NSNotificationName;
declare const UIAccessibilityGrayscaleStatusDidChangeNotification: cocoascript.NSNotificationName;
declare const UIAccessibilityInvertColorsStatusDidChangeNotification: cocoascript.NSNotificationName;
declare const UIAccessibilityAssistiveTouchStatusDidChangeNotification: cocoascript.NSNotificationName;
declare const UIAccessibilityGuidedAccessStatusDidChangeNotification: cocoascript.NSNotificationName;
declare const UIAccessibilityMonoAudioStatusDidChangeNotification: cocoascript.NSNotificationName;
declare const UIAccessibilitySpeakScreenStatusDidChangeNotification: cocoascript.NSNotificationName;
declare const UIAccessibilitySpeakSelectionStatusDidChangeNotification: cocoascript.NSNotificationName;
declare const UIAccessibilityHearingDevicePairedEarDidChangeNotification: cocoascript.NSNotificationName;
declare const UIAccessibilityReduceMotionStatusDidChangeNotification: cocoascript.NSNotificationName;
declare const UIAccessibilityShakeToUndoDidChangeNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiimagesymbolscale
  type UIImageSymbolScale = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiimagesymbolweight
  type UIImageSymbolWeight = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uigraphicsdrawingactions
  type UIGraphicsDrawingActions = cocoascript.UIGraphicsRendererContext;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uigraphicsimagedrawingactions
  type UIGraphicsImageDrawingActions = cocoascript.UIGraphicsImageRendererContext;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uigraphicsimagerendererformatrange
  type UIGraphicsImageRendererFormatRange = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uigraphicspdfdrawingactions
  type UIGraphicsPDFDrawingActions = cocoascript.UIGraphicsPDFRendererContext;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uirectcorner
  type UIRectCorner = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiprintinteractioncompletionhandler
  type UIPrintInteractionCompletionHandler = cocoascript.NSError;
}
declare const UIPrintErrorDomain: cocoascript.NSErrorDomain;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiprinterrorcode
  type UIPrintErrorCode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiprinterjobtypes
  type UIPrinterJobTypes = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiprintercutterbehavior
  type UIPrinterCutterBehavior = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiprintinfoduplex
  type UIPrintInfoDuplex = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiprintinfoorientation
  type UIPrintInfoOrientation = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiprintinfooutputtype
  type UIPrintInfoOutputType = cocoascript.NSInteger;
}
declare const UIContentSizeCategoryLarge: cocoascript.UIContentSizeCategory;
declare const UIFontTextStyleTitle1: cocoascript.UIFontTextStyle;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uifontweight
  type UIFontWeight = cocoascript.CGFloat;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uifontdescriptorsystemdesign
  type UIFontDescriptorSystemDesign = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uifontdescriptorattributename
  type UIFontDescriptorAttributeName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uifontdescriptorfeaturekey
  type UIFontDescriptorFeatureKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uifontdescriptortraitkey
  type UIFontDescriptorTraitKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uikeyboardappearance
  type UIKeyboardAppearance = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uireturnkeytype
  type UIReturnKeyType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextcontenttype
  type UITextContentType = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextautocapitalizationtype
  type UITextAutocapitalizationType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextautocorrectiontype
  type UITextAutocorrectionType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextspellcheckingtype
  type UITextSpellCheckingType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextsmartquotestype
  type UITextSmartQuotesType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextsmartdashestype
  type UITextSmartDashesType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextsmartinsertdeletetype
  type UITextSmartInsertDeleteType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/uikit/uitextplaceholder
   */
  interface UITextPlaceholder extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uitextplaceholder/3213957-rects
    rects(): cocoascript.UITextSelectionRect;
    setRects(): void;
    //
    alloc():cocoascript.UITextPlaceholder;
    //
    init():cocoascript.UITextPlaceholder;
  }
}

declare const UITextPlaceholder: cocoascript.UITextPlaceholder;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextalternativestyle
  type UITextAlternativeStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextdirection
  type UITextDirection = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextstoragedirection
  type UITextStorageDirection = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextlayoutdirection
  type UITextLayoutDirection = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextwritingdirection
  type UITextWritingDirection = cocoascript.NSWritingDirection;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextgranularity
  type UITextGranularity = cocoascript.NSInteger;
}
declare const UITextInputCurrentInputModeDidChangeNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiinputviewstyle
  type UIInputViewStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiactionsheetstyle
  type UIActionSheetStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uialertviewstyle
  type UIAlertViewStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiusernotificationactivationmode
  type UIUserNotificationActivationMode = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiusernotificationactionbehavior
  type UIUserNotificationActionBehavior = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipopoverarrowdirection
  type UIPopoverArrowDirection = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiaccelerationvalue
  type UIAccelerationValue = number;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidocumentmenuorder
  type UIDocumentMenuOrder = cocoascript.NSUInteger;
}
declare const UIApplicationLaunchOptionsLocalNotificationKey: cocoascript.UIApplicationLaunchOptionsKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiusernotificationactioncontext
  type UIUserNotificationActionContext = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiusernotificationtype
  type UIUserNotificationType = cocoascript.NSUInteger;
}
declare const UITableViewSelectionDidChangeNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitimingcurvetype
  type UITimingCurveType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitableviewstyle
  type UITableViewStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitableviewcellseparatorstyle
  type UITableViewCellSeparatorStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitableviewseparatorinsetreference
  type UITableViewSeparatorInsetReference = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitableviewrowanimation
  type UITableViewRowAnimation = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitableviewscrollposition
  type UITableViewScrollPosition = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * A context object that declares which parts of your layout need to be updated when the layout is invalidated.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutinvalidationcontext
   */
  interface UICollectionViewLayoutInvalidationContext extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutinvalidationcontext/1617793-invalidateeverything
    invalidateEverything(): cocoascript.BOOL;
    setInvalidateEverything(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutinvalidationcontext/1617760-invalidatedatasourcecounts
    invalidateDataSourceCounts(): cocoascript.BOOL;
    setInvalidateDataSourceCounts(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutinvalidationcontext/1617731-contentoffsetadjustment
    contentOffsetAdjustment(): cocoascript.CGPoint;
    setContentOffsetAdjustment(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutinvalidationcontext/1617763-contentsizeadjustment
    contentSizeAdjustment(): cocoascript.CGSize;
    setContentSizeAdjustment(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutinvalidationcontext/1617795-invalidateitemsatindexpaths
    invalidateItemsAtIndexPaths(indexPaths: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutinvalidationcontext/1617747-invalidatesupplementaryelementso
    invalidateSupplementaryElementsOfKind_atIndexPaths(elementKind: cocoascript.NSString, indexPaths: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutinvalidationcontext/1617736-invalidatedecorationelementsofki
    invalidateDecorationElementsOfKind_atIndexPaths(elementKind: cocoascript.NSString, indexPaths: cocoascript.NSIndexPath):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutinvalidationcontext/1617723-invalidateditemindexpaths
    invalidatedItemIndexPaths(): cocoascript.NSIndexPath;
    setInvalidatedItemIndexPaths(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutinvalidationcontext/1617777-invalidatedsupplementaryindexpat
    invalidatedSupplementaryIndexPaths(): cocoascript.NSIndexPath;
    setInvalidatedSupplementaryIndexPaths(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutinvalidationcontext/1617805-invalidateddecorationindexpaths
    invalidatedDecorationIndexPaths(): cocoascript.NSIndexPath;
    setInvalidatedDecorationIndexPaths(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutinvalidationcontext/1617800-previousindexpathsforinteractive
    previousIndexPathsForInteractivelyMovingItems(): cocoascript.NSIndexPath;
    setPreviousIndexPathsForInteractivelyMovingItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutinvalidationcontext/1617780-targetindexpathsforinteractively
    targetIndexPathsForInteractivelyMovingItems(): cocoascript.NSIndexPath;
    setTargetIndexPathsForInteractivelyMovingItems(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutinvalidationcontext/1617808-interactivemovementtarget
    interactiveMovementTarget(): cocoascript.CGPoint;
    setInteractiveMovementTarget(): void;
    //
    alloc():cocoascript.UICollectionViewLayoutInvalidationContext;
    //
    init():cocoascript.UICollectionViewLayoutInvalidationContext;
  }
}

declare const UICollectionViewLayoutInvalidationContext: cocoascript.UICollectionViewLayoutInvalidationContext;
declare namespace cocoascript {
  /**
   * A layout object that lets you combine items in highly adaptive and flexible visual arrangements.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewcompositionallayout
   */
  interface UICollectionViewCompositionalLayout extends UICollectionViewLayout {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcompositionallayout/3199211-initwithsection
    initWithSection(section: cocoascript.NSCollectionLayoutSection):cocoascript.UICollectionViewCompositionalLayout;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcompositionallayout/3199212-initwithsection
    initWithSection_configuration(section: cocoascript.NSCollectionLayoutSection, configuration: cocoascript.UICollectionViewCompositionalLayoutConfiguration):cocoascript.UICollectionViewCompositionalLayout;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcompositionallayout/3199214-initwithsectionprovider
    initWithSectionProvider(sectionProvider: cocoascript.UICollectionViewCompositionalLayoutSectionProvider):cocoascript.UICollectionViewCompositionalLayout;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcompositionallayout/3199215-initwithsectionprovider
    initWithSectionProvider_configuration(sectionProvider: cocoascript.UICollectionViewCompositionalLayoutSectionProvider, configuration: cocoascript.UICollectionViewCompositionalLayoutConfiguration):cocoascript.UICollectionViewCompositionalLayout;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcompositionallayout/3199209-configuration
    configuration(): cocoascript.UICollectionViewCompositionalLayoutConfiguration;
    setConfiguration(): void;
    //
    alloc():cocoascript.UICollectionViewCompositionalLayout;
    //
    init():cocoascript.UICollectionViewCompositionalLayout;
  }
}

declare const UICollectionViewCompositionalLayout: cocoascript.UICollectionViewCompositionalLayout;
declare namespace cocoascript {
  /**
   * A layout object that organizes items into a grid with optional header and footer views for each section.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewflowlayout
   */
  interface UICollectionViewFlowLayout extends UICollectionViewLayout {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewflowlayout/1617720-scrolldirection
    scrollDirection(): cocoascript.UICollectionViewScrollDirection;
    setScrollDirection(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewflowlayout/1617717-minimumlinespacing
    minimumLineSpacing(): cocoascript.CGFloat;
    setMinimumLineSpacing(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewflowlayout/1617706-minimuminteritemspacing
    minimumInteritemSpacing(): cocoascript.CGFloat;
    setMinimumInteritemSpacing(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewflowlayout/1617711-itemsize
    itemSize(): cocoascript.CGSize;
    setItemSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewflowlayout/1617709-estimateditemsize
    estimatedItemSize(): cocoascript.CGSize;
    setEstimatedItemSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewflowlayout/1617714-sectioninset
    sectionInset(): cocoascript.UIEdgeInsets;
    setSectionInset(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewflowlayout/2921645-sectioninsetreference
    sectionInsetReference(): cocoascript.UICollectionViewFlowLayoutSectionInsetReference;
    setSectionInsetReference(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewflowlayout/1617710-headerreferencesize
    headerReferenceSize(): cocoascript.CGSize;
    setHeaderReferenceSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewflowlayout/1617703-footerreferencesize
    footerReferenceSize(): cocoascript.CGSize;
    setFooterReferenceSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewflowlayout/1617699-sectionheaderspintovisiblebounds
    sectionHeadersPinToVisibleBounds(): cocoascript.BOOL;
    setSectionHeadersPinToVisibleBounds(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewflowlayout/1617701-sectionfooterspintovisiblebounds
    sectionFootersPinToVisibleBounds(): cocoascript.BOOL;
    setSectionFootersPinToVisibleBounds(): void;
    //
    alloc():cocoascript.UICollectionViewFlowLayout;
    //
    init():cocoascript.UICollectionViewFlowLayout;
  }
}

declare const UICollectionViewFlowLayout: cocoascript.UICollectionViewFlowLayout;
declare namespace cocoascript {
  /**
   * A special type of layout object that lets you implement behaviors when changing from one layout to another in your collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewtransitionlayout
   */
  interface UICollectionViewTransitionLayout extends UICollectionViewLayout {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewtransitionlayout/1622189-initwithcurrentlayout
    initWithCurrentLayout_nextLayout(currentLayout: cocoascript.UICollectionViewLayout, newLayout: cocoascript.UICollectionViewLayout):cocoascript.UICollectionViewTransitionLayout;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewtransitionlayout/1622192-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UICollectionViewTransitionLayout;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewtransitionlayout/1622191-transitionprogress
    transitionProgress(): cocoascript.CGFloat;
    setTransitionProgress(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewtransitionlayout/1622194-updatevalue
    updateValue_forAnimatedKey(value: cocoascript.CGFloat, key: cocoascript.NSString):void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewtransitionlayout/1622193-valueforanimatedkey
    valueForAnimatedKey(key: cocoascript.NSString):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewtransitionlayout/1622190-currentlayout
    currentLayout(): cocoascript.UICollectionViewLayout;
    setCurrentLayout(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewtransitionlayout/1622188-nextlayout
    nextLayout(): cocoascript.UICollectionViewLayout;
    setNextLayout(): void;
    //
    alloc():cocoascript.UICollectionViewTransitionLayout;
    //
    init():cocoascript.UICollectionViewTransitionLayout;
  }
}

declare const UICollectionViewTransitionLayout: cocoascript.UICollectionViewTransitionLayout;
declare namespace cocoascript {
  /**
   * A set of properties for determining whether to recompute the size of items or their position in the layout.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewflowlayoutinvalidationcontext
   */
  interface UICollectionViewFlowLayoutInvalidationContext extends UICollectionViewLayoutInvalidationContext {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewflowlayoutinvalidationcontext/1617721-invalidateflowlayoutdelegatemetr
    invalidateFlowLayoutDelegateMetrics(): cocoascript.BOOL;
    setInvalidateFlowLayoutDelegateMetrics(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewflowlayoutinvalidationcontext/1617707-invalidateflowlayoutattributes
    invalidateFlowLayoutAttributes(): cocoascript.BOOL;
    setInvalidateFlowLayoutAttributes(): void;
    //
    alloc():cocoascript.UICollectionViewFlowLayoutInvalidationContext;
    //
    init():cocoascript.UICollectionViewFlowLayoutInvalidationContext;
  }
}

declare const UICollectionViewFlowLayoutInvalidationContext: cocoascript.UICollectionViewFlowLayoutInvalidationContext;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitableviewcellstyle
  type UITableViewCellStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitableviewcellaccessorytype
  type UITableViewCellAccessoryType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitableviewcellselectionstyle
  type UITableViewCellSelectionStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitableviewcelleditingstyle
  type UITableViewCellEditingStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitableviewcelldragstate
  type UITableViewCellDragState = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitableviewcellstatemask
  type UITableViewCellStateMask = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitableviewcellfocusstyle
  type UITableViewCellFocusStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitableviewdiffabledatasourcecellprovider
  type UITableViewDiffableDataSourceCellProvider = cocoascript.id;
}
declare const UIMenuStandardEdit: cocoascript.UIMenuIdentifier;
declare const UIMenuApplication: cocoascript.UIMenuIdentifier;
declare const UIMenuFile: cocoascript.UIMenuIdentifier;
declare const UIMenuEdit: cocoascript.UIMenuIdentifier;
declare const UIMenuView: cocoascript.UIMenuIdentifier;
declare const UIMenuWindow: cocoascript.UIMenuIdentifier;
declare const UIMenuHelp: cocoascript.UIMenuIdentifier;
declare const UIMenuAbout: cocoascript.UIMenuIdentifier;
declare const UIMenuPreferences: cocoascript.UIMenuIdentifier;
declare const UIMenuServices: cocoascript.UIMenuIdentifier;
declare const UIMenuHide: cocoascript.UIMenuIdentifier;
declare const UIMenuQuit: cocoascript.UIMenuIdentifier;
declare const UIMenuNewScene: cocoascript.UIMenuIdentifier;
declare const UIMenuClose: cocoascript.UIMenuIdentifier;
declare const UIMenuPrint: cocoascript.UIMenuIdentifier;
declare const UIMenuUndoRedo: cocoascript.UIMenuIdentifier;
declare const UIMenuFind: cocoascript.UIMenuIdentifier;
declare const UIMenuReplace: cocoascript.UIMenuIdentifier;
declare const UIMenuShare: cocoascript.UIMenuIdentifier;
declare const UIMenuTextStyle: cocoascript.UIMenuIdentifier;
declare const UIMenuSpelling: cocoascript.UIMenuIdentifier;
declare const UIMenuSpellingPanel: cocoascript.UIMenuIdentifier;
declare const UIMenuSpellingOptions: cocoascript.UIMenuIdentifier;
declare const UIMenuSubstitutions: cocoascript.UIMenuIdentifier;
declare const UIMenuSubstitutionsPanel: cocoascript.UIMenuIdentifier;
declare const UIMenuSubstitutionOptions: cocoascript.UIMenuIdentifier;
declare const UIMenuTransformations: cocoascript.UIMenuIdentifier;
declare const UIMenuSpeech: cocoascript.UIMenuIdentifier;
declare const UIMenuLookup: cocoascript.UIMenuIdentifier;
declare const UIMenuLearn: cocoascript.UIMenuIdentifier;
declare const UIMenuFormat: cocoascript.UIMenuIdentifier;
declare const UIMenuFont: cocoascript.UIMenuIdentifier;
declare const UIMenuTextSize: cocoascript.UIMenuIdentifier;
declare const UIMenuTextColor: cocoascript.UIMenuIdentifier;
declare const UIMenuTextStylePasteboard: cocoascript.UIMenuIdentifier;
declare const UIMenuText: cocoascript.UIMenuIdentifier;
declare const UIMenuWritingDirection: cocoascript.UIMenuIdentifier;
declare const UIMenuAlignment: cocoascript.UIMenuIdentifier;
declare const UIMenuToolbar: cocoascript.UIMenuIdentifier;
declare const UIMenuFullscreen: cocoascript.UIMenuIdentifier;
declare const UIMenuMinimizeAndZoom: cocoascript.UIMenuIdentifier;
declare const UIMenuBringAllToFront: cocoascript.UIMenuIdentifier;
declare const UIMenuRoot: cocoascript.UIMenuIdentifier;
declare const UIMenuOpenRecent: cocoascript.UIMenuIdentifier;
declare const UIImagePickerControllerMediaMetadata: cocoascript.UIImagePickerControllerInfoKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiimagepickercontrollerinfokey
  type UIImagePickerControllerInfoKey = cocoascript.NSString;
}
declare const UIImagePickerControllerCropRect: cocoascript.UIImagePickerControllerInfoKey;
declare const UIImagePickerControllerEditedImage: cocoascript.UIImagePickerControllerInfoKey;
declare const UIImagePickerControllerImageURL: cocoascript.UIImagePickerControllerInfoKey;
declare const UIImagePickerControllerMediaType: cocoascript.UIImagePickerControllerInfoKey;
declare const UIImagePickerControllerMediaURL: cocoascript.UIImagePickerControllerInfoKey;
declare const UIImagePickerControllerOriginalImage: cocoascript.UIImagePickerControllerInfoKey;
declare const UIImagePickerControllerPHAsset: cocoascript.UIImagePickerControllerInfoKey;
declare const UIImagePickerControllerReferenceURL: cocoascript.UIImagePickerControllerInfoKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitextiteminteraction
  type UITextItemInteraction = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidynamicitemcollisionboundstype
  type UIDynamicItemCollisionBoundsType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * An object that specifies the minimum and maximum sizes for resizable windows.
   * doc://com.apple.documentation/documentation/uikit/uiscenesizerestrictions
   */
  interface UISceneSizeRestrictions extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uiscenesizerestrictions/3368161-minimumsize
    minimumSize(): cocoascript.CGSize;
    setMinimumSize(): void;
    // doc://com.apple.documentation/documentation/uikit/uiscenesizerestrictions/3368160-maximumsize
    maximumSize(): cocoascript.CGSize;
    setMaximumSize(): void;
    //
    alloc():cocoascript.UISceneSizeRestrictions;
    //
    init():cocoascript.UISceneSizeRestrictions;
  }
}

declare const UISceneSizeRestrictions: cocoascript.UISceneSizeRestrictions;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicontextmenucontentpreviewprovider
  type UIContextMenuContentPreviewProvider = void;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicontextmenuactionprovider
  type UIContextMenuActionProvider = cocoascript.UIMenuElement;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicontextmenuinteractioncommitstyle
  type UIContextMenuInteractionCommitStyle = cocoascript.NSInteger;
}
declare const UIBackgroundTaskInvalid: cocoascript.UIBackgroundTaskIdentifier;
declare const UIApplicationOpenURLOptionUniversalLinksOnly: cocoascript.UIApplicationOpenExternalURLOptionsKey;
declare const UIContentSizeCategoryUnspecified: cocoascript.UIContentSizeCategory;
declare const UIContentSizeCategoryExtraSmall: cocoascript.UIContentSizeCategory;
declare const UIContentSizeCategorySmall: cocoascript.UIContentSizeCategory;
declare const UIContentSizeCategoryMedium: cocoascript.UIContentSizeCategory;
declare const UIContentSizeCategoryExtraLarge: cocoascript.UIContentSizeCategory;
declare const UIContentSizeCategoryExtraExtraLarge: cocoascript.UIContentSizeCategory;
declare const UIContentSizeCategoryExtraExtraExtraLarge: cocoascript.UIContentSizeCategory;
declare const UIContentSizeCategoryAccessibilityMedium: cocoascript.UIContentSizeCategory;
declare const UIContentSizeCategoryAccessibilityLarge: cocoascript.UIContentSizeCategory;
declare const UIContentSizeCategoryAccessibilityExtraLarge: cocoascript.UIContentSizeCategory;
declare const UIContentSizeCategoryAccessibilityExtraExtraLarge: cocoascript.UIContentSizeCategory;
declare const UIContentSizeCategoryAccessibilityExtraExtraExtraLarge: cocoascript.UIContentSizeCategory;
declare namespace cocoascript {
  /**
   * A data object containing information about the reasons why UIKit created the scene.
   * doc://com.apple.documentation/documentation/uikit/uisceneconnectionoptions
   */
  interface UISceneConnectionOptions extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uisceneconnectionoptions/3238074-useractivities
    userActivities(): cocoascript.NSUserActivity;
    setUserActivities(): void;
    // doc://com.apple.documentation/documentation/uikit/uisceneconnectionoptions/3238072-shortcutitem
    shortcutItem(): cocoascript.UIApplicationShortcutItem;
    setShortcutItem(): void;
    // doc://com.apple.documentation/documentation/uikit/uisceneconnectionoptions/3238068-urlcontexts
    URLContexts(): cocoascript.UIOpenURLContext;
    setURLContexts(): void;
    // doc://com.apple.documentation/documentation/uikit/uisceneconnectionoptions/3238070-handoffuseractivitytype
    handoffUserActivityType(): cocoascript.NSString;
    setHandoffUserActivityType(): void;
    // doc://com.apple.documentation/documentation/uikit/uisceneconnectionoptions/3238069-cloudkitsharemetadata
    cloudKitShareMetadata(): cocoascript.CKShareMetadata;
    setCloudKitShareMetadata(): void;
    // doc://com.apple.documentation/documentation/uikit/uisceneconnectionoptions/3238071-notificationresponse
    notificationResponse(): cocoascript.UNNotificationResponse;
    setNotificationResponse(): void;
    // doc://com.apple.documentation/documentation/uikit/uisceneconnectionoptions/3238073-sourceapplication
    sourceApplication(): cocoascript.NSString;
    setSourceApplication(): void;
    //
    alloc():cocoascript.UISceneConnectionOptions;
    //
    init():cocoascript.UISceneConnectionOptions;
  }
}

declare const UISceneConnectionOptions: cocoascript.UISceneConnectionOptions;
declare const UIApplicationLaunchOptionsAnnotationKey: cocoascript.UIApplicationLaunchOptionsKey;
declare const UIApplicationLaunchOptionsBluetoothCentralsKey: cocoascript.UIApplicationLaunchOptionsKey;
declare const UIApplicationLaunchOptionsBluetoothPeripheralsKey: cocoascript.UIApplicationLaunchOptionsKey;
declare const UIApplicationLaunchOptionsCloudKitShareMetadataKey: cocoascript.UIApplicationLaunchOptionsKey;
declare const UIApplicationLaunchOptionsLocationKey: cocoascript.UIApplicationLaunchOptionsKey;
declare const UIApplicationLaunchOptionsNewsstandDownloadsKey: cocoascript.UIApplicationLaunchOptionsKey;
declare const UIApplicationLaunchOptionsShortcutItemKey: cocoascript.UIApplicationLaunchOptionsKey;
declare const UIApplicationLaunchOptionsSourceApplicationKey: cocoascript.UIApplicationLaunchOptionsKey;
declare const UIApplicationLaunchOptionsURLKey: cocoascript.UIApplicationLaunchOptionsKey;
declare const UIApplicationLaunchOptionsUserActivityDictionaryKey: cocoascript.UIApplicationLaunchOptionsKey;
declare const UIApplicationLaunchOptionsUserActivityTypeKey: cocoascript.UIApplicationLaunchOptionsKey;
declare const UIApplicationOpenURLOptionsSourceApplicationKey: cocoascript.UIApplicationOpenURLOptionsKey;
declare const UIApplicationOpenURLOptionsAnnotationKey: cocoascript.UIApplicationOpenURLOptionsKey;
declare const UIApplicationOpenURLOptionsOpenInPlaceKey: cocoascript.UIApplicationOpenURLOptionsKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uisceneactivationstate
  type UISceneActivationState = cocoascript.NSInteger;
}
declare const UISceneWillConnectNotification: cocoascript.NSNotificationName;
declare const UISceneDidDisconnectNotification: cocoascript.NSNotificationName;
declare const UISceneWillEnterForegroundNotification: cocoascript.NSNotificationName;
declare const UISceneDidActivateNotification: cocoascript.NSNotificationName;
declare const UISceneWillDeactivateNotification: cocoascript.NSNotificationName;
declare const UISceneDidEnterBackgroundNotification: cocoascript.NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiscenesessionrole
  type UISceneSessionRole = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiscenecollectionjoinbehavior
  type UISceneCollectionJoinBehavior = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiwindowscenedismissalanimation
  type UIWindowSceneDismissalAnimation = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * Options that UIKit provides when asking your app to open a URL.
   * doc://com.apple.documentation/documentation/uikit/uisceneopenurloptions
   */
  interface UISceneOpenURLOptions extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uisceneopenurloptions/3197945-sourceapplication
    sourceApplication(): cocoascript.NSString;
    setSourceApplication(): void;
    // doc://com.apple.documentation/documentation/uikit/uisceneopenurloptions/3197943-annotation
    annotation(): cocoascript.id;
    setAnnotation(): void;
    // doc://com.apple.documentation/documentation/uikit/uisceneopenurloptions/3197944-openinplace
    openInPlace(): cocoascript.BOOL;
    setOpenInPlace(): void;
    //
    alloc():cocoascript.UISceneOpenURLOptions;
    //
    init():cocoascript.UISceneOpenURLOptions;
  }
}

declare const UISceneOpenURLOptions: cocoascript.UISceneOpenURLOptions;
declare namespace cocoascript {
  /**
   * A registration for the collection view’s cells.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewcellregistration
   */
  interface UICollectionViewCellRegistration extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcellregistration/3600445-configurationhandler
    configurationHandler(): cocoascript.UICollectionViewCellRegistrationConfigurationHandler;
    setConfigurationHandler(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcellregistration/3600443-cellclass
    cellClass(): cocoascript.Class;
    setCellClass(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewcellregistration/3600444-cellnib
    cellNib(): cocoascript.UINib;
    setCellNib(): void;
    //
    alloc():cocoascript.UICollectionViewCellRegistration;
    //
    init():cocoascript.UICollectionViewCellRegistration;
  }
}

declare const UICollectionViewCellRegistration: cocoascript.UICollectionViewCellRegistration;
declare namespace cocoascript {
  /**
   * A registration for the collection view’s supplementary views.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewsupplementaryregistration
   */
  interface UICollectionViewSupplementaryRegistration extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewsupplementaryregistration/3600450-configurationhandler
    configurationHandler(): cocoascript.UICollectionViewSupplementaryRegistrationConfigurationHandler;
    setConfigurationHandler(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewsupplementaryregistration/3600451-elementkind
    elementKind(): cocoascript.NSString;
    setElementKind(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewsupplementaryregistration/3600454-supplementaryclass
    supplementaryClass(): cocoascript.Class;
    setSupplementaryClass(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewsupplementaryregistration/3600455-supplementarynib
    supplementaryNib(): cocoascript.UINib;
    setSupplementaryNib(): void;
    //
    alloc():cocoascript.UICollectionViewSupplementaryRegistration;
    //
    init():cocoascript.UICollectionViewSupplementaryRegistration;
  }
}

declare const UICollectionViewSupplementaryRegistration: cocoascript.UICollectionViewSupplementaryRegistration;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionviewlayoutinteractivetransitioncompletion
  type UICollectionViewLayoutInteractiveTransitionCompletion = cocoascript.BOOL;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionviewreorderingcadence
  type UICollectionViewReorderingCadence = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionviewscrollposition
  type UICollectionViewScrollPosition = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionviewscrolldirection
  type UICollectionViewScrollDirection = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionelementcategory
  type UICollectionElementCategory = cocoascript.NSUInteger;
}
declare const UIPasteboardDetectionPatternNumber: cocoascript.UIPasteboardDetectionPattern;
declare const UIPasteboardDetectionPatternProbableWebSearch: cocoascript.UIPasteboardDetectionPattern;
declare const UIPasteboardDetectionPatternProbableWebURL: cocoascript.UIPasteboardDetectionPattern;
declare const UIActivityTypeAddToReadingList: cocoascript.UIActivityType;
declare const UIActivityTypeAirDrop: cocoascript.UIActivityType;
declare const UIActivityTypeAssignToContact: cocoascript.UIActivityType;
declare const UIActivityTypeCopyToPasteboard: cocoascript.UIActivityType;
declare const UIActivityTypeMail: cocoascript.UIActivityType;
declare const UIActivityTypeMessage: cocoascript.UIActivityType;
declare const UIActivityTypeOpenInIBooks: cocoascript.UIActivityType;
declare const UIActivityTypePostToFacebook: cocoascript.UIActivityType;
declare const UIActivityTypePostToFlickr: cocoascript.UIActivityType;
declare const UIActivityTypePostToTencentWeibo: cocoascript.UIActivityType;
declare const UIActivityTypePostToTwitter: cocoascript.UIActivityType;
declare const UIActivityTypePostToVimeo: cocoascript.UIActivityType;
declare const UIActivityTypePostToWeibo: cocoascript.UIActivityType;
declare const UIActivityTypePrint: cocoascript.UIActivityType;
declare const UIActivityTypeSaveToCameraRoll: cocoascript.UIActivityType;
declare const UIActivityTypeMarkupAsPDF: cocoascript.UIActivityType;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfigurationmetadatakey
  type UIActivityItemsConfigurationMetadataKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfigurationinteraction
  type UIActivityItemsConfigurationInteraction = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiactivityitemsconfigurationpreviewintent
  type UIActivityItemsConfigurationPreviewIntent = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutsectionvisibleitemsinvalidationhandler
  type NSCollectionLayoutSectionVisibleItemsInvalidationHandler = cocoascript.NSCollectionLayoutEnvironment;
}
declare namespace cocoascript {
  /**
   * An object that describes a single change to make to an item in a collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewupdateitem
   */
  interface UICollectionViewUpdateItem extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewupdateitem/1617772-indexpathbeforeupdate
    indexPathBeforeUpdate(): cocoascript.NSIndexPath;
    setIndexPathBeforeUpdate(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewupdateitem/1617765-indexpathafterupdate
    indexPathAfterUpdate(): cocoascript.NSIndexPath;
    setIndexPathAfterUpdate(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewupdateitem/1617748-updateaction
    updateAction(): cocoascript.UICollectionUpdateAction;
    setUpdateAction(): void;
    //
    alloc():cocoascript.UICollectionViewUpdateItem;
    //
    init():cocoascript.UICollectionViewUpdateItem;
  }
}

declare const UICollectionViewUpdateItem: cocoascript.UICollectionViewUpdateItem;
declare namespace cocoascript {
  /**
   * A context object that stores information specific to a focus update in a collection view.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewfocusupdatecontext
   */
  interface UICollectionViewFocusUpdateContext extends UIFocusUpdateContext {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewfocusupdatecontext/1618077-previouslyfocusedindexpath
    previouslyFocusedIndexPath(): cocoascript.NSIndexPath;
    setPreviouslyFocusedIndexPath(): void;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewfocusupdatecontext/1618011-nextfocusedindexpath
    nextFocusedIndexPath(): cocoascript.NSIndexPath;
    setNextFocusedIndexPath(): void;
    //
    alloc():cocoascript.UICollectionViewFocusUpdateContext;
    //
    init():cocoascript.UICollectionViewFocusUpdateContext;
  }
}

declare const UICollectionViewFocusUpdateContext: cocoascript.UICollectionViewFocusUpdateContext;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitransitioncontextviewcontrollerkey
  type UITransitionContextViewControllerKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitransitioncontextviewkey
  type UITransitionContextViewKey = cocoascript.NSString;
}
declare const UITableViewAutomaticDimension: cocoascript.CGFloat;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiviewanimatingstate
  type UIViewAnimatingState = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiviewanimatingposition
  type UIViewAnimatingPosition = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidocumentbrowserimportmode
  type UIDocumentBrowserImportMode = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionviewcompositionallayoutsectionprovider
  type UICollectionViewCompositionalLayoutSectionProvider = cocoascript.NSCollectionLayoutEnvironment;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uinavigationcontrolleroperation
  type UINavigationControllerOperation = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitableviewrowactionstyle
  type UITableViewRowActionStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/nscollectionlayoutgroupcustomitemprovider
  type NSCollectionLayoutGroupCustomItemProvider = cocoascript.NSCollectionLayoutEnvironment;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicontentinsetsreference
  type UIContentInsetsReference = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * A custom cell accessory.
   * doc://com.apple.documentation/documentation/uikit/uicellaccessorycustomview
   */
  interface UICellAccessoryCustomView extends UICellAccessory {
    // doc://com.apple.documentation/documentation/uikit/uicellaccessorycustomview/3600361-initwithcustomview
    initWithCustomView_placement(customView: cocoascript.UIView, placement: cocoascript.UICellAccessoryPlacement):cocoascript.UICellAccessoryCustomView;
    // doc://com.apple.documentation/documentation/uikit/uicellaccessorycustomview/3600360-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UICellAccessoryCustomView;
    // doc://com.apple.documentation/documentation/uikit/uicellaccessorycustomview/3600359-customview
    customView(): cocoascript.UIView;
    setCustomView(): void;
    // doc://com.apple.documentation/documentation/uikit/uicellaccessorycustomview/3600363-placement
    placement(): cocoascript.UICellAccessoryPlacement;
    setPlacement(): void;
    // doc://com.apple.documentation/documentation/uikit/uicellaccessorycustomview/3600364-position
    position(): cocoascript.UICellAccessoryPosition;
    setPosition(): void;
    // doc://com.apple.documentation/documentation/uikit/uicellaccessorycustomview/3600362-maintainsfixedsize
    maintainsFixedSize(): cocoascript.BOOL;
    setMaintainsFixedSize(): void;
    //
    alloc():cocoascript.UICellAccessoryCustomView;
    //
    init():cocoascript.UICellAccessoryCustomView;
  }
}

declare const UICellAccessoryCustomView: cocoascript.UICellAccessoryCustomView;
declare namespace cocoascript {
  /**
   * The disclosure indicator system accessory.
   * doc://com.apple.documentation/documentation/uikit/uicellaccessorydisclosureindicator
   */
  interface UICellAccessoryDisclosureIndicator extends UICellAccessory {
    //
    alloc():cocoascript.UICellAccessoryDisclosureIndicator;
    //
    init():cocoascript.UICellAccessoryDisclosureIndicator;
  }
}

declare const UICellAccessoryDisclosureIndicator: cocoascript.UICellAccessoryDisclosureIndicator;
declare namespace cocoascript {
  /**
   * The outline disclosure system accessory.
   * doc://com.apple.documentation/documentation/uikit/uicellaccessoryoutlinedisclosure
   */
  interface UICellAccessoryOutlineDisclosure extends UICellAccessory {
    // doc://com.apple.documentation/documentation/uikit/uicellaccessoryoutlinedisclosure/3600383-actionhandler
    actionHandler(): void;
    setActionHandler(): void;
    // doc://com.apple.documentation/documentation/uikit/uicellaccessoryoutlinedisclosure/3600385-style
    style(): cocoascript.UICellAccessoryOutlineDisclosureStyle;
    setStyle(): void;
    //
    alloc():cocoascript.UICellAccessoryOutlineDisclosure;
    //
    init():cocoascript.UICellAccessoryOutlineDisclosure;
  }
}

declare const UICellAccessoryOutlineDisclosure: cocoascript.UICellAccessoryOutlineDisclosure;
declare namespace cocoascript {
  /**
   * The checkmark system accessory.
   * doc://com.apple.documentation/documentation/uikit/uicellaccessorycheckmark
   */
  interface UICellAccessoryCheckmark extends UICellAccessory {
    //
    alloc():cocoascript.UICellAccessoryCheckmark;
    //
    init():cocoascript.UICellAccessoryCheckmark;
  }
}

declare const UICellAccessoryCheckmark: cocoascript.UICellAccessoryCheckmark;
declare namespace cocoascript {
  /**
   * The delete system accessory.
   * doc://com.apple.documentation/documentation/uikit/uicellaccessorydelete
   */
  interface UICellAccessoryDelete extends UICellAccessory {
    // doc://com.apple.documentation/documentation/uikit/uicellaccessorydelete/3600366-actionhandler
    actionHandler(): void;
    setActionHandler(): void;
    // doc://com.apple.documentation/documentation/uikit/uicellaccessorydelete/3667727-backgroundcolor
    backgroundColor(): cocoascript.UIColor;
    setBackgroundColor(): void;
    //
    alloc():cocoascript.UICellAccessoryDelete;
    //
    init():cocoascript.UICellAccessoryDelete;
  }
}

declare const UICellAccessoryDelete: cocoascript.UICellAccessoryDelete;
declare namespace cocoascript {
  /**
   * The insert system accessory.
   * doc://com.apple.documentation/documentation/uikit/uicellaccessoryinsert
   */
  interface UICellAccessoryInsert extends UICellAccessory {
    // doc://com.apple.documentation/documentation/uikit/uicellaccessoryinsert/3600373-actionhandler
    actionHandler(): void;
    setActionHandler(): void;
    // doc://com.apple.documentation/documentation/uikit/uicellaccessoryinsert/3667728-backgroundcolor
    backgroundColor(): cocoascript.UIColor;
    setBackgroundColor(): void;
    //
    alloc():cocoascript.UICellAccessoryInsert;
    //
    init():cocoascript.UICellAccessoryInsert;
  }
}

declare const UICellAccessoryInsert: cocoascript.UICellAccessoryInsert;
declare namespace cocoascript {
  /**
   * The reorder system accessory.
   * doc://com.apple.documentation/documentation/uikit/uicellaccessoryreorder
   */
  interface UICellAccessoryReorder extends UICellAccessory {
    // doc://com.apple.documentation/documentation/uikit/uicellaccessoryreorder/3600397-showsverticalseparator
    showsVerticalSeparator(): cocoascript.BOOL;
    setShowsVerticalSeparator(): void;
    //
    alloc():cocoascript.UICellAccessoryReorder;
    //
    init():cocoascript.UICellAccessoryReorder;
  }
}

declare const UICellAccessoryReorder: cocoascript.UICellAccessoryReorder;
declare namespace cocoascript {
  /**
   * The multiselect system accessory.
   * doc://com.apple.documentation/documentation/uikit/uicellaccessorymultiselect
   */
  interface UICellAccessoryMultiselect extends UICellAccessory {
    // doc://com.apple.documentation/documentation/uikit/uicellaccessorymultiselect/3667729-backgroundcolor
    backgroundColor(): cocoascript.UIColor;
    setBackgroundColor(): void;
    //
    alloc():cocoascript.UICellAccessoryMultiselect;
    //
    init():cocoascript.UICellAccessoryMultiselect;
  }
}

declare const UICellAccessoryMultiselect: cocoascript.UICellAccessoryMultiselect;
declare namespace cocoascript {
  /**
   * The label system accessory.
   * doc://com.apple.documentation/documentation/uikit/uicellaccessorylabel
   */
  interface UICellAccessoryLabel extends UICellAccessory {
    // doc://com.apple.documentation/documentation/uikit/uicellaccessorylabel/3600378-initwithtext
    initWithText(text: cocoascript.NSString):cocoascript.UICellAccessoryLabel;
    // doc://com.apple.documentation/documentation/uikit/uicellaccessorylabel/3600377-initwithcoder
    initWithCoder(coder: cocoascript.NSCoder):cocoascript.UICellAccessoryLabel;
    // doc://com.apple.documentation/documentation/uikit/uicellaccessorylabel/3600379-text
    text(): cocoascript.NSString;
    setText(): void;
    // doc://com.apple.documentation/documentation/uikit/uicellaccessorylabel/3600376-font
    font(): cocoascript.UIFont;
    setFont(): void;
    // doc://com.apple.documentation/documentation/uikit/uicellaccessorylabel/3600375-adjustsfontforcontentsizecategor
    adjustsFontForContentSizeCategory(): cocoascript.BOOL;
    setAdjustsFontForContentSizeCategory(): void;
    //
    alloc():cocoascript.UICellAccessoryLabel;
    //
    init():cocoascript.UICellAccessoryLabel;
  }
}

declare const UICellAccessoryLabel: cocoascript.UICellAccessoryLabel;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicellaccessorydisplayedstate
  type UICellAccessoryDisplayedState = cocoascript.NSInteger;
}
declare const UICellAccessoryStandardDimension: cocoascript.CGFloat;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicellaccessoryplacement
  type UICellAccessoryPlacement = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicellaccessoryposition
  type UICellAccessoryPosition = cocoascript.UICellAccessory;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionlayoutlistappearance
  type UICollectionLayoutListAppearance = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionlayoutlistheadermode
  type UICollectionLayoutListHeaderMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionlayoutlistfootermode
  type UICollectionLayoutListFooterMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionlayoutlistswipeactionsconfigurationprovider
  type UICollectionLayoutListSwipeActionsConfigurationProvider = cocoascript.NSIndexPath;
}
declare namespace cocoascript {
  /**
   * A transaction that describes the changes after reordering the items in the view.
   * doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcetransaction
   */
  interface NSDiffableDataSourceTransaction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcetransaction/3600510-sectiontransactions
    sectionTransactions(): cocoascript.ItemIdentifierType;
    setSectionTransactions(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcetransaction/3600509-initialsnapshot
    initialSnapshot(): cocoascript.ItemIdentifierType;
    setInitialSnapshot(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcetransaction/3600508-finalsnapshot
    finalSnapshot(): cocoascript.ItemIdentifierType;
    setFinalSnapshot(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcetransaction/3600507-difference
    difference(): cocoascript.ItemIdentifierType;
    setDifference(): void;
    //
    alloc():cocoascript.NSDiffableDataSourceTransaction;
    //
    init():cocoascript.NSDiffableDataSourceTransaction;
  }
}

declare const NSDiffableDataSourceTransaction: cocoascript.NSDiffableDataSourceTransaction;
declare namespace cocoascript {
  /**
   * A transaction that describes the changes after reordering the items in a section.
   * doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectiontransaction
   */
  interface NSDiffableDataSourceSectionTransaction extends NSObject {
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectiontransaction/3600505-sectionidentifier
    sectionIdentifier(): cocoascript.SectionIdentifierType;
    setSectionIdentifier(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectiontransaction/3600504-initialsnapshot
    initialSnapshot(): cocoascript.ItemIdentifierType;
    setInitialSnapshot(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectiontransaction/3600503-finalsnapshot
    finalSnapshot(): cocoascript.ItemIdentifierType;
    setFinalSnapshot(): void;
    // doc://com.apple.documentation/documentation/uikit/nsdiffabledatasourcesectiontransaction/3600502-difference
    difference(): cocoascript.ItemIdentifierType;
    setDifference(): void;
    //
    alloc():cocoascript.NSDiffableDataSourceSectionTransaction;
    //
    init():cocoascript.NSDiffableDataSourceSectionTransaction;
  }
}

declare const NSDiffableDataSourceSectionTransaction: cocoascript.NSDiffableDataSourceSectionTransaction;
declare const UIListContentImageStandardDimension: cocoascript.CGFloat;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uilistcontenttextalignment
  type UIListContentTextAlignment = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uilistcontenttexttransform
  type UIListContentTextTransform = cocoascript.NSInteger;
}
declare const UITextContentTypeEmailAddress: cocoascript.UITextContentType;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasourcecellprovider
  type UICollectionViewDiffableDataSourceCellProvider = cocoascript.id;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionviewdiffabledatasourcesupplementaryviewprovider
  type UICollectionViewDiffableDataSourceSupplementaryViewProvider = cocoascript.NSIndexPath;
}
declare const UIFontTextStyleCallout: cocoascript.UIFontTextStyle;
declare const UIFontTextStyleCaption1: cocoascript.UIFontTextStyle;
declare const UIFontTextStyleCaption2: cocoascript.UIFontTextStyle;
declare const UIFontTextStyleFootnote: cocoascript.UIFontTextStyle;
declare const UIFontTextStyleSubheadline: cocoascript.UIFontTextStyle;
declare const UIFontTextStyleLargeTitle: cocoascript.UIFontTextStyle;
declare const UIFontTextStyleTitle2: cocoascript.UIFontTextStyle;
declare const UIFontTextStyleTitle3: cocoascript.UIFontTextStyle;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitableviewdropintent
  type UITableViewDropIntent = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionviewdropintent
  type UICollectionViewDropIntent = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * The methods that let you coordinate with a flow layout object to implement a grid-based layout.
   * doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegateflowlayout
   */
  interface UICollectionViewDelegateFlowLayout extends UICollectionViewDelegate {
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegateflowlayout/1617708-collectionview
    collectionView_layout_sizeForItemAtIndexPath(collectionView: cocoascript.UICollectionView, collectionViewLayout: cocoascript.UICollectionViewLayout, indexPath: cocoascript.NSIndexPath):cocoascript.CGSize;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegateflowlayout/1617718-collectionview
    collectionView_layout_insetForSectionAtIndex(collectionView: cocoascript.UICollectionView, collectionViewLayout: cocoascript.UICollectionViewLayout, section: cocoascript.NSInteger):cocoascript.UIEdgeInsets;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegateflowlayout/1617705-collectionview
    collectionView_layout_minimumLineSpacingForSectionAtIndex(collectionView: cocoascript.UICollectionView, collectionViewLayout: cocoascript.UICollectionViewLayout, section: cocoascript.NSInteger):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegateflowlayout/1617696-collectionview
    collectionView_layout_minimumInteritemSpacingForSectionAtIndex(collectionView: cocoascript.UICollectionView, collectionViewLayout: cocoascript.UICollectionViewLayout, section: cocoascript.NSInteger):cocoascript.CGFloat;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegateflowlayout/1617702-collectionview
    collectionView_layout_referenceSizeForHeaderInSection(collectionView: cocoascript.UICollectionView, collectionViewLayout: cocoascript.UICollectionViewLayout, section: cocoascript.NSInteger):cocoascript.CGSize;
    // doc://com.apple.documentation/documentation/uikit/uicollectionviewdelegateflowlayout/1617713-collectionview
    collectionView_layout_referenceSizeForFooterInSection(collectionView: cocoascript.UICollectionView, collectionViewLayout: cocoascript.UICollectionViewLayout, section: cocoascript.NSInteger):cocoascript.CGSize;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionviewcelldragstate
  type UICollectionViewCellDragState = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicontextualactionhandler
  type UIContextualActionHandler = cocoascript.BOOL;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicontextualactionstyle
  type UIContextualActionStyle = cocoascript.NSInteger;
}
declare const UIScrollViewDecelerationRateNormal: cocoascript.UIScrollViewDecelerationRate;
declare const UIScrollViewDecelerationRateFast: cocoascript.UIScrollViewDecelerationRate;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uitabbaritempositioning
  type UITabBarItemPositioning = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiattachmentbehaviortype
  type UIAttachmentBehaviorType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  interface UIFloatRange {
  }
}declare const UIPageViewControllerOptionInterPageSpacingKey: cocoascript.UIPageViewControllerOptionsKey;
declare const UIPageViewControllerOptionSpineLocationKey: cocoascript.UIPageViewControllerOptionsKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uidocumentbrowseractionavailability
  type UIDocumentBrowserActionAvailability = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicellconfigurationdragstate
  type UICellConfigurationDragState = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicellconfigurationdropstate
  type UICellConfigurationDropState = cocoascript.NSInteger;
}
declare const UIConfigurationColorTransformerGrayscale: cocoascript.UIConfigurationColorTransformer;
declare const UIConfigurationColorTransformerPreferredTint: cocoascript.UIConfigurationColorTransformer;
declare const UIConfigurationColorTransformerMonochromeTint: cocoascript.UIConfigurationColorTransformer;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollisionbehaviormode
  type UICollisionBehaviorMode = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipushbehaviormode
  type UIPushBehaviorMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uiinterpolatingmotioneffecttype
  type UIInterpolatingMotionEffectType = cocoascript.NSInteger;
}
declare const UIWindowLevelNormal: cocoascript.UIWindowLevel;
declare const UIWindowLevelStatusBar: cocoascript.UIWindowLevel;
declare const UIWindowLevelAlert: cocoascript.UIWindowLevel;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uipointereffecttintmode
  type UIPointerEffectTintMode = cocoascript.NSInteger;
}
declare const UIFocusSoundIdentifierDefault: cocoascript.UIFocusSoundIdentifier;
declare const UIFocusSoundIdentifierNone: cocoascript.UIFocusSoundIdentifier;
declare const UIAccessibilityNotificationSwitchControlIdentifier: cocoascript.UIAccessibilityAssistiveTechnologyIdentifier;
declare const UIAccessibilityNotificationVoiceOverIdentifier: cocoascript.UIAccessibilityAssistiveTechnologyIdentifier;
declare const UIFontWeightTrait: cocoascript.UIFontDescriptorTraitKey;
declare const UIFontWeightUltraLight: cocoascript.UIFontWeight;
declare const UIFontWeightThin: cocoascript.UIFontWeight;
declare const UIFontWeightLight: cocoascript.UIFontWeight;
declare const UIFontWeightRegular: cocoascript.UIFontWeight;
declare const UIFontWeightMedium: cocoascript.UIFontWeight;
declare const UIFontWeightSemibold: cocoascript.UIFontWeight;
declare const UIFontWeightBold: cocoascript.UIFontWeight;
declare const UIFontWeightHeavy: cocoascript.UIFontWeight;
declare const UIFontWeightBlack: cocoascript.UIFontWeight;
declare const UIFontDescriptorSystemDesignMonospaced: cocoascript.UIFontDescriptorSystemDesign;
declare const UIFontDescriptorNameAttribute: cocoascript.UIFontDescriptorAttributeName;
declare const UIFontDescriptorMatrixAttribute: cocoascript.UIFontDescriptorAttributeName;
declare const UIFontDescriptorSizeAttribute: cocoascript.UIFontDescriptorAttributeName;
declare const UIFontDescriptorSystemDesignDefault: cocoascript.UIFontDescriptorSystemDesign;
declare const UIFontDescriptorSystemDesignSerif: cocoascript.UIFontDescriptorSystemDesign;
declare const UIFontDescriptorSystemDesignRounded: cocoascript.UIFontDescriptorSystemDesign;
declare const UIFontDescriptorCascadeListAttribute: cocoascript.UIFontDescriptorAttributeName;
declare const UIFontDescriptorCharacterSetAttribute: cocoascript.UIFontDescriptorAttributeName;
declare const UIFontDescriptorFaceAttribute: cocoascript.UIFontDescriptorAttributeName;
declare const UIFontDescriptorFamilyAttribute: cocoascript.UIFontDescriptorAttributeName;
declare const UIFontDescriptorFeatureSettingsAttribute: cocoascript.UIFontDescriptorAttributeName;
declare const UIFontDescriptorFixedAdvanceAttribute: cocoascript.UIFontDescriptorAttributeName;
declare const UIFontDescriptorTextStyleAttribute: cocoascript.UIFontDescriptorAttributeName;
declare const UIFontDescriptorTraitsAttribute: cocoascript.UIFontDescriptorAttributeName;
declare const UIFontDescriptorVisibleNameAttribute: cocoascript.UIFontDescriptorAttributeName;
declare const UIFontFeatureTypeIdentifierKey: cocoascript.UIFontDescriptorFeatureKey;
declare const UIFontFeatureSelectorIdentifierKey: cocoascript.UIFontDescriptorFeatureKey;
declare const UIFontSlantTrait: cocoascript.UIFontDescriptorTraitKey;
declare const UIFontSymbolicTrait: cocoascript.UIFontDescriptorTraitKey;
declare const UIFontWidthTrait: cocoascript.UIFontDescriptorTraitKey;
declare const UITextContentTypeURL: cocoascript.UITextContentType;
declare const UITextContentTypeAddressCity: cocoascript.UITextContentType;
declare const UITextContentTypeAddressCityAndState: cocoascript.UITextContentType;
declare const UITextContentTypeAddressState: cocoascript.UITextContentType;
declare const UITextContentTypeCountryName: cocoascript.UITextContentType;
declare const UITextContentTypeCreditCardNumber: cocoascript.UITextContentType;
declare const UITextContentTypeFamilyName: cocoascript.UITextContentType;
declare const UITextContentTypeFullStreetAddress: cocoascript.UITextContentType;
declare const UITextContentTypeGivenName: cocoascript.UITextContentType;
declare const UITextContentTypeJobTitle: cocoascript.UITextContentType;
declare const UITextContentTypeLocation: cocoascript.UITextContentType;
declare const UITextContentTypeMiddleName: cocoascript.UITextContentType;
declare const UITextContentTypeName: cocoascript.UITextContentType;
declare const UITextContentTypeNamePrefix: cocoascript.UITextContentType;
declare const UITextContentTypeNameSuffix: cocoascript.UITextContentType;
declare const UITextContentTypeNickname: cocoascript.UITextContentType;
declare const UITextContentTypeOrganizationName: cocoascript.UITextContentType;
declare const UITextContentTypePostalCode: cocoascript.UITextContentType;
declare const UITextContentTypeStreetAddressLine1: cocoascript.UITextContentType;
declare const UITextContentTypeStreetAddressLine2: cocoascript.UITextContentType;
declare const UITextContentTypeSublocality: cocoascript.UITextContentType;
declare const UITextContentTypeTelephoneNumber: cocoascript.UITextContentType;
declare const UITextContentTypeUsername: cocoascript.UITextContentType;
declare const UITextContentTypePassword: cocoascript.UITextContentType;
declare const UITextContentTypeNewPassword: cocoascript.UITextContentType;
declare const UITextContentTypeOneTimeCode: cocoascript.UITextContentType;
declare const UITextWritingDirectionNatural: cocoascript.UITextWritingDirection;
declare const UITextWritingDirectionLeftToRight: cocoascript.UITextWritingDirection;
declare const UITextWritingDirectionRightToLeft: cocoascript.UITextWritingDirection;
declare const UICollectionViewFlowLayoutAutomaticSize: cocoascript.CGSize;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionviewflowlayoutsectioninsetreference
  type UICollectionViewFlowLayoutSectionInsetReference = cocoascript.NSInteger;
}
declare const UIWindowSceneSessionRoleApplication: cocoascript.UISceneSessionRole;
declare const UIWindowSceneSessionRoleExternalDisplay: cocoascript.UISceneSessionRole;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionviewcellregistrationconfigurationhandler
  type UICollectionViewCellRegistrationConfigurationHandler = cocoascript.id;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionviewsupplementaryregistrationconfigurationhandler
  type UICollectionViewSupplementaryRegistrationConfigurationHandler = cocoascript.NSIndexPath;
}
declare const UIActivityItemsConfigurationMetadataKeyMessageBody: cocoascript.UIActivityItemsConfigurationMetadataKey;
declare const UIActivityItemsConfigurationMetadataKeyTitle: cocoascript.UIActivityItemsConfigurationMetadataKey;
declare const UIActivityItemsConfigurationInteractionShare: cocoascript.UIActivityItemsConfigurationInteraction;
declare const UIActivityItemsConfigurationPreviewIntentFullSize: cocoascript.UIActivityItemsConfigurationPreviewIntent;
declare const UIActivityItemsConfigurationPreviewIntentThumbnail: cocoascript.UIActivityItemsConfigurationPreviewIntent;
declare const UITransitionContextFromViewControllerKey: cocoascript.UITransitionContextViewControllerKey;
declare const UITransitionContextToViewControllerKey: cocoascript.UITransitionContextViewControllerKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicollectionupdateaction
  type UICollectionUpdateAction = cocoascript.NSInteger;
}
declare const UITransitionContextFromViewKey: cocoascript.UITransitionContextViewKey;
declare const UITransitionContextToViewKey: cocoascript.UITransitionContextViewKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/uikit/uicellaccessoryoutlinedisclosurestyle
  type UICellAccessoryOutlineDisclosureStyle = cocoascript.NSInteger;
}
declare const UIFloatRangeZero: cocoascript.UIFloatRange;
declare const UIFloatRangeInfinite: cocoascript.UIFloatRange;
