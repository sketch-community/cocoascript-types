declare namespace cocoascript {
  /**
   * An object that manages the space immediately below a window's title bar and above your app's custom content.
   * doc://com.apple.documentation/documentation/appkit/nstoolbar
   */
  interface NSToolbar extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516975-initwithidentifier
    initWithIdentifier(identifier: NSToolbarIdentifier):NSToolbar;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/2873241-init
    init():NSToolbar;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516939-delegate
    delegate(): NSToolbarDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516953-identifier
    identifier(): NSToolbarIdentifier;
    setIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516937-displaymode
    displayMode(): NSToolbarDisplayMode;
    setDisplayMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516954-showsbaselineseparator
    showsBaselineSeparator(): BOOL;
    setShowsBaselineSeparator(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516962-allowsusercustomization
    allowsUserCustomization(): BOOL;
    setAllowsUserCustomization(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1517005-allowsextensionitems
    allowsExtensionItems(): BOOL;
    setAllowsExtensionItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516946-items
    items(): NSToolbarItem;
    setItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516993-visibleitems
    visibleItems(): NSToolbarItem;
    setVisibleItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516966-sizemode
    sizeMode(): NSToolbarSizeMode;
    setSizeMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516941-insertitemwithitemidentifier
    insertItemWithItemIdentifier_atIndex(itemIdentifier: NSToolbarItemIdentifier, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516980-removeitematindex
    removeItemAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516999-selecteditemidentifier
    selectedItemIdentifier(): NSToolbarItemIdentifier;
    setSelectedItemIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/2967178-centereditemidentifier
    centeredItemIdentifier(): NSToolbarItemIdentifier;
    setCenteredItemIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516935-visible
    visible(): BOOL;
    setVisible(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516979-runcustomizationpalette
    runCustomizationPalette(sender: NSToolbar):void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516987-customizationpaletteisrunning
    customizationPaletteIsRunning(): BOOL;
    setCustomizationPaletteIsRunning(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516991-fullscreenaccessoryview
    fullScreenAccessoryView(): NSView;
    setFullScreenAccessoryView(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516989-fullscreenaccessoryviewmaxheight
    fullScreenAccessoryViewMaxHeight(): CGFloat;
    setFullScreenAccessoryViewMaxHeight(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516977-fullscreenaccessoryviewminheight
    fullScreenAccessoryViewMinHeight(): CGFloat;
    setFullScreenAccessoryViewMinHeight(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516992-autosavesconfiguration
    autosavesConfiguration(): BOOL;
    setAutosavesConfiguration(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516956-configurationdictionary
    configurationDictionary(): id;
    setConfigurationDictionary(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516951-setconfigurationfromdictionary
    setConfigurationFromDictionary(configDict: NSToolbar):void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbar/1516947-validatevisibleitems
    validateVisibleItems():void;
    //
    alloc():NSToolbar;
    //
    init():NSToolbar;
  }
}

declare const NSToolbar: cocoascript.NSToolbar;
// doc://com.apple.documentation/documentation/appkit/nstoolbardidremoveitemnotification
declare const NSToolbarDidRemoveItemNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nstoolbarwilladditemnotification
declare const NSToolbarWillAddItemNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * An object that provides dynamic contextual controls in the Touch Bar of supported models of MacBook Pro.
   * doc://com.apple.documentation/documentation/appkit/nstouchbar
   */
  interface NSTouchBar extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstouchbar/2544721-init
    init():NSTouchBar;
    // doc://com.apple.documentation/documentation/appkit/nstouchbar/2544723-initwithcoder
    initWithCoder(coder: NSCoder):NSTouchBar;
    // doc://com.apple.documentation/documentation/appkit/nstouchbar/2544666-delegate
    delegate(): NSTouchBarDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouchbar/2646922-templateitems
    templateItems(): NSTouchBarItem;
    setTemplateItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouchbar/2646921-defaultitemidentifiers
    defaultItemIdentifiers(): NSTouchBarItemIdentifier;
    setDefaultItemIdentifiers(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouchbar/2544871-principalitemidentifier
    principalItemIdentifier(): NSTouchBarItemIdentifier;
    setPrincipalItemIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouchbar/2787731-escapekeyreplacementitemidentifi
    escapeKeyReplacementItemIdentifier(): NSTouchBarItemIdentifier;
    setEscapeKeyReplacementItemIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouchbar/2544756-visible
    visible(): BOOL;
    setVisible(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouchbar/2544762-itemidentifiers
    itemIdentifiers(): NSTouchBarItemIdentifier;
    setItemIdentifiers(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouchbar/2544806-itemforidentifier
    itemForIdentifier(identifier: NSTouchBarItemIdentifier):NSTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nstouchbar/2544730-customizationidentifier
    customizationIdentifier(): NSTouchBarCustomizationIdentifier;
    setCustomizationIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouchbar/2544796-customizationalloweditemidentifi
    customizationAllowedItemIdentifiers(): NSTouchBarItemIdentifier;
    setCustomizationAllowedItemIdentifiers(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouchbar/2544675-customizationrequireditemidentif
    customizationRequiredItemIdentifiers(): NSTouchBarItemIdentifier;
    setCustomizationRequiredItemIdentifiers(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouchbar/3228044-automaticcustomizetouchbarmenuit
    automaticCustomizeTouchBarMenuItemEnabled(): BOOL;
    setAutomaticCustomizeTouchBarMenuItemEnabled(): void;
    //
    alloc():NSTouchBar;
    //
    init():NSTouchBar;
  }
}

declare const NSTouchBar: cocoascript.NSTouchBar;
declare namespace cocoascript {
  /**
   * An object that manages an app’s main event loop and resources used by all of that app’s objects.
   * doc://com.apple.documentation/documentation/appkit/nsapplication
   */
  interface NSApplication extends NSResponder {
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428360-sharedapplication
    sharedApplication(): NSApplication;
    setSharedApplication(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428705-delegate
    delegate(): NSApplicationDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428485-nexteventmatchingmask
    nextEventMatchingMask_untilDate_inMode_dequeue(mask: NSEventMask, expiration: NSDate, mode: NSRunLoopMode, deqFlag: BOOL):NSEvent;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428652-discardeventsmatchingmask
    discardEventsMatchingMask_beforeEvent(mask: NSEventMask, lastEvent: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428668-currentevent
    currentEvent(): NSEvent;
    setCurrentEvent(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428759-running
    running(): BOOL;
    setRunning(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428631-run
    run():void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428771-finishlaunching
    finishLaunching():void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428473-stop
    stop(sender: NSApplication):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428359-sendevent
    sendEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428710-postevent
    postEvent_atStart(event: NSEvent, flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428366-trytoperform
    tryToPerform_with(action: SEL, object: NSApplication):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428509-sendaction
    sendAction_to_from(action: SEL, target: NSApplication, sender: NSApplication):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428449-targetforaction
    targetForAction(action: SEL):NSApplication;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428658-targetforaction
    targetForAction_to_from(action: SEL, target: NSApplication, sender: NSApplication):NSApplication;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428417-terminate
    terminate(sender: NSApplication):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428594-replytoapplicationshouldterminat
    replyToApplicationShouldTerminate(shouldTerminate: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428493-active
    active(): BOOL;
    setActive(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428468-activateignoringotherapps
    activateIgnoringOtherApps(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428428-deactivate
    deactivate():void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428376-disablerelaunchonlogin
    disableRelaunchOnLogin():void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428453-enablerelaunchonlogin
    enableRelaunchOnLogin():void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/2967172-registerforremotenotifications
    registerForRemoteNotifications():void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428747-unregisterforremotenotifications
    unregisterForRemoteNotifications():void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428776-enabledremotenotificationtypes
    enabledRemoteNotificationTypes(): NSRemoteNotificationType;
    setEnabledRemoteNotificationTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428476-registerforremotenotificationtyp
    registerForRemoteNotificationTypes(types: NSRemoteNotificationType):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/2967173-registeredforremotenotifications
    registeredForRemoteNotifications(): BOOL;
    setRegisteredForRemoteNotifications(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/2967170-appearance
    appearance(): NSAppearance;
    setAppearance(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/2967171-effectiveappearance
    effectiveAppearance(): NSAppearance;
    setEffectiveAppearance(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428717-currentsystempresentationoptions
    currentSystemPresentationOptions(): NSApplicationPresentationOptions;
    setCurrentSystemPresentationOptions(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428664-presentationoptions
    presentationOptions(): NSApplicationPresentationOptions;
    setPresentationOptions(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428556-userinterfacelayoutdirection
    userInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection;
    setUserInterfaceLayoutDirection(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428671-docktile
    dockTile(): NSDockTile;
    setDockTile(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428744-applicationiconimage
    applicationIconImage(): NSImage;
    setApplicationIconImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/2646920-toggletouchbarcustomizationpalet
    toggleTouchBarCustomizationPalette(sender: NSApplication):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428358-requestuserattention
    requestUserAttention(requestType: NSRequestUserAttentionType):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428683-canceluserattentionrequest
    cancelUserAttentionRequest(request: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428592-replytoopenorprint
    replyToOpenOrPrint(reply: NSApplicationDelegateReply):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1420818-registeruserinterfaceitemsearchh
    registerUserInterfaceItemSearchHandler(handler: NSUserInterfaceItemSearching):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1420808-searchstring
    searchString_inUserInterfaceItemString_searchRange_foundRange(searchString: string | NSString, stringToSearch: string | NSString, searchRange: NSRange, foundRange: NSRange):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1420820-unregisteruserinterfaceitemsearc
    unregisterUserInterfaceItemSearchHandler(handler: NSUserInterfaceItemSearching):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1500910-showhelp
    showHelp(sender: NSApplication):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1500925-activatecontexthelpmode
    activateContextHelpMode(sender: NSApplication):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428644-helpmenu
    helpMenu(): NSMenu;
    setHelpMenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428379-validrequestorforsendtype
    validRequestorForSendType_returnType(sendType: NSPasteboardType, returnType: NSPasteboardType):NSApplication;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428467-servicesprovider
    servicesProvider(): id;
    setServicesProvider(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428469-fullkeyboardaccessenabled
    fullKeyboardAccessEnabled(): BOOL;
    setFullKeyboardAccessEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428746-hideotherapplications
    hideOtherApplications(sender: NSApplication):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428737-unhideallapplications
    unhideAllApplications(sender: NSApplication):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428374-detachdrawingthread
    detachDrawingThread_toTarget_withObject(selector: SEL, target: NSApplication, argument: NSApplication):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428396-reportexception
    reportException(exception: NSException):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428703-activationpolicy
    activationPolicy():NSApplicationActivationPolicy;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1428621-setactivationpolicy
    setActivationPolicy(activationPolicy: NSApplicationActivationPolicy):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1494283-ordereddocuments
    orderedDocuments(): NSDocument;
    setOrderedDocuments(): void;
    // doc://com.apple.documentation/documentation/appkit/nsapplication/1494287-orderedwindows
    orderedWindows(): NSWindow;
    setOrderedWindows(): void;
    //
    alloc():NSApplication;
    //
    init():NSApplication;
  }
}

declare const NSApplication: cocoascript.NSApplication;
// doc://com.apple.documentation/documentation/appkit/nsapp
declare const NSApp: NSApplication;
// doc://com.apple.documentation/documentation/appkit/nseventtrackingrunloopmode
declare const NSEventTrackingRunLoopMode: NSRunLoopMode;
// doc://com.apple.documentation/documentation/appkit/nsapplicationdidbecomeactivenotification
declare const NSApplicationDidBecomeActiveNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsapplicationdidchangescreenparametersnotification
declare const NSApplicationDidChangeScreenParametersNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsapplicationdidfinishlaunchingnotification
declare const NSApplicationDidFinishLaunchingNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsapplicationdidhidenotification
declare const NSApplicationDidHideNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsapplicationdidresignactivenotification
declare const NSApplicationDidResignActiveNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsapplicationdidunhidenotification
declare const NSApplicationDidUnhideNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsapplicationdidupdatenotification
declare const NSApplicationDidUpdateNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsapplicationwillbecomeactivenotification
declare const NSApplicationWillBecomeActiveNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsapplicationwillfinishlaunchingnotification
declare const NSApplicationWillFinishLaunchingNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsapplicationwillhidenotification
declare const NSApplicationWillHideNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsapplicationwillresignactivenotification
declare const NSApplicationWillResignActiveNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsapplicationwillterminatenotification
declare const NSApplicationWillTerminateNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsapplicationwillunhidenotification
declare const NSApplicationWillUnhideNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsapplicationwillupdatenotification
declare const NSApplicationWillUpdateNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * An object that can manipulate and provide information for a single instance of an app.
   * doc://com.apple.documentation/documentation/appkit/nsrunningapplication
   */
  interface NSRunningApplication extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1530730-runningapplicationwithprocesside
    runningApplicationWithProcessIdentifier(pid: any):NSRunningApplication;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1530798-runningapplicationswithbundleide
    runningApplicationsWithBundleIdentifier(bundleIdentifier: string | NSString):NSRunningApplication;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1533604-currentapplication
    currentApplication(): NSRunningApplication;
    setCurrentApplication(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1528778-active
    active(): BOOL;
    setActive(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1528725-activatewithoptions
    activateWithOptions(options: NSApplicationActivationOptions):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1533103-activationpolicy
    activationPolicy(): NSApplicationActivationPolicy;
    setActivationPolicy(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1526608-hide
    hide():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1534676-unhide
    unhide():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1525949-hidden
    hidden(): BOOL;
    setHidden(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1526751-localizedname
    localizedName(): string | NSString;
    setLocalizedName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1529885-icon
    icon(): NSImage;
    setIcon(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1529140-bundleidentifier
    bundleIdentifier(): string | NSString;
    setBundleIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1535500-bundleurl
    bundleURL(): NSURL;
    setBundleURL(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1524287-executablearchitecture
    executableArchitecture(): NSInteger;
    setExecutableArchitecture(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1531062-executableurl
    executableURL(): NSURL;
    setExecutableURL(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1532595-launchdate
    launchDate(): NSDate;
    setLaunchDate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1532002-finishedlaunching
    finishedLaunching(): BOOL;
    setFinishedLaunching(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1526998-processidentifier
    processIdentifier(): any;
    setProcessIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1525915-ownsmenubar
    ownsMenuBar(): BOOL;
    setOwnsMenuBar(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1530370-forceterminate
    forceTerminate():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1528922-terminate
    terminate():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1532239-terminated
    terminated(): BOOL;
    setTerminated(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrunningapplication/1529538-terminateautomaticallyterminable
    terminateAutomaticallyTerminableApplications():void;
    //
    alloc():NSRunningApplication;
    //
    init():NSRunningApplication;
  }
}

declare const NSRunningApplication: cocoascript.NSRunningApplication;
declare namespace cocoascript {
  /**
   * A set of methods that delegates of
   * doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate
   */
  interface NSApplicationDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428623-applicationwillfinishlaunching
    applicationWillFinishLaunching(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428385-applicationdidfinishlaunching
    applicationDidFinishLaunching(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428699-applicationwillbecomeactive
    applicationWillBecomeActive(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428577-applicationdidbecomeactive
    applicationDidBecomeActive(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428539-applicationwillresignactive
    applicationWillResignActive(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428636-applicationdidresignactive
    applicationDidResignActive(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428642-applicationshouldterminate
    applicationShouldTerminate(sender: NSApplication):NSApplicationTerminateReply;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428381-applicationshouldterminateafterl
    applicationShouldTerminateAfterLastWindowClosed(sender: NSApplication):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428522-applicationwillterminate
    applicationWillTerminate(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428478-applicationwillhide
    applicationWillHide(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428552-applicationdidhide
    applicationDidHide(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428585-applicationwillunhide
    applicationWillUnhide(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428755-applicationdidunhide
    applicationDidUnhide(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428774-applicationwillupdate
    applicationWillUpdate(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428589-applicationdidupdate
    applicationDidUpdate(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428638-applicationshouldhandlereopen
    applicationShouldHandleReopen_hasVisibleWindows(sender: NSApplication, flag: BOOL):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428564-applicationdockmenu
    applicationDockMenu(sender: NSApplication):NSMenu;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428721-application
    application_willPresentError(application: NSApplication, error: NSError):NSError;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428424-applicationdidchangescreenparame
    applicationDidChangeScreenParameters(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428364-application
    application_willContinueUserActivityWithType(application: NSApplication, userActivityType: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428471-application
    application_continueUserActivity_restorationHandler(application: NSApplication, userActivity: NSUserActivity, restorationHandler: NSUserActivityRestoring):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428613-application
    application_didFailToContinueUserActivityWithType_error(application: NSApplication, userActivityType: string | NSString, error: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428457-application
    application_didUpdateUserActivity(application: NSApplication, userActivity: NSUserActivity):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428766-application
    application_didRegisterForRemoteNotificationsWithDeviceToken(application: NSApplication, deviceToken: NSData):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428554-application
    application_didFailToRegisterForRemoteNotificationsWithError(application: NSApplication, error: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428430-application
    application_didReceiveRemoteNotification(application: NSApplication, userInfo: NSApplicationDelegate):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/2138329-application
    application_userDidAcceptCloudKitShareWithMetadata(application: NSApplication, metadata: CKShareMetadata):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/2887193-application
    application_openURLs(application: NSApplication, urls: NSURL):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428612-application
    application_openFile(sender: NSApplication, filename: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428459-application
    application_openFileWithoutUI(sender: NSApplicationDelegate, filename: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428495-application
    application_openTempFile(sender: NSApplication, filename: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428742-application
    application_openFiles(sender: NSApplication, filenames: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428491-applicationopenuntitledfile
    applicationOpenUntitledFile(sender: NSApplication):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428444-applicationshouldopenuntitledfil
    applicationShouldOpenUntitledFile(sender: NSApplication):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428520-application
    application_printFile(sender: NSApplication, filename: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428713-application
    application_printFiles_withSettings_showPrintPanels(application: NSApplication, fileNames: string | NSString, printSettings: NSApplicationDelegate, showPrintPanels: BOOL):NSApplicationPrintReply;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428693-application
    application_didDecodeRestorableState(app: NSApplication, coder: NSCoder):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428400-application
    application_willEncodeRestorableState(app: NSApplication, coder: NSCoder):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/1428362-applicationdidchangeocclusionsta
    applicationDidChangeOcclusionState(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegate/3005173-application
    application_delegateHandlesKey(sender: NSApplication, key: string | NSString):BOOL;
  }
}
declare namespace cocoascript {
  /**
   * A workspace that can launch other apps and perform a variety of file-handling services.
   * doc://com.apple.documentation/documentation/appkit/nsworkspace
   */
  interface NSWorkspace extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1530344-sharedworkspace
    sharedWorkspace(): NSWorkspace;
    setSharedWorkspace(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1525071-notificationcenter
    notificationCenter(): NSNotificationCenter;
    setNotificationCenter(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/3172701-openurl
    openURL_configuration_completionHandler(url: NSURL, configuration: NSWorkspaceOpenConfiguration, completionHandler: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/3172702-openurls
    openURLs_withApplicationAtURL_configuration_completionHandler(urls: NSURL, applicationURL: NSURL, configuration: NSWorkspaceOpenConfiguration, completionHandler: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1533463-openurl
    openURL(url: NSURL):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/3172700-openapplicationaturl
    openApplicationAtURL_configuration_completionHandler(applicationURL: NSURL, configuration: NSWorkspaceOpenConfiguration, completionHandler: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1530417-hideotherapplications
    hideOtherApplications():void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1524490-duplicateurls
    duplicateURLs_completionHandler(URLs: NSURL, handler: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1530465-recycleurls
    recycleURLs_completionHandler(URLs: NSURL, handler: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1524549-activatefileviewerselectingurls
    activateFileViewerSelectingURLs(fileURLs: NSURL):void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1524399-selectfile
    selectFile_inFileViewerRootedAtPath(fullPath: string | NSString, rootFullPath: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1526144-typeoffile
    typeOfFile_error(absoluteFilePath: string | NSString, outError: NSError):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1527222-localizeddescriptionfortype
    localizedDescriptionForType(typeName: string | NSString):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1535654-preferredfilenameextensionfortyp
    preferredFilenameExtensionForType(typeName: string | NSString):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1525316-filenameextension
    filenameExtension_isValidForType(filenameExtension: string | NSString, typeName: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1535903-type
    type_conformsToType(firstTypeName: string | NSString, secondTypeName: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1534053-urlforapplicationwithbundleident
    URLForApplicationWithBundleIdentifier(bundleIdentifier: string | NSString):NSURL;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1535102-getinfoforfile
    getInfoForFile_application_type(fullPath: string | NSString, appName: string | NSString, type: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1533391-urlforapplicationtoopenurl
    URLForApplicationToOpenURL(url: NSURL):NSURL;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1526987-getfilesysteminfoforpath
    getFileSystemInfoForPath_isRemovable_isWritable_isUnmountable_description_type(fullPath: string | NSString, removableFlag: BOOL, writableFlag: BOOL, unmountableFlag: BOOL, description: string | NSString, fileSystemType: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1529991-isfilepackageatpath
    isFilePackageAtPath(fullPath: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1532097-frontmostapplication
    frontmostApplication(): NSRunningApplication;
    setFrontmostApplication(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1534059-runningapplications
    runningApplications(): NSRunningApplication;
    setRunningApplications(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1525848-menubarowningapplication
    menuBarOwningApplication(): NSRunningApplication;
    setMenuBarOwningApplication(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1528158-iconforfile
    iconForFile(fullPath: string | NSString):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1527879-iconforfiletype
    iconForFileType(fileType: string | NSString):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1525487-iconforfiles
    iconForFiles(fullPaths: string | NSString):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/3553230-iconforcontenttype
    iconForContentType(contentType: UTType):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1529882-seticon
    setIcon_forFile_options(image: NSImage, fullPath: string | NSString, options: NSWorkspaceIconCreationOptions):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1527741-unmountandejectdeviceatpath
    unmountAndEjectDeviceAtPath(path: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1530469-unmountandejectdeviceaturl
    unmountAndEjectDeviceAtURL_error(url: NSURL, error: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1530635-desktopimageurlforscreen
    desktopImageURLForScreen(screen: NSScreen):NSURL;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1527228-setdesktopimageurl
    setDesktopImageURL_forScreen_options_error(url: NSURL, screen: NSScreen, options: NSWorkspace, error: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1530855-desktopimageoptionsforscreen
    desktopImageOptionsForScreen(screen: NSScreen):NSWorkspace;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1532131-showsearchresultsforquerystring
    showSearchResultsForQueryString(queryString: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1533953-filelabels
    fileLabels(): string | NSString;
    setFileLabels(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1527553-filelabelcolors
    fileLabelColors(): NSColor;
    setFileLabelColors(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1525376-notefilesystemchanged
    noteFileSystemChanged(path: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1533106-extendpoweroffby
    extendPowerOffBy(requested: NSInteger):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1524656-accessibilitydisplayshoulddiffer
    accessibilityDisplayShouldDifferentiateWithoutColor(): BOOL;
    setAccessibilityDisplayShouldDifferentiateWithoutColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1526290-accessibilitydisplayshouldincrea
    accessibilityDisplayShouldIncreaseContrast(): BOOL;
    setAccessibilityDisplayShouldIncreaseContrast(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1533006-accessibilitydisplayshouldreduce
    accessibilityDisplayShouldReduceTransparency(): BOOL;
    setAccessibilityDisplayShouldReduceTransparency(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1644068-accessibilitydisplayshouldinvert
    accessibilityDisplayShouldInvertColors(): BOOL;
    setAccessibilityDisplayShouldInvertColors(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/1644069-accessibilitydisplayshouldreduce
    accessibilityDisplayShouldReduceMotion(): BOOL;
    setAccessibilityDisplayShouldReduceMotion(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/2880322-switchcontrolenabled
    switchControlEnabled(): BOOL;
    setSwitchControlEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/2880317-voiceoverenabled
    voiceOverEnabled(): BOOL;
    setVoiceOverEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspace/3025774-requestauthorizationoftype
    requestAuthorizationOfType_completionHandler(type: NSWorkspaceAuthorizationType, completionHandler: NSError):void;
    //
    alloc():NSWorkspace;
    //
    init():NSWorkspace;
  }
}

declare const NSWorkspace: cocoascript.NSWorkspace;
// doc://com.apple.documentation/documentation/appkit/nsworkspacewilllaunchapplicationnotification
declare const NSWorkspaceWillLaunchApplicationNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacedidlaunchapplicationnotification
declare const NSWorkspaceDidLaunchApplicationNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacedidterminateapplicationnotification
declare const NSWorkspaceDidTerminateApplicationNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacesessiondidbecomeactivenotification
declare const NSWorkspaceSessionDidBecomeActiveNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacesessiondidresignactivenotification
declare const NSWorkspaceSessionDidResignActiveNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacedidmountnotification
declare const NSWorkspaceDidMountNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacewillunmountnotification
declare const NSWorkspaceWillUnmountNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacedidunmountnotification
declare const NSWorkspaceDidUnmountNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacedidwakenotification
declare const NSWorkspaceDidWakeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacewillsleepnotification
declare const NSWorkspaceWillSleepNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacevolumelocalizednamekey
declare const NSWorkspaceVolumeLocalizedNameKey: string | NSString;
// doc://com.apple.documentation/documentation/appkit/nsworkspacevolumeurlkey
declare const NSWorkspaceVolumeURLKey: string | NSString;
// doc://com.apple.documentation/documentation/appkit/nsworkspacevolumeoldlocalizednamekey
declare const NSWorkspaceVolumeOldLocalizedNameKey: string | NSString;
// doc://com.apple.documentation/documentation/appkit/nsworkspacevolumeoldurlkey
declare const NSWorkspaceVolumeOldURLKey: string | NSString;
declare namespace cocoascript {
  /**
   * The configuration options to use when opening URLs or launching apps.
   * doc://com.apple.documentation/documentation/appkit/nsworkspaceopenconfiguration
   */
  interface NSWorkspaceOpenConfiguration extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsworkspaceopenconfiguration/3172709-configuration
    configuration():NSWorkspaceOpenConfiguration;
    // doc://com.apple.documentation/documentation/appkit/nsworkspaceopenconfiguration/3172716-requiresuniversallinks
    requiresUniversalLinks(): BOOL;
    setRequiresUniversalLinks(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspaceopenconfiguration/3172712-forprinting
    forPrinting(): BOOL;
    setForPrinting(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspaceopenconfiguration/3172704-activates
    activates(): BOOL;
    setActivates(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspaceopenconfiguration/3172705-addstorecentitems
    addsToRecentItems(): BOOL;
    setAddsToRecentItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspaceopenconfiguration/3172710-createsnewapplicationinstance
    createsNewApplicationInstance(): BOOL;
    setCreatesNewApplicationInstance(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspaceopenconfiguration/3172713-hides
    hides(): BOOL;
    setHides(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspaceopenconfiguration/3172714-hidesothers
    hidesOthers(): BOOL;
    setHidesOthers(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspaceopenconfiguration/3172715-promptsuserifneeded
    promptsUserIfNeeded(): BOOL;
    setPromptsUserIfNeeded(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspaceopenconfiguration/3172706-appleevent
    appleEvent(): NSAppleEventDescriptor;
    setAppleEvent(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspaceopenconfiguration/3172708-arguments
    arguments(): string | NSString;
    setArguments(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspaceopenconfiguration/3172711-environment
    environment(): string | NSString;
    setEnvironment(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspaceopenconfiguration/3172707-architecture
    architecture(): any;
    setArchitecture(): void;
    // doc://com.apple.documentation/documentation/appkit/nsworkspaceopenconfiguration/3375728-allowsrunningapplicationsubstitu
    allowsRunningApplicationSubstitution(): BOOL;
    setAllowsRunningApplicationSubstitution(): void;
    //
    alloc():NSWorkspaceOpenConfiguration;
    //
    init():NSWorkspaceOpenConfiguration;
  }
}

declare const NSWorkspaceOpenConfiguration: cocoascript.NSWorkspaceOpenConfiguration;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsappkitversion
  type NSAppKitVersion = number;
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsuseractivityrestoring
   */
  interface NSUserActivityRestoring extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsuseractivityrestoring/3022485-restoreuseractivitystate
    restoreUserActivityState(userActivity: NSUserActivity):void;
  }
}
declare namespace cocoascript {
  /**
   * A service that lets users share content with other services, such as social media services, or apps, such as Mail and Safari.
   * doc://com.apple.documentation/documentation/appkit/nssharingservice
   */
  interface NSSharingService extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nssharingservice/1402673-sharingservicenamed
    sharingServiceNamed(serviceName: NSSharingServiceName):NSSharingService;
    // doc://com.apple.documentation/documentation/appkit/nssharingservice/1402614-initwithtitle
    initWithTitle_image_alternateImage_handler(title: string | NSString, image: NSImage, alternateImage: NSImage, block: void):NSSharingService;
    // doc://com.apple.documentation/documentation/appkit/nssharingservice/1402681-delegate
    delegate(): NSSharingServiceDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservice/1402693-menuitemtitle
    menuItemTitle(): string | NSString;
    setMenuItemTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservice/1402637-title
    title(): string | NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservice/1402683-accountname
    accountName(): string | NSString;
    setAccountName(): void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservice/1402646-sharingservicesforitems
    sharingServicesForItems(items: NSArray):NSSharingService;
    // doc://com.apple.documentation/documentation/appkit/nssharingservice/1402662-canperformwithitems
    canPerformWithItems(items: NSArray):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssharingservice/1402669-performwithitems
    performWithItems(items: NSArray):void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservice/1402652-recipients
    recipients(): string | NSString;
    setRecipients(): void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservice/1402650-alternateimage
    alternateImage(): NSImage;
    setAlternateImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservice/1402654-image
    image(): NSImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservice/1402626-subject
    subject(): string | NSString;
    setSubject(): void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservice/1402707-attachmentfileurls
    attachmentFileURLs(): NSURL;
    setAttachmentFileURLs(): void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservice/1402644-messagebody
    messageBody(): string | NSString;
    setMessageBody(): void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservice/1402685-permanentlink
    permanentLink(): NSURL;
    setPermanentLink(): void;
    //
    alloc():NSSharingService;
    //
    init():NSSharingService;
  }
}

declare const NSSharingService: cocoascript.NSSharingService;
declare namespace cocoascript {
  /**
   * A list of sharing services from which the user can choose.
   * doc://com.apple.documentation/documentation/appkit/nssharingservicepicker
   */
  interface NSSharingServicePicker extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nssharingservicepicker/1402691-initwithitems
    initWithItems(items: NSArray):NSSharingServicePicker;
    // doc://com.apple.documentation/documentation/appkit/nssharingservicepicker/1402706-showrelativetorect
    showRelativeToRect_ofView_preferredEdge(rect: NSRect, view: NSView, preferredEdge: NSRectEdge):void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservicepicker/1402687-delegate
    delegate(): NSSharingServicePickerDelegate;
    setDelegate(): void;
    //
    alloc():NSSharingServicePicker;
    //
    init():NSSharingServicePicker;
  }
}

declare const NSSharingServicePicker: cocoascript.NSSharingServicePicker;
declare namespace cocoascript {
  /**
   * A set of methods that you use to customize the service picker behavior.
   * doc://com.apple.documentation/documentation/appkit/nssharingservicepickerdelegate
   */
  interface NSSharingServicePickerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nssharingservicepickerdelegate/1402664-sharingservicepicker
    sharingServicePicker_sharingServicesForItems_proposedSharingServices(sharingServicePicker: NSSharingServicePicker, items: NSArray, proposedServices: NSSharingService):NSSharingService;
    // doc://com.apple.documentation/documentation/appkit/nssharingservicepickerdelegate/1402608-sharingservicepicker
    sharingServicePicker_delegateForSharingService(sharingServicePicker: NSSharingServicePicker, sharingService: NSSharingService):NSSharingServiceDelegate;
    // doc://com.apple.documentation/documentation/appkit/nssharingservicepickerdelegate/1402610-sharingservicepicker
    sharingServicePicker_didChooseSharingService(sharingServicePicker: NSSharingServicePicker, service: NSSharingService):void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that support interaction with items users can share through a sharing service.
   * doc://com.apple.documentation/documentation/appkit/nsservicesmenurequestor
   */
  interface NSServicesMenuRequestor extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsservicesmenurequestor/1428481-readselectionfrompasteboard
    readSelectionFromPasteboard(pboard: NSPasteboard):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsservicesmenurequestor/1428477-writeselectiontopasteboard
    writeSelectionToPasteboard_types(pboard: NSPasteboard, types: NSPasteboardType):BOOL;
  }
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nssharingservicepickertoolbaritem
   */
  interface NSSharingServicePickerToolbarItem extends NSToolbarItem {
    // doc://com.apple.documentation/documentation/appkit/nssharingservicepickertoolbaritem/3375790-activityitemsconfiguration
    activityItemsConfiguration(): UIActivityItemsConfigurationReading;
    setActivityItemsConfiguration(): void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservicepickertoolbaritem/3365981-delegate
    delegate(): NSSharingServicePickerToolbarItemDelegate;
    setDelegate(): void;
    //
    alloc():NSSharingServicePickerToolbarItem;
    //
    init():NSSharingServicePickerToolbarItem;
  }
}

declare const NSSharingServicePickerToolbarItem: cocoascript.NSSharingServicePickerToolbarItem;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nssharingservicepickertoolbaritemdelegate
   */
  interface NSSharingServicePickerToolbarItemDelegate extends NSSharingServicePickerDelegate {
    // doc://com.apple.documentation/documentation/appkit/nssharingservicepickertoolbaritemdelegate/3365983-itemsforsharingservicepickertool
    itemsForSharingServicePickerToolbarItem(pickerToolbarItem: NSSharingServicePickerToolbarItem):NSArray;
  }
}
declare namespace cocoascript {
  /**
   * A protocol that an iCloud-sharing service implements to handle status changes and errors.
   * doc://com.apple.documentation/documentation/appkit/nscloudsharingservicedelegate
   */
  interface NSCloudSharingServiceDelegate extends NSSharingServiceDelegate {
    // doc://com.apple.documentation/documentation/appkit/nscloudsharingservicedelegate/1644666-sharingservice
    sharingService_didCompleteForItems_error(sharingService: NSSharingService, items: NSArray, error: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nscloudsharingservicedelegate/1644712-sharingservice
    sharingService_didSaveShare(sharingService: NSSharingService, share: CKShare):void;
    // doc://com.apple.documentation/documentation/appkit/nscloudsharingservicedelegate/1644709-sharingservice
    sharingService_didStopSharing(sharingService: NSSharingService, share: CKShare):void;
    // doc://com.apple.documentation/documentation/appkit/nscloudsharingservicedelegate/1644694-optionsforsharingservice
    optionsForSharingService_shareProvider(cloudKitSharingService: NSSharingService, provider: NSItemProvider):NSCloudKitSharingServiceOptions;
  }
}
declare namespace cocoascript {
  /**
   * An object for displaying online help for an app.
   * doc://com.apple.documentation/documentation/appkit/nshelpmanager
   */
  interface NSHelpManager extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nshelpmanager/1500924-sharedhelpmanager
    sharedHelpManager(): NSHelpManager;
    setSharedHelpManager(): void;
    // doc://com.apple.documentation/documentation/appkit/nshelpmanager/1500904-findstring
    findString_inBook(query: string | NSString, book: NSHelpBookName):void;
    // doc://com.apple.documentation/documentation/appkit/nshelpmanager/1500908-openhelpanchor
    openHelpAnchor_inBook(anchor: NSHelpAnchorName, book: NSHelpBookName):void;
    // doc://com.apple.documentation/documentation/appkit/nshelpmanager/1500914-registerbooksinbundle
    registerBooksInBundle(bundle: NSBundle):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nshelpmanager/1500921-setcontexthelp
    setContextHelp_forObject(attrString: NSAttributedString, object: NSHelpManager):void;
    // doc://com.apple.documentation/documentation/appkit/nshelpmanager/1500906-removecontexthelpforobject
    removeContextHelpForObject(object: NSHelpManager):void;
    // doc://com.apple.documentation/documentation/appkit/nshelpmanager/1500919-contexthelpforobject
    contextHelpForObject(object: NSHelpManager):NSAttributedString;
    // doc://com.apple.documentation/documentation/appkit/nshelpmanager/1500930-showcontexthelpforobject
    showContextHelpForObject_locationHint(object: NSHelpManager, pt: NSPoint):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nshelpmanager/2870247-contexthelpmodeactive
    contextHelpModeActive(): BOOL;
    setContextHelpModeActive(): void;
    //
    alloc():NSHelpManager;
    //
    init():NSHelpManager;
  }
}

declare const NSHelpManager: cocoascript.NSHelpManager;
// doc://com.apple.documentation/documentation/appkit/nscontexthelpmodedidactivatenotification
declare const NSContextHelpModeDidActivateNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nscontexthelpmodediddeactivatenotification
declare const NSContextHelpModeDidDeactivateNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * A set of methods an app can implement to provide Spotlight for Help for its own custom help data.
   * doc://com.apple.documentation/documentation/appkit/nsuserinterfaceitemsearching
   */
  interface NSUserInterfaceItemSearching extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfaceitemsearching/1420814-localizedtitlesforitem
    localizedTitlesForItem(item: NSUserInterfaceItemSearching):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfaceitemsearching/1420806-showallhelptopicsforsearchstring
    showAllHelpTopicsForSearchString(searchString: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfaceitemsearching/1420816-searchforitemswithsearchstring
    searchForItemsWithSearchString_resultLimit_matchedItemHandler(searchString: string | NSString, resultLimit: NSInteger, handleMatchedItems: NSArray):void;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfaceitemsearching/1420812-performactionforitem
    performActionForItem(item: NSUserInterfaceItemSearching):void;
  }
}
declare namespace cocoascript {
  /**
   * An abstract class that defines the interface for macOS documents.
   * doc://com.apple.documentation/documentation/appkit/nsdocument
   */
  interface NSDocument extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515181-init
    init():NSDocument;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515097-initwithcontentsofurl
    initWithContentsOfURL_ofType_error(url: NSURL, typeName: string | NSString, outError: NSError):NSDocument;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515041-initforurl
    initForURL_withContentsOfURL_ofType_error(urlOrNil: NSURL, contentsURL: NSURL, typeName: string | NSString, outError: NSError):NSDocument;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515159-initwithtype
    initWithType_error(typeName: string | NSString, outError: NSError):NSDocument;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515216-canconcurrentlyreaddocumentsofty
    canConcurrentlyReadDocumentsOfType(typeName: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515144-readfromurl
    readFromURL_ofType_error(url: NSURL, typeName: string | NSString, outError: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515044-readfromfilewrapper
    readFromFileWrapper_ofType_error(fileWrapper: NSFileWrapper, typeName: string | NSString, outError: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515198-readfromdata
    readFromData_ofType_error(data: NSData, typeName: string | NSString, outError: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515177-canasynchronouslywritetourl
    canAsynchronouslyWriteToURL_ofType_forSaveOperation(url: NSURL, typeName: string | NSString, saveOperation: NSSaveOperationType):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515238-unblockuserinteraction
    unblockUserInteraction():void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515076-writetourl
    writeToURL_ofType_error(url: NSURL, typeName: string | NSString, outError: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515150-writesafelytourl
    writeSafelyToURL_ofType_forSaveOperation_error(url: NSURL, typeName: string | NSString, saveOperation: NSSaveOperationType, outError: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515089-filewrapperoftype
    fileWrapperOfType_error(typeName: string | NSString, outError: NSError):NSFileWrapper;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515205-dataoftype
    dataOfType_error(typeName: string | NSString, outError: NSError):NSData;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515203-writetourl
    writeToURL_ofType_forSaveOperation_originalContentsURL_error(url: NSURL, typeName: string | NSString, saveOperation: NSSaveOperationType, absoluteOriginalContentsURL: NSURL, outError: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515148-savetourl
    saveToURL_ofType_forSaveOperation_delegate_didSaveSelector_contextInfo(url: NSURL, typeName: string | NSString, saveOperation: NSSaveOperationType, delegate: NSDocument, didSaveSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515178-savetourl
    saveToURL_ofType_forSaveOperation_completionHandler(url: NSURL, typeName: string | NSString, saveOperation: NSSaveOperationType, completionHandler: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515062-fileattributestowritetourl
    fileAttributesToWriteToURL_ofType_forSaveOperation_originalContentsURL_error(url: NSURL, typeName: string | NSString, saveOperation: NSSaveOperationType, absoluteOriginalContentsURL: NSURL, outError: NSError):NSDocument;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515038-fileurl
    fileURL(): NSURL;
    setFileURL(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515053-entirefileloaded
    entireFileLoaded(): BOOL;
    setEntireFileLoaded(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515039-filemodificationdate
    fileModificationDate(): NSDate;
    setFileModificationDate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515060-keepbackupfile
    keepBackupFile(): BOOL;
    setKeepBackupFile(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515065-draft
    draft(): BOOL;
    setDraft(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515121-filetype
    fileType(): string | NSString;
    setFileType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515091-documentedited
    documentEdited(): BOOL;
    setDocumentEdited(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515086-inviewingmode
    inViewingMode(): BOOL;
    setInViewingMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515104-readabletypes
    readableTypes(): string | NSString;
    setReadableTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515236-writabletypes
    writableTypes(): string | NSString;
    setWritableTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515072-isnativetype
    isNativeType(type: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515186-writabletypesforsaveoperation
    writableTypesForSaveOperation(saveOperation: NSSaveOperationType):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515074-filenameextensionfortype
    fileNameExtensionForType_saveOperation(typeName: string | NSString, saveOperation: NSSaveOperationType):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515220-makewindowcontrollers
    makeWindowControllers():void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515179-addwindowcontroller
    addWindowController(windowController: NSWindowController):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515242-removewindowcontroller
    removeWindowController(windowController: NSWindowController):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515156-windowcontrollers
    windowControllers(): NSWindowController;
    setWindowControllers(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515174-windownibname
    windowNibName(): NSNibName;
    setWindowNibName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515221-windowcontrollerdidloadnib
    windowControllerDidLoadNib(windowController: NSWindowController):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515116-windowcontrollerwillloadnib
    windowControllerWillLoadNib(windowController: NSWindowController):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515247-shouldclosewindowcontroller
    shouldCloseWindowController_delegate_shouldCloseSelector_contextInfo(windowController: NSWindowController, delegate: NSDocument, shouldCloseSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515049-showwindows
    showWindows():void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515217-setwindow
    setWindow(window: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515064-windowforsheet
    windowForSheet(): NSWindow;
    setWindowForSheet(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515077-displayname
    displayName(): string | NSString;
    setDisplayName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515143-setdisplayname
    setDisplayName(displayNameOrNil: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515245-defaultdraftname
    defaultDraftName():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/2876345-encoderestorablestatewithcoder
    encodeRestorableStateWithCoder_backgroundQueue(coder: NSCoder, queue: NSOperationQueue):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515106-autosavesinplace
    autosavesInPlace(): BOOL;
    setAutosavesInPlace(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515109-autosavesdrafts
    autosavesDrafts(): BOOL;
    setAutosavesDrafts(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515114-preservesversions
    preservesVersions(): BOOL;
    setPreservesVersions(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515232-autosavedcontentsfileurl
    autosavedContentsFileURL(): NSURL;
    setAutosavedContentsFileURL(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515136-autosavingfiletype
    autosavingFileType(): string | NSString;
    setAutosavingFileType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515149-autosavingisimplicitlycancellabl
    autosavingIsImplicitlyCancellable(): BOOL;
    setAutosavingIsImplicitlyCancellable(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515061-checkautosavingsafetyandreturner
    checkAutosavingSafetyAndReturnError(outError: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515079-hasunautosavedchanges
    hasUnautosavedChanges(): BOOL;
    setHasUnautosavedChanges(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515119-scheduleautosaving
    scheduleAutosaving():void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515225-autosavedocumentwithdelegate
    autosaveDocumentWithDelegate_didAutosaveSelector_contextInfo(delegate: NSDocument, didAutosaveSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515096-autosavewithimplicitcancellabili
    autosaveWithImplicitCancellability_completionHandler(autosavingIsImplicitlyCancellable: BOOL, completionHandler: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515200-backupfileurl
    backupFileURL(): NSURL;
    setBackupFileURL(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515193-browsedocumentversions
    browseDocumentVersions(sender: NSDocument):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/2177310-browsingversions
    browsingVersions(): BOOL;
    setBrowsingVersions(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/2177312-stopbrowsingversionswithcompleti
    stopBrowsingVersionsWithCompletionHandler(completionHandler: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515210-movedocumenttoubiquitycontainer
    moveDocumentToUbiquityContainer(sender: NSDocument):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515085-usesubiquitousstorage
    usesUbiquitousStorage(): BOOL;
    setUsesUbiquitousStorage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515166-undomanager
    undoManager(): NSUndoManager;
    setUndoManager(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515103-hasundomanager
    hasUndoManager(): BOOL;
    setHasUndoManager(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515083-updatechangecountwithtoken
    updateChangeCountWithToken_forSaveOperation(changeCountToken: NSDocument, saveOperation: NSSaveOperationType):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515223-updatechangecount
    updateChangeCount(change: NSDocumentChangeType):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515129-changecounttokenforsaveoperation
    changeCountTokenForSaveOperation(saveOperation: NSSaveOperationType):NSDocument;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1526257-encoderestorablestatewithcoder
    encodeRestorableStateWithCoder(coder: NSCoder):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1526237-restorestatewithcoder
    restoreStateWithCoder(coder: NSCoder):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1526232-restorablestatekeypaths
    restorableStateKeyPaths(): string | NSString;
    setRestorableStateKeyPaths(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1526250-invalidaterestorablestate
    invalidateRestorableState():void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1524586-restoredocumentwindowwithidentif
    restoreDocumentWindowWithIdentifier_state_completionHandler(identifier: NSUserInterfaceItemIdentifier, state: NSCoder, completionHandler: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515180-runmodalsavepanelforsaveoperatio
    runModalSavePanelForSaveOperation_delegate_didSaveSelector_contextInfo(saveOperation: NSSaveOperationType, delegate: NSDocument, didSaveSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515094-preparesavepanel
    prepareSavePanel(savePanel: NSSavePanel):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515183-shouldrunsavepanelwithaccessoryv
    shouldRunSavePanelWithAccessoryView(): BOOL;
    setShouldRunSavePanelWithAccessoryView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515240-filetypefromlastrunsavepanel
    fileTypeFromLastRunSavePanel(): string | NSString;
    setFileTypeFromLastRunSavePanel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515092-filenameextensionwashiddeninlast
    fileNameExtensionWasHiddenInLastRunSavePanel(): BOOL;
    setFileNameExtensionWasHiddenInLastRunSavePanel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1526106-useractivity
    userActivity(): NSUserActivity;
    setUserActivity(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1529014-updateuseractivitystate
    updateUserActivityState(activity: NSUserActivity):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515190-validateuserinterfaceitem
    validateUserInterfaceItem(item: NSValidatedUserInterfaceItem):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515227-performsynchronousfileaccessusin
    performSynchronousFileAccessUsingBlock(block: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515124-performasynchronousfileaccessusi
    performAsynchronousFileAccessUsingBlock(block: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515066-performactivitywithsynchronouswa
    performActivityWithSynchronousWaiting_usingBlock(waitSynchronously: BOOL, block: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515151-continueactivityusingblock
    continueActivityUsingBlock(block: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515069-continueasynchronousworkonmainth
    continueAsynchronousWorkOnMainThreadUsingBlock(block: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515154-printdocument
    printDocument(sender: NSDocument):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515140-runpagelayout
    runPageLayout(sender: NSDocument):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515059-revertdocumenttosaved
    revertDocumentToSaved(sender: NSDocument):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515147-savedocument
    saveDocument(sender: NSDocument):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515171-savedocumentas
    saveDocumentAs(sender: NSDocument):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515208-savedocumentto
    saveDocumentTo(sender: NSDocument):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515048-savedocumentwithdelegate
    saveDocumentWithDelegate_didSaveSelector_contextInfo(delegate: NSDocument, didSaveSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515206-canclosedocumentwithdelegate
    canCloseDocumentWithDelegate_shouldCloseSelector_contextInfo(delegate: NSDocument, shouldCloseSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515237-close
    close():void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515122-reverttocontentsofurl
    revertToContentsOfURL_ofType_error(url: NSURL, typeName: string | NSString, outError: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515201-duplicateandreturnerror
    duplicateAndReturnError(outError: NSError):NSDocument;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515226-duplicatedocument
    duplicateDocument(sender: NSDocument):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515133-duplicatedocumentwithdelegate
    duplicateDocumentWithDelegate_didDuplicateSelector_contextInfo(delegate: NSDocument, didDuplicateSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515231-renamedocument
    renameDocument(sender: NSDocument):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515118-movedocument
    moveDocument(sender: NSDocument):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515043-movedocumentwithcompletionhandle
    moveDocumentWithCompletionHandler(completionHandler: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515057-movetourl
    moveToURL_completionHandler(url: NSURL, completionHandler: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515218-lockdocument
    lockDocument(sender: NSDocument):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515068-unlockdocument
    unlockDocument(sender: NSDocument):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515233-lockdocumentwithcompletionhandle
    lockDocumentWithCompletionHandler(completionHandler: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515189-lockwithcompletionhandler
    lockWithCompletionHandler(completionHandler: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515248-unlockdocumentwithcompletionhand
    unlockDocumentWithCompletionHandler(completionHandler: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515131-unlockwithcompletionhandler
    unlockWithCompletionHandler(completionHandler: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515212-locked
    locked(): BOOL;
    setLocked(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515163-printinfo
    printInfo(): NSPrintInfo;
    setPrintInfo(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515169-preparepagelayout
    preparePageLayout(pageLayout: NSPageLayout):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515100-runmodalpagelayoutwithprintinfo
    runModalPageLayoutWithPrintInfo_delegate_didRunSelector_contextInfo(printInfo: NSPrintInfo, delegate: NSDocument, didRunSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515234-runmodalprintoperation
    runModalPrintOperation_delegate_didRunSelector_contextInfo(printOperation: NSPrintOperation, delegate: NSDocument, didRunSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515243-shouldchangeprintinfo
    shouldChangePrintInfo(newPrintInfo: NSPrintInfo):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515058-printdocumentwithsettings
    printDocumentWithSettings_showPrintPanel_delegate_didPrintSelector_contextInfo(printSettings: NSDocument, showPrintPanel: BOOL, delegate: NSDocument, didPrintSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515070-printoperationwithsettings
    printOperationWithSettings_error(printSettings: NSDocument, outError: NSError):NSPrintOperation;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515246-pdfprintoperation
    PDFPrintOperation(): NSPrintOperation;
    setPDFPrintOperation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515176-savedocumenttopdf
    saveDocumentToPDF(sender: NSDocument):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/2902303-allowsdocumentsharing
    allowsDocumentSharing(): BOOL;
    setAllowsDocumentSharing(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/2902326-preparesharingservicepicker
    prepareSharingServicePicker(sharingServicePicker: NSSharingServicePicker):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/2902309-sharedocumentwithsharingservice
    shareDocumentWithSharingService_completionHandler(sharingService: NSSharingService, completionHandler: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1500136-handleclosescriptcommand
    handleCloseScriptCommand(command: NSCloseCommand):NSDocument;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1500135-handleprintscriptcommand
    handlePrintScriptCommand(command: NSScriptCommand):NSDocument;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1500138-handlesavescriptcommand
    handleSaveScriptCommand(command: NSScriptCommand):NSDocument;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1500134-objectspecifier
    objectSpecifier(): NSScriptObjectSpecifier;
    setObjectSpecifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1500132-lastcomponentoffilename
    lastComponentOfFileName(): string | NSString;
    setLastComponentOfFileName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515051-presenterror
    presentError_modalForWindow_delegate_didPresentSelector_contextInfo(error: NSError, window: NSWindow, delegate: NSDocument, didPresentSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515184-presenterror
    presentError(error: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515229-willpresenterror
    willPresentError(error: NSError):NSError;
    // doc://com.apple.documentation/documentation/appkit/nsdocument/1515188-willnotpresenterror
    willNotPresentError(error: NSError):void;
    //
    alloc():NSDocument;
    //
    init():NSDocument;
  }
}

declare const NSDocument: cocoascript.NSDocument;
// doc://com.apple.documentation/documentation/uikit/nsuseractivitydocumenturlkey
declare const NSUserActivityDocumentURLKey: string | NSString;
declare namespace cocoascript {
  /**
   * An object that manages an app's documents.
   * doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller
   */
  interface NSDocumentController extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514981-shareddocumentcontroller
    sharedDocumentController(): NSDocumentController;
    setSharedDocumentController(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1515007-init
    init():NSDocumentController;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514955-initwithcoder
    initWithCoder(coder: NSCoder):NSDocumentController;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514939-documentforurl
    documentForURL(url: NSURL):NSDocument;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514982-duplicatedocumentwithcontentsofu
    duplicateDocumentWithContentsOfURL_copying_displayName_error(url: NSURL, duplicateByCopying: BOOL, displayNameOrNil: string | NSString, outError: NSError):NSDocument;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514992-opendocumentwithcontentsofurl
    openDocumentWithContentsOfURL_display_completionHandler(url: NSURL, displayDocument: BOOL, completionHandler: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1515014-openuntitleddocumentanddisplay
    openUntitledDocumentAndDisplay_error(displayDocument: BOOL, outError: NSError):NSDocument;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514930-makedocumentforurl
    makeDocumentForURL_withContentsOfURL_ofType_error(urlOrNil: NSURL, contentsURL: NSURL, typeName: string | NSString, outError: NSError):NSDocument;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514949-makedocumentwithcontentsofurl
    makeDocumentWithContentsOfURL_ofType_error(url: NSURL, typeName: string | NSString, outError: NSError):NSDocument;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514963-makeuntitleddocumentoftype
    makeUntitledDocumentOfType_error(typeName: string | NSString, outError: NSError):NSDocument;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514935-reopendocumentforurl
    reopenDocumentForURL_withContentsOfURL_display_completionHandler(urlOrNil: NSURL, contentsURL: NSURL, displayDocument: BOOL, completionHandler: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1515003-documents
    documents(): NSDocument;
    setDocuments(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1515013-adddocument
    addDocument(document: NSDocument):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514957-currentdocument
    currentDocument(): NSDocument;
    setCurrentDocument(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514970-documentforwindow
    documentForWindow(window: NSWindow):NSDocument;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514964-hasediteddocuments
    hasEditedDocuments(): BOOL;
    setHasEditedDocuments(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514984-removedocument
    removeDocument(document: NSDocument):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514988-documentclassnames
    documentClassNames(): string | NSString;
    setDocumentClassNames(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514986-defaulttype
    defaultType(): string | NSString;
    setDefaultType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514947-documentclassfortype
    documentClassForType(typeName: string | NSString):Class;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514937-displaynamefortype
    displayNameForType(typeName: string | NSString):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514946-typeforcontentsofurl
    typeForContentsOfURL_error(url: NSURL, outError: NSError):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514953-autosavingdelay
    autosavingDelay(): NSTimeInterval;
    setAutosavingDelay(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514995-closealldocumentswithdelegate
    closeAllDocumentsWithDelegate_didCloseAllSelector_contextInfo(delegate: NSDocumentController, didCloseAllSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514940-reviewunsaveddocumentswithalertt
    reviewUnsavedDocumentsWithAlertTitle_cancellable_delegate_didReviewAllSelector_contextInfo(title: string | NSString, cancellable: BOOL, delegate: NSDocumentController, didReviewAllSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514997-newdocument
    newDocument(sender: NSDocumentController):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1515005-opendocument
    openDocument(sender: NSDocumentController):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514959-savealldocuments
    saveAllDocuments(sender: NSDocumentController):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1515001-beginopenpanelwithcompletionhand
    beginOpenPanelWithCompletionHandler(completionHandler: NSURL):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514969-beginopenpanel
    beginOpenPanel_forTypes_completionHandler(openPanel: NSOpenPanel, inTypes: string | NSString, completionHandler: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514960-runmodalopenpanel
    runModalOpenPanel_forTypes(openPanel: NSOpenPanel, types: string | NSString):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514942-currentdirectory
    currentDirectory(): string | NSString;
    setCurrentDirectory(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514972-urlsfromrunningopenpanel
    URLsFromRunningOpenPanel():NSURL;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514991-maximumrecentdocumentcount
    maximumRecentDocumentCount(): NSUInteger;
    setMaximumRecentDocumentCount(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514933-clearrecentdocuments
    clearRecentDocuments(sender: NSDocumentController):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514967-notenewrecentdocumenturl
    noteNewRecentDocumentURL(url: NSURL):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1515009-notenewrecentdocument
    noteNewRecentDocument(document: NSDocument):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514976-recentdocumenturls
    recentDocumentURLs(): NSURL;
    setRecentDocumentURLs(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514943-validateuserinterfaceitem
    validateUserInterfaceItem(item: NSValidatedUserInterfaceItem):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514977-presenterror
    presentError(error: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514954-presenterror
    presentError_modalForWindow_delegate_didPresentSelector_contextInfo(error: NSError, window: NSWindow, delegate: NSDocumentController, didPresentSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514994-willpresenterror
    willPresentError(error: NSError):NSError;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514999-documentforfilename
    documentForFileName(fileName: string | NSString):NSDocumentController;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514961-fileextensionsfromtype
    fileExtensionsFromType(typeName: string | NSString):NSArray;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514983-filenamesfromrunningopenpanel
    fileNamesFromRunningOpenPanel():NSArray;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1515010-makeuntitleddocumentoftype
    makeUntitledDocumentOfType(type: string | NSString):NSDocumentController;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1515012-makedocumentwithcontentsofurl
    makeDocumentWithContentsOfURL_ofType(url: NSURL, type: string | NSString):NSDocumentController;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514944-makedocumentwithcontentsoffile
    makeDocumentWithContentsOfFile_ofType(fileName: string | NSString, type: string | NSString):NSDocumentController;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514938-opendocumentwithcontentsoffile
    openDocumentWithContentsOfFile_display(fileName: string | NSString, display: BOOL):NSDocumentController;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514950-opendocumentwithcontentsofurl
    openDocumentWithContentsOfURL_display(url: NSURL, display: BOOL):NSDocumentController;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514951-opendocumentwithcontentsofurl
    openDocumentWithContentsOfURL_display_error(url: NSURL, displayDocument: BOOL, outError: NSError):NSDocumentController;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514978-openuntitleddocumentoftype
    openUntitledDocumentOfType_display(type: string | NSString, display: BOOL):NSDocumentController;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514979-reopendocumentforurl
    reopenDocumentForURL_withContentsOfURL_error(url: NSURL, contentsURL: NSURL, outError: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514989-setshouldcreateui
    setShouldCreateUI(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514932-shouldcreateui
    shouldCreateUI():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/1514966-typefromfileextension
    typeFromFileExtension(fileNameExtensionOrHFSFileType: string | NSString):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/2902308-allowsautomaticsharemenu
    allowsAutomaticShareMenu(): BOOL;
    setAllowsAutomaticShareMenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocumentcontroller/2902324-standardsharemenuitem
    standardShareMenuItem():NSMenuItem;
    //
    alloc():NSDocumentController;
    //
    init():NSDocumentController;
  }
}

declare const NSDocumentController: cocoascript.NSDocumentController;
declare namespace cocoascript {
  /**
   * A document object that can integrate with Core Data.
   * doc://com.apple.documentation/documentation/appkit/nspersistentdocument
   */
  interface NSPersistentDocument extends NSDocument {
    // doc://com.apple.documentation/documentation/appkit/nspersistentdocument/1396162-managedobjectcontext
    managedObjectContext(): NSManagedObjectContext;
    setManagedObjectContext(): void;
    // doc://com.apple.documentation/documentation/appkit/nspersistentdocument/1396152-managedobjectmodel
    managedObjectModel(): NSManagedObjectModel;
    setManagedObjectModel(): void;
    // doc://com.apple.documentation/documentation/appkit/nspersistentdocument/1396160-configurepersistentstorecoordina
    configurePersistentStoreCoordinatorForURL_ofType_modelConfiguration_storeOptions_error(url: NSURL, fileType: string | NSString, configuration: string | NSString, storeOptions: NSPersistentDocument, error: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspersistentdocument/1396168-persistentstoretypeforfiletype
    persistentStoreTypeForFileType(fileType: string | NSString):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nspersistentdocument/1396166-readfromurl
    readFromURL_ofType_error(absoluteURL: NSURL, typeName: string | NSString, error: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspersistentdocument/1396154-reverttocontentsofurl
    revertToContentsOfURL_ofType_error(inAbsoluteURL: NSURL, inTypeName: string | NSString, outError: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspersistentdocument/1396156-writetourl
    writeToURL_ofType_forSaveOperation_originalContentsURL_error(absoluteURL: NSURL, typeName: string | NSString, saveOperation: NSSaveOperationType, absoluteOriginalContentsURL: NSURL, error: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspersistentdocument/1807209-canasynchronouslywritetourl
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nspersistentdocument/1396158-configurepersistentstorecoordina
    configurePersistentStoreCoordinatorForURL_ofType_error(url: NSURL, fileType: string | NSString, error: NSError):BOOL;
    //
    alloc():NSPersistentDocument;
    //
    init():NSPersistentDocument;
  }
}

declare const NSPersistentDocument: cocoascript.NSPersistentDocument;
declare namespace cocoascript {
  /**
   * A controller that accesses user preference information for your app from the user’s defaults database.
   * doc://com.apple.documentation/documentation/appkit/nsuserdefaultscontroller
   */
  interface NSUserDefaultsController extends NSController {
    // doc://com.apple.documentation/documentation/appkit/nsuserdefaultscontroller/1388190-shareduserdefaultscontroller
    sharedUserDefaultsController(): NSUserDefaultsController;
    setSharedUserDefaultsController(): void;
    // doc://com.apple.documentation/documentation/appkit/nsuserdefaultscontroller/1388184-initwithdefaults
    initWithDefaults_initialValues(defaults: NSUserDefaults, initialValues: NSUserDefaultsController):NSUserDefaultsController;
    // doc://com.apple.documentation/documentation/appkit/nsuserdefaultscontroller/1388172-initwithcoder
    initWithCoder(coder: NSCoder):NSUserDefaultsController;
    // doc://com.apple.documentation/documentation/appkit/nsuserdefaultscontroller/1388182-defaults
    defaults(): NSUserDefaults;
    setDefaults(): void;
    // doc://com.apple.documentation/documentation/appkit/nsuserdefaultscontroller/1388188-initialvalues
    initialValues(): id;
    setInitialValues(): void;
    // doc://com.apple.documentation/documentation/appkit/nsuserdefaultscontroller/1388186-hasunappliedchanges
    hasUnappliedChanges(): BOOL;
    setHasUnappliedChanges(): void;
    // doc://com.apple.documentation/documentation/appkit/nsuserdefaultscontroller/1388191-appliesimmediately
    appliesImmediately(): BOOL;
    setAppliesImmediately(): void;
    // doc://com.apple.documentation/documentation/appkit/nsuserdefaultscontroller/1388176-values
    values(): id;
    setValues(): void;
    // doc://com.apple.documentation/documentation/appkit/nsuserdefaultscontroller/1388178-revert
    revert(sender: NSUserDefaultsController):void;
    // doc://com.apple.documentation/documentation/appkit/nsuserdefaultscontroller/1388170-reverttoinitialvalues
    revertToInitialValues(sender: NSUserDefaultsController):void;
    // doc://com.apple.documentation/documentation/appkit/nsuserdefaultscontroller/1388180-save
    save(sender: NSUserDefaultsController):void;
    //
    alloc():NSUserDefaultsController;
    //
    init():NSUserDefaultsController;
  }
}

declare const NSUserDefaultsController: cocoascript.NSUserDefaultsController;
declare namespace cocoascript {
  /**
   * An object that transfers data to and from the pasteboard server.
   * doc://com.apple.documentation/documentation/appkit/nspasteboard
   */
  interface NSPasteboard extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1530091-generalpasteboard
    generalPasteboard(): NSPasteboard;
    setGeneralPasteboard(): void;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1530706-pasteboardbyfilteringdata
    pasteboardByFilteringData_ofType(data: NSData, type: NSPasteboardType):NSPasteboard;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1532744-pasteboardbyfilteringfile
    pasteboardByFilteringFile(filename: string | NSString):NSPasteboard;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1530088-pasteboardbyfilteringtypesinpast
    pasteboardByFilteringTypesInPasteboard(pboard: NSPasteboard):NSPasteboard;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1531026-pasteboardwithname
    pasteboardWithName(name: NSPasteboardName):NSPasteboard;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1528936-pasteboardwithuniquename
    pasteboardWithUniqueName():NSPasteboard;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1527044-releaseglobally
    releaseGlobally():void;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1533599-clearcontents
    clearContents():NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1525945-writeobjects
    writeObjects(objects: NSPasteboardWriting):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1531214-setdata
    setData_forType(data: NSData, dataType: NSPasteboardType):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1530774-setpropertylist
    setPropertyList_forType(plist: NSPasteboard, dataType: NSPasteboardType):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1528225-setstring
    setString_forType(string: string | NSString, dataType: NSPasteboardType):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1524454-readobjectsforclasses
    readObjectsForClasses_options(classArray: Class, options: NSPasteboard):NSArray;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1529995-pasteboarditems
    pasteboardItems(): NSPasteboardItem;
    setPasteboardItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1525176-indexofpasteboarditem
    indexOfPasteboardItem(pasteboardItem: NSPasteboardItem):NSUInteger;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1531810-datafortype
    dataForType(dataType: NSPasteboardType):NSData;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1528588-propertylistfortype
    propertyListForType(dataType: NSPasteboardType):NSPasteboard;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1533566-stringfortype
    stringForType(dataType: NSPasteboardType):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1526078-availabletypefromarray
    availableTypeFromArray(types: NSPasteboardType):NSPasteboardType;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1533576-canreaditemwithdataconformingtot
    canReadItemWithDataConformingToTypes(types: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1533360-canreadobjectforclasses
    canReadObjectForClasses_options(classArray: Class, options: NSPasteboard):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1529599-types
    types(): NSPasteboardType;
    setTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1533612-typesfilterableto
    typesFilterableTo(type: NSPasteboardType):NSPasteboardType;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/2344960-preparefornewcontentswithoptions
    prepareForNewContentsWithOptions(options: NSPasteboardContentsOptions):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1529388-name
    name(): NSPasteboardName;
    setName(): void;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1533544-changecount
    changeCount(): NSInteger;
    setChangeCount(): void;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1533561-declaretypes
    declareTypes_owner(newTypes: NSPasteboardType, newOwner: NSPasteboard):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1533580-addtypes
    addTypes_owner(newTypes: NSPasteboardType, newOwner: NSPasteboard):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1531224-writefilecontents
    writeFileContents(filename: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1527279-writefilewrapper
    writeFileWrapper(wrapper: NSFileWrapper):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1533575-readfilecontentstype
    readFileContentsType_toFile(type: NSPasteboardType, filename: string | NSString):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nspasteboard/1524779-readfilewrapper
    readFileWrapper():NSFileWrapper;
    //
    alloc():NSPasteboard;
    //
    init():NSPasteboard;
  }
}

declare const NSPasteboard: cocoascript.NSPasteboard;
declare namespace cocoascript {
  /**
   * An item on a pasteboard.
   * doc://com.apple.documentation/documentation/appkit/nspasteboarditem
   */
  interface NSPasteboardItem extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nspasteboarditem/1508499-types
    types(): NSPasteboardType;
    setTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nspasteboarditem/1508488-availabletypefromarray
    availableTypeFromArray(types: NSPasteboardType):NSPasteboardType;
    // doc://com.apple.documentation/documentation/appkit/nspasteboarditem/1508502-setdataprovider
    setDataProvider_forTypes(dataProvider: NSPasteboardItemDataProvider, types: NSPasteboardType):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspasteboarditem/1508501-setdata
    setData_forType(data: NSData, type: NSPasteboardType):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspasteboarditem/1508498-setstring
    setString_forType(string: string | NSString, type: NSPasteboardType):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspasteboarditem/1508494-setpropertylist
    setPropertyList_forType(propertyList: NSPasteboardItem, type: NSPasteboardType):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspasteboarditem/1508496-datafortype
    dataForType(type: NSPasteboardType):NSData;
    // doc://com.apple.documentation/documentation/appkit/nspasteboarditem/1508490-stringfortype
    stringForType(type: NSPasteboardType):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nspasteboarditem/1508489-propertylistfortype
    propertyListForType(type: NSPasteboardType):NSPasteboardItem;
    //
    alloc():NSPasteboardItem;
    //
    init():NSPasteboardItem;
  }
}

declare const NSPasteboardItem: cocoascript.NSPasteboardItem;
declare namespace cocoascript {
  /**
   * A set of methods that defines the interface for initializing an object from a pasteboard.
   * doc://com.apple.documentation/documentation/appkit/nspasteboardreading
   */
  interface NSPasteboardReading extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nspasteboardreading/1528252-initwithpasteboardpropertylist
    initWithPasteboardPropertyList_ofType(propertyList: NSPasteboardReading, type: NSPasteboardType):NSPasteboardReading;
    // doc://com.apple.documentation/documentation/appkit/nspasteboardreading/1532019-readabletypesforpasteboard
    readableTypesForPasteboard(pasteboard: NSPasteboard):NSPasteboardType;
    // doc://com.apple.documentation/documentation/appkit/nspasteboardreading/1533559-readingoptionsfortype
    readingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard):NSPasteboardReadingOptions;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that defines the interface for retrieving a representation of an object that can be written to a pasteboard.
   * doc://com.apple.documentation/documentation/appkit/nspasteboardwriting
   */
  interface NSPasteboardWriting extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nspasteboardwriting/1533578-writabletypesforpasteboard
    writableTypesForPasteboard(pasteboard: NSPasteboard):NSPasteboardType;
    // doc://com.apple.documentation/documentation/appkit/nspasteboardwriting/1525372-writingoptionsfortype
    writingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard):NSPasteboardWritingOptions;
    // doc://com.apple.documentation/documentation/appkit/nspasteboardwriting/1529482-pasteboardpropertylistfortype
    pasteboardPropertyListForType(type: NSPasteboardType):NSPasteboardWriting;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods implemented by the data provider of a pasteboard item to provide the data for a particular UTI type.
   * doc://com.apple.documentation/documentation/appkit/nspasteboarditemdataprovider
   */
  interface NSPasteboardItemDataProvider extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nspasteboarditemdataprovider/1508503-pasteboard
    pasteboard_item_provideDataForType(pasteboard: NSPasteboard, item: NSPasteboardItem, type: NSPasteboardType):void;
    // doc://com.apple.documentation/documentation/appkit/nspasteboarditemdataprovider/1508506-pasteboardfinishedwithdataprovid
    pasteboardFinishedWithDataProvider(pasteboard: NSPasteboard):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspasteboardcontentsoptions
  type NSPasteboardContentsOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nspasteboardtypeowner
   */
  interface NSPasteboardTypeOwner extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nspasteboardtypeowner/3005193-pasteboard
    pasteboard_provideDataForType(sender: NSPasteboard, type: NSPasteboardType):void;
    // doc://com.apple.documentation/documentation/appkit/nspasteboardtypeowner/3005194-pasteboardchangedowner
    pasteboardChangedOwner(sender: NSPasteboard):void;
  }
}
declare namespace cocoascript {
  /**
   * An object that provides a promise for the pasteboard.
   * doc://com.apple.documentation/documentation/appkit/nsfilepromiseprovider
   */
  interface NSFilePromiseProvider extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsfilepromiseprovider/1644655-init
    init():NSFilePromiseProvider;
    // doc://com.apple.documentation/documentation/appkit/nsfilepromiseprovider/1644594-initwithfiletype
    initWithFileType_delegate(fileType: string | NSString, delegate: NSFilePromiseProviderDelegate):NSFilePromiseProvider;
    // doc://com.apple.documentation/documentation/appkit/nsfilepromiseprovider/1644726-delegate
    delegate(): NSFilePromiseProviderDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfilepromiseprovider/1644738-filetype
    fileType(): string | NSString;
    setFileType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfilepromiseprovider/1644255-userinfo
    userInfo(): id;
    setUserInfo(): void;
    //
    alloc():NSFilePromiseProvider;
    //
    init():NSFilePromiseProvider;
  }
}

declare const NSFilePromiseProvider: cocoascript.NSFilePromiseProvider;
declare namespace cocoascript {
  /**
   * A set of methods that provides the name of the promised file and writes the file to the destination directory when the file promise is fulfilled.
   * doc://com.apple.documentation/documentation/appkit/nsfilepromiseproviderdelegate
   */
  interface NSFilePromiseProviderDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsfilepromiseproviderdelegate/2369278-filepromiseprovider
    filePromiseProvider_fileNameForType(filePromiseProvider: NSFilePromiseProvider, fileType: string | NSString):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsfilepromiseproviderdelegate/1644244-filepromiseprovider
    filePromiseProvider_writePromiseToURL_completionHandler(filePromiseProvider: NSFilePromiseProvider, url: NSURL, completionHandler: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsfilepromiseproviderdelegate/2369279-operationqueueforfilepromiseprov
    operationQueueForFilePromiseProvider(filePromiseProvider: NSFilePromiseProvider):NSOperationQueue;
  }
}
declare namespace cocoascript {
  /**
   * An object that receives a file promise from the pasteboard.
   * doc://com.apple.documentation/documentation/appkit/nsfilepromisereceiver
   */
  interface NSFilePromiseReceiver extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsfilepromisereceiver/1642142-filenames
    fileNames(): string | NSString;
    setFileNames(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfilepromisereceiver/1642141-filetypes
    fileTypes(): string | NSString;
    setFileTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfilepromisereceiver/1642138-receivepromisedfilesatdestinatio
    receivePromisedFilesAtDestination_options_operationQueue_reader(destinationDir: NSURL, options: NSDictionary, operationQueue: NSOperationQueue, reader: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsfilepromisereceiver/1642140-readabledraggedtypes
    readableDraggedTypes(): string | NSString;
    setReadableDraggedTypes(): void;
    //
    alloc():NSFilePromiseReceiver;
    //
    init():NSFilePromiseReceiver;
  }
}

declare const NSFilePromiseReceiver: cocoascript.NSFilePromiseReceiver;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nseditor
   */
  interface NSEditor extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nseditor/3005183-commitediting
    commitEditing():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nseditor/3005185-commiteditingwithdelegate
    commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: NSEditor, didCommitSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nseditor/3005184-commiteditingandreturnerror
    commitEditingAndReturnError(error: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nseditor/3005186-discardediting
    discardEditing():void;
  }
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nseditorregistration
   */
  interface NSEditorRegistration extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nseditorregistration/3005188-objectdidbeginediting
    objectDidBeginEditing(editor: NSEditor):void;
    // doc://com.apple.documentation/documentation/appkit/nseditorregistration/3005189-objectdidendediting
    objectDidEndEditing(editor: NSEditor):void;
  }
}
declare namespace cocoascript {
  /**
   * A controller that can manage an object's properties referenced by key-value paths.
   * doc://com.apple.documentation/documentation/appkit/nsobjectcontroller
   */
  interface NSObjectController extends NSController {
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1529422-initwithcontent
    initWithContent(content: NSObjectController):NSObjectController;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1530826-content
    content(): id;
    setContent(): void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1534767-automaticallypreparescontent
    automaticallyPreparesContent(): BOOL;
    setAutomaticallyPreparesContent(): void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1534218-preparecontent
    prepareContent():void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1535459-objectclass
    objectClass(): Class;
    setObjectClass(): void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1535921-newobject
    newObject():NSObjectController;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1534093-addobject
    addObject(object: NSObjectController):void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1532897-removeobject
    removeObject(object: NSObjectController):void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1528376-add
    add(sender: NSObjectController):void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1528497-canadd
    canAdd(): BOOL;
    setCanAdd(): void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1533713-remove
    remove(sender: NSObjectController):void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1532378-canremove
    canRemove(): BOOL;
    setCanRemove(): void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1534699-editable
    editable(): BOOL;
    setEditable(): void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1535467-entityname
    entityName(): string | NSString;
    setEntityName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1524554-fetch
    fetch(sender: NSObjectController):void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1531411-useslazyfetching
    usesLazyFetching(): BOOL;
    setUsesLazyFetching(): void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1528145-defaultfetchrequest
    defaultFetchRequest():NSFetchRequest;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1533545-fetchpredicate
    fetchPredicate(): NSPredicate;
    setFetchPredicate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1530382-managedobjectcontext
    managedObjectContext(): NSManagedObjectContext;
    setManagedObjectContext(): void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1531782-fetchwithrequest
    fetchWithRequest_merge_error(fetchRequest: NSFetchRequest, merge: BOOL, error: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1535397-selectedobjects
    selectedObjects(): NSArray;
    setSelectedObjects(): void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1527403-selection
    selection(): id;
    setSelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1534469-validateuserinterfaceitem
    validateUserInterfaceItem(item: NSValidatedUserInterfaceItem):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsobjectcontroller/1532995-initwithcoder
    initWithCoder(coder: NSCoder):NSObjectController;
    //
    alloc():NSObjectController;
    //
    init():NSObjectController;
  }
}

declare const NSObjectController: cocoascript.NSObjectController;
declare namespace cocoascript {
  /**
   * An abstract class that implements the
   * doc://com.apple.documentation/documentation/appkit/nscontroller
   */
  interface NSController extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscontroller/1532991-objectdidbeginediting
    objectDidBeginEditing(editor: NSEditor):void;
    // doc://com.apple.documentation/documentation/appkit/nscontroller/1524644-objectdidendediting
    objectDidEndEditing(editor: NSEditor):void;
    // doc://com.apple.documentation/documentation/appkit/nscontroller/1531472-commitediting
    commitEditing():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscontroller/1527876-commiteditingwithdelegate
    commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: NSController, didCommitSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nscontroller/1528652-discardediting
    discardEditing():void;
    // doc://com.apple.documentation/documentation/appkit/nscontroller/1527136-editing
    editing(): BOOL;
    setEditing(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontroller/1528092-init
    init():NSController;
    // doc://com.apple.documentation/documentation/appkit/nscontroller/1525048-initwithcoder
    initWithCoder(coder: NSCoder):NSController;
    //
    alloc():NSController;
    //
    init():NSController;
  }
}

declare const NSController: cocoascript.NSController;
declare namespace cocoascript {
  /**
   * A bindings-compatible controller that manages a tree of objects.
   * doc://com.apple.documentation/documentation/appkit/nstreecontroller
   */
  interface NSTreeController extends NSObjectController {
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1526827-sortdescriptors
    sortDescriptors(): NSSortDescriptor;
    setSortDescriptors(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1530427-content
    content(): id;
    setContent(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1527465-arrangedobjects
    arrangedObjects(): NSTreeNode;
    setArrangedObjects(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1525868-rearrangeobjects
    rearrangeObjects():void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1527490-setselectionindexpath
    setSelectionIndexPath(indexPath: NSIndexPath):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1533951-selectionindexpath
    selectionIndexPath(): NSIndexPath;
    setSelectionIndexPath(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1528494-setselectionindexpaths
    setSelectionIndexPaths(indexPaths: NSIndexPath):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1534861-selectionindexpaths
    selectionIndexPaths(): NSIndexPath;
    setSelectionIndexPaths(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1529670-selectedobjects
    selectedObjects(): NSArray;
    setSelectedObjects(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1534151-selectednodes
    selectedNodes(): NSTreeNode;
    setSelectedNodes(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1534200-selectsinsertedobjects
    selectsInsertedObjects(): BOOL;
    setSelectsInsertedObjects(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1535862-addselectionindexpaths
    addSelectionIndexPaths(indexPaths: NSIndexPath):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1532401-removeselectionindexpaths
    removeSelectionIndexPaths(indexPaths: NSIndexPath):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1526188-avoidsemptyselection
    avoidsEmptySelection(): BOOL;
    setAvoidsEmptySelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1524473-preservesselection
    preservesSelection(): BOOL;
    setPreservesSelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1529530-alwaysusesmultiplevaluesmarker
    alwaysUsesMultipleValuesMarker(): BOOL;
    setAlwaysUsesMultipleValuesMarker(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1525961-add
    add(sender: NSTreeController):void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1527676-addchild
    addChild(sender: NSTreeController):void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1525790-canaddchild
    canAddChild(): BOOL;
    setCanAddChild(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1534180-caninsert
    canInsert(): BOOL;
    setCanInsert(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1524647-caninsertchild
    canInsertChild(): BOOL;
    setCanInsertChild(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1533671-insert
    insert(sender: NSTreeController):void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1524323-insertchild
    insertChild(sender: NSTreeController):void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1530156-insertobject
    insertObject_atArrangedObjectIndexPath(object: NSTreeController, indexPath: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1530531-insertobjects
    insertObjects_atArrangedObjectIndexPaths(objects: NSArray, indexPaths: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1534110-remove
    remove(sender: NSTreeController):void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1530806-removeobjectatarrangedobjectinde
    removeObjectAtArrangedObjectIndexPath(indexPath: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1525602-removeobjectsatarrangedobjectind
    removeObjectsAtArrangedObjectIndexPaths(indexPaths: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1532133-movenode
    moveNode_toIndexPath(node: NSTreeNode, indexPath: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1530337-movenodes
    moveNodes_toIndexPath(nodes: NSTreeNode, startingIndexPath: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1528721-childrenkeypath
    childrenKeyPath(): string | NSString;
    setChildrenKeyPath(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1525412-childrenkeypathfornode
    childrenKeyPathForNode(node: NSTreeNode):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1529127-countkeypath
    countKeyPath(): string | NSString;
    setCountKeyPath(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1528109-countkeypathfornode
    countKeyPathForNode(node: NSTreeNode):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1532164-leafkeypath
    leafKeyPath(): string | NSString;
    setLeafKeyPath(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreecontroller/1526740-leafkeypathfornode
    leafKeyPathForNode(node: NSTreeNode):string | NSString;
    //
    alloc():NSTreeController;
    //
    init():NSTreeController;
  }
}

declare const NSTreeController: cocoascript.NSTreeController;
declare namespace cocoascript {
  /**
   * A node in a tree of nodes.
   * doc://com.apple.documentation/documentation/appkit/nstreenode
   */
  interface NSTreeNode extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstreenode/1537056-treenodewithrepresentedobject
    treeNodeWithRepresentedObject(modelObject: NSTreeNode):NSTreeNode;
    // doc://com.apple.documentation/documentation/appkit/nstreenode/1533294-initwithrepresentedobject
    initWithRepresentedObject(modelObject: NSTreeNode):NSTreeNode;
    // doc://com.apple.documentation/documentation/appkit/nstreenode/1531596-representedobject
    representedObject(): id;
    setRepresentedObject(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreenode/1532255-indexpath
    indexPath(): NSIndexPath;
    setIndexPath(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreenode/1532729-leaf
    leaf(): BOOL;
    setLeaf(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreenode/1525285-childnodes
    childNodes(): NSTreeNode;
    setChildNodes(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreenode/1527238-mutablechildnodes
    mutableChildNodes(): NSTreeNode;
    setMutableChildNodes(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreenode/1534417-descendantnodeatindexpath
    descendantNodeAtIndexPath(indexPath: NSIndexPath):NSTreeNode;
    // doc://com.apple.documentation/documentation/appkit/nstreenode/1530728-parentnode
    parentNode(): NSTreeNode;
    setParentNode(): void;
    // doc://com.apple.documentation/documentation/appkit/nstreenode/1525615-sortwithsortdescriptors
    sortWithSortDescriptors_recursively(sortDescriptors: NSSortDescriptor, recursively: BOOL):void;
    //
    alloc():NSTreeNode;
    //
    init():NSTreeNode;
  }
}

declare const NSTreeNode: cocoascript.NSTreeNode;
declare namespace cocoascript {
  /**
   * A bindings-compatible controller that manages a collection of objects.
   * doc://com.apple.documentation/documentation/appkit/nsarraycontroller
   */
  interface NSArrayController extends NSObjectController {
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1525707-sortdescriptors
    sortDescriptors(): NSSortDescriptor;
    setSortDescriptors(): void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1533881-arrangeobjects
    arrangeObjects(objects: NSArray):NSArray;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1534299-arrangedobjects
    arrangedObjects(): id;
    setArrangedObjects(): void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1534319-rearrangeobjects
    rearrangeObjects():void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1535702-add
    add(sender: NSArrayController):void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1532785-avoidsemptyselection
    avoidsEmptySelection(): BOOL;
    setAvoidsEmptySelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1530628-preservesselection
    preservesSelection(): BOOL;
    setPreservesSelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1527129-alwaysusesmultiplevaluesmarker
    alwaysUsesMultipleValuesMarker(): BOOL;
    setAlwaysUsesMultipleValuesMarker(): void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1535885-selectionindex
    selectionIndex(): NSUInteger;
    setSelectionIndex(): void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1526094-setselectionindex
    setSelectionIndex(index: NSUInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1527427-selectsinsertedobjects
    selectsInsertedObjects(): BOOL;
    setSelectsInsertedObjects(): void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1525801-setselectionindexes
    setSelectionIndexes(indexes: NSIndexSet):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1529908-selectionindexes
    selectionIndexes(): NSIndexSet;
    setSelectionIndexes(): void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1533997-addselectionindexes
    addSelectionIndexes(indexes: NSIndexSet):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1525061-removeselectionindexes
    removeSelectionIndexes(indexes: NSIndexSet):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1533937-setselectedobjects
    setSelectedObjects(objects: NSArray):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1526568-selectedobjects
    selectedObjects(): NSArray;
    setSelectedObjects(): void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1533846-addselectedobjects
    addSelectedObjects(objects: NSArray):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1532684-removeselectedobjects
    removeSelectedObjects(objects: NSArray):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1525178-selectnext
    selectNext(sender: NSArrayController):void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1534863-canselectnext
    canSelectNext(): BOOL;
    setCanSelectNext(): void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1528448-selectprevious
    selectPrevious(sender: NSArrayController):void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1534274-canselectprevious
    canSelectPrevious(): BOOL;
    setCanSelectPrevious(): void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1532900-caninsert
    canInsert(): BOOL;
    setCanInsert(): void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1535089-insert
    insert(sender: NSArrayController):void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1533774-addobject
    addObject(object: NSArrayController):void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1533977-addobjects
    addObjects(objects: NSArray):void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1532302-insertobject
    insertObject_atArrangedObjectIndex(object: NSArrayController, index: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1527973-insertobjects
    insertObjects_atArrangedObjectIndexes(objects: NSArray, indexes: NSIndexSet):void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1534738-removeobjectatarrangedobjectinde
    removeObjectAtArrangedObjectIndex(index: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1533508-removeobjectsatarrangedobjectind
    removeObjectsAtArrangedObjectIndexes(indexes: NSIndexSet):void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1535317-remove
    remove(sender: NSArrayController):void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1529424-removeobject
    removeObject(object: NSArrayController):void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1533426-removeobjects
    removeObjects(objects: NSArray):void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1534701-clearsfilterpredicateoninsertion
    clearsFilterPredicateOnInsertion(): BOOL;
    setClearsFilterPredicateOnInsertion(): void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1524815-filterpredicate
    filterPredicate(): NSPredicate;
    setFilterPredicate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1524747-automaticallyrearrangesobjects
    automaticallyRearrangesObjects(): BOOL;
    setAutomaticallyRearrangesObjects(): void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1526714-automaticrearrangementkeypaths
    automaticRearrangementKeyPaths(): string | NSString;
    setAutomaticRearrangementKeyPaths(): void;
    // doc://com.apple.documentation/documentation/appkit/nsarraycontroller/1526171-didchangearrangementcriteria
    didChangeArrangementCriteria():void;
    //
    alloc():NSArrayController;
    //
    init():NSArrayController;
  }
}

declare const NSArrayController: cocoascript.NSArrayController;
declare namespace cocoascript {
  /**
   * A bindings-compatible controller that manages the display and editing of a dictionary of key-value pairs.
   * doc://com.apple.documentation/documentation/appkit/nsdictionarycontroller
   */
  interface NSDictionaryController extends NSArrayController {
    // doc://com.apple.documentation/documentation/appkit/nsdictionarycontroller/1534070-newobject
    newObject():NSDictionaryControllerKeyValuePair;
    // doc://com.apple.documentation/documentation/appkit/nsdictionarycontroller/1532944-localizedkeydictionary
    localizedKeyDictionary(): string | NSString;
    setLocalizedKeyDictionary(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdictionarycontroller/1524332-localizedkeytable
    localizedKeyTable(): string | NSString;
    setLocalizedKeyTable(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdictionarycontroller/1525172-includedkeys
    includedKeys(): string | NSString;
    setIncludedKeys(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdictionarycontroller/1535356-excludedkeys
    excludedKeys(): string | NSString;
    setExcludedKeys(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdictionarycontroller/1530444-initialkey
    initialKey(): string | NSString;
    setInitialKey(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdictionarycontroller/1535925-initialvalue
    initialValue(): id;
    setInitialValue(): void;
    //
    alloc():NSDictionaryController;
    //
    init():NSDictionaryController;
  }
}

declare const NSDictionaryController: cocoascript.NSDictionaryController;
declare namespace cocoascript {
  /**
   * A set of methods implemented by arranged objects to give access to information about those objects.
   * doc://com.apple.documentation/documentation/appkit/nsdictionarycontrollerkeyvaluepair
   */
  interface NSDictionaryControllerKeyValuePair extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsdictionarycontrollerkeyvaluepair/1526717-explicitlyincluded
    explicitlyIncluded(): BOOL;
    setExplicitlyIncluded(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdictionarycontrollerkeyvaluepair/1527207-key
    key(): string | NSString;
    setKey(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdictionarycontrollerkeyvaluepair/1531961-localizedkey
    localizedKey(): string | NSString;
    setLocalizedKey(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdictionarycontrollerkeyvaluepair/1532277-value
    value(): id;
    setValue(): void;
    //
    alloc():NSDictionaryControllerKeyValuePair;
    //
    init():NSDictionaryControllerKeyValuePair;
  }
}

declare const NSDictionaryControllerKeyValuePair: cocoascript.NSDictionaryControllerKeyValuePair;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsbindingselectionmarker
   */
  interface NSBindingSelectionMarker extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsbindingselectionmarker/3022481-multiplevaluesselectionmarker
    multipleValuesSelectionMarker(): NSBindingSelectionMarker;
    setMultipleValuesSelectionMarker(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbindingselectionmarker/3022482-noselectionmarker
    noSelectionMarker(): NSBindingSelectionMarker;
    setNoSelectionMarker(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbindingselectionmarker/3022483-notapplicableselectionmarker
    notApplicableSelectionMarker(): NSBindingSelectionMarker;
    setNotApplicableSelectionMarker(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbindingselectionmarker/3088801-defaultplaceholderformarker
    defaultPlaceholderForMarker_onClass_withBinding(marker: NSBindingSelectionMarker, objectClass: Class, binding: NSBindingName):NSBindingSelectionMarker;
    // doc://com.apple.documentation/documentation/appkit/nsbindingselectionmarker/3088802-setdefaultplaceholder
    setDefaultPlaceholder_forMarker_onClass_withBinding(placeholder: NSBindingSelectionMarker, marker: NSBindingSelectionMarker, objectClass: Class, binding: NSBindingName):void;
    //
    alloc():NSBindingSelectionMarker;
    //
    init():NSBindingSelectionMarker;
  }
}

declare const NSBindingSelectionMarker: cocoascript.NSBindingSelectionMarker;
declare namespace cocoascript {
  /**
   * An encapsulation of the design-time view controller and window controller graph represented in an Interface Builder storyboard resource file.
   * doc://com.apple.documentation/documentation/appkit/nsstoryboard
   */
  interface NSStoryboard extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsstoryboard/1426547-storyboardwithname
    storyboardWithName_bundle(name: NSStoryboardName, storyboardBundleOrNil: NSBundle):NSStoryboard;
    // doc://com.apple.documentation/documentation/appkit/nsstoryboard/2881236-mainstoryboard
    mainStoryboard(): NSStoryboard;
    setMainStoryboard(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstoryboard/1426545-instantiateinitialcontroller
    instantiateInitialController():NSStoryboard;
    // doc://com.apple.documentation/documentation/appkit/nsstoryboard/1426549-instantiatecontrollerwithidentif
    instantiateControllerWithIdentifier(identifier: NSStoryboardSceneIdentifier):NSStoryboard;
    // doc://com.apple.documentation/documentation/appkit/nsstoryboard/3174922-instantiatecontrollerwithidentif
    instantiateControllerWithIdentifier_creator(identifier: NSStoryboardSceneIdentifier, block: NSStoryboardControllerCreator):NSStoryboard;
    // doc://com.apple.documentation/documentation/appkit/nsstoryboard/3174923-instantiateinitialcontrollerwith
    instantiateInitialControllerWithCreator(block: NSStoryboardControllerCreator):NSStoryboard;
    //
    alloc():NSStoryboard;
    //
    init():NSStoryboard;
  }
}

declare const NSStoryboard: cocoascript.NSStoryboard;
declare namespace cocoascript {
  /**
   * A transition or containment relationship between two scenes in a storyboard.
   * doc://com.apple.documentation/documentation/appkit/nsstoryboardsegue
   */
  interface NSStoryboardSegue extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsstoryboardsegue/1409582-sourcecontroller
    sourceController(): id;
    setSourceController(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstoryboardsegue/1409586-destinationcontroller
    destinationController(): id;
    setDestinationController(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstoryboardsegue/1409578-identifier
    identifier(): NSStoryboardSegueIdentifier;
    setIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstoryboardsegue/1409576-seguewithidentifier
    segueWithIdentifier_source_destination_performHandler(identifier: NSStoryboardSegueIdentifier, sourceController: NSStoryboardSegue, destinationController: NSStoryboardSegue, performHandler: void):NSStoryboardSegue;
    // doc://com.apple.documentation/documentation/appkit/nsstoryboardsegue/1409572-initwithidentifier
    initWithIdentifier_source_destination(identifier: NSStoryboardSegueIdentifier, sourceController: NSStoryboardSegue, destinationController: NSStoryboardSegue):NSStoryboardSegue;
    // doc://com.apple.documentation/documentation/appkit/nsstoryboardsegue/1409587-perform
    perform():void;
    //
    alloc():NSStoryboardSegue;
    //
    init():NSStoryboardSegue;
  }
}

declare const NSStoryboardSegue: cocoascript.NSStoryboardSegue;
declare namespace cocoascript {
  /**
   * A set of methods that support the mediation of a custom segue.
   * doc://com.apple.documentation/documentation/appkit/nssegueperforming
   */
  interface NSSeguePerforming extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nssegueperforming/1409583-performseguewithidentifier
    performSegueWithIdentifier_sender(identifier: NSStoryboardSegueIdentifier, sender: NSSeguePerforming):void;
    // doc://com.apple.documentation/documentation/appkit/nssegueperforming/1409580-prepareforsegue
    prepareForSegue_sender(segue: NSStoryboardSegue, sender: NSSeguePerforming):void;
    // doc://com.apple.documentation/documentation/appkit/nssegueperforming/1409574-shouldperformseguewithidentifier
    shouldPerformSegueWithIdentifier_sender(identifier: NSStoryboardSegueIdentifier, sender: NSSeguePerforming):BOOL;
  }
}
declare namespace cocoascript {
  /**
   * An object wrapper, or container, for an Interface Builder nib file.
   * doc://com.apple.documentation/documentation/appkit/nsnib
   */
  interface NSNib extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsnib/1547299-initwithcontentsofurl
    initWithContentsOfURL(nibFileURL: NSURL):NSNib;
    // doc://com.apple.documentation/documentation/appkit/nsnib/1533932-initwithnibnamed
    initWithNibNamed_bundle(nibName: NSNibName, bundle: NSBundle):NSNib;
    // doc://com.apple.documentation/documentation/appkit/nsnib/1535865-initwithnibdata
    initWithNibData_bundle(nibData: NSData, bundle: NSBundle):NSNib;
    // doc://com.apple.documentation/documentation/appkit/nsnib/1547297-instantiatenibwithowner
    instantiateNibWithOwner_topLevelObjects(owner: NSNib, topLevelObjects: NSArray):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsnib/1547300-instantiatenibwithexternalnameta
    instantiateNibWithExternalNameTable(externalNameTable: NSDictionary):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsnib/1527173-instantiatewithowner
    instantiateWithOwner_topLevelObjects(owner: NSNib, topLevelObjects: NSArray):BOOL;
    //
    alloc():NSNib;
    //
    init():NSNib;
  }
}

declare const NSNib: cocoascript.NSNib;
declare namespace cocoascript {
  /**
   * A connection between two nibs.
   * doc://com.apple.documentation/documentation/appkit/nsnibconnector
   */
  interface NSNibConnector extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsnibconnector/1387482-destination
    destination(): id;
    setDestination(): void;
    // doc://com.apple.documentation/documentation/appkit/nsnibconnector/1387493-label
    label(): string | NSString;
    setLabel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsnibconnector/1387484-source
    source(): id;
    setSource(): void;
    // doc://com.apple.documentation/documentation/appkit/nsnibconnector/1387491-establishconnection
    establishConnection():void;
    // doc://com.apple.documentation/documentation/appkit/nsnibconnector/1387489-replaceobject
    replaceObject_withObject(oldObject: NSNibConnector, newObject: NSNibConnector):void;
    //
    alloc():NSNibConnector;
    //
    init():NSNibConnector;
  }
}

declare const NSNibConnector: cocoascript.NSNibConnector;
declare namespace cocoascript {
  /**
   * A control connection between two Interface Builder objects.
   * doc://com.apple.documentation/documentation/appkit/nsnibcontrolconnector
   */
  interface NSNibControlConnector extends NSNibConnector {
    // doc://com.apple.documentation/documentation/appkit/nsnibcontrolconnector/1575034-establishconnection
    establishConnection():void;
    //
    alloc():NSNibControlConnector;
    //
    init():NSNibControlConnector;
  }
}

declare const NSNibControlConnector: cocoascript.NSNibControlConnector;
declare namespace cocoascript {
  /**
   * An outlet connection between Interface Builder objects.
   * doc://com.apple.documentation/documentation/appkit/nsniboutletconnector
   */
  interface NSNibOutletConnector extends NSNibConnector {
    // doc://com.apple.documentation/documentation/appkit/nsniboutletconnector/1539256-establishconnection
    establishConnection():void;
    //
    alloc():NSNibOutletConnector;
    //
    init():NSNibOutletConnector;
  }
}

declare const NSNibOutletConnector: cocoascript.NSNibOutletConnector;
declare namespace cocoascript {
  /**
   * The infrastructure for drawing, printing, and handling events in an app.
   * doc://com.apple.documentation/documentation/appkit/nsview
   */
  interface NSView extends NSResponder {
    // doc://com.apple.documentation/documentation/appkit/nsview/1483458-initwithframe
    initWithFrame(frameRect: NSRect):NSView;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483626-prepareforreuse
    prepareForReuse():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483737-superview
    superview(): NSView;
    setSuperview(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483539-subviews
    subviews(): NSView;
    setSubviews(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483301-window
    window(): NSWindow;
    setWindow(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483783-addsubview
    addSubview(view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483640-addsubview
    addSubview_positioned_relativeTo(view: NSView, place: NSWindowOrderingMode, otherView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483454-didaddsubview
    didAddSubview(subview: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483265-removefromsuperview
    removeFromSuperview():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483644-removefromsuperviewwithoutneedin
    removeFromSuperviewWithoutNeedingDisplay():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483632-replacesubview
    replaceSubview_with(oldView: NSView, newView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483219-isdescendantof
    isDescendantOf(view: NSView):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483383-opaqueancestor
    opaqueAncestor(): NSView;
    setOpaqueAncestor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483353-ancestorsharedwithview
    ancestorSharedWithView(view: NSView):NSView;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483805-sortsubviewsusingfunction
    sortSubviewsUsingFunction_context(compare: void, context: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483568-viewdidmovetosuperview
    viewDidMoveToSuperview():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483329-viewdidmovetowindow
    viewDidMoveToWindow():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483545-viewwillmovetosuperview
    viewWillMoveToSuperview(newSuperview: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483415-viewwillmovetowindow
    viewWillMoveToWindow(newWindow: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483624-willremovesubview
    willRemoveSubview(subview: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1514865-enclosingmenuitem
    enclosingMenuItem(): NSMenuItem;
    setEnclosingMenuItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483713-frame
    frame(): NSRect;
    setFrame(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483283-setframeorigin
    setFrameOrigin(newOrigin: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483530-setframesize
    setFrameSize(newSize: NSSize):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483412-framerotation
    frameRotation(): CGFloat;
    setFrameRotation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483817-bounds
    bounds(): NSRect;
    setBounds(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483345-setboundsorigin
    setBoundsOrigin(newOrigin: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483399-setboundssize
    setBoundsSize(newSize: NSSize):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483746-boundsrotation
    boundsRotation(): CGFloat;
    setBoundsRotation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483695-wantslayer
    wantsLayer(): BOOL;
    setWantsLayer(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483461-wantsupdatelayer
    wantsUpdateLayer(): BOOL;
    setWantsUpdateLayer(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483298-layer
    layer(): CALayer;
    setLayer(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483687-makebackinglayer
    makeBackingLayer():CALayer;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483375-layercontentsplacement
    layerContentsPlacement(): NSViewLayerContentsPlacement;
    setLayerContentsPlacement(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483514-layercontentsredrawpolicy
    layerContentsRedrawPolicy(): NSViewLayerContentsRedrawPolicy;
    setLayerContentsRedrawPolicy(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483347-candrawsubviewsintolayer
    canDrawSubviewsIntoLayer(): BOOL;
    setCanDrawSubviewsIntoLayer(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483576-layerusescoreimagefilters
    layerUsesCoreImageFilters(): BOOL;
    setLayerUsesCoreImageFilters(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483560-alphavalue
    alphaValue(): CGFloat;
    setAlphaValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483367-framecenterrotation
    frameCenterRotation(): CGFloat;
    setFrameCenterRotation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483689-backgroundfilters
    backgroundFilters(): CIFilter;
    setBackgroundFilters(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483516-compositingfilter
    compositingFilter(): CIFilter;
    setCompositingFilter(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483703-contentfilters
    contentFilters(): CIFilter;
    setContentFilters(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483263-shadow
    shadow(): NSShadow;
    setShadow(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483580-updatelayer
    updateLayer():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483686-drawrect
    drawRect(dirtyRect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483277-candraw
    canDraw(): BOOL;
    setCanDraw(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483425-candrawconcurrently
    canDrawConcurrently(): BOOL;
    setCanDrawConcurrently(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483446-visiblerect
    visibleRect(): NSRect;
    setVisibleRect(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483772-getrectsbeingdrawn
    getRectsBeingDrawn_count(rects: NSRect, count: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483570-needstodrawrect
    needsToDrawRect(rect: NSRect):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483365-wantsdefaultclipping
    wantsDefaultClipping(): BOOL;
    setWantsDefaultClipping(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483440-bitmapimagerepforcachingdisplayi
    bitmapImageRepForCachingDisplayInRect(rect: NSRect):NSBitmapImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483552-cachedisplayinrect
    cacheDisplayInRect_toBitmapImageRep(rect: NSRect, bitmapImageRep: NSBitmapImageRep):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483705-print
    print(sender: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483438-beginpageinrect
    beginPageInRect_atPlacement(rect: NSRect, location: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483735-datawithepsinsiderect
    dataWithEPSInsideRect(rect: NSRect):NSData;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483797-datawithpdfinsiderect
    dataWithPDFInsideRect(rect: NSRect):NSData;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483753-printjobtitle
    printJobTitle(): string | NSString;
    setPrintJobTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483674-pageheader
    pageHeader(): NSAttributedString;
    setPageHeader(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483355-pagefooter
    pageFooter(): NSAttributedString;
    setPageFooter(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483235-writeepsinsiderect
    writeEPSInsideRect_toPasteboard(rect: NSRect, pasteboard: NSPasteboard):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483499-writepdfinsiderect
    writePDFInsideRect_toPasteboard(rect: NSRect, pasteboard: NSPasteboard):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483292-drawpageborderwithsize
    drawPageBorderWithSize(borderSize: NSSize):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483233-drawsheetborderwithsize
    drawSheetBorderWithSize(borderSize: NSSize):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483691-heightadjustlimit
    heightAdjustLimit(): CGFloat;
    setHeightAdjustLimit(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483392-widthadjustlimit
    widthAdjustLimit(): CGFloat;
    setWidthAdjustLimit(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483622-adjustpagewidthnew
    adjustPageWidthNew_left_right_limit(newRight: CGFloat, oldLeft: CGFloat, oldRight: CGFloat, rightLimit: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483258-adjustpageheightnew
    adjustPageHeightNew_top_bottom_limit(newBottom: CGFloat, oldTop: CGFloat, oldBottom: CGFloat, bottomLimit: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483774-knowspagerange
    knowsPageRange(range: NSRangePointer):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483252-rectforpage
    rectForPage(page: NSInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483223-locationofprintrect
    locationOfPrintRect(rect: NSRect):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483475-setneedsdisplayinrect
    setNeedsDisplayInRect(invalidRect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483360-needsdisplay
    needsDisplay(): BOOL;
    setNeedsDisplay(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483487-display
    display():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483518-displayrect
    displayRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483699-displayrectignoringopacity
    displayRectIgnoringOpacity(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483436-displayrectignoringopacity
    displayRectIgnoringOpacity_inContext(rect: NSRect, context: NSGraphicsContext):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483566-displayifneeded
    displayIfNeeded():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483813-displayifneededinrect
    displayIfNeededInRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483526-displayifneededignoringopacity
    displayIfNeededIgnoringOpacity():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483481-displayifneededinrectignoringopa
    displayIfNeededInRectIgnoringOpacity(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483731-translaterectsneedingdisplayinre
    translateRectsNeedingDisplayInRect_by(clipRect: NSRect, delta: NSSize):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483558-opaque
    opaque(): BOOL;
    setOpaque(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483351-viewwilldraw
    viewWillDraw():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483321-backingalignedrect
    backingAlignedRect_options(rect: NSRect, options: NSAlignmentOptions):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483456-convertpointfrombacking
    convertPointFromBacking(point: NSPoint):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483803-convertpointtobacking
    convertPointToBacking(point: NSPoint):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483554-convertpointfromlayer
    convertPointFromLayer(point: NSPoint):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483315-convertpointtolayer
    convertPointToLayer(point: NSPoint):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483819-convertrectfrombacking
    convertRectFromBacking(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483648-convertrecttobacking
    convertRectToBacking(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483404-convertrectfromlayer
    convertRectFromLayer(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483776-convertrecttolayer
    convertRectToLayer(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483319-convertsizefrombacking
    convertSizeFromBacking(size: NSSize):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483227-convertsizetobacking
    convertSizeToBacking(size: NSSize):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483479-convertsizefromlayer
    convertSizeFromLayer(size: NSSize):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483701-convertsizetolayer
    convertSizeToLayer(size: NSSize):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483269-convertpoint
    convertPoint_fromView(point: NSPoint, view: NSView):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483406-convertpoint
    convertPoint_toView(point: NSPoint, view: NSView):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483307-convertsize
    convertSize_fromView(size: NSSize, view: NSView):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483744-convertsize
    convertSize_toView(size: NSSize, view: NSView):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483785-convertrect
    convertRect_fromView(rect: NSRect, view: NSView):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483217-convertrect
    convertRect_toView(rect: NSRect, view: NSView):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483725-centerscanrect
    centerScanRect(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483385-translateorigintopoint
    translateOriginToPoint(translation: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483721-scaleunitsquaretosize
    scaleUnitSquareToSize(newUnitSize: NSSize):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483444-rotatebyangle
    rotateByAngle(angle: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483532-flipped
    flipped(): BOOL;
    setFlipped(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483709-rotatedfrombase
    rotatedFromBase(): BOOL;
    setRotatedFromBase(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483390-rotatedorscaledfrombase
    rotatedOrScaledFromBase(): BOOL;
    setRotatedOrScaledFromBase(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483358-autoresizessubviews
    autoresizesSubviews(): BOOL;
    setAutoresizesSubviews(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483281-autoresizingmask
    autoresizingMask(): NSAutoresizingMaskOptions;
    setAutoresizingMask(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483495-resizesubviewswitholdsize
    resizeSubviewsWithOldSize(oldSize: NSSize):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483697-resizewitholdsuperviewsize
    resizeWithOldSuperviewSize(oldSize: NSSize):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526974-bottomanchor
    bottomAnchor(): NSLayoutYAxisAnchor;
    setBottomAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526924-centerxanchor
    centerXAnchor(): NSLayoutXAxisAnchor;
    setCenterXAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526935-centeryanchor
    centerYAnchor(): NSLayoutYAxisAnchor;
    setCenterYAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526900-firstbaselineanchor
    firstBaselineAnchor(): NSLayoutYAxisAnchor;
    setFirstBaselineAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526942-heightanchor
    heightAnchor(): NSLayoutDimension;
    setHeightAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526959-lastbaselineanchor
    lastBaselineAnchor(): NSLayoutYAxisAnchor;
    setLastBaselineAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1524264-leadinganchor
    leadingAnchor(): NSLayoutXAxisAnchor;
    setLeadingAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526951-leftanchor
    leftAnchor(): NSLayoutXAxisAnchor;
    setLeftAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1524466-rightanchor
    rightAnchor(): NSLayoutXAxisAnchor;
    setRightAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526859-topanchor
    topAnchor(): NSLayoutYAxisAnchor;
    setTopAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526983-trailinganchor
    trailingAnchor(): NSLayoutXAxisAnchor;
    setTrailingAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526638-widthanchor
    widthAnchor(): NSLayoutDimension;
    setWidthAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526917-constraints
    constraints(): NSLayoutConstraint;
    setConstraints(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526969-addconstraint
    addConstraint(constraint: NSLayoutConstraint):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526931-addconstraints
    addConstraints(constraints: NSLayoutConstraint):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1524333-removeconstraint
    removeConstraint(constraint: NSLayoutConstraint):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526932-removeconstraints
    removeConstraints(constraints: NSLayoutConstraint):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1530406-addlayoutguide
    addLayoutGuide(guide: NSLayoutGuide):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1534395-layoutguides
    layoutGuides(): NSLayoutGuide;
    setLayoutGuides(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/3622483-layoutmarginsguide
    layoutMarginsGuide(): NSLayoutGuide;
    setLayoutMarginsGuide(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/3553228-safearealayoutguide
    safeAreaLayoutGuide(): NSLayoutGuide;
    setSafeAreaLayoutGuide(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1527086-removelayoutguide
    removeLayoutGuide(guide: NSLayoutGuide):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526904-fittingsize
    fittingSize(): NSSize;
    setFittingSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526996-intrinsiccontentsize
    intrinsicContentSize(): NSSize;
    setIntrinsicContentSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526864-invalidateintrinsiccontentsize
    invalidateIntrinsicContentSize():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526991-contentcompressionresistanceprio
    contentCompressionResistancePriorityForOrientation(orientation: NSLayoutConstraintOrientation):NSLayoutPriority;
    // doc://com.apple.documentation/documentation/appkit/nsview/1524974-setcontentcompressionresistancep
    setContentCompressionResistancePriority_forOrientation(priority: NSLayoutPriority, orientation: NSLayoutConstraintOrientation):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526979-contenthuggingpriorityfororienta
    contentHuggingPriorityForOrientation(orientation: NSLayoutConstraintOrientation):NSLayoutPriority;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526937-setcontenthuggingpriority
    setContentHuggingPriority_forOrientation(priority: NSLayoutPriority, orientation: NSLayoutConstraintOrientation):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526905-alignmentrectforframe
    alignmentRectForFrame(frame: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsview/1525584-frameforalignmentrect
    frameForAlignmentRect(alignmentRect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526870-alignmentrectinsets
    alignmentRectInsets(): NSEdgeInsets;
    setAlignmentRectInsets(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526949-baselineoffsetfrombottom
    baselineOffsetFromBottom(): CGFloat;
    setBaselineOffsetFromBottom(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526963-firstbaselineoffsetfromtop
    firstBaselineOffsetFromTop(): CGFloat;
    setFirstBaselineOffsetFromTop(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1525942-lastbaselineoffsetfrombottom
    lastBaselineOffsetFromBottom(): CGFloat;
    setLastBaselineOffsetFromBottom(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526912-needslayout
    needsLayout(): BOOL;
    setNeedsLayout(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526146-layout
    layout():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526871-layoutsubtreeifneeded
    layoutSubtreeIfNeeded():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526856-needsupdateconstraints
    needsUpdateConstraints(): BOOL;
    setNeedsUpdateConstraints(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526891-updateconstraints
    updateConstraints():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526939-updateconstraintsforsubtreeifnee
    updateConstraintsForSubtreeIfNeeded():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526926-requiresconstraintbasedlayout
    requiresConstraintBasedLayout(): BOOL;
    setRequiresConstraintBasedLayout(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526961-translatesautoresizingmaskintoco
    translatesAutoresizingMaskIntoConstraints(): BOOL;
    setTranslatesAutoresizingMaskIntoConstraints(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1525968-constraintsaffectinglayoutforori
    constraintsAffectingLayoutForOrientation(orientation: NSLayoutConstraintOrientation):NSLayoutConstraint;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526907-hasambiguouslayout
    hasAmbiguousLayout(): BOOL;
    setHasAmbiguousLayout(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526934-exerciseambiguityinlayout
    exerciseAmbiguityInLayout():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483608-lockfocus
    lockFocus():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483285-lockfocusifcandraw
    lockFocusIfCanDraw():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483534-lockfocusifcandrawincontext
    lockFocusIfCanDrawInContext(context: NSGraphicsContext):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483711-unlockfocus
    unlockFocus():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483662-focusview
    focusView(): NSView;
    setFocusView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483261-focusringtype
    focusRingType(): NSFocusRingType;
    setFocusRingType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483287-focusringmaskbounds
    focusRingMaskBounds(): NSRect;
    setFocusRingMaskBounds(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483335-drawfocusringmask
    drawFocusRingMask():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483809-notefocusringmaskchanged
    noteFocusRingMaskChanged():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483556-setkeyboardfocusringneedsdisplay
    setKeyboardFocusRingNeedsDisplayInRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483589-defaultfocusringtype
    defaultFocusRingType(): NSFocusRingType;
    setDefaultFocusRingType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483793-allowsvibrancy
    allowsVibrancy(): BOOL;
    setAllowsVibrancy(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483780-enterfullscreenmode
    enterFullScreenMode_withOptions(screen: NSScreen, options: NSView):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483256-exitfullscreenmodewithoptions
    exitFullScreenModeWithOptions(options: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483337-infullscreenmode
    inFullScreenMode(): BOOL;
    setInFullScreenMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483369-hidden
    hidden(): BOOL;
    setHidden(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483473-hiddenorhashiddenancestor
    hiddenOrHasHiddenAncestor(): BOOL;
    setHiddenOrHasHiddenAncestor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483596-viewdidhide
    viewDidHide():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483275-viewdidunhide
    viewDidUnhide():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483267-inliveresize
    inLiveResize(): BOOL;
    setInLiveResize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483795-preservescontentduringliveresize
    preservesContentDuringLiveResize(): BOOL;
    setPreservesContentDuringLiveResize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483221-getrectsexposedduringliveresize
    getRectsExposedDuringLiveResize_count(exposedRects: NSRect, count: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483528-rectpreservedduringliveresize
    rectPreservedDuringLiveResize(): NSRect;
    setRectPreservedDuringLiveResize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483620-viewwillstartliveresize
    viewWillStartLiveResize():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483543-viewdidendliveresize
    viewDidEndLiveResize():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483658-gesturerecognizers
    gestureRecognizers(): NSGestureRecognizer;
    setGestureRecognizers(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483749-addgesturerecognizer
    addGestureRecognizer(gestureRecognizer: NSGestureRecognizer):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483789-removegesturerecognizer
    removeGestureRecognizer(gestureRecognizer: NSGestureRecognizer):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483410-acceptsfirstmouse
    acceptsFirstMouse(event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483364-hittest
    hitTest(point: NSPoint):NSView;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483237-mouse
    mouse_inRect(point: NSPoint, rect: NSRect):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483664-performkeyequivalent
    performKeyEquivalent(event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1806802-rightmousedown
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483666-mousedowncanmovewindow
    mouseDownCanMoveWindow(): BOOL;
    setMouseDownCanMoveWindow(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483323-inputcontext
    inputContext(): NSTextInputContext;
    setInputContext(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483739-acceptstouchevents
    acceptsTouchEvents(): BOOL;
    setAcceptsTouchEvents(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483594-wantsrestingtouches
    wantsRestingTouches(): BOOL;
    setWantsRestingTouches(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483759-canbecomekeyview
    canBecomeKeyView(): BOOL;
    setCanBecomeKeyView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483512-needspaneltobecomekey
    needsPanelToBecomeKey(): BOOL;
    setNeedsPanelToBecomeKey(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483465-nextkeyview
    nextKeyView(): NSView;
    setNextKeyView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483572-nextvalidkeyview
    nextValidKeyView(): NSView;
    setNextValidKeyView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483646-previouskeyview
    previousKeyView(): NSView;
    setPreviousKeyView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483371-previousvalidkeyview
    previousValidKeyView(): NSView;
    setPreviousValidKeyView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483427-preparecontentinrect
    prepareContentInRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483215-preparedcontentrect
    preparedContentRect(): NSRect;
    setPreparedContentRect(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483394-scrollpoint
    scrollPoint(point: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483811-scrollrecttovisible
    scrollRectToVisible(rect: NSRect):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483471-autoscroll
    autoscroll(event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483616-adjustscroll
    adjustScroll(newVisible: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483497-scrollrect
    scrollRect_by(rect: NSRect, delta: NSSize):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483654-enclosingscrollview
    enclosingScrollView(): NSScrollView;
    setEnclosingScrollView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1531337-scrollclipview
    scrollClipView_toPoint(clipView: NSClipView, point: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1534216-reflectscrolledclipview
    reflectScrolledClipView(clipView: NSClipView):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483578-registerfordraggedtypes
    registerForDraggedTypes(newTypes: NSPasteboardType):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483602-unregisterdraggedtypes
    unregisterDraggedTypes():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483564-registereddraggedtypes
    registeredDraggedTypes(): NSPasteboardType;
    setRegisteredDraggedTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483791-begindraggingsessionwithitems
    beginDraggingSessionWithItems_event_source(items: NSDraggingItem, event: NSEvent, source: NSDraggingSource):NSDraggingSession;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483600-dragfile
    dragFile_fromRect_slideBack_event(filename: string | NSString, rect: NSRect, flag: BOOL, event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483598-dragpromisedfilesoftypes
    dragPromisedFilesOfTypes_fromRect_source_slideBack_event(typeArray: string | NSString, rect: NSRect, sourceObject: NSView, flag: BOOL, event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483244-shoulddelaywindoworderingforeven
    shouldDelayWindowOrderingForEvent(event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483305-rectforsmartmagnificationatpoint
    rectForSmartMagnificationAtPoint_inRect(location: NSPoint, visibleRect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483524-postsframechangednotifications
    postsFrameChangedNotifications(): BOOL;
    setPostsFrameChangedNotifications(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483239-postsboundschangednotifications
    postsBoundsChangedNotifications(): BOOL;
    setPostsBoundsChangedNotifications(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483742-viewdidchangebackingproperties
    viewDidChangeBackingProperties():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483294-viewwithtag
    viewWithTag(tag: NSInteger):NSView;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483248-tag
    tag(): NSInteger;
    setTag(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483229-addtooltiprect
    addToolTipRect_owner_userData(rect: NSRect, owner: NSView, data: void):NSToolTipTag;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483801-removealltooltips
    removeAllToolTips():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483522-removetooltip
    removeToolTip(tag: NSToolTipTag):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483541-tooltip
    toolTip(): string | NSString;
    setToolTip(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483668-addtrackingrect
    addTrackingRect_owner_userData_assumeInside(rect: NSRect, owner: NSView, data: void, flag: BOOL):NSTrackingRectTag;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483729-removetrackingrect
    removeTrackingRect(tag: NSTrackingRectTag):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483489-addtrackingarea
    addTrackingArea(trackingArea: NSTrackingArea):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483634-removetrackingarea
    removeTrackingArea(trackingArea: NSTrackingArea):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483333-trackingareas
    trackingAreas(): NSTrackingArea;
    setTrackingAreas(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483719-updatetrackingareas
    updateTrackingAreas():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483540-addcursorrect
    addCursorRect_cursor(rect: NSRect, object: NSCursor):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483676-removecursorrect
    removeCursorRect_cursor(rect: NSRect, object: NSCursor):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483733-discardcursorrects
    discardCursorRects():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483448-resetcursorrects
    resetCursorRects():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483231-menuforevent
    menuForEvent(event: NSEvent):NSMenu;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483417-defaultmenu
    defaultMenu(): NSMenu;
    setDefaultMenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483429-willopenmenu
    willOpenMenu_withEvent(menu: NSMenu, event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483770-didclosemenu
    didCloseMenu_withEvent(menu: NSMenu, event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483423-begindocument
    beginDocument():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483610-enddocument
    endDocument():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483549-endpage
    endPage():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483747-showdefinitionforattributedstrin
    showDefinitionForAttributedString_atPoint(attrString: NSAttributedString, textBaselineOrigin: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483587-showdefinitionforattributedstrin
    showDefinitionForAttributedString_range_options_baselineOriginProvider(attrString: NSAttributedString, targetRange: NSRange, options: NSView, originProvider: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483317-drawingfindindicator
    drawingFindIndicator(): BOOL;
    setDrawingFindIndicator(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483254-userinterfacelayoutdirection
    userInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection;
    setUserInterfaceLayoutDirection(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1414938-wantsbestresolutionopenglsurface
    wantsBestResolutionOpenGLSurface(): BOOL;
    setWantsBestResolutionOpenGLSurface(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1426890-pressureconfiguration
    pressureConfiguration(): NSPressureConfiguration;
    setPressureConfiguration(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483362-convertpointtobase
    convertPointToBase(point: NSPoint):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483778-convertpointfrombase
    convertPointFromBase(point: NSPoint):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483349-convertsizetobase
    convertSizeToBase(size: NSSize):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483357-convertsizefrombase
    convertSizeFromBase(size: NSSize):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483331-convertrecttobase
    convertRectToBase(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483591-convertrectfrombase
    convertRectFromBase(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483585-performmnemonic
    performMnemonic(string: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483250-shoulddrawcolor
    shouldDrawColor():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483581-allocategstate
    allocateGState():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483313-gstate
    gState():NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483652-setupgstate
    setUpGState():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483727-renewgstate
    renewGState():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483761-releasegstate
    releaseGState():void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483279-dragimage
    dragImage_at_offset_event_pasteboard_source_slideBack(image: NSImage, viewLocation: NSPoint, initialOffset: NSSize, event: NSEvent, pboard: NSPasteboard, sourceObj: NSView, slideFlag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1483715-initwithcoder
    initWithCoder(coder: NSCoder):NSView;
    // doc://com.apple.documentation/documentation/appkit/nsview/3553226-additionalsafeareainsets
    additionalSafeAreaInsets(): NSEdgeInsets;
    setAdditionalSafeAreaInsets(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/2544839-allowedtouchtypes
    allowedTouchTypes(): NSTouchTypeMask;
    setAllowedTouchTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/2544729-candidatelisttouchbaritem
    candidateListTouchBarItem(): NSCandidateListTouchBarItem;
    setCandidateListTouchBarItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/3353053-horizontalcontentsizeconstrainta
    horizontalContentSizeConstraintActive(): BOOL;
    setHorizontalContentSizeConstraintActive(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/3353054-verticalcontentsizeconstraintact
    verticalContentSizeConstraintActive(): BOOL;
    setVerticalContentSizeConstraintActive(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/3553227-safeareainsets
    safeAreaInsets(): NSEdgeInsets;
    setSafeAreaInsets(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/3553229-safearearect
    safeAreaRect(): NSRect;
    setSafeAreaRect(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1414929-wantsextendeddynamicrangeopengls
    wantsExtendedDynamicRangeOpenGLSurface(): BOOL;
    setWantsExtendedDynamicRangeOpenGLSurface(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/2870005-compatiblewithresponsivescrollin
    compatibleWithResponsiveScrolling(): BOOL;
    setCompatibleWithResponsiveScrolling(): void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1532033-rulerview
    rulerView_didAddMarker(ruler: NSRulerView, marker: NSRulerMarker):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1534537-rulerview
    rulerView_didMoveMarker(ruler: NSRulerView, marker: NSRulerMarker):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1524467-rulerview
    rulerView_didRemoveMarker(ruler: NSRulerView, marker: NSRulerMarker):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1524873-rulerview
    rulerView_handleMouseDown(ruler: NSRulerView, event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/1535261-rulerview
    rulerView_locationForPoint(ruler: NSRulerView, point: NSPoint):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsview/1524292-rulerview
    rulerView_pointForLocation(ruler: NSRulerView, point: CGFloat):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nsview/1526729-rulerview
    rulerView_shouldAddMarker(ruler: NSRulerView, marker: NSRulerMarker):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1532310-rulerview
    rulerView_shouldMoveMarker(ruler: NSRulerView, marker: NSRulerMarker):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1527001-rulerview
    rulerView_shouldRemoveMarker(ruler: NSRulerView, marker: NSRulerMarker):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsview/1533016-rulerview
    rulerView_willAddMarker_atLocation(ruler: NSRulerView, marker: NSRulerMarker, location: CGFloat):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsview/1530840-rulerview
    rulerView_willMoveMarker_toLocation(ruler: NSRulerView, marker: NSRulerMarker, location: CGFloat):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsview/1529850-rulerview
    rulerView_willSetClientView(ruler: NSRulerView, newClient: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsview/2977088-viewdidchangeeffectiveappearance
    viewDidChangeEffectiveAppearance():void;
    //
    alloc():NSView;
    //
    init():NSView;
  }
}

declare const NSView: cocoascript.NSView;
// doc://com.apple.documentation/documentation/appkit/nsviewboundsdidchangenotification
declare const NSViewBoundsDidChangeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsviewfocusdidchangenotification
declare const NSViewFocusDidChangeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsviewframedidchangenotification
declare const NSViewFrameDidChangeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsviewdidupdatetrackingareasnotification
declare const NSViewDidUpdateTrackingAreasNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsviewglobalframedidchangenotification
declare const NSViewGlobalFrameDidChangeNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * A high-level interface for manipulating image data.
   * doc://com.apple.documentation/documentation/appkit/nsimage
   */
  interface NSImage extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520015-imagenamed
    imageNamed(name: NSImageName):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520025-setname
    setName(string: NSImageName):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519884-name
    name():NSImageName;
    // doc://com.apple.documentation/documentation/appkit/nsimage/3622472-imagewithsystemsymbolname
    imageWithSystemSymbolName_accessibilityDescription(symbolName: string | NSString, description: string | NSString):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsimage/3656508-imagewithsymbolconfiguration
    imageWithSymbolConfiguration(configuration: NSImageSymbolConfiguration):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519860-imagewithsize
    imageWithSize_flipped_drawingHandler(size: NSSize, drawingHandlerShouldBeCalledWithFlippedContext: BOOL, drawingHandler: NSRect):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519955-initbyreferencingfile
    initByReferencingFile(fileName: string | NSString):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519990-initbyreferencingurl
    initByReferencingURL(url: NSURL):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519918-initwithcontentsoffile
    initWithContentsOfFile(fileName: string | NSString):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519907-initwithcontentsofurl
    initWithContentsOfURL(url: NSURL):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519941-initwithdata
    initWithData(data: NSData):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519915-initwithdataignoringorientation
    initWithDataIgnoringOrientation(data: NSData):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519939-initwithcgimage
    initWithCGImage_size(cgImage: CGImageRef, size: NSSize):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519952-initwithpasteboard
    initWithPasteboard(pasteboard: NSPasteboard):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsimage/2177315-initwithcoder
    initWithCoder(coder: NSCoder):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519930-initwithiconref
    initWithIconRef(iconRef: IconRef):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520033-initwithsize
    initWithSize(size: NSSize):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519926-delegate
    delegate(): NSImageDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519987-size
    size(): NSSize;
    setSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520017-template
    template(): BOOL;
    setTemplate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1807274-istemplate
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520039-caninitwithpasteboard
    canInitWithPasteboard(pasteboard: NSPasteboard):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519988-imagetypes
    imageTypes(): string | NSString;
    setImageTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519899-imageunfilteredtypes
    imageUnfilteredTypes(): string | NSString;
    setImageUnfilteredTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519911-addrepresentation
    addRepresentation(imageRep: NSImageRep):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519964-addrepresentations
    addRepresentations(imageReps: NSImageRep):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519858-representations
    representations(): NSImageRep;
    setRepresentations(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519995-removerepresentation
    removeRepresentation(imageRep: NSImageRep):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519961-bestrepresentationforrect
    bestRepresentationForRect_context_hints(rect: NSRect, referenceContext: NSGraphicsContext, hints: NSImage):NSImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520010-preferscolormatch
    prefersColorMatch(): BOOL;
    setPrefersColorMatch(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519868-usesepsonresolutionmismatch
    usesEPSOnResolutionMismatch(): BOOL;
    setUsesEPSOnResolutionMismatch(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519963-matchesonmultipleresolution
    matchesOnMultipleResolution(): BOOL;
    setMatchesOnMultipleResolution(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519863-drawinrect
    drawInRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519981-drawatpoint
    drawAtPoint_fromRect_operation_fraction(point: NSPoint, fromRect: NSRect, op: NSCompositingOperation, delta: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520067-drawinrect
    drawInRect_fromRect_operation_fraction(rect: NSRect, fromRect: NSRect, op: NSCompositingOperation, delta: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520043-drawinrect
    drawInRect_fromRect_operation_fraction_respectFlipped_hints(dstSpacePortionRect: NSRect, srcSpacePortionRect: NSRect, op: NSCompositingOperation, requestedAlpha: CGFloat, respectContextIsFlipped: BOOL, hints: NSImage):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519904-drawrepresentation
    drawRepresentation_inRect(imageRep: NSImageRep, rect: NSRect):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519991-valid
    valid(): BOOL;
    setValid(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520059-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520012-capinsets
    capInsets(): NSEdgeInsets;
    setCapInsets(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520060-resizingmode
    resizingMode(): NSImageResizingMode;
    setResizingMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519891-lockfocus
    lockFocus():void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519914-lockfocusflipped
    lockFocusFlipped(flipped: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519853-unlockfocus
    unlockFocus():void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519905-alignmentrect
    alignmentRect(): NSRect;
    setAlignmentRect(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519850-cachemode
    cacheMode(): NSImageCacheMode;
    setCacheMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519890-recache
    recache():void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519841-tiffrepresentation
    TIFFRepresentation(): NSData;
    setTIFFRepresentation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519949-tiffrepresentationusingcompressi
    TIFFRepresentationUsingCompression_factor(comp: NSTIFFCompression, factor: number):NSData;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519861-cgimageforproposedrect
    CGImageForProposedRect_context_hints(proposedDestRect: NSRect, referenceContext: NSGraphicsContext, hints: NSImage):CGImageRef;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520041-cancelincrementalload
    cancelIncrementalLoad():void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519922-hittestrect
    hitTestRect_withImageDestinationRect_context_hints_flipped(testRectDestSpace: NSRect, imageRectDestSpace: NSRect, context: NSGraphicsContext, hints: NSImage, flipped: BOOL):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519943-accessibilitydescription
    accessibilityDescription(): string | NSString;
    setAccessibilityDescription(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519851-layercontentsforcontentsscale
    layerContentsForContentsScale(layerContentsScale: CGFloat):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519878-recommendedlayercontentsscale
    recommendedLayerContentsScale(preferredContentsScale: CGFloat):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519848-matchesonlyonbestfittingaxis
    matchesOnlyOnBestFittingAxis(): BOOL;
    setMatchesOnlyOnBestFittingAxis(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519989-imagefiletypes
    imageFileTypes():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519973-imageunfilteredfiletypes
    imageUnfilteredFileTypes():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519924-imagepasteboardtypes
    imagePasteboardTypes():NSPasteboardType;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519872-imageunfilteredpasteboardtypes
    imageUnfilteredPasteboardTypes():NSPasteboardType;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519950-lockfocusonrepresentation
    lockFocusOnRepresentation(imageRepresentation: NSImageRep):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519925-bestrepresentationfordevice
    bestRepresentationForDevice(deviceDescription: NSDictionary):NSImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519867-compositetopoint
    compositeToPoint_operation(point: NSPoint, op: NSCompositingOperation):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520046-compositetopoint
    compositeToPoint_fromRect_operation(point: NSPoint, rect: NSRect, op: NSCompositingOperation):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520026-compositetopoint
    compositeToPoint_fromRect_operation_fraction(point: NSPoint, rect: NSRect, op: NSCompositingOperation, delta: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519932-compositetopoint
    compositeToPoint_operation_fraction(point: NSPoint, op: NSCompositingOperation, delta: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519887-dissolvetopoint
    dissolveToPoint_fraction(point: NSPoint, fraction: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519968-dissolvetopoint
    dissolveToPoint_fromRect_fraction(point: NSPoint, rect: NSRect, fraction: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519970-setscaleswhenresized
    setScalesWhenResized(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519929-scaleswhenresized
    scalesWhenResized():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519999-setdataretained
    setDataRetained(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520005-isdataretained
    isDataRetained():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520009-setcachedseparately
    setCachedSeparately(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520021-iscachedseparately
    isCachedSeparately():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519895-setcachedepthmatchesimagedepth
    setCacheDepthMatchesImageDepth(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519992-cachedepthmatchesimagedepth
    cacheDepthMatchesImageDepth():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1520044-setflipped
    setFlipped(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsimage/1519846-isflipped
    isFlipped():BOOL;
    //
    alloc():NSImage;
    //
    init():NSImage;
  }
}

declare const NSImage: cocoascript.NSImage;
declare namespace cocoascript {
  /**
   * A definition of the fundamental behavior for controls, which are specialized views that notify your app of relevant events by using the target-action design pattern.
   * doc://com.apple.documentation/documentation/appkit/nscontrol
   */
  interface NSControl extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428900-initwithframe
    initWithFrame(frameRect: NSRect):NSControl;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428861-initwithcoder
    initWithCoder(coder: NSCoder):NSControl;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428891-cellclass
    cellClass(): Class;
    setCellClass(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428970-enabled
    enabled(): BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428942-doublevalue
    doubleValue(): number;
    setDoubleValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428889-floatvalue
    floatValue(): number;
    setFloatValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428939-intvalue
    intValue(): number;
    setIntValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428969-integervalue
    integerValue(): NSInteger;
    setIntegerValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428849-objectvalue
    objectValue(): id;
    setObjectValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428950-stringvalue
    stringValue(): string | NSString;
    setStringValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428916-attributedstringvalue
    attributedStringValue(): NSAttributedString;
    setAttributedStringValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428958-takedoublevaluefrom
    takeDoubleValueFrom(sender: NSControl):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428938-takefloatvaluefrom
    takeFloatValueFrom(sender: NSControl):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428859-takeintvaluefrom
    takeIntValueFrom(sender: NSControl):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428875-takeintegervaluefrom
    takeIntegerValueFrom(sender: NSControl):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428853-takeobjectvaluefrom
    takeObjectValueFrom(sender: NSControl):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428912-takestringvaluefrom
    takeStringValueFrom(sender: NSControl):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428906-alignment
    alignment(): NSTextAlignment;
    setAlignment(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428914-font
    font(): NSFont;
    setFont(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428978-linebreakmode
    lineBreakMode(): NSLineBreakMode;
    setLineBreakMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428929-usessinglelinemode
    usesSingleLineMode(): BOOL;
    setUsesSingleLineMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428931-setfloatingpointformat
    setFloatingPointFormat_left_right(autoRange: BOOL, leftDigits: NSUInteger, rightDigits: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428887-formatter
    formatter(): NSFormatter;
    setFormatter(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428921-basewritingdirection
    baseWritingDirection(): NSWritingDirection;
    setBaseWritingDirection(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428895-drawwithexpansionframe
    drawWithExpansionFrame_inView(contentFrame: NSRect, view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428962-allowsexpansiontooltips
    allowsExpansionToolTips(): BOOL;
    setAllowsExpansionToolTips(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428932-expansionframewithframe
    expansionFrameWithFrame(contentFrame: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428867-abortediting
    abortEditing():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428980-currenteditor
    currentEditor():NSText;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428855-validateediting
    validateEditing():void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428919-editwithframe
    editWithFrame_editor_delegate_event(rect: NSRect, textObj: NSText, delegate: NSControl, event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428936-endediting
    endEditing(textObj: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428968-selectwithframe
    selectWithFrame_editor_delegate_start_length(rect: NSRect, textObj: NSText, delegate: NSControl, selStart: NSInteger, selLength: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428871-controlsize
    controlSize(): NSControlSize;
    setControlSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428902-sizethatfits
    sizeThatFits(size: NSSize):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428877-sizetofit
    sizeToFit():void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428927-highlighted
    highlighted(): BOOL;
    setHighlighted(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428956-action
    action(): SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428885-target
    target(): id;
    setTarget(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428952-continuous
    continuous(): BOOL;
    setContinuous(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428851-sendaction
    sendAction_to(action: SEL, target: NSControl):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428972-sendactionon
    sendActionOn(mask: NSEventMask):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428910-tag
    tag(): NSInteger;
    setTag(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428974-performclick
    performClick(sender: NSControl):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428976-refusesfirstresponder
    refusesFirstResponder(): BOOL;
    setRefusesFirstResponder(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428918-mousedown
    mouseDown(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428863-ignoresmulticlick
    ignoresMultiClick(): BOOL;
    setIgnoresMultiClick(): void;
    // doc://com.apple.documentation/documentation/objectivec/nsobject/1428934-controltextdidbeginediting
    controlTextDidBeginEditing(obj: NSNotification):void;
    // doc://com.apple.documentation/documentation/objectivec/nsobject/1428982-controltextdidchange
    controlTextDidChange(obj: NSNotification):void;
    // doc://com.apple.documentation/documentation/objectivec/nsobject/1428847-controltextdidendediting
    controlTextDidEndEditing(obj: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1526876-invalidateintrinsiccontentsizefo
    invalidateIntrinsicContentSizeForCell(cell: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428960-cell
    cell(): NSCell;
    setCell(): void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428964-selectedcell
    selectedCell():NSCell;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428845-selectedtag
    selectedTag():NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428879-setneedsdisplay
    setNeedsDisplay():void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428857-calcsize
    calcSize():void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428966-selectcell
    selectCell(cell: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428869-drawcell
    drawCell(cell: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428881-drawcellinside
    drawCellInside(cell: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428893-updatecell
    updateCell(cell: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nscontrol/1428923-updatecellinside
    updateCellInside(cell: NSCell):void;
    //
    alloc():NSControl;
    //
    init():NSControl;
  }
}

declare const NSControl: cocoascript.NSControl;
// doc://com.apple.documentation/documentation/appkit/nscontroltextdidbegineditingnotification
declare const NSControlTextDidBeginEditingNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nscontroltextdidchangenotification
declare const NSControlTextDidChangeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nscontroltextdidendeditingnotification
declare const NSControlTextDidEndEditingNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * A mechanism for displaying text or images in a view object without the overhead of a full
   * doc://com.apple.documentation/documentation/appkit/nscell
   */
  interface NSCell extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscell/1533898-initimagecell
    initImageCell(image: NSImage):NSCell;
    // doc://com.apple.documentation/documentation/appkit/nscell/1530851-inittextcell
    initTextCell(string: string | NSString):NSCell;
    // doc://com.apple.documentation/documentation/appkit/nscell/1530936-objectvalue
    objectValue(): id;
    setObjectValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1534009-hasvalidobjectvalue
    hasValidObjectValue(): BOOL;
    setHasValidObjectValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1525170-intvalue
    intValue(): number;
    setIntValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1527783-integervalue
    integerValue(): NSInteger;
    setIntegerValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1530915-stringvalue
    stringValue(): string | NSString;
    setStringValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1534765-doublevalue
    doubleValue(): number;
    setDoubleValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1534292-floatvalue
    floatValue(): number;
    setFloatValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1531257-setcellattribute
    setCellAttribute_to(parameter: NSCellAttribute, value: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1530877-cellattribute
    cellAttribute(parameter: NSCellAttribute):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nscell/1524871-type
    type(): NSCellType;
    setType(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1533415-enabled
    enabled(): BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1531576-allowsundo
    allowsUndo(): BOOL;
    setAllowsUndo(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1533376-bezeled
    bezeled(): BOOL;
    setBezeled(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1525990-bordered
    bordered(): BOOL;
    setBordered(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1531610-opaque
    opaque(): BOOL;
    setOpaque(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1529397-controltint
    controlTint(): NSControlTint;
    setControlTint(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1524686-backgroundstyle
    backgroundStyle(): NSBackgroundStyle;
    setBackgroundStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1526141-interiorbackgroundstyle
    interiorBackgroundStyle(): NSBackgroundStyle;
    setInteriorBackgroundStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1531578-allowsmixedstate
    allowsMixedState(): BOOL;
    setAllowsMixedState(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1531235-nextstate
    nextState(): NSInteger;
    setNextState(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1533557-setnextstate
    setNextState():void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1527417-state
    state(): NSControlStateValue;
    setState(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1535822-editable
    editable(): BOOL;
    setEditable(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1529411-selectable
    selectable(): BOOL;
    setSelectable(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1534125-scrollable
    scrollable(): BOOL;
    setScrollable(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1534359-alignment
    alignment(): NSTextAlignment;
    setAlignment(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1526710-font
    font(): NSFont;
    setFont(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1531065-linebreakmode
    lineBreakMode(): NSLineBreakMode;
    setLineBreakMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1526736-truncateslastvisibleline
    truncatesLastVisibleLine(): BOOL;
    setTruncatesLastVisibleLine(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1527479-wraps
    wraps(): BOOL;
    setWraps(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1525503-basewritingdirection
    baseWritingDirection(): NSWritingDirection;
    setBaseWritingDirection(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1534119-attributedstringvalue
    attributedStringValue(): NSAttributedString;
    setAttributedStringValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1535675-allowseditingtextattributes
    allowsEditingTextAttributes(): BOOL;
    setAllowsEditingTextAttributes(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1532380-importsgraphics
    importsGraphics(): BOOL;
    setImportsGraphics(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1535864-setupfieldeditorattributes
    setUpFieldEditorAttributes(textObj: NSText):NSText;
    // doc://com.apple.documentation/documentation/appkit/nscell/1525561-title
    title(): string | NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1524654-action
    action(): SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1535832-target
    target(): id;
    setTarget(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1529179-continuous
    continuous(): BOOL;
    setContinuous(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1528114-sendactionon
    sendActionOn(mask: NSEventMask):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nscell/1526028-image
    image(): NSImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1532348-tag
    tag(): NSInteger;
    setTag(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1531115-formatter
    formatter(): NSFormatter;
    setFormatter(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1531847-defaultmenu
    defaultMenu(): NSMenu;
    setDefaultMenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1530019-menu
    menu(): NSMenu;
    setMenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1535924-menuforevent
    menuForEvent_inRect_ofView(event: NSEvent, cellFrame: NSRect, view: NSView):NSMenu;
    // doc://com.apple.documentation/documentation/appkit/nscell/1527644-compare
    compare(otherCell: NSCell):NSComparisonResult;
    // doc://com.apple.documentation/documentation/appkit/nscell/1525710-acceptsfirstresponder
    acceptsFirstResponder(): BOOL;
    setAcceptsFirstResponder(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1532415-showsfirstresponder
    showsFirstResponder(): BOOL;
    setShowsFirstResponder(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1525857-refusesfirstresponder
    refusesFirstResponder(): BOOL;
    setRefusesFirstResponder(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1534984-performclick
    performClick(sender: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1529915-takeobjectvaluefrom
    takeObjectValueFrom(sender: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1534969-takeintegervaluefrom
    takeIntegerValueFrom(sender: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1533920-takeintvaluefrom
    takeIntValueFrom(sender: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1527148-takestringvaluefrom
    takeStringValueFrom(sender: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1526375-takedoublevaluefrom
    takeDoubleValueFrom(sender: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1535839-takefloatvaluefrom
    takeFloatValueFrom(sender: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1533116-representedobject
    representedObject(): id;
    setRepresentedObject(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1533606-trackmouse
    trackMouse_inRect_ofView_untilMouseUp(event: NSEvent, cellFrame: NSRect, controlView: NSView, flag: BOOL):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscell/1526663-starttrackingat
    startTrackingAt_inView(startPoint: NSPoint, controlView: NSView):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscell/1535599-continuetracking
    continueTracking_at_inView(lastPoint: NSPoint, currentPoint: NSPoint, controlView: NSView):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscell/1534650-stoptracking
    stopTracking_at_inView_mouseIsUp(lastPoint: NSPoint, stopPoint: NSPoint, controlView: NSView, flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1527798-mousedownflags
    mouseDownFlags(): NSInteger;
    setMouseDownFlags(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1530790-preferstrackinguntilmouseup
    prefersTrackingUntilMouseUp(): BOOL;
    setPrefersTrackingUntilMouseUp(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1535611-getperiodicdelay
    getPeriodicDelay_interval(delay: number, interval: number):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1529601-hittestforevent
    hitTestForEvent_inRect_ofView(event: NSEvent, cellFrame: NSRect, controlView: NSView):NSCellHitResult;
    // doc://com.apple.documentation/documentation/appkit/nscell/1524496-resetcursorrect
    resetCursorRect_inView(cellFrame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1532218-keyequivalent
    keyEquivalent(): string | NSString;
    setKeyEquivalent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1532987-draggingimagecomponentswithframe
    draggingImageComponentsWithFrame_inView(frame: NSRect, view: NSView):NSDraggingImageComponent;
    // doc://com.apple.documentation/documentation/appkit/nscell/1524608-drawfocusringmaskwithframe
    drawFocusRingMaskWithFrame_inView(cellFrame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1534929-focusringmaskboundsforframe
    focusRingMaskBoundsForFrame_inView(cellFrame: NSRect, controlView: NSView):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nscell/1525184-defaultfocusringtype
    defaultFocusRingType(): NSFocusRingType;
    setDefaultFocusRingType(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1534132-focusringtype
    focusRingType(): NSFocusRingType;
    setFocusRingType(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1533752-calcdrawinfo
    calcDrawInfo(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1532056-cellsize
    cellSize(): NSSize;
    setCellSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1524792-cellsizeforbounds
    cellSizeForBounds(rect: NSRect):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nscell/1526266-drawingrectforbounds
    drawingRectForBounds(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nscell/1533408-imagerectforbounds
    imageRectForBounds(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nscell/1531281-titlerectforbounds
    titleRectForBounds(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nscell/1530780-controlsize
    controlSize(): NSControlSize;
    setControlSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1535830-drawwithframe
    drawWithFrame_inView(cellFrame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1534018-highlightcolorwithframe
    highlightColorWithFrame_inView(cellFrame: NSRect, controlView: NSView):NSColor;
    // doc://com.apple.documentation/documentation/appkit/nscell/1531274-drawinteriorwithframe
    drawInteriorWithFrame_inView(cellFrame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1535913-controlview
    controlView(): NSView;
    setControlView(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1533933-highlight
    highlight_withFrame_inView(flag: BOOL, cellFrame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1530864-highlighted
    highlighted(): BOOL;
    setHighlighted(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1533600-editwithframe
    editWithFrame_inView_editor_delegate_event(rect: NSRect, controlView: NSView, textObj: NSText, delegate: NSCell, event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1527438-selectwithframe
    selectWithFrame_inView_editor_delegate_start_length(rect: NSRect, controlView: NSView, textObj: NSText, delegate: NSCell, selStart: NSInteger, selLength: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1526617-sendsactiononendediting
    sendsActionOnEndEditing(): BOOL;
    setSendsActionOnEndEditing(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1535574-endediting
    endEditing(textObj: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1535894-wantsnotificationformarkedtext
    wantsNotificationForMarkedText(): BOOL;
    setWantsNotificationForMarkedText(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1532763-fieldeditorforview
    fieldEditorForView(controlView: NSView):NSTextView;
    // doc://com.apple.documentation/documentation/appkit/nscell/1525481-usessinglelinemode
    usesSingleLineMode(): BOOL;
    setUsesSingleLineMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1526362-expansionframewithframe
    expansionFrameWithFrame_inView(cellFrame: NSRect, view: NSView):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nscell/1528566-drawwithexpansionframe
    drawWithExpansionFrame_inView(cellFrame: NSRect, view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1529213-userinterfacelayoutdirection
    userInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection;
    setUserInterfaceLayoutDirection(): void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1560876-setentrytype
    setEntryType(type: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1560897-entrytype
    entryType():NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nscell/1560879-isentryacceptable
    isEntryAcceptable(string: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscell/1560888-setfloatingpointformat
    setFloatingPointFormat_left_right(autoRange: BOOL, leftDigits: NSUInteger, rightDigits: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1560861-settitlewithmnemonic
    setTitleWithMnemonic(stringWithAmpersand: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1560878-mnemonic
    mnemonic():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nscell/1560877-setmnemoniclocation
    setMnemonicLocation(location: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscell/1560903-mnemoniclocation
    mnemonicLocation():NSUInteger;
    // doc://com.apple.documentation/documentation/appkit/nscell/1642242-init
    init():NSCell;
    // doc://com.apple.documentation/documentation/appkit/nscell/1642237-initwithcoder
    initWithCoder(coder: NSCoder):NSCell;
    //
    alloc():NSCell;
    //
    init():NSCell;
  }
}

declare const NSCell: cocoascript.NSCell;
// doc://com.apple.documentation/documentation/appkit/nscontroltintdidchangenotification
declare const NSControlTintDidChangeNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * An active area inside a control.
   * doc://com.apple.documentation/documentation/appkit/nsactioncell
   */
  interface NSActionCell extends NSCell {
    // doc://com.apple.documentation/documentation/appkit/nsactioncell/1807039-setfloatingpointformat
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsactioncell/1807042-floatvalue
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsactioncell/1807044-intvalue
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsactioncell/1807046-integervalue
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsactioncell/1807047-stringvalue
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsactioncell/1807049-setobjectvalue
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsactioncell/1807051-controlview
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsactioncell/1807052-setcontrolview
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsactioncell/1531427-action
    action(): SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nsactioncell/1535837-target
    target(): id;
    setTarget(): void;
    // doc://com.apple.documentation/documentation/appkit/nsactioncell/1535314-tag
    tag(): NSInteger;
    setTag(): void;
    //
    alloc():NSActionCell;
    //
    init():NSActionCell;
  }
}

declare const NSActionCell: cocoascript.NSActionCell;
declare namespace cocoascript {
  /**
   * A view that arranges two or more views in a linear stack running horizontally or vertically.
   * doc://com.apple.documentation/documentation/appkit/nssplitview
   */
  interface NSSplitView extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455306-delegate
    delegate(): NSSplitViewDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455307-arrangesallsubviews
    arrangesAllSubviews(): BOOL;
    setArrangesAllSubviews(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455253-arrangedsubviews
    arrangedSubviews(): NSView;
    setArrangedSubviews(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455295-addarrangedsubview
    addArrangedSubview(view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455321-insertarrangedsubview
    insertArrangedSubview_atIndex(view: NSView, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455271-removearrangedsubview
    removeArrangedSubview(view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455285-adjustsubviews
    adjustSubviews():void;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455311-issubviewcollapsed
    isSubviewCollapsed(subview: NSView):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455287-holdingpriorityforsubviewatindex
    holdingPriorityForSubviewAtIndex(subviewIndex: NSInteger):NSLayoutPriority;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455320-setholdingpriority
    setHoldingPriority_forSubviewAtIndex(priority: NSLayoutPriority, subviewIndex: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455318-vertical
    vertical(): BOOL;
    setVertical(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455291-dividerstyle
    dividerStyle(): NSSplitViewDividerStyle;
    setDividerStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455267-dividercolor
    dividerColor(): NSColor;
    setDividerColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455257-dividerthickness
    dividerThickness(): CGFloat;
    setDividerThickness(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455297-drawdividerinrect
    drawDividerInRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455319-autosavename
    autosaveName(): NSSplitViewAutosaveName;
    setAutosaveName(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455278-minpossiblepositionofdivideratin
    minPossiblePositionOfDividerAtIndex(dividerIndex: NSInteger):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455261-maxpossiblepositionofdivideratin
    maxPossiblePositionOfDividerAtIndex(dividerIndex: NSInteger):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455316-setposition
    setPosition_ofDividerAtIndex(position: CGFloat, dividerIndex: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455275-ispanesplitter
    isPaneSplitter():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssplitview/1455309-setispanesplitter
    setIsPaneSplitter(flag: BOOL):void;
    //
    alloc():NSSplitView;
    //
    init():NSSplitView;
  }
}

declare const NSSplitView: cocoascript.NSSplitView;
// doc://com.apple.documentation/documentation/appkit/nssplitviewwillresizesubviewsnotification
declare const NSSplitViewWillResizeSubviewsNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nssplitviewdidresizesubviewsnotification
declare const NSSplitViewDidResizeSubviewsNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * A view that arranges an array of views horizontally or vertically and updates their placement and sizing when the window size changes.
   * doc://com.apple.documentation/documentation/appkit/nsstackview
   */
  interface NSStackView extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488929-stackviewwithviews
    stackViewWithViews(views: NSView):NSStackView;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488946-delegate
    delegate(): NSStackViewDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488897-addview
    addView_inGravity(view: NSView, gravity: NSStackViewGravity):void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488933-insertview
    insertView_atIndex_inGravity(view: NSView, index: NSUInteger, gravity: NSStackViewGravity):void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488883-setviews
    setViews_inGravity(views: NSView, gravity: NSStackViewGravity):void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488916-removeview
    removeView(view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488899-addarrangedsubview
    addArrangedSubview(view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488896-insertarrangedsubview
    insertArrangedSubview_atIndex(view: NSView, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488925-removearrangedsubview
    removeArrangedSubview(view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488894-arrangedsubviews
    arrangedSubviews(): NSView;
    setArrangedSubviews(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488914-views
    views(): NSView;
    setViews(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488876-viewsingravity
    viewsInGravity(gravity: NSStackViewGravity):NSView;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488952-detachedviews
    detachedViews(): NSView;
    setDetachedViews(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488936-clippingresistancepriorityforori
    clippingResistancePriorityForOrientation(orientation: NSLayoutConstraintOrientation):NSLayoutPriority;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488912-huggingpriorityfororientation
    huggingPriorityForOrientation(orientation: NSLayoutConstraintOrientation):NSLayoutPriority;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488950-orientation
    orientation(): NSUserInterfaceLayoutOrientation;
    setOrientation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488906-alignment
    alignment(): NSLayoutAttribute;
    setAlignment(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488945-spacing
    spacing(): CGFloat;
    setSpacing(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488931-edgeinsets
    edgeInsets(): NSEdgeInsets;
    setEdgeInsets(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488957-hasequalspacing
    hasEqualSpacing(): BOOL;
    setHasEqualSpacing(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488882-distribution
    distribution(): NSStackViewDistribution;
    setDistribution(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488888-customspacingafterview
    customSpacingAfterView(view: NSView):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488874-setcustomspacing
    setCustomSpacing_afterView(spacing: CGFloat, view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488934-visibilitypriorityforview
    visibilityPriorityForView(view: NSView):NSStackViewVisibilityPriority;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488890-setvisibilitypriority
    setVisibilityPriority_forView(priority: NSStackViewVisibilityPriority, view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488940-detacheshiddenviews
    detachesHiddenViews(): BOOL;
    setDetachesHiddenViews(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488880-setclippingresistancepriority
    setClippingResistancePriority_forOrientation(clippingResistancePriority: NSLayoutPriority, orientation: NSLayoutConstraintOrientation):void;
    // doc://com.apple.documentation/documentation/appkit/nsstackview/1488904-sethuggingpriority
    setHuggingPriority_forOrientation(huggingPriority: NSLayoutPriority, orientation: NSLayoutConstraintOrientation):void;
    //
    alloc():NSStackView;
    //
    init():NSStackView;
  }
}

declare const NSStackView: cocoascript.NSStackView;
declare namespace cocoascript {
  /**
   * A multipage interface that displays one page at a time.
   * doc://com.apple.documentation/documentation/appkit/nstabview
   */
  interface NSTabView extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391615-delegate
    delegate(): NSTabViewDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391607-addtabviewitem
    addTabViewItem(tabViewItem: NSTabViewItem):void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391584-inserttabviewitem
    insertTabViewItem_atIndex(tabViewItem: NSTabViewItem, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391641-removetabviewitem
    removeTabViewItem(tabViewItem: NSTabViewItem):void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391604-indexoftabviewitem
    indexOfTabViewItem(tabViewItem: NSTabViewItem):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391586-indexoftabviewitemwithidentifier
    indexOfTabViewItemWithIdentifier(identifier: NSTabView):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391596-numberoftabviewitems
    numberOfTabViewItems(): NSInteger;
    setNumberOfTabViewItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391637-tabviewitematindex
    tabViewItemAtIndex(index: NSInteger):NSTabViewItem;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391613-tabviewitems
    tabViewItems(): NSTabViewItem;
    setTabViewItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391602-tabviewtype
    tabViewType(): NSTabViewType;
    setTabViewType(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/2097105-tabposition
    tabPosition(): NSTabPosition;
    setTabPosition(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/2097112-tabviewbordertype
    tabViewBorderType(): NSTabViewBorderType;
    setTabViewBorderType(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391627-selectfirsttabviewitem
    selectFirstTabViewItem(sender: NSTabView):void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391635-selectlasttabviewitem
    selectLastTabViewItem(sender: NSTabView):void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391639-selectnexttabviewitem
    selectNextTabViewItem(sender: NSTabView):void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391594-selectprevioustabviewitem
    selectPreviousTabViewItem(sender: NSTabView):void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391649-selecttabviewitem
    selectTabViewItem(tabViewItem: NSTabViewItem):void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391590-selecttabviewitematindex
    selectTabViewItemAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391629-selecttabviewitemwithidentifier
    selectTabViewItemWithIdentifier(identifier: NSTabView):void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391625-selectedtabviewitem
    selectedTabViewItem(): NSTabViewItem;
    setSelectedTabViewItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391653-takeselectedtabviewitemfromsende
    takeSelectedTabViewItemFromSender(sender: NSTabView):void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391617-font
    font(): NSFont;
    setFont(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391647-controltint
    controlTint(): NSControlTint;
    setControlTint(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391588-drawsbackground
    drawsBackground(): BOOL;
    setDrawsBackground(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391598-minimumsize
    minimumSize(): NSSize;
    setMinimumSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391659-contentrect
    contentRect(): NSRect;
    setContentRect(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391633-controlsize
    controlSize(): NSControlSize;
    setControlSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391645-allowstruncatedlabels
    allowsTruncatedLabels(): BOOL;
    setAllowsTruncatedLabels(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabview/1391606-tabviewitematpoint
    tabViewItemAtPoint(point: NSPoint):NSTabViewItem;
    //
    alloc():NSTabView;
    //
    init():NSTabView;
  }
}

declare const NSTabView: cocoascript.NSTabView;
declare namespace cocoascript {
  /**
   * A view that draws text and handles user interactions with that text.
   * doc://com.apple.documentation/documentation/appkit/nstextview
   */
  interface NSTextView extends NSText {
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449347-initwithframe
    initWithFrame_textContainer(frameRect: NSRect, container: NSTextContainer):NSTextView;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449262-initwithframe
    initWithFrame(frameRect: NSRect):NSTextView;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449521-delegate
    delegate(): NSTextViewDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449507-registerforservices
    registerForServices():void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449364-textcontainer
    textContainer(): NSTextContainer;
    setTextContainer(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449479-replacetextcontainer
    replaceTextContainer(newContainer: NSTextContainer):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449168-textcontainerinset
    textContainerInset(): NSSize;
    setTextContainerInset(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449477-textcontainerorigin
    textContainerOrigin(): NSPoint;
    setTextContainerOrigin(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449546-invalidatetextcontainerorigin
    invalidateTextContainerOrigin():void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449148-layoutmanager
    layoutManager(): NSLayoutManager;
    setLayoutManager(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449196-textstorage
    textStorage(): NSTextStorage;
    setTextStorage(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449501-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449530-drawsbackground
    drawsBackground(): BOOL;
    setDrawsBackground(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449397-allowsdocumentbackgroundcolorcha
    allowsDocumentBackgroundColorChange(): BOOL;
    setAllowsDocumentBackgroundColorChange(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449475-changedocumentbackgroundcolor
    changeDocumentBackgroundColor(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449279-setneedsdisplayinrect
    setNeedsDisplayInRect_avoidAdditionalLayout(rect: NSRect, flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449152-shoulddrawinsertionpoint
    shouldDrawInsertionPoint(): BOOL;
    setShouldDrawInsertionPoint(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449232-drawinsertionpointinrect
    drawInsertionPointInRect_color_turnedOn(rect: NSRect, color: NSColor, flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449135-drawviewbackgroundinrect
    drawViewBackgroundInRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449230-setconstrainedframesize
    setConstrainedFrameSize(desiredSize: NSSize):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449202-cleanupafterdragoperation
    cleanUpAfterDragOperation():void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449540-showfindindicatorforrange
    showFindIndicatorForRange(charRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449174-inserttext
    insertText(insertString: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449370-allowedinputsourcelocales
    allowedInputSourceLocales(): string | NSString;
    setAllowedInputSourceLocales(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449450-allowsundo
    allowsUndo(): BOOL;
    setAllowsUndo(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449345-editable
    editable(): BOOL;
    setEditable(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449297-selectable
    selectable(): BOOL;
    setSelectable(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449156-fieldeditor
    fieldEditor(): BOOL;
    setFieldEditor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449538-richtext
    richText(): BOOL;
    setRichText(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449266-importsgraphics
    importsGraphics(): BOOL;
    setImportsGraphics(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449146-setbasewritingdirection
    setBaseWritingDirection_range(writingDirection: NSWritingDirection, range: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449465-togglebasewritingdirection
    toggleBaseWritingDirection(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449271-defaultparagraphstyle
    defaultParagraphStyle(): NSParagraphStyle;
    setDefaultParagraphStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449386-outline
    outline(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449425-allowsimageediting
    allowsImageEditing(): BOOL;
    setAllowsImageEditing(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449258-automaticquotesubstitutionenable
    automaticQuoteSubstitutionEnabled(): BOOL;
    setAutomaticQuoteSubstitutionEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449444-toggleautomaticquotesubstitution
    toggleAutomaticQuoteSubstitution(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449170-automaticlinkdetectionenabled
    automaticLinkDetectionEnabled(): BOOL;
    setAutomaticLinkDetectionEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449353-toggleautomaticlinkdetection
    toggleAutomaticLinkDetection(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449204-displayslinktooltips
    displaysLinkToolTips(): BOOL;
    setDisplaysLinkToolTips(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449218-usesruler
    usesRuler(): BOOL;
    setUsesRuler(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449406-rulervisible
    rulerVisible(): BOOL;
    setRulerVisible(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449407-usesinspectorbar
    usesInspectorBar(): BOOL;
    setUsesInspectorBar(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449129-selectedranges
    selectedRanges(): NSValue;
    setSelectedRanges(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449256-setselectedrange
    setSelectedRange(charRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449462-setselectedrange
    setSelectedRange_affinity_stillSelecting(charRange: NSRange, affinity: NSSelectionAffinity, stillSelectingFlag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449208-setselectedranges
    setSelectedRanges_affinity_stillSelecting(ranges: NSValue, affinity: NSSelectionAffinity, stillSelectingFlag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449291-selectionaffinity
    selectionAffinity(): NSSelectionAffinity;
    setSelectionAffinity(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449165-selectiongranularity
    selectionGranularity(): NSSelectionGranularity;
    setSelectionGranularity(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449309-insertionpointcolor
    insertionPointColor(): NSColor;
    setInsertionPointColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449268-updateinsertionpointstateandrest
    updateInsertionPointStateAndRestartTimer(restartFlag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449270-selectedtextattributes
    selectedTextAttributes(): id;
    setSelectedTextAttributes(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449179-markedtextattributes
    markedTextAttributes(): id;
    setMarkedTextAttributes(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449452-linktextattributes
    linkTextAttributes(): id;
    setLinkTextAttributes(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449505-characterindexforinsertionatpoin
    characterIndexForInsertionAtPoint(point: NSPoint):NSUInteger;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449131-preferredpasteboardtypefromarray
    preferredPasteboardTypeFromArray_restrictedToTypesFromArray(availableTypes: NSPasteboardType, allowedTypes: NSPasteboardType):NSPasteboardType;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449469-readselectionfrompasteboard
    readSelectionFromPasteboard(pboard: NSPasteboard):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449190-readselectionfrompasteboard
    readSelectionFromPasteboard_type(pboard: NSPasteboard, type: NSPasteboardType):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449361-readablepasteboardtypes
    readablePasteboardTypes(): NSPasteboardType;
    setReadablePasteboardTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449222-writablepasteboardtypes
    writablePasteboardTypes(): NSPasteboardType;
    setWritablePasteboardTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449187-writeselectiontopasteboard
    writeSelectionToPasteboard_type(pboard: NSPasteboard, type: NSPasteboardType):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449277-writeselectiontopasteboard
    writeSelectionToPasteboard_types(pboard: NSPasteboard, types: NSPasteboardType):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449301-validrequestorforsendtype
    validRequestorForSendType_returnType(sendType: NSPasteboardType, returnType: NSPasteboardType):NSTextView;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449515-alignjustified
    alignJustified(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449216-changeattributes
    changeAttributes(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449282-changecolor
    changeColor(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449536-setalignment
    setAlignment_range(alignment: NSTextAlignment, range: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449487-typingattributes
    typingAttributes(): id;
    setTypingAttributes(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449491-usestandardkerning
    useStandardKerning(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449289-lowerbaseline
    lowerBaseline(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449198-raisebaseline
    raiseBaseline(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449464-turnoffkerning
    turnOffKerning(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449183-loosenkerning
    loosenKerning(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449137-tightenkerning
    tightenKerning(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449144-usestandardligatures
    useStandardLigatures(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449436-turnoffligatures
    turnOffLigatures(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449213-useallligatures
    useAllLigatures(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449292-toggletraditionalcharactershape
    toggleTraditionalCharacterShape(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449497-clickedonlink
    clickedOnLink_atIndex(link: NSTextView, charIndex: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449250-pasteasplaintext
    pasteAsPlainText(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449395-pasteasrichtext
    pasteAsRichText(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449384-breakundocoalescing
    breakUndoCoalescing():void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449368-coalescingundo
    coalescingUndo(): BOOL;
    setCoalescingUndo(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449401-updatefontpanel
    updateFontPanel():void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449323-updateruler
    updateRuler():void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449234-acceptabledragtypes
    acceptableDragTypes(): NSPasteboardType;
    setAcceptableDragTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449181-updatedragtyperegistration
    updateDragTypeRegistration():void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449188-selectionrangeforproposedrange
    selectionRangeForProposedRange_granularity(proposedCharRange: NSRange, granularity: NSSelectionGranularity):NSRange;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449392-rangeforusercharacterattributech
    rangeForUserCharacterAttributeChange(): NSRange;
    setRangeForUserCharacterAttributeChange(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449503-rangesforusercharacterattributec
    rangesForUserCharacterAttributeChange(): NSValue;
    setRangesForUserCharacterAttributeChange(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449252-rangeforuserparagraphattributech
    rangeForUserParagraphAttributeChange(): NSRange;
    setRangeForUserParagraphAttributeChange(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449161-rangesforuserparagraphattributec
    rangesForUserParagraphAttributeChange(): NSValue;
    setRangesForUserParagraphAttributeChange(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449315-rangeforusertextchange
    rangeForUserTextChange(): NSRange;
    setRangeForUserTextChange(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449434-rangesforusertextchange
    rangesForUserTextChange(): NSValue;
    setRangesForUserTextChange(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449532-shouldchangetextinrange
    shouldChangeTextInRange_replacementString(affectedCharRange: NSRange, replacementString: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449311-shouldchangetextinranges
    shouldChangeTextInRanges_replacementStrings(affectedRanges: NSValue, replacementStrings: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449296-didchangetext
    didChangeText():void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449236-smartinsertdeleteenabled
    smartInsertDeleteEnabled(): BOOL;
    setSmartInsertDeleteEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449428-smartdeleterangeforproposedrange
    smartDeleteRangeForProposedRange(proposedCharRange: NSRange):NSRange;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449467-smartinsertafterstringforstring
    smartInsertAfterStringForString_replacingRange(pasteString: string | NSString, charRangeToReplace: NSRange):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449242-smartinsertbeforestringforstring
    smartInsertBeforeStringForString_replacingRange(pasteString: string | NSString, charRangeToReplace: NSRange):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449544-smartinsertforstring
    smartInsertForString_replacingRange_beforeString_afterString(pasteString: string | NSString, charRangeToReplace: NSRange, beforeString: string | NSString, afterString: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449273-togglesmartinsertdelete
    toggleSmartInsertDelete(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449430-continuousspellcheckingenabled
    continuousSpellCheckingEnabled(): BOOL;
    setContinuousSpellCheckingEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449513-spellcheckerdocumenttag
    spellCheckerDocumentTag(): NSInteger;
    setSpellCheckerDocumentTag(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449471-togglecontinuousspellchecking
    toggleContinuousSpellChecking(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449166-grammarcheckingenabled
    grammarCheckingEnabled(): BOOL;
    setGrammarCheckingEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449393-togglegrammarchecking
    toggleGrammarChecking(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449493-setspellingstate
    setSpellingState_range(value: NSInteger, charRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449150-orderfrontsharingservicepicker
    orderFrontSharingServicePicker(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449159-rulerview
    rulerView_didMoveMarker(ruler: NSRulerView, marker: NSRulerMarker):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449287-rulerview
    rulerView_willMoveMarker_toLocation(ruler: NSRulerView, marker: NSRulerMarker, location: CGFloat):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449390-rulerview
    rulerView_shouldMoveMarker(ruler: NSRulerView, marker: NSRulerMarker):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449299-rulerview
    rulerView_didRemoveMarker(ruler: NSRulerView, marker: NSRulerMarker):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449366-rulerview
    rulerView_shouldRemoveMarker(ruler: NSRulerView, marker: NSRulerMarker):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449523-rulerview
    rulerView_didAddMarker(ruler: NSRulerView, marker: NSRulerMarker):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449446-rulerview
    rulerView_shouldAddMarker(ruler: NSRulerView, marker: NSRulerMarker):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449351-rulerview
    rulerView_willAddMarker_atLocation(ruler: NSRulerView, marker: NSRulerMarker, location: CGFloat):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449399-rulerview
    rulerView_handleMouseDown(ruler: NSRulerView, event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449423-dragimageforselectionwithevent
    dragImageForSelectionWithEvent_origin(event: NSEvent, origin: NSPointPointer):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449176-dragoperationfordragginginfo
    dragOperationForDraggingInfo_type(dragInfo: NSDraggingInfo, type: NSPasteboardType):NSDragOperation;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449413-dragselectionwithevent
    dragSelectionWithEvent_offset_slideBack(event: NSEvent, mouseOffset: NSSize, slideBack: BOOL):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449163-acceptsglyphinfo
    acceptsGlyphInfo(): BOOL;
    setAcceptsGlyphInfo(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449519-startspeaking
    startSpeaking(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449172-stopspeaking
    stopSpeaking(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449534-usesfontpanel
    usesFontPanel(): BOOL;
    setUsesFontPanel(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449293-usesfindpanel
    usesFindPanel(): BOOL;
    setUsesFindPanel(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449525-performfindpanelaction
    performFindPanelAction(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449238-orderfrontlinkpanel
    orderFrontLinkPanel(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449349-orderfrontlistpanel
    orderFrontListPanel(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449438-orderfrontspacingpanel
    orderFrontSpacingPanel(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449442-orderfronttablepanel
    orderFrontTablePanel(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449327-orderfrontsubstitutionspanel
    orderFrontSubstitutionsPanel(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449359-complete
    complete(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449405-completionsforpartialwordrange
    completionsForPartialWordRange_indexOfSelectedItem(charRange: NSRange, index: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449448-insertcompletion
    insertCompletion_forPartialWordRange_movement_isFinal(word: string | NSString, charRange: NSRange, movement: NSInteger, flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449329-rangeforusercompletion
    rangeForUserCompletion(): NSRange;
    setRangeForUserCompletion(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449440-checktextindocument
    checkTextInDocument(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449382-checktextinselection
    checkTextInSelection(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449240-checktextinrange
    checkTextInRange_types_options(range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449473-handletextcheckingresults
    handleTextCheckingResults_forRange_types_options_orthography_wordCount(results: NSTextCheckingResult, range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSTextView, orthography: NSOrthography, wordCount: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449529-enabledtextcheckingtypes
    enabledTextCheckingTypes(): NSTextCheckingTypes;
    setEnabledTextCheckingTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449403-automaticdashsubstitutionenabled
    automaticDashSubstitutionEnabled(): BOOL;
    setAutomaticDashSubstitutionEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449305-toggleautomaticdashsubstitution
    toggleAutomaticDashSubstitution(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449192-automaticdatadetectionenabled
    automaticDataDetectionEnabled(): BOOL;
    setAutomaticDataDetectionEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449499-toggleautomaticdatadetection
    toggleAutomaticDataDetection(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449254-automaticspellingcorrectionenabl
    automaticSpellingCorrectionEnabled(): BOOL;
    setAutomaticSpellingCorrectionEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449178-toggleautomaticspellingcorrectio
    toggleAutomaticSpellingCorrection(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449210-automatictextreplacementenabled
    automaticTextReplacementEnabled(): BOOL;
    setAutomaticTextReplacementEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449200-toggleautomatictextreplacement
    toggleAutomaticTextReplacement(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1807130-becomefirstresponder
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1807135-resignfirstresponder
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449409-updatequicklookpreviewpanel
    updateQuickLookPreviewPanel():void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449415-togglequicklookpreviewpanel
    toggleQuickLookPreviewPanel(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449426-quicklookpreviewableitemsinrange
    quickLookPreviewableItemsInRanges(ranges: NSValue):QLPreviewItem;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449286-changelayoutorientation
    changeLayoutOrientation(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449483-setlayoutorientation
    setLayoutOrientation(orientation: NSTextLayoutOrientation):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449456-usesfindbar
    usesFindBar(): BOOL;
    setUsesFindBar(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449458-incrementalsearchingenabled
    incrementalSearchingEnabled(): BOOL;
    setIncrementalSearchingEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449489-initwithcoder
    initWithCoder(coder: NSCoder):NSTextView;
    // doc://com.apple.documentation/documentation/appkit/nstextview/2544680-allowscharacterpickertouchbarite
    allowsCharacterPickerTouchBarItem(): BOOL;
    setAllowsCharacterPickerTouchBarItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/2544750-candidatelisttouchbaritem
    candidateListTouchBarItem(): NSCandidateListTouchBarItem;
    setCandidateListTouchBarItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/2544655-automatictextcompletionenabled
    automaticTextCompletionEnabled(): BOOL;
    setAutomaticTextCompletionEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/3237223-usesadaptivecolormappingfordarka
    usesAdaptiveColorMappingForDarkAppearance(): BOOL;
    setUsesAdaptiveColorMappingForDarkAppearance(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/1449357-usesrolloverbuttonforselection
    usesRolloverButtonForSelection(): BOOL;
    setUsesRolloverButtonForSelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/2269433-stronglyreferencestextstorage
    stronglyReferencesTextStorage(): BOOL;
    setStronglyReferencesTextStorage(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/2990526-performvalidatedreplacementinran
    performValidatedReplacementInRange_withAttributedString(range: NSRange, attributedString: NSAttributedString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextview/2544841-toggleautomatictextcompletion
    toggleAutomaticTextCompletion(sender: NSTextView):void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/2544833-updatecandidates
    updateCandidates():void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/2544676-updatetexttouchbaritems
    updateTextTouchBarItems():void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/2544834-updatetouchbaritemidentifiers
    updateTouchBarItemIdentifiers():void;
    // doc://com.apple.documentation/documentation/appkit/nstextview/2990525-fieldeditor
    fieldEditor():NSTextView;
    // doc://com.apple.documentation/documentation/appkit/nstextview/2990527-scrollabledocumentcontenttextvie
    scrollableDocumentContentTextView():NSScrollView;
    // doc://com.apple.documentation/documentation/appkit/nstextview/2990528-scrollableplaindocumentcontentte
    scrollablePlainDocumentContentTextView():NSScrollView;
    // doc://com.apple.documentation/documentation/appkit/nstextview/2990529-scrollabletextview
    scrollableTextView():NSScrollView;
    //
    alloc():NSTextView;
    //
    init():NSTextView;
  }
}

declare const NSTextView: cocoascript.NSTextView;
// doc://com.apple.documentation/documentation/appkit/nstextviewdidchangeselectionnotification
declare const NSTextViewDidChangeSelectionNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nstextviewwillchangenotifyingtextviewnotification
declare const NSTextViewWillChangeNotifyingTextViewNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nstextviewdidchangetypingattributesnotification
declare const NSTextViewDidChangeTypingAttributesNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * A view that displays OpenGL content in a view.
   * doc://com.apple.documentation/documentation/appkit/nsopenglview
   */
  interface NSOpenGLView extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nsopenglview/1414931-initwithframe
    initWithFrame_pixelFormat(frameRect: NSRect, format: NSOpenGLPixelFormat):NSOpenGLView;
    // doc://com.apple.documentation/documentation/appkit/nsopenglview/1414944-defaultpixelformat
    defaultPixelFormat():NSOpenGLPixelFormat;
    // doc://com.apple.documentation/documentation/appkit/nsopenglview/1414946-pixelformat
    pixelFormat(): NSOpenGLPixelFormat;
    setPixelFormat(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglview/1414940-prepareopengl
    prepareOpenGL():void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglview/1414936-clearglcontext
    clearGLContext():void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglview/1414942-openglcontext
    openGLContext(): NSOpenGLContext;
    setOpenGLContext(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglview/1414948-reshape
    reshape():void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglview/1414933-update
    update():void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglview/1807224-isopaque
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglview/1807226-wantsextendeddynamicrangeopengls
    wantsExtendedDynamicRangeOpenGLSurface(): BOOL;
    setWantsExtendedDynamicRangeOpenGLSurface(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglview/3172203-wantsbestresolutionopenglsurface
    wantsBestResolutionOpenGLSurface(): BOOL;
    setWantsBestResolutionOpenGLSurface(): void;
    //
    alloc():NSOpenGLView;
    //
    init():NSOpenGLView;
  }
}

declare const NSOpenGLView: cocoascript.NSOpenGLView;
declare namespace cocoascript {
  /**
   * A control that defines an area on the screen that can be used to trigger actions.
   * doc://com.apple.documentation/documentation/appkit/nsbutton
   */
  interface NSButton extends NSControl {
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1644525-checkboxwithtitle
    checkboxWithTitle_target_action(title: string | NSString, target: NSButton, action: SEL):NSButton;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1644659-buttonwithimage
    buttonWithImage_target_action(image: NSImage, target: NSButton, action: SEL):NSButton;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1644340-radiobuttonwithtitle
    radioButtonWithTitle_target_action(title: string | NSString, target: NSButton, action: SEL):NSButton;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1644719-buttonwithtitle
    buttonWithTitle_image_target_action(title: string | NSString, image: NSImage, target: NSButton, action: SEL):NSButton;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1644256-buttonwithtitle
    buttonWithTitle_target_action(title: string | NSString, target: NSButton, action: SEL):NSButton;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1524983-setbuttontype
    setButtonType(type: NSButtonType):void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1524817-getperiodicdelay
    getPeriodicDelay_interval(delay: number, interval: number):void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1526612-setperiodicdelay
    setPeriodicDelay_interval(delay: number, interval: number):void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/3000781-contenttintcolor
    contentTintColor(): NSColor;
    setContentTintColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/3622469-hasdestructiveaction
    hasDestructiveAction(): BOOL;
    setHasDestructiveAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1529588-alternatetitle
    alternateTitle(): string | NSString;
    setAlternateTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1524640-attributedtitle
    attributedTitle(): NSAttributedString;
    setAttributedTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1526723-attributedalternatetitle
    attributedAlternateTitle(): NSAttributedString;
    setAttributedAlternateTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1524430-title
    title(): string | NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1579931-settitlewithmnemonic
    setTitleWithMnemonic(stringWithAmpersand: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1530910-sound
    sound(): NSSound;
    setSound(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1532300-springloaded
    springLoaded(): BOOL;
    setSpringLoaded(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1534413-maxacceleratorlevel
    maxAcceleratorLevel(): NSInteger;
    setMaxAcceleratorLevel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1534221-image
    image(): NSImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1533935-alternateimage
    alternateImage(): NSImage;
    setAlternateImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1526778-imageposition
    imagePosition(): NSCellImagePosition;
    setImagePosition(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1525565-bordered
    bordered(): BOOL;
    setBordered(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1529659-transparent
    transparent(): BOOL;
    setTransparent(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1527022-bezelstyle
    bezelStyle(): NSBezelStyle;
    setBezelStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/2561000-bezelcolor
    bezelColor(): NSColor;
    setBezelColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1532248-showsborderonlywhilemouseinside
    showsBorderOnlyWhileMouseInside(): BOOL;
    setShowsBorderOnlyWhileMouseInside(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/2092414-imagehugstitle
    imageHugsTitle(): BOOL;
    setImageHugsTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/2202284-imagescaling
    imageScaling(): NSImageScaling;
    setImageScaling(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/2952061-activecompressionoptions
    activeCompressionOptions(): NSUserInterfaceCompressionOptions;
    setActiveCompressionOptions(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/2952060-compresswithprioritizedcompressi
    compressWithPrioritizedCompressionOptions(prioritizedOptions: NSUserInterfaceCompressionOptions):void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/2952059-minimumsizewithprioritizedcompre
    minimumSizeWithPrioritizedCompressionOptions(prioritizedOptions: NSUserInterfaceCompressionOptions):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1528670-allowsmixedstate
    allowsMixedState(): BOOL;
    setAllowsMixedState(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1528907-state
    state(): NSControlStateValue;
    setState(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1530594-setnextstate
    setNextState():void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1534156-highlight
    highlight(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1525368-keyequivalent
    keyEquivalent(): string | NSString;
    setKeyEquivalent(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1532670-keyequivalentmodifiermask
    keyEquivalentModifierMask(): NSEventModifierFlags;
    setKeyEquivalentModifierMask(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/1524423-performkeyequivalent
    performKeyEquivalent(key: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbutton/3667453-symbolconfiguration
    symbolConfiguration(): NSImageSymbolConfiguration;
    setSymbolConfiguration(): void;
    //
    alloc():NSButton;
    //
    init():NSButton;
  }
}

declare const NSButton: cocoascript.NSButton;
declare namespace cocoascript {
  /**
   * A control that displays a color value and lets the user change that color value.
   * doc://com.apple.documentation/documentation/appkit/nscolorwell
   */
  interface NSColorWell extends NSControl {
    // doc://com.apple.documentation/documentation/appkit/nscolorwell/1534546-color
    color(): NSColor;
    setColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorwell/1524407-takecolorfrom
    takeColorFrom(sender: NSColorWell):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorwell/1527152-activate
    activate(exclusive: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorwell/1528698-active
    active(): BOOL;
    setActive(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorwell/1524493-deactivate
    deactivate():void;
    // doc://com.apple.documentation/documentation/appkit/nscolorwell/1528015-bordered
    bordered(): BOOL;
    setBordered(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorwell/1530268-drawwellinside
    drawWellInside(insideRect: NSRect):void;
    //
    alloc():NSColorWell;
    //
    init():NSColorWell;
  }
}

declare const NSColorWell: cocoascript.NSColorWell;
declare namespace cocoascript {
  /**
   * A display of image data from an
   * doc://com.apple.documentation/documentation/appkit/nsimageview
   */
  interface NSImageView extends NSControl {
    // doc://com.apple.documentation/documentation/appkit/nsimageview/1404952-image
    image(): NSImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimageview/1404948-imageframestyle
    imageFrameStyle(): NSImageFrameStyle;
    setImageFrameStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimageview/1404963-imagealignment
    imageAlignment(): NSImageAlignment;
    setImageAlignment(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimageview/1404956-imagescaling
    imageScaling(): NSImageScaling;
    setImageScaling(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimageview/1404950-animates
    animates(): BOOL;
    setAnimates(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimageview/1404954-editable
    editable(): BOOL;
    setEditable(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimageview/1404961-allowscutcopypaste
    allowsCutCopyPaste(): BOOL;
    setAllowsCutCopyPaste(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimageview/1644708-imageviewwithimage
    imageViewWithImage(image: NSImage):NSImageView;
    // doc://com.apple.documentation/documentation/appkit/nsimageview/3000783-contenttintcolor
    contentTintColor(): NSColor;
    setContentTintColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimageview/3667456-symbolconfiguration
    symbolConfiguration(): NSImageSymbolConfiguration;
    setSymbolConfiguration(): void;
    //
    alloc():NSImageView;
    //
    init():NSImageView;
  }
}

declare const NSImageView: cocoascript.NSImageView;
declare namespace cocoascript {
  /**
   * A visual representation of a level or quantity, using discrete values.
   * doc://com.apple.documentation/documentation/appkit/nslevelindicator
   */
  interface NSLevelIndicator extends NSControl {
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/1388829-minvalue
    minValue(): number;
    setMinValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/1388839-maxvalue
    maxValue(): number;
    setMaxValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/1388835-warningvalue
    warningValue(): number;
    setWarningValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/1388821-criticalvalue
    criticalValue(): number;
    setCriticalValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/1388837-tickmarkposition
    tickMarkPosition(): NSTickMarkPosition;
    setTickMarkPosition(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/1388827-numberoftickmarks
    numberOfTickMarks(): NSInteger;
    setNumberOfTickMarks(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/1388819-numberofmajortickmarks
    numberOfMajorTickMarks(): NSInteger;
    setNumberOfMajorTickMarks(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/1388823-tickmarkvalueatindex
    tickMarkValueAtIndex(index: NSInteger):number;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/1388825-rectoftickmarkatindex
    rectOfTickMarkAtIndex(index: NSInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/1388833-levelindicatorstyle
    levelIndicatorStyle(): NSLevelIndicatorStyle;
    setLevelIndicatorStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/2902327-ratingimage
    ratingImage(): NSImage;
    setRatingImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/2902322-drawstieredcapacitylevels
    drawsTieredCapacityLevels(): BOOL;
    setDrawsTieredCapacityLevels(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/2902325-fillcolor
    fillColor(): NSColor;
    setFillColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/2902307-warningfillcolor
    warningFillColor(): NSColor;
    setWarningFillColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/2902316-criticalfillcolor
    criticalFillColor(): NSColor;
    setCriticalFillColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/2902328-ratingplaceholderimage
    ratingPlaceholderImage(): NSImage;
    setRatingPlaceholderImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/2902323-placeholdervisibility
    placeholderVisibility(): NSLevelIndicatorPlaceholderVisibility;
    setPlaceholderVisibility(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicator/2919732-editable
    editable(): BOOL;
    setEditable(): void;
    //
    alloc():NSLevelIndicator;
    //
    init():NSLevelIndicator;
  }
}

declare const NSLevelIndicator: cocoascript.NSLevelIndicator;
declare namespace cocoascript {
  /**
   * A control for selecting an item from a list.
   * doc://com.apple.documentation/documentation/appkit/nspopupbutton
   */
  interface NSPopUpButton extends NSButton {
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1524562-initwithframe
    initWithFrame_pullsDown(buttonFrame: NSRect, flag: BOOL):NSPopUpButton;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1532070-pullsdown
    pullsDown(): BOOL;
    setPullsDown(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1530543-autoenablesitems
    autoenablesItems(): BOOL;
    setAutoenablesItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1529500-additemwithtitle
    addItemWithTitle(title: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1532518-additemswithtitles
    addItemsWithTitles(itemTitles: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1533750-insertitemwithtitle
    insertItemWithTitle_atIndex(title: string | NSString, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1534430-removeallitems
    removeAllItems():void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1530675-removeitemwithtitle
    removeItemWithTitle(title: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1525241-removeitematindex
    removeItemAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1526197-selecteditem
    selectedItem(): NSMenuItem;
    setSelectedItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1534038-titleofselecteditem
    titleOfSelectedItem(): string | NSString;
    setTitleOfSelectedItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1534134-indexofselecteditem
    indexOfSelectedItem(): NSInteger;
    setIndexOfSelectedItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1807212-objectvalue
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1577134-selectedtag
    selectedTag(): NSInteger;
    setSelectedTag(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1527162-selectitem
    selectItem(item: NSMenuItem):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1534906-selectitematindex
    selectItemAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1528181-selectitemwithtag
    selectItemWithTag(tag: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1525666-selectitemwithtitle
    selectItemWithTitle(title: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1807219-setobjectvalue
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1535480-menu
    menu(): NSMenu;
    setMenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1534959-numberofitems
    numberOfItems(): NSInteger;
    setNumberOfItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1535361-itemarray
    itemArray(): NSMenuItem;
    setItemArray(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1535860-itematindex
    itemAtIndex(index: NSInteger):NSMenuItem;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1524908-itemtitleatindex
    itemTitleAtIndex(index: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1529271-itemtitles
    itemTitles(): string | NSString;
    setItemTitles(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1524680-itemwithtitle
    itemWithTitle(title: string | NSString):NSMenuItem;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1535371-lastitem
    lastItem(): NSMenuItem;
    setLastItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1529708-indexofitem
    indexOfItem(item: NSMenuItem):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1534140-indexofitemwithtag
    indexOfItemWithTag(tag: NSInteger):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1535406-indexofitemwithtitle
    indexOfItemWithTitle(title: string | NSString):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1533993-indexofitemwithrepresentedobject
    indexOfItemWithRepresentedObject(obj: NSPopUpButton):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1535747-indexofitemwithtarget
    indexOfItemWithTarget_andAction(target: NSPopUpButton, actionSelector: SEL):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1535345-preferrededge
    preferredEdge(): NSRectEdge;
    setPreferredEdge(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1535132-settitle
    setTitle(string: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1807229-setimage
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbutton/1527124-synchronizetitleandselecteditem
    synchronizeTitleAndSelectedItem():void;
    //
    alloc():NSPopUpButton;
    //
    init():NSPopUpButton;
  }
}

declare const NSPopUpButton: cocoascript.NSPopUpButton;
// doc://com.apple.documentation/documentation/appkit/nspopupbuttonwillpopupnotification
declare const NSPopUpButtonWillPopUpNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * An interface that provides visual feedback to the user about the status of an ongoing task.
   * doc://com.apple.documentation/documentation/appkit/nsprogressindicator
   */
  interface NSProgressIndicator extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nsprogressindicator/1501167-startanimation
    startAnimation(sender: NSProgressIndicator):void;
    // doc://com.apple.documentation/documentation/appkit/nsprogressindicator/1501141-stopanimation
    stopAnimation(sender: NSProgressIndicator):void;
    // doc://com.apple.documentation/documentation/appkit/nsprogressindicator/1501160-usesthreadedanimation
    usesThreadedAnimation(): BOOL;
    setUsesThreadedAnimation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprogressindicator/1501139-animate
    animate(sender: NSProgressIndicator):void;
    // doc://com.apple.documentation/documentation/appkit/nsprogressindicator/1501178-animationdelay
    animationDelay():NSTimeInterval;
    // doc://com.apple.documentation/documentation/appkit/nsprogressindicator/1501151-setanimationdelay
    setAnimationDelay(delay: NSTimeInterval):void;
    // doc://com.apple.documentation/documentation/appkit/nsprogressindicator/1501155-incrementby
    incrementBy(delta: number):void;
    // doc://com.apple.documentation/documentation/appkit/nsprogressindicator/1501173-doublevalue
    doubleValue(): number;
    setDoubleValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprogressindicator/1501169-minvalue
    minValue(): number;
    setMinValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprogressindicator/1501165-maxvalue
    maxValue(): number;
    setMaxValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprogressindicator/1501157-controlsize
    controlSize(): NSControlSize;
    setControlSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprogressindicator/1501153-controltint
    controlTint(): NSControlTint;
    setControlTint(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprogressindicator/1501161-bezeled
    bezeled(): BOOL;
    setBezeled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprogressindicator/1501146-indeterminate
    indeterminate(): BOOL;
    setIndeterminate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprogressindicator/1501158-style
    style(): NSProgressIndicatorStyle;
    setStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprogressindicator/1501144-sizetofit
    sizeToFit():void;
    // doc://com.apple.documentation/documentation/appkit/nsprogressindicator/1501171-displayedwhenstopped
    displayedWhenStopped(): BOOL;
    setDisplayedWhenStopped(): void;
    //
    alloc():NSProgressIndicator;
    //
    init():NSProgressIndicator;
  }
}

declare const NSProgressIndicator: cocoascript.NSProgressIndicator;
declare namespace cocoascript {
  /**
   * An interface for configuring a rule-based list of options.
   * doc://com.apple.documentation/documentation/appkit/nsruleeditor
   */
  interface NSRuleEditor extends NSControl {
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1528017-delegate
    delegate(): NSRuleEditorDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1530425-editable
    editable(): BOOL;
    setEditable(): void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1533955-nestingmode
    nestingMode(): NSRuleEditorNestingMode;
    setNestingMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1535531-canremoveallrows
    canRemoveAllRows(): BOOL;
    setCanRemoveAllRows(): void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1531071-rowheight
    rowHeight(): CGFloat;
    setRowHeight(): void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1526737-formattingdictionary
    formattingDictionary(): string | NSString;
    setFormattingDictionary(): void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1533323-formattingstringsfilename
    formattingStringsFilename(): string | NSString;
    setFormattingStringsFilename(): void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1528188-reloadcriteria
    reloadCriteria():void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1534317-setcriteria
    setCriteria_andDisplayValues_forRowAtIndex(criteria: NSArray, values: NSArray, rowIndex: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1524906-criteriaforrow
    criteriaForRow(row: NSInteger):NSArray;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1529645-displayvaluesforrow
    displayValuesForRow(row: NSInteger):NSArray;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1529330-numberofrows
    numberOfRows(): NSInteger;
    setNumberOfRows(): void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1534763-parentrowforrow
    parentRowForRow(rowIndex: NSInteger):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1524590-rowfordisplayvalue
    rowForDisplayValue(displayValue: NSRuleEditor):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1530356-rowtypeforrow
    rowTypeForRow(rowIndex: NSInteger):NSRuleEditorRowType;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1527898-subrowindexesforrow
    subrowIndexesForRow(rowIndex: NSInteger):NSIndexSet;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1529841-selectedrowindexes
    selectedRowIndexes(): NSIndexSet;
    setSelectedRowIndexes(): void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1534559-selectrowindexes
    selectRowIndexes_byExtendingSelection(indexes: NSIndexSet, extend: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1530067-addrow
    addRow(sender: NSRuleEditor):void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1528842-insertrowatindex
    insertRowAtIndex_withType_asSubrowOfRow_animate(rowIndex: NSInteger, rowType: NSRuleEditorRowType, parentRow: NSInteger, shouldAnimate: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1534953-removerowatindex
    removeRowAtIndex(rowIndex: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1525947-removerowsatindexes
    removeRowsAtIndexes_includeSubrows(rowIndexes: NSIndexSet, includeSubrows: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1525681-predicate
    predicate(): NSPredicate;
    setPredicate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1529215-reloadpredicate
    reloadPredicate():void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1531272-predicateforrow
    predicateForRow(row: NSInteger):NSPredicate;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1535414-rowclass
    rowClass(): Class;
    setRowClass(): void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1527020-rowtypekeypath
    rowTypeKeyPath(): string | NSString;
    setRowTypeKeyPath(): void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1535242-subrowskeypath
    subrowsKeyPath(): string | NSString;
    setSubrowsKeyPath(): void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1524761-criteriakeypath
    criteriaKeyPath(): string | NSString;
    setCriteriaKeyPath(): void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1535572-displayvalueskeypath
    displayValuesKeyPath(): string | NSString;
    setDisplayValuesKeyPath(): void;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditor/1809287-viewdidmovetowindow
    ():void;
    //
    alloc():NSRuleEditor;
    //
    init():NSRuleEditor;
  }
}

declare const NSRuleEditor: cocoascript.NSRuleEditor;
declare namespace cocoascript {
  /**
   * A defined set of rules that allows the editing of predicate objects.
   * doc://com.apple.documentation/documentation/appkit/nspredicateeditor
   */
  interface NSPredicateEditor extends NSRuleEditor {
    // doc://com.apple.documentation/documentation/appkit/nspredicateeditor/1474094-rowtemplates
    rowTemplates(): NSPredicateEditorRowTemplate;
    setRowTemplates(): void;
    //
    alloc():NSPredicateEditor;
    //
    init():NSPredicateEditor;
  }
}

declare const NSPredicateEditor: cocoascript.NSPredicateEditor;
declare namespace cocoascript {
  /**
   * Display one or more buttons in a single horizontal group.
   * doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol
   */
  interface NSSegmentedControl extends NSControl {
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1644010-segmentedcontrolwithimages
    segmentedControlWithImages_trackingMode_target_action(images: NSImage, trackingMode: NSSegmentSwitchTracking, target: NSSegmentedControl, action: SEL):NSSegmentedControl;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1644011-segmentedcontrolwithlabels
    segmentedControlWithLabels_trackingMode_target_action(labels: string | NSString, trackingMode: NSSegmentSwitchTracking, target: NSSegmentedControl, action: SEL):NSSegmentedControl;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1526285-trackingmode
    trackingMode(): NSSegmentSwitchTracking;
    setTrackingMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1528507-segmentstyle
    segmentStyle(): NSSegmentStyle;
    setSegmentStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1527451-segmentcount
    segmentCount(): NSInteger;
    setSegmentCount(): void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1524322-labelforsegment
    labelForSegment(segment: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1533073-setlabel
    setLabel_forSegment(label: string | NSString, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/2887107-setalignment
    setAlignment_forSegment(alignment: NSTextAlignment, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/2887114-alignmentforsegment
    alignmentForSegment(segment: NSInteger):NSTextAlignment;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1525540-setimage
    setImage_forSegment(image: NSImage, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1527623-imageforsegment
    imageForSegment(segment: NSInteger):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1532914-setimagescaling
    setImageScaling_forSegment(scaling: NSImageScaling, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1532175-imagescalingforsegment
    imageScalingForSegment(segment: NSInteger):NSImageScaling;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1528853-setmenu
    setMenu_forSegment(menu: NSMenu, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1525880-menuforsegment
    menuForSegment(segment: NSInteger):NSMenu;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/2887112-setshowsmenuindicator
    setShowsMenuIndicator_forSegment(showsMenuIndicator: BOOL, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/2887111-showsmenuindicatorforsegment
    showsMenuIndicatorForSegment(segment: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1534122-springloaded
    springLoaded(): BOOL;
    setSpringLoaded(): void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1534490-selectedsegment
    selectedSegment(): NSInteger;
    setSelectedSegment(): void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/2887105-indexofselecteditem
    indexOfSelectedItem(): NSInteger;
    setIndexOfSelectedItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1534016-selectsegmentwithtag
    selectSegmentWithTag(tag: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1528334-setselected
    setSelected_forSegment(selected: BOOL, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1525676-isselectedforsegment
    isSelectedForSegment(segment: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/2561002-selectedsegmentbezelcolor
    selectedSegmentBezelColor(): NSColor;
    setSelectedSegmentBezelColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1529727-doublevalueforselectedsegment
    doubleValueForSelectedSegment(): number;
    setDoubleValueForSelectedSegment(): void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1534487-setwidth
    setWidth_forSegment(width: CGFloat, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1533866-widthforsegment
    widthForSegment(segment: NSInteger):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/2887109-segmentdistribution
    segmentDistribution(): NSSegmentDistribution;
    setSegmentDistribution(): void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/2952062-activecompressionoptions
    activeCompressionOptions(): NSUserInterfaceCompressionOptions;
    setActiveCompressionOptions(): void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/2952064-compresswithprioritizedcompressi
    compressWithPrioritizedCompressionOptions(prioritizedOptions: NSUserInterfaceCompressionOptions):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/2952063-minimumsizewithprioritizedcompre
    minimumSizeWithPrioritizedCompressionOptions(prioritizedOptions: NSUserInterfaceCompressionOptions):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1526417-setenabled
    setEnabled_forSegment(enabled: BOOL, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/1524542-isenabledforsegment
    isEnabledForSegment(segment: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/2887113-tagforsegment
    tagForSegment(segment: NSInteger):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/2887104-settag
    setTag_forSegment(tag: NSInteger, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/2887101-settooltip
    setToolTip_forSegment(toolTip: string | NSString, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcontrol/2887103-tooltipforsegment
    toolTipForSegment(segment: NSInteger):string | NSString;
    //
    alloc():NSSegmentedControl;
    //
    init():NSSegmentedControl;
  }
}

declare const NSSegmentedControl: cocoascript.NSSegmentedControl;
declare namespace cocoascript {
  /**
   * An interface with up and down arrow buttons for incrementing or decrementing a value.
   * doc://com.apple.documentation/documentation/appkit/nsstepper
   */
  interface NSStepper extends NSControl {
    // doc://com.apple.documentation/documentation/appkit/nsstepper/1523578-maxvalue
    maxValue(): number;
    setMaxValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstepper/1523569-minvalue
    minValue(): number;
    setMinValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstepper/1523573-increment
    increment(): number;
    setIncrement(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstepper/1523571-autorepeat
    autorepeat(): BOOL;
    setAutorepeat(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstepper/1523580-valuewraps
    valueWraps(): BOOL;
    setValueWraps(): void;
    //
    alloc():NSStepper;
    //
    init():NSStepper;
  }
}

declare const NSStepper: cocoascript.NSStepper;
declare namespace cocoascript {
  /**
   * A legacy interface for grouping radio buttons or other types of cells together.
   * doc://com.apple.documentation/documentation/appkit/nsmatrix
   */
  interface NSMatrix extends NSControl {
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436428-initwithframe
    initWithFrame(frameRect: NSRect):NSMatrix;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436400-initwithframe
    initWithFrame_mode_cellClass_numberOfRows_numberOfColumns(frameRect: NSRect, mode: NSMatrixMode, factoryId: Class, rowsHigh: NSInteger, colsWide: NSInteger):NSMatrix;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436386-initwithframe
    initWithFrame_mode_prototype_numberOfRows_numberOfColumns(frameRect: NSRect, mode: NSMatrixMode, cell: NSCell, rowsHigh: NSInteger, colsWide: NSInteger):NSMatrix;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436390-mode
    mode(): NSMatrixMode;
    setMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436394-allowsemptyselection
    allowsEmptySelection(): BOOL;
    setAllowsEmptySelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436431-selectionbyrect
    selectionByRect(): BOOL;
    setSelectionByRect(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436445-cellclass
    cellClass(): Class;
    setCellClass(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436406-prototype
    prototype(): NSCell;
    setPrototype(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436419-addcolumn
    addColumn():void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436453-addcolumnwithcells
    addColumnWithCells(newCells: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436414-addrow
    addRow():void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436450-addrowwithcells
    addRowWithCells(newCells: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436417-cellframeatrow
    cellFrameAtRow_column(row: NSInteger, col: NSInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436497-cellsize
    cellSize(): NSSize;
    setCellSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436423-getnumberofrows
    getNumberOfRows_columns(rowCount: NSInteger, colCount: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436376-insertcolumn
    insertColumn(column: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436483-insertcolumn
    insertColumn_withCells(column: NSInteger, newCells: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436427-insertrow
    insertRow(row: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436493-insertrow
    insertRow_withCells(row: NSInteger, newCells: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436398-intercellspacing
    intercellSpacing(): NSSize;
    setIntercellSpacing(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436439-makecellatrow
    makeCellAtRow_column(row: NSInteger, col: NSInteger):NSCell;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436461-numberofcolumns
    numberOfColumns(): NSInteger;
    setNumberOfColumns(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436507-numberofrows
    numberOfRows(): NSInteger;
    setNumberOfRows(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436384-putcell
    putCell_atRow_column(newCell: NSCell, row: NSInteger, col: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436397-removecolumn
    removeColumn(col: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436403-removerow
    removeRow(row: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436452-renewrows
    renewRows_columns(newRows: NSInteger, newCols: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436468-sortusingfunction
    sortUsingFunction_context(compare: void, context: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436475-sortusingselector
    sortUsingSelector(comparator: SEL):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436501-autorecalculatescellsize
    autorecalculatesCellSize(): BOOL;
    setAutorecalculatesCellSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436441-getrow
    getRow_column_forPoint(row: NSInteger, col: NSInteger, point: NSPoint):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436421-getrow
    getRow_column_ofCell(row: NSInteger, col: NSInteger, cell: NSCell):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436479-setstate
    setState_atRow_column(value: NSInteger, row: NSInteger, col: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436372-settooltip
    setToolTip_forCell(toolTipString: string | NSString, cell: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436401-tooltipforcell
    toolTipForCell(cell: NSCell):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436399-selectcellatrow
    selectCellAtRow_column(row: NSInteger, col: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436446-selectcellwithtag
    selectCellWithTag(tag: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436378-selectall
    selectAll(sender: NSMatrix):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436411-keycell
    keyCell(): NSCell;
    setKeyCell(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436405-setselectionfrom
    setSelectionFrom_to_anchor_highlight(startPos: NSInteger, endPos: NSInteger, anchorPos: NSInteger, lit: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436396-deselectallcells
    deselectAllCells():void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436440-deselectselectedcell
    deselectSelectedCell():void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436472-selectedcell
    selectedCell(): NSCell;
    setSelectedCell(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436434-selectedcells
    selectedCells(): NSCell;
    setSelectedCells(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436389-selectedcolumn
    selectedColumn(): NSInteger;
    setSelectedColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436377-selectedrow
    selectedRow(): NSInteger;
    setSelectedRow(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436424-cellatrow
    cellAtRow_column(row: NSInteger, col: NSInteger):NSCell;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436481-cellwithtag
    cellWithTag(tag: NSInteger):NSCell;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436464-cells
    cells(): NSCell;
    setCells(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436442-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436449-cellbackgroundcolor
    cellBackgroundColor(): NSColor;
    setCellBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436447-drawsbackground
    drawsBackground(): BOOL;
    setDrawsBackground(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436379-drawscellbackground
    drawsCellBackground(): BOOL;
    setDrawsCellBackground(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436470-selecttext
    selectText(sender: NSMatrix):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436459-selecttextatrow
    selectTextAtRow_column(row: NSInteger, col: NSInteger):NSCell;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436393-textshouldbeginediting
    textShouldBeginEditing(textObject: NSText):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436395-textdidbeginediting
    textDidBeginEditing(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436489-textdidchange
    textDidChange(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436509-textshouldendediting
    textShouldEndEditing(textObject: NSText):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436426-textdidendediting
    textDidEndEditing(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436491-tabkeytraversescells
    tabKeyTraversesCells(): BOOL;
    setTabKeyTraversesCells(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436404-delegate
    delegate(): NSMatrixDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436375-autosizescells
    autosizesCells(): BOOL;
    setAutosizesCells(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436503-setvalidatesize
    setValidateSize(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436408-sizetocells
    sizeToCells():void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436410-autoscroll
    autoscroll(): BOOL;
    setAutoscroll(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436420-setscrollable
    setScrollable(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436455-scrollcelltovisibleatrow
    scrollCellToVisibleAtRow_column(row: NSInteger, col: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436495-drawcellatrow
    drawCellAtRow_column(row: NSInteger, col: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436499-highlightcell
    highlightCell_atRow_column(flag: BOOL, row: NSInteger, col: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436413-sendaction
    sendAction():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436370-sendaction
    sendAction_to_forAllCells(selector: SEL, object: NSMatrix, flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436469-doubleaction
    doubleAction(): SEL;
    setDoubleAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436436-senddoubleaction
    sendDoubleAction():void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436454-acceptsfirstmouse
    acceptsFirstMouse(event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436460-mousedown
    mouseDown(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436487-mousedownflags
    mouseDownFlags(): NSInteger;
    setMouseDownFlags(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436418-performkeyequivalent
    performKeyEquivalent(event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsmatrix/1436478-resetcursorrects
    resetCursorRects():void;
    //
    alloc():NSMatrix;
    //
    init():NSMatrix;
  }
}

declare const NSMatrix: cocoascript.NSMatrix;
declare namespace cocoascript {
  /**
   * A control that offers a binary choice.
   * doc://com.apple.documentation/documentation/appkit/nsswitch
   */
  interface NSSwitch extends NSControl {
    // doc://com.apple.documentation/documentation/appkit/nsswitch/3172699-state
    state(): NSControlStateValue;
    setState(): void;
    //
    alloc():NSSwitch;
    //
    init():NSSwitch;
  }
}

declare const NSSwitch: cocoascript.NSSwitch;
declare namespace cocoascript {
  /**
   * A protocol that describes how a UI control should redisplay when space is restricted.
   * doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompression
   */
  interface NSUserInterfaceCompression {
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompression/2909978-compresswithprioritizedcompressi
    compressWithPrioritizedCompressionOptions(prioritizedOptions: NSUserInterfaceCompressionOptions):void;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompression/2909973-minimumsizewithprioritizedcompre
    minimumSizeWithPrioritizedCompressionOptions(prioritizedOptions: NSUserInterfaceCompressionOptions):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompression/2909984-activecompressionoptions
    activeCompressionOptions(): NSUserInterfaceCompressionOptions;
    setActiveCompressionOptions(): void;
  }
}
declare namespace cocoascript {
  /**
   * A view that adds translucency and vibrancy effects to the views in your interface.
   * doc://com.apple.documentation/documentation/appkit/nsvisualeffectview
   */
  interface NSVisualEffectView extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nsvisualeffectview/1526623-material
    material(): NSVisualEffectMaterial;
    setMaterial(): void;
    // doc://com.apple.documentation/documentation/appkit/nsvisualeffectview/1535468-blendingmode
    blendingMode(): NSVisualEffectBlendingMode;
    setBlendingMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nsvisualeffectview/1644721-emphasized
    emphasized(): BOOL;
    setEmphasized(): void;
    // doc://com.apple.documentation/documentation/appkit/nsvisualeffectview/1529998-interiorbackgroundstyle
    interiorBackgroundStyle(): NSBackgroundStyle;
    setInteriorBackgroundStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsvisualeffectview/1535318-maskimage
    maskImage(): NSImage;
    setMaskImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsvisualeffectview/1532403-state
    state(): NSVisualEffectState;
    setState(): void;
    // doc://com.apple.documentation/documentation/appkit/nsvisualeffectview/1534300-viewdidmovetowindow
    viewDidMoveToWindow():void;
    // doc://com.apple.documentation/documentation/appkit/nsvisualeffectview/1534276-viewwillmovetowindow
    viewWillMoveToWindow(newWindow: NSWindow):void;
    //
    alloc():NSVisualEffectView;
    //
    init():NSVisualEffectView;
  }
}

declare const NSVisualEffectView: cocoascript.NSVisualEffectView;
declare namespace cocoascript {
  /**
   * A stylized rectangular box with an optional title.
   * doc://com.apple.documentation/documentation/appkit/nsbox
   */
  interface NSBox extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429787-borderrect
    borderRect(): NSRect;
    setBorderRect(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429822-boxtype
    boxType(): NSBoxType;
    setBoxType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429802-bordertype
    borderType(): NSBorderType;
    setBorderType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429821-transparent
    transparent(): BOOL;
    setTransparent(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429795-title
    title(): string | NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429791-titlefont
    titleFont(): NSFont;
    setTitleFont(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429844-titleposition
    titlePosition(): NSTitlePosition;
    setTitlePosition(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429800-settitlewithmnemonic
    setTitleWithMnemonic(stringWithAmpersand: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429789-titlecell
    titleCell(): id;
    setTitleCell(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429785-titlerect
    titleRect(): NSRect;
    setTitleRect(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429839-bordercolor
    borderColor(): NSColor;
    setBorderColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429831-borderwidth
    borderWidth(): CGFloat;
    setBorderWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429812-cornerradius
    cornerRadius(): CGFloat;
    setCornerRadius(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429797-fillcolor
    fillColor(): NSColor;
    setFillColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429818-contentview
    contentView(): NSView;
    setContentView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429837-contentviewmargins
    contentViewMargins(): NSSize;
    setContentViewMargins(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429816-setframefromcontentframe
    setFrameFromContentFrame(contentFrame: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsbox/1429826-sizetofit
    sizeToFit():void;
    //
    alloc():NSBox;
    //
    init():NSBox;
  }
}

declare const NSBox: cocoascript.NSBox;
declare namespace cocoascript {
  /**
   * A protocol that a custom class can adopt to manage the enabled state of a UI element.
   * doc://com.apple.documentation/documentation/appkit/nsuserinterfacevalidations
   */
  interface NSUserInterfaceValidations {
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacevalidations/1528162-validateuserinterfaceitem
    validateUserInterfaceItem(item: NSValidatedUserInterfaceItem):BOOL;
  }
}
declare namespace cocoascript {
  /**
   * A protocol that a custom class can adopt to manage the automatic enablement of a UI control.
   * doc://com.apple.documentation/documentation/appkit/nsvalidateduserinterfaceitem
   */
  interface NSValidatedUserInterfaceItem {
    // doc://com.apple.documentation/documentation/appkit/nsvalidateduserinterfaceitem/1527339-action
    action(): SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nsvalidateduserinterfaceitem/1531030-tag
    tag(): NSInteger;
    setTag(): void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods for dynamically associating a tool tip with a view.
   * doc://com.apple.documentation/documentation/appkit/nsviewtooltipowner
   */
  interface NSViewToolTipOwner extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsviewtooltipowner/3005296-view
    view_stringForToolTip_point_userData(view: NSView, tag: NSToolTipTag, point: NSPoint, data: void):string | NSString;
  }
}
declare namespace cocoascript {
  /**
   * A controller that manages a window, usually a window stored in a nib file.
   * doc://com.apple.documentation/documentation/appkit/nswindowcontroller
   */
  interface NSWindowController extends NSResponder {
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1533442-initwithwindow
    initWithWindow(window: NSWindow):NSWindowController;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1527041-initwithwindownibname
    initWithWindowNibName(windowNibName: NSNibName):NSWindowController;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1535239-initwithwindownibname
    initWithWindowNibName_owner(windowNibName: NSNibName, owner: NSWindowController):NSWindowController;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1532584-initwithwindownibpath
    initWithWindowNibPath_owner(windowNibPath: string | NSString, owner: NSWindowController):NSWindowController;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1535137-loadwindow
    loadWindow():void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1534037-showwindow
    showWindow(sender: NSWindowController):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1527496-windowloaded
    windowLoaded(): BOOL;
    setWindowLoaded(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1535593-window
    window(): NSWindow;
    setWindow(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1534205-windowdidload
    windowDidLoad():void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1524557-windowwillload
    windowWillLoad():void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1534220-document
    document(): id;
    setDocument(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1534261-setdocumentedited
    setDocumentEdited(dirtyFlag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1535390-close
    close():void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1526933-shouldclosedocument
    shouldCloseDocument(): BOOL;
    setShouldCloseDocument(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1532707-owner
    owner(): id;
    setOwner(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1527268-storyboard
    storyboard(): NSStoryboard;
    setStoryboard(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1527084-windownibname
    windowNibName(): NSNibName;
    setWindowNibName(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1524719-windownibpath
    windowNibPath(): string | NSString;
    setWindowNibPath(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1528177-shouldcascadewindows
    shouldCascadeWindows(): BOOL;
    setShouldCascadeWindows(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1528616-windowframeautosavename
    windowFrameAutosaveName(): NSWindowFrameAutosaveName;
    setWindowFrameAutosaveName(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1524667-synchronizewindowtitlewithdocume
    synchronizeWindowTitleWithDocumentName():void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1528112-windowtitlefordocumentdisplaynam
    windowTitleForDocumentDisplayName(displayName: string | NSString):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1532552-contentviewcontroller
    contentViewController(): NSViewController;
    setContentViewController(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1531963-dismisscontroller
    dismissController(sender: NSWindowController):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowcontroller/1529004-initwithcoder
    initWithCoder(coder: NSCoder):NSWindowController;
    //
    alloc():NSWindowController;
    //
    init():NSWindowController;
  }
}

declare const NSWindowController: cocoascript.NSWindowController;
declare namespace cocoascript {
  /**
   * A controller that manages a view, typically loaded from a nib file.
   * doc://com.apple.documentation/documentation/appkit/nsviewcontroller
   */
  interface NSViewController extends NSResponder {
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434481-initwithnibname
    initWithNibName_bundle(nibNameOrNil: NSNibName, nibBundleOrNil: NSBundle):NSViewController;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434405-loadview
    loadView():void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434453-representedobject
    representedObject(): id;
    setRepresentedObject(): void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434433-nibbundle
    nibBundle(): NSBundle;
    setNibBundle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434472-nibname
    nibName(): NSNibName;
    setNibName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434401-view
    view(): NSView;
    setView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434426-title
    title(): string | NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434464-commiteditingwithdelegate
    commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: NSViewController, didCommitSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434485-commitediting
    commitEditing():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434487-discardediting
    discardEditing():void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434499-storyboard
    storyboard(): NSStoryboard;
    setStoryboard(): void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434447-dismisscontroller
    dismissController(sender: NSViewController):void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434476-viewdidload
    viewDidLoad():void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434435-viewloaded
    viewLoaded(): BOOL;
    setViewLoaded(): void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434415-viewwillappear
    viewWillAppear():void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434455-viewdidappear
    viewDidAppear():void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434483-viewwilldisappear
    viewWillDisappear():void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434416-viewdiddisappear
    viewDidDisappear():void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434409-preferredcontentsize
    preferredContentSize(): NSSize;
    setPreferredContentSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434400-updateviewconstraints
    updateViewConstraints():void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434495-viewwilllayout
    viewWillLayout():void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434451-viewdidlayout
    viewDidLayout():void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434501-addchildviewcontroller
    addChildViewController(childViewController: NSViewController):void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434432-childviewcontrollers
    childViewControllers(): NSViewController;
    setChildViewControllers(): void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434407-transitionfromviewcontroller
    transitionFromViewController_toViewController_options_completionHandler(fromViewController: NSViewController, toViewController: NSViewController, options: NSViewControllerTransitionOptions, completion: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434437-insertchildviewcontroller
    insertChildViewController_atIndex(childViewController: NSViewController, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434404-removechildviewcontrolleratindex
    removeChildViewControllerAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434466-removefromparentviewcontroller
    removeFromParentViewController():void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434434-preferredcontentsizedidchangefor
    preferredContentSizeDidChangeForViewController(viewController: NSViewController):void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434431-presentviewcontroller
    presentViewController_animator(viewController: NSViewController, animator: NSViewControllerPresentationAnimator):void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434413-dismissviewcontroller
    dismissViewController(viewController: NSViewController):void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434422-presentviewcontroller
    presentViewController_asPopoverRelativeToRect_ofView_preferredEdge_behavior(viewController: NSViewController, positioningRect: NSRect, positioningView: NSView, preferredEdge: NSRectEdge, behavior: NSPopoverBehavior):void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434462-presentviewcontrollerasmodalwind
    presentViewControllerAsModalWindow(viewController: NSViewController):void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434489-presentviewcontrollerassheet
    presentViewControllerAsSheet(viewController: NSViewController):void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434491-parentviewcontroller
    parentViewController(): NSViewController;
    setParentViewController(): void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434497-presentedviewcontrollers
    presentedViewControllers(): NSViewController;
    setPresentedViewControllers(): void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434439-presentingviewcontroller
    presentingViewController(): NSViewController;
    setPresentingViewController(): void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434457-extensioncontext
    extensionContext(): NSExtensionContext;
    setExtensionContext(): void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434468-preferredscreenorigin
    preferredScreenOrigin(): NSPoint;
    setPreferredScreenOrigin(): void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434403-preferredmaximumsize
    preferredMaximumSize(): NSSize;
    setPreferredMaximumSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434418-preferredminimumsize
    preferredMinimumSize(): NSSize;
    setPreferredMinimumSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434443-viewwilltransitiontosize
    viewWillTransitionToSize(newSize: NSSize):void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434479-sourceitemview
    sourceItemView(): NSView;
    setSourceItemView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1434441-initwithcoder
    initWithCoder(coder: NSCoder):NSViewController;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontroller/1490260-presentviewcontrollerinwidget
    presentViewControllerInWidget(viewController: NSViewController):void;
    //
    alloc():NSViewController;
    //
    init():NSViewController;
  }
}

declare const NSViewController: cocoascript.NSViewController;
declare namespace cocoascript {
  /**
   * An object that manages a custom view—known as an accessory view—in the title bar–toolbar area of a window.
   * doc://com.apple.documentation/documentation/appkit/nstitlebaraccessoryviewcontroller
   */
  interface NSTitlebarAccessoryViewController extends NSViewController {
    // doc://com.apple.documentation/documentation/appkit/nstitlebaraccessoryviewcontroller/1397782-fullscreenminheight
    fullScreenMinHeight(): CGFloat;
    setFullScreenMinHeight(): void;
    // doc://com.apple.documentation/documentation/appkit/nstitlebaraccessoryviewcontroller/1397778-layoutattribute
    layoutAttribute(): NSLayoutAttribute;
    setLayoutAttribute(): void;
    // doc://com.apple.documentation/documentation/appkit/nstitlebaraccessoryviewcontroller/1397780-viewdidappear
    viewDidAppear():void;
    // doc://com.apple.documentation/documentation/appkit/nstitlebaraccessoryviewcontroller/1397776-viewdiddisappear
    viewDidDisappear():void;
    // doc://com.apple.documentation/documentation/appkit/nstitlebaraccessoryviewcontroller/1397774-viewwillappear
    viewWillAppear():void;
    // doc://com.apple.documentation/documentation/appkit/nstitlebaraccessoryviewcontroller/3656518-automaticallyadjustssize
    automaticallyAdjustsSize(): BOOL;
    setAutomaticallyAdjustsSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nstitlebaraccessoryviewcontroller/2097084-hidden
    hidden(): BOOL;
    setHidden(): void;
    //
    alloc():NSTitlebarAccessoryViewController;
    //
    init():NSTitlebarAccessoryViewController;
  }
}

declare const NSTitlebarAccessoryViewController: cocoascript.NSTitlebarAccessoryViewController;
declare namespace cocoascript {
  /**
   * An object that manages an array of adjacent child views, and has a split view object for managing dividers between those views.
   * doc://com.apple.documentation/documentation/appkit/nssplitviewcontroller
   */
  interface NSSplitViewController extends NSViewController {
    // doc://com.apple.documentation/documentation/appkit/nssplitviewcontroller/1388907-splitview
    splitView(): NSSplitView;
    setSplitView(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewcontroller/1388857-splitviewitemforviewcontroller
    splitViewItemForViewController(viewController: NSViewController):NSSplitViewItem;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewcontroller/1388876-splitviewitems
    splitViewItems(): NSSplitViewItem;
    setSplitViewItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewcontroller/1388928-addsplitviewitem
    addSplitViewItem(splitViewItem: NSSplitViewItem):void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewcontroller/1388886-insertsplitviewitem
    insertSplitViewItem_atIndex(splitViewItem: NSSplitViewItem, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewcontroller/1388903-removesplitviewitem
    removeSplitViewItem(splitViewItem: NSSplitViewItem):void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewcontroller/1388905-togglesidebar
    toggleSidebar(sender: NSSplitViewController):void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewcontroller/1388863-minimumthicknessforinlinesidebar
    minimumThicknessForInlineSidebars(): CGFloat;
    setMinimumThicknessForInlineSidebars(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewcontroller/1388874-viewdidload
    viewDidLoad():void;
    //
    alloc():NSSplitViewController;
    //
    init():NSSplitViewController;
  }
}

declare const NSSplitViewController: cocoascript.NSSplitViewController;
declare namespace cocoascript {
  /**
   * An item in a split view controller.
   * doc://com.apple.documentation/documentation/appkit/nssplitviewitem
   */
  interface NSSplitViewItem extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nssplitviewitem/1388920-sidebarwithviewcontroller
    sidebarWithViewController(viewController: NSViewController):NSSplitViewItem;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewitem/1388878-contentlistwithviewcontroller
    contentListWithViewController(viewController: NSViewController):NSSplitViewItem;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewitem/1388918-splitviewitemwithviewcontroller
    splitViewItemWithViewController(viewController: NSViewController):NSSplitViewItem;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewitem/1388889-automaticmaximumthickness
    automaticMaximumThickness(): CGFloat;
    setAutomaticMaximumThickness(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewitem/1388885-preferredthicknessfraction
    preferredThicknessFraction(): CGFloat;
    setPreferredThicknessFraction(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewitem/1388853-minimumthickness
    minimumThickness(): CGFloat;
    setMinimumThickness(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewitem/1388930-maximumthickness
    maximumThickness(): CGFloat;
    setMaximumThickness(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewitem/1388887-holdingpriority
    holdingPriority(): NSLayoutPriority;
    setHoldingPriority(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewitem/1388899-behavior
    behavior(): NSSplitViewItemBehavior;
    setBehavior(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewitem/1388891-collapsed
    collapsed(): BOOL;
    setCollapsed(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewitem/1388926-cancollapse
    canCollapse(): BOOL;
    setCanCollapse(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewitem/1388851-collapsebehavior
    collapseBehavior(): NSSplitViewItemCollapseBehavior;
    setCollapseBehavior(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewitem/1388895-springloaded
    springLoaded(): BOOL;
    setSpringLoaded(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewitem/3608197-allowsfullheightlayout
    allowsFullHeightLayout(): BOOL;
    setAllowsFullHeightLayout(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewitem/3622473-titlebarseparatorstyle
    titlebarSeparatorStyle(): NSTitlebarSeparatorStyle;
    setTitlebarSeparatorStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewitem/1388911-viewcontroller
    viewController(): NSViewController;
    setViewController(): void;
    //
    alloc():NSSplitViewItem;
    //
    init():NSSplitViewItem;
  }
}

declare const NSSplitViewItem: cocoascript.NSSplitViewItem;
declare namespace cocoascript {
  /**
   * A container view controller that manages a tab view interface, which organizes multiple pages of content but displays only one page at a time.
   * doc://com.apple.documentation/documentation/appkit/nstabviewcontroller
   */
  interface NSTabViewController extends NSViewController {
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428259-tabstyle
    tabStyle(): NSTabViewControllerTabStyle;
    setTabStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428241-tabview
    tabView(): NSTabView;
    setTabView(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428257-transitionoptions
    transitionOptions(): NSViewControllerTransitionOptions;
    setTransitionOptions(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428239-canpropagateselectedchildviewcon
    canPropagateSelectedChildViewControllerTitle(): BOOL;
    setCanPropagateSelectedChildViewControllerTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428222-tabviewitems
    tabViewItems(): NSTabViewItem;
    setTabViewItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428233-tabviewitemforviewcontroller
    tabViewItemForViewController(viewController: NSViewController):NSTabViewItem;
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428214-addtabviewitem
    addTabViewItem(tabViewItem: NSTabViewItem):void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428255-inserttabviewitem
    insertTabViewItem_atIndex(tabViewItem: NSTabViewItem, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428235-removetabviewitem
    removeTabViewItem(tabViewItem: NSTabViewItem):void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428220-selectedtabviewitemindex
    selectedTabViewItemIndex(): NSInteger;
    setSelectedTabViewItemIndex(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428253-viewdidload
    viewDidLoad():void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428237-tabview
    tabView_shouldSelectTabViewItem(tabView: NSTabView, tabViewItem: NSTabViewItem):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428231-tabview
    tabView_willSelectTabViewItem(tabView: NSTabView, tabViewItem: NSTabViewItem):void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428243-tabview
    tabView_didSelectTabViewItem(tabView: NSTabView, tabViewItem: NSTabViewItem):void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428218-toolbar
    toolbar_itemForItemIdentifier_willBeInsertedIntoToolbar(toolbar: NSToolbar, itemIdentifier: NSToolbarItemIdentifier, flag: BOOL):NSToolbarItem;
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428229-toolbaralloweditemidentifiers
    toolbarAllowedItemIdentifiers(toolbar: NSToolbar):NSToolbarItemIdentifier;
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428251-toolbardefaultitemidentifiers
    toolbarDefaultItemIdentifiers(toolbar: NSToolbar):NSToolbarItemIdentifier;
    // doc://com.apple.documentation/documentation/appkit/nstabviewcontroller/1428261-toolbarselectableitemidentifiers
    toolbarSelectableItemIdentifiers(toolbar: NSToolbar):NSToolbarItemIdentifier;
    //
    alloc():NSTabViewController;
    //
    init():NSTabViewController;
  }
}

declare const NSTabViewController: cocoascript.NSTabViewController;
declare namespace cocoascript {
  /**
   * An item in a tab view.
   * doc://com.apple.documentation/documentation/appkit/nstabviewitem
   */
  interface NSTabViewItem extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstabviewitem/1477533-initwithidentifier
    initWithIdentifier(identifier: NSTabViewItem):NSTabViewItem;
    // doc://com.apple.documentation/documentation/appkit/nstabviewitem/1477523-drawlabel
    drawLabel_inRect(shouldTruncateLabel: BOOL, labelRect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewitem/1477542-label
    label(): string | NSString;
    setLabel(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewitem/1477513-sizeoflabel
    sizeOfLabel(computeMin: BOOL):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nstabviewitem/1477539-tabstate
    tabState(): NSTabState;
    setTabState(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewitem/1477529-identifier
    identifier(): id;
    setIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewitem/1477525-color
    color(): NSColor;
    setColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewitem/1477537-view
    view(): NSView;
    setView(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewitem/1477541-initialfirstresponder
    initialFirstResponder(): NSView;
    setInitialFirstResponder(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewitem/1477535-tabview
    tabView(): NSTabView;
    setTabView(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewitem/1477515-tooltip
    toolTip(): string | NSString;
    setToolTip(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewitem/1477509-tabviewitemwithviewcontroller
    tabViewItemWithViewController(viewController: NSViewController):NSTabViewItem;
    // doc://com.apple.documentation/documentation/appkit/nstabviewitem/1477527-image
    image(): NSImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewitem/1477521-viewcontroller
    viewController(): NSViewController;
    setViewController(): void;
    //
    alloc():NSTabViewItem;
    //
    init():NSTabViewItem;
  }
}

declare const NSTabViewItem: cocoascript.NSTabViewItem;
declare namespace cocoascript {
  /**
   * An object that controls swipe navigation and animations between views or view content.
   * doc://com.apple.documentation/documentation/appkit/nspagecontroller
   */
  interface NSPageController extends NSViewController {
    // doc://com.apple.documentation/documentation/appkit/nspagecontroller/1435019-delegate
    delegate(): NSPageControllerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nspagecontroller/1435001-arrangedobjects
    arrangedObjects(): NSArray;
    setArrangedObjects(): void;
    // doc://com.apple.documentation/documentation/appkit/nspagecontroller/1434990-navigateforwardtoobject
    navigateForwardToObject(object: NSPageController):void;
    // doc://com.apple.documentation/documentation/appkit/nspagecontroller/1434988-selectedindex
    selectedIndex(): NSInteger;
    setSelectedIndex(): void;
    // doc://com.apple.documentation/documentation/appkit/nspagecontroller/1435017-navigateback
    navigateBack(sender: NSPageController):void;
    // doc://com.apple.documentation/documentation/appkit/nspagecontroller/1435004-navigateforward
    navigateForward(sender: NSPageController):void;
    // doc://com.apple.documentation/documentation/appkit/nspagecontroller/1435011-takeselectedindexfrom
    takeSelectedIndexFrom(sender: NSPageController):void;
    // doc://com.apple.documentation/documentation/appkit/nspagecontroller/1434999-transitionstyle
    transitionStyle(): NSPageControllerTransitionStyle;
    setTransitionStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nspagecontroller/1434994-completetransition
    completeTransition():void;
    // doc://com.apple.documentation/documentation/appkit/nspagecontroller/1435013-selectedviewcontroller
    selectedViewController(): NSViewController;
    setSelectedViewController(): void;
    //
    alloc():NSPageController;
    //
    init():NSPageController;
  }
}

declare const NSPageController: cocoascript.NSPageController;
declare namespace cocoascript {
  /**
   * An object that configures and displays a Media Library Browser panel.
   * doc://com.apple.documentation/documentation/appkit/nsmedialibrarybrowsercontroller
   */
  interface NSMediaLibraryBrowserController extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsmedialibrarybrowsercontroller/1423485-sharedmedialibrarybrowsercontrol
    sharedMediaLibraryBrowserController(): NSMediaLibraryBrowserController;
    setSharedMediaLibraryBrowserController(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmedialibrarybrowsercontroller/1423477-frame
    frame(): NSRect;
    setFrame(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmedialibrarybrowsercontroller/1423479-togglepanel
    togglePanel(sender: NSMediaLibraryBrowserController):void;
    // doc://com.apple.documentation/documentation/appkit/nsmedialibrarybrowsercontroller/1423473-visible
    visible(): BOOL;
    setVisible(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmedialibrarybrowsercontroller/1423481-medialibraries
    mediaLibraries(): NSMediaLibrary;
    setMediaLibraries(): void;
    //
    alloc():NSMediaLibraryBrowserController;
    //
    init():NSMediaLibraryBrowserController;
  }
}

declare const NSMediaLibraryBrowserController: cocoascript.NSMediaLibraryBrowserController;
declare namespace cocoascript {
  /**
   * A rectangular area that can interact with Auto Layout.
   * doc://com.apple.documentation/documentation/appkit/nslayoutguide
   */
  interface NSLayoutGuide extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nslayoutguide/1524460-identifier
    identifier(): NSUserInterfaceItemIdentifier;
    setIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutguide/1533744-frame
    frame(): NSRect;
    setFrame(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutguide/1533971-owningview
    owningView(): NSView;
    setOwningView(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutguide/1529133-bottomanchor
    bottomAnchor(): NSLayoutYAxisAnchor;
    setBottomAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutguide/1528997-centerxanchor
    centerXAnchor(): NSLayoutXAxisAnchor;
    setCenterXAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutguide/1530346-centeryanchor
    centerYAnchor(): NSLayoutYAxisAnchor;
    setCenterYAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutguide/1532150-heightanchor
    heightAnchor(): NSLayoutDimension;
    setHeightAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutguide/1534720-leadinganchor
    leadingAnchor(): NSLayoutXAxisAnchor;
    setLeadingAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutguide/1530723-leftanchor
    leftAnchor(): NSLayoutXAxisAnchor;
    setLeftAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutguide/1534892-rightanchor
    rightAnchor(): NSLayoutXAxisAnchor;
    setRightAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutguide/1534159-topanchor
    topAnchor(): NSLayoutYAxisAnchor;
    setTopAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutguide/1528204-trailinganchor
    trailingAnchor(): NSLayoutXAxisAnchor;
    setTrailingAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutguide/1527215-widthanchor
    widthAnchor(): NSLayoutDimension;
    setWidthAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutguide/1641955-hasambiguouslayout
    hasAmbiguousLayout(): BOOL;
    setHasAmbiguousLayout(): void;
    // doc://com.apple.documentation/documentation/appkit/nslayoutguide/1641956-constraintsaffectinglayoutforori
    constraintsAffectingLayoutForOrientation(orientation: NSLayoutConstraintOrientation):NSLayoutConstraint;
    //
    alloc():NSLayoutGuide;
    //
    init():NSLayoutGuide;
  }
}

declare const NSLayoutGuide: cocoascript.NSLayoutGuide;
declare namespace cocoascript {
  /**
   * An object that manages standard appearance attributes for UI elements in an app.
   * doc://com.apple.documentation/documentation/appkit/nsappearance
   */
  interface NSAppearance extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsappearance/1529612-appearancenamed
    appearanceNamed(name: NSAppearanceName):NSAppearance;
    // doc://com.apple.documentation/documentation/appkit/nsappearance/1529131-initwithappearancenamed
    initWithAppearanceNamed_bundle(name: NSAppearanceName, bundle: NSBundle):NSAppearance;
    // doc://com.apple.documentation/documentation/appkit/nsappearance/2269729-initwithcoder
    initWithCoder(coder: NSCoder):NSAppearance;
    // doc://com.apple.documentation/documentation/appkit/nsappearance/1528677-name
    name(): NSAppearanceName;
    setName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsappearance/2980972-bestmatchfromappearanceswithname
    bestMatchFromAppearancesWithNames(appearances: NSAppearanceName):NSAppearanceName;
    // doc://com.apple.documentation/documentation/appkit/nsappearance/1531945-currentappearance
    currentAppearance(): NSAppearance;
    setCurrentAppearance(): void;
    // doc://com.apple.documentation/documentation/appkit/nsappearance/1524694-allowsvibrancy
    allowsVibrancy(): BOOL;
    setAllowsVibrancy(): void;
    // doc://com.apple.documentation/documentation/appkit/nsappearance/3674524-currentdrawingappearance
    currentDrawingAppearance(): NSAppearance;
    setCurrentDrawingAppearance(): void;
    // doc://com.apple.documentation/documentation/appkit/nsappearance/3674525-performascurrentdrawingappearanc
    performAsCurrentDrawingAppearance(block: void):void;
    //
    alloc():NSAppearance;
    //
    init():NSAppearance;
  }
}

declare const NSAppearance: cocoascript.NSAppearance;
declare namespace cocoascript {
  /**
   * A set of methods for getting and setting the appearance attributes of a view.
   * doc://com.apple.documentation/documentation/appkit/nsappearancecustomization
   */
  interface NSAppearanceCustomization extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsappearancecustomization/1533925-appearance
    appearance(): NSAppearance;
    setAppearance(): void;
    // doc://com.apple.documentation/documentation/appkit/nsappearancecustomization/1535147-effectiveappearance
    effectiveAppearance(): NSAppearance;
    setEffectiveAppearance(): void;
  }
}
declare namespace cocoascript {
  /**
   * An object that manages the timing and progress of animations in the user interface.
   * doc://com.apple.documentation/documentation/appkit/nsanimation
   */
  interface NSAnimation extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1530069-initwithduration
    initWithDuration_animationCurve(duration: NSTimeInterval, animationCurve: NSAnimationCurve):NSAnimation;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1533725-animationblockingmode
    animationBlockingMode(): NSAnimationBlockingMode;
    setAnimationBlockingMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1526965-runloopmodesforanimating
    runLoopModesForAnimating(): NSRunLoopMode;
    setRunLoopModesForAnimating(): void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1535321-animationcurve
    animationCurve(): NSAnimationCurve;
    setAnimationCurve(): void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1535110-duration
    duration(): NSTimeInterval;
    setDuration(): void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1526694-framerate
    frameRate(): number;
    setFrameRate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1524439-delegate
    delegate(): NSAnimationDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1529209-startanimation
    startAnimation():void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1528672-stopanimation
    stopAnimation():void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1527492-animating
    animating(): BOOL;
    setAnimating(): void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1530843-currentprogress
    currentProgress(): NSAnimationProgress;
    setCurrentProgress(): void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1531043-currentvalue
    currentValue(): number;
    setCurrentValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1526360-addprogressmark
    addProgressMark(progressMark: NSAnimationProgress):void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1528288-removeprogressmark
    removeProgressMark(progressMark: NSAnimationProgress):void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1533642-progressmarks
    progressMarks(): NSNumber;
    setProgressMarks(): void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1526774-startwhenanimation
    startWhenAnimation_reachesProgress(animation: NSAnimation, startProgress: NSAnimationProgress):void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1530363-stopwhenanimation
    stopWhenAnimation_reachesProgress(animation: NSAnimation, stopProgress: NSAnimationProgress):void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1535932-clearstartanimation
    clearStartAnimation():void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1524448-clearstopanimation
    clearStopAnimation():void;
    // doc://com.apple.documentation/documentation/appkit/nsanimation/1643460-initwithcoder
    initWithCoder(coder: NSCoder):NSAnimation;
    //
    alloc():NSAnimation;
    //
    init():NSAnimation;
  }
}

declare const NSAnimation: cocoascript.NSAnimation;
// doc://com.apple.documentation/documentation/appkit/nsanimationprogressmarknotification
declare const NSAnimationProgressMarkNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * An animation of an app's views, limited to changes in frame location and size, and to fade-in and fade-out effects.
   * doc://com.apple.documentation/documentation/appkit/nsviewanimation
   */
  interface NSViewAnimation extends NSAnimation {
    // doc://com.apple.documentation/documentation/appkit/nsviewanimation/1531141-initwithviewanimations
    initWithViewAnimations(viewAnimations: NSViewAnimation):NSViewAnimation;
    // doc://com.apple.documentation/documentation/appkit/nsviewanimation/1527416-viewanimations
    viewAnimations(): id;
    setViewAnimations(): void;
    //
    alloc():NSViewAnimation;
    //
    init():NSViewAnimation;
  }
}

declare const NSViewAnimation: cocoascript.NSViewAnimation;
declare namespace cocoascript {
  /**
   * A set of methods that defines a way to add animation to an existing class with a minimum of API impact.
   * doc://com.apple.documentation/documentation/appkit/nsanimatablepropertycontainer
   */
  interface NSAnimatablePropertyContainer {
    // doc://com.apple.documentation/documentation/appkit/nsanimatablepropertycontainer/1530511-animator
    animator():NSAnimatablePropertyContainer;
    // doc://com.apple.documentation/documentation/appkit/nsanimatablepropertycontainer/1534096-animations
    animations(): id;
    setAnimations(): void;
    // doc://com.apple.documentation/documentation/appkit/nsanimatablepropertycontainer/1526209-animationforkey
    animationForKey(key: NSAnimatablePropertyKey):NSAnimatablePropertyContainer;
    // doc://com.apple.documentation/documentation/appkit/nsanimatablepropertycontainer/1535202-defaultanimationforkey
    defaultAnimationForKey(key: NSAnimatablePropertyKey):NSAnimatablePropertyContainer;
  }
}
declare namespace cocoascript {
  /**
   * An animation context, which contains information about environment and state.
   * doc://com.apple.documentation/documentation/appkit/nsanimationcontext
   */
  interface NSAnimationContext extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsanimationcontext/1530234-begingrouping
    beginGrouping():void;
    // doc://com.apple.documentation/documentation/appkit/nsanimationcontext/1526927-endgrouping
    endGrouping():void;
    // doc://com.apple.documentation/documentation/appkit/nsanimationcontext/1535845-currentcontext
    currentContext(): NSAnimationContext;
    setCurrentContext(): void;
    // doc://com.apple.documentation/documentation/appkit/nsanimationcontext/1531132-completionhandler
    completionHandler(): void;
    setCompletionHandler(): void;
    // doc://com.apple.documentation/documentation/appkit/nsanimationcontext/1529847-runanimationgroup
    runAnimationGroup_completionHandler(changes: NSAnimationContext, completionHandler: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsanimationcontext/1526780-duration
    duration(): NSTimeInterval;
    setDuration(): void;
    // doc://com.apple.documentation/documentation/appkit/nsanimationcontext/1524985-timingfunction
    timingFunction(): CAMediaTimingFunction;
    setTimingFunction(): void;
    // doc://com.apple.documentation/documentation/appkit/nsanimationcontext/1525870-allowsimplicitanimation
    allowsImplicitAnimation(): BOOL;
    setAllowsImplicitAnimation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsanimationcontext/2967169-runanimationgroup
    runAnimationGroup(changes: NSAnimationContext):void;
    //
    alloc():NSAnimationContext;
    //
    init():NSAnimationContext;
  }
}

declare const NSAnimationContext: cocoascript.NSAnimationContext;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsanimationprogress
  type NSAnimationProgress = number;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsanimationeffect
  type NSAnimationEffect = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * A set of methods that let you define animations to play when transitioning between two view controllers.
   * doc://com.apple.documentation/documentation/appkit/nsviewcontrollerpresentationanimator
   */
  interface NSViewControllerPresentationAnimator extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsviewcontrollerpresentationanimator/1434396-animatepresentationofviewcontrol
    animatePresentationOfViewController_fromViewController(viewController: NSViewController, fromViewController: NSViewController):void;
    // doc://com.apple.documentation/documentation/appkit/nsviewcontrollerpresentationanimator/1434458-animatedismissalofviewcontroller
    animateDismissalOfViewController_fromViewController(viewController: NSViewController, fromViewController: NSViewController):void;
  }
}
declare namespace cocoascript {
  /**
   * A set of optional methods implemented by delegates of
   * doc://com.apple.documentation/documentation/appkit/nsanimationdelegate
   */
  interface NSAnimationDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsanimationdelegate/1535871-animationdidend
    animationDidEnd(animation: NSAnimation):void;
    // doc://com.apple.documentation/documentation/appkit/nsanimationdelegate/1534155-animationdidstop
    animationDidStop(animation: NSAnimation):void;
    // doc://com.apple.documentation/documentation/appkit/nsanimationdelegate/1533279-animationshouldstart
    animationShouldStart(animation: NSAnimation):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsanimationdelegate/1528965-animation
    animation_valueForProgress(animation: NSAnimation, progress: NSAnimationProgress):number;
    // doc://com.apple.documentation/documentation/appkit/nsanimationdelegate/1535100-animation
    animation_didReachProgressMark(animation: NSAnimation, progress: NSAnimationProgress):void;
  }
}
declare namespace cocoascript {
  /**
   * A window that an app displays on the screen.
   * doc://com.apple.documentation/documentation/appkit/nswindow
   */
  interface NSWindow extends NSResponder {
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419551-windowwithcontentviewcontroller
    windowWithContentViewController(contentViewController: NSViewController):NSWindow;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419477-initwithcontentrect
    initWithContentRect_styleMask_backing_defer(contentRect: NSRect, style: NSWindowStyleMask, backingStoreType: NSBackingStoreType, flag: BOOL):NSWindow;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419755-initwithcontentrect
    initWithContentRect_styleMask_backing_defer_screen(contentRect: NSRect, style: NSWindowStyleMask, backingStoreType: NSBackingStoreType, flag: BOOL, screen: NSScreen):NSWindow;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419060-delegate
    delegate(): NSWindowDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419615-contentviewcontroller
    contentViewController(): NSViewController;
    setContentViewController(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419160-contentview
    contentView(): NSView;
    setContentView(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419527-togglefullscreen
    toggleFullScreen(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419220-workswhenmodal
    worksWhenModal(): BOOL;
    setWorksWhenModal(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419186-alphavalue
    alphaValue(): CGFloat;
    setAlphaValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419751-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419569-colorspace
    colorSpace(): NSColorSpace;
    setColorSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419725-canhide
    canHide(): BOOL;
    setCanHide(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419707-onactivespace
    onActiveSpace(): BOOL;
    setOnActiveSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419777-hidesondeactivate
    hidesOnDeactivate(): BOOL;
    setHidesOnDeactivate(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419471-collectionbehavior
    collectionBehavior(): NSWindowCollectionBehavior;
    setCollectionBehavior(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419086-opaque
    opaque(): BOOL;
    setOpaque(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419234-hasshadow
    hasShadow(): BOOL;
    setHasShadow(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419529-invalidateshadow
    invalidateShadow():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419356-autorecalculatescontentborderthi
    autorecalculatesContentBorderThicknessForEdge(edge: NSRectEdge):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419218-setautorecalculatescontentborder
    setAutorecalculatesContentBorderThickness_forEdge(flag: BOOL, edge: NSRectEdge):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419775-contentborderthicknessforedge
    contentBorderThicknessForEdge(edge: NSRectEdge):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419541-setcontentborderthickness
    setContentBorderThickness_forEdge(thickness: CGFloat, edge: NSRectEdge):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419743-preventsapplicationterminationwh
    preventsApplicationTerminationWhenModal(): BOOL;
    setPreventsApplicationTerminationWhenModal(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419049-defaultdepthlimit
    defaultDepthLimit(): NSWindowDepth;
    setDefaultDepthLimit(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419068-windownumber
    windowNumber(): NSInteger;
    setWindowNumber(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419678-windownumberswithoptions
    windowNumbersWithOptions(options: NSWindowNumberListOptions):NSNumber;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419741-devicedescription
    deviceDescription(): id;
    setDeviceDescription(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419179-canbecomevisiblewithoutlogin
    canBecomeVisibleWithoutLogin(): BOOL;
    setCanBecomeVisibleWithoutLogin(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419729-sharingtype
    sharingType(): NSWindowSharingType;
    setSharingType(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419599-backingtype
    backingType(): NSBackingStoreType;
    setBackingType(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419613-depthlimit
    depthLimit(): NSWindowDepth;
    setDepthLimit(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419330-hasdynamicdepthlimit
    hasDynamicDepthLimit(): BOOL;
    setHasDynamicDepthLimit(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419586-contentrectforframerect
    contentRectForFrameRect_styleMask(fRect: NSRect, style: NSWindowStyleMask):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419372-framerectforcontentrect
    frameRectForContentRect_styleMask(cRect: NSRect, style: NSWindowStyleMask):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419294-minframewidthwithtitle
    minFrameWidthWithTitle_styleMask(title: string | NSString, style: NSWindowStyleMask):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419108-contentrectforframerect
    contentRectForFrameRect(frameRect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419134-framerectforcontentrect
    frameRectForContentRect(contentRect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419092-windowcontroller
    windowController(): NSWindowController;
    setWindowController(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419467-attachedsheet
    attachedSheet(): NSWindow;
    setAttachedSheet(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419364-sheet
    sheet(): BOOL;
    setSheet(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419653-beginsheet
    beginSheet_completionHandler(sheetWindow: NSWindow, handler: NSModalResponse):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419198-begincriticalsheet
    beginCriticalSheet_completionHandler(sheetWindow: NSWindow, handler: NSModalResponse):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419318-endsheet
    endSheet(sheetWindow: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419497-endsheet
    endSheet_returnCode(sheetWindow: NSWindow, returnCode: NSModalResponse):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419052-sheetparent
    sheetParent(): NSWindow;
    setSheetParent(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419765-sheets
    sheets(): NSWindow;
    setSheets(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419697-frame
    frame(): NSRect;
    setFrame(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419690-setframeorigin
    setFrameOrigin(point: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419658-setframetopleftpoint
    setFrameTopLeftPoint(point: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419779-constrainframerect
    constrainFrameRect_toScreen(frameRect: NSRect, screen: NSScreen):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419392-cascadetopleftfrompoint
    cascadeTopLeftFromPoint(topLeftPoint: NSPoint):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419753-setframe
    setFrame_display(frameRect: NSRect, flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419519-setframe
    setFrame_display_animate(frameRect: NSRect, displayFlag: BOOL, animateFlag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419655-animationresizetime
    animationResizeTime(newFrame: NSRect):NSTimeInterval;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419507-aspectratio
    aspectRatio(): NSSize;
    setAspectRatio(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419206-minsize
    minSize(): NSSize;
    setMinSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419595-maxsize
    maxSize(): NSSize;
    setMaxSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419398-zoomed
    zoomed(): BOOL;
    setZoomed(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419450-performzoom
    performZoom(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419513-zoom
    zoom(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419302-resizeflags
    resizeFlags(): NSEventModifierFlags;
    setResizeFlags(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419390-resizeincrements
    resizeIncrements(): NSSize;
    setResizeIncrements(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419588-preservescontentduringliveresize
    preservesContentDuringLiveResize(): BOOL;
    setPreservesContentDuringLiveResize(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419378-inliveresize
    inLiveResize(): BOOL;
    setInLiveResize(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419148-contentaspectratio
    contentAspectRatio(): NSSize;
    setContentAspectRatio(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419670-contentminsize
    contentMinSize(): NSSize;
    setContentMinSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419100-setcontentsize
    setContentSize(size: NSSize):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419154-contentmaxsize
    contentMaxSize(): NSSize;
    setContentMaxSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419649-contentresizeincrements
    contentResizeIncrements(): NSSize;
    setContentResizeIncrements(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419094-contentlayoutguide
    contentLayoutGuide(): id;
    setContentLayoutGuide(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419124-contentlayoutrect
    contentLayoutRect(): NSRect;
    setContentLayoutRect(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419438-maxfullscreencontentsize
    maxFullScreenContentSize(): NSSize;
    setMaxFullScreenContentSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419627-minfullscreencontentsize
    minFullScreenContentSize(): NSSize;
    setMinFullScreenContentSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419660-orderout
    orderOut(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419204-orderback
    orderBack(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419495-orderfront
    orderFront(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419444-orderfrontregardless
    orderFrontRegardless():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419672-orderwindow
    orderWindow_relativeTo(place: NSWindowOrderingMode, otherWin: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419511-level
    level(): NSWindowLevel;
    setLevel(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419132-visible
    visible(): BOOL;
    setVisible(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419321-occlusionstate
    occlusionState(): NSWindowOcclusionState;
    setOcclusionState(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419313-removeframeusingname
    removeFrameUsingName(name: NSWindowFrameAutosaveName):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419723-setframeusingname
    setFrameUsingName(name: NSWindowFrameAutosaveName):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419226-setframeusingname
    setFrameUsingName_force(name: NSWindowFrameAutosaveName, force: BOOL):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419290-saveframeusingname
    saveFrameUsingName(name: NSWindowFrameAutosaveName):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419362-frameautosavename
    frameAutosaveName(): NSWindowFrameAutosaveName;
    setFrameAutosaveName(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419515-stringwithsavedframe
    stringWithSavedFrame(): NSWindowPersistableFrameDescriptor;
    setStringWithSavedFrame(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419759-setframefromstring
    setFrameFromString(string: NSWindowPersistableFrameDescriptor):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419735-keywindow
    keyWindow(): BOOL;
    setKeyWindow(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419543-canbecomekeywindow
    canBecomeKeyWindow(): BOOL;
    setCanBecomeKeyWindow(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419368-makekeywindow
    makeKeyWindow():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419208-makekeyandorderfront
    makeKeyAndOrderFront(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419338-becomekeywindow
    becomeKeyWindow():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419047-resignkeywindow
    resignKeyWindow():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419130-mainwindow
    mainWindow(): BOOL;
    setMainWindow(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419162-canbecomemainwindow
    canBecomeMainWindow(): BOOL;
    setCanBecomeMainWindow(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419271-makemainwindow
    makeMainWindow():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419084-becomemainwindow
    becomeMainWindow():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419212-resignmainwindow
    resignMainWindow():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419731-toolbar
    toolbar(): NSToolbar;
    setToolbar(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419554-toggletoolbarshown
    toggleToolbarShown(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419284-runtoolbarcustomizationpalette
    runToolbarCustomizationPalette(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419236-childwindows
    childWindows(): NSWindow;
    setChildWindows(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419152-addchildwindow
    addChildWindow_ordered(childWin: NSWindow, place: NSWindowOrderingMode):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419063-removechildwindow
    removeChildWindow(childWin: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419695-parentwindow
    parentWindow(): NSWindow;
    setParentWindow(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419328-defaultbuttoncell
    defaultButtonCell(): NSButtonCell;
    setDefaultButtonCell(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419276-enablekeyequivalentfordefaultbut
    enableKeyEquivalentForDefaultButtonCell():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419242-disablekeyequivalentfordefaultbu
    disableKeyEquivalentForDefaultButtonCell():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419647-fieldeditor
    fieldEditor_forObject(createFlag: BOOL, object: NSWindow):NSText;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419469-endeditingfor
    endEditingFor(object: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419175-excludedfromwindowsmenu
    excludedFromWindowsMenu(): BOOL;
    setExcludedFromWindowsMenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419668-arecursorrectsenabled
    areCursorRectsEnabled(): BOOL;
    setAreCursorRectsEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419202-enablecursorrects
    enableCursorRects():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419639-disablecursorrects
    disableCursorRects():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419269-discardcursorrects
    discardCursorRects():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419601-invalidatecursorrectsforview
    invalidateCursorRectsForView(view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419464-resetcursorrects
    resetCursorRects():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419173-standardwindowbutton
    standardWindowButton_forStyleMask(b: NSWindowButton, styleMask: NSWindowStyleMask):NSButton;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419491-standardwindowbutton
    standardWindowButton(b: NSWindowButton):NSButton;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419196-showstoolbarbutton
    showsToolbarButton(): BOOL;
    setShowsToolbarButton(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419167-titlebarappearstransparent
    titlebarAppearsTransparent(): BOOL;
    setTitlebarAppearsTransparent(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/3608199-toolbarstyle
    toolbarStyle(): NSWindowToolbarStyle;
    setToolbarStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/3622489-titlebarseparatorstyle
    titlebarSeparatorStyle(): NSTitlebarSeparatorStyle;
    setTitlebarSeparatorStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419382-addtitlebaraccessoryviewcontroll
    addTitlebarAccessoryViewController(childViewController: NSTitlebarAccessoryViewController):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419275-inserttitlebaraccessoryviewcontr
    insertTitlebarAccessoryViewController_atIndex(childViewController: NSTitlebarAccessoryViewController, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419643-removetitlebaraccessoryviewcontr
    removeTitlebarAccessoryViewControllerAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419547-titlebaraccessoryviewcontrollers
    titlebarAccessoryViewControllers(): NSTitlebarAccessoryViewController;
    setTitlebarAccessoryViewControllers(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1646657-allowsautomaticwindowtabbing
    allowsAutomaticWindowTabbing(): BOOL;
    setAllowsAutomaticWindowTabbing(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1646658-usertabbingpreference
    userTabbingPreference(): NSWindowUserTabbingPreference;
    setUserTabbingPreference(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/2870102-tab
    tab(): NSWindowTab;
    setTab(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1644704-tabbingidentifier
    tabbingIdentifier(): NSWindowTabbingIdentifier;
    setTabbingIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1855947-addtabbedwindow
    addTabbedWindow_ordered(window: NSWindow, ordered: NSWindowOrderingMode):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1644729-tabbingmode
    tabbingMode(): NSWindowTabbingMode;
    setTabbingMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1792044-tabbedwindows
    tabbedWindows(): NSWindow;
    setTabbedWindows(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1644693-selectnexttab
    selectNextTab(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1644555-selectprevioustab
    selectPreviousTab(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1644410-movetabtonewwindow
    moveTabToNewWindow(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1644517-toggletabbar
    toggleTabBar(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/2870175-toggletaboverview
    toggleTabOverview(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/2879189-tabgroup
    tabGroup(): NSWindowTabGroup;
    setTabGroup(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419138-allowstooltipswhenapplicationisi
    allowsToolTipsWhenApplicationIsInactive(): BOOL;
    setAllowsToolTipsWhenApplicationIsInactive(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419298-currentevent
    currentEvent(): NSEvent;
    setCurrentEvent(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419304-nexteventmatchingmask
    nextEventMatchingMask(mask: NSEventMask):NSEvent;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419721-nexteventmatchingmask
    nextEventMatchingMask_untilDate_inMode_dequeue(mask: NSEventMask, expiration: NSDate, mode: NSRunLoopMode, deqFlag: BOOL):NSEvent;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419676-discardeventsmatchingmask
    discardEventsMatchingMask_beforeEvent(mask: NSEventMask, lastEvent: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419376-postevent
    postEvent_atStart(event: NSEvent, flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419228-sendevent
    sendEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419428-trytoperform
    tryToPerform_with(action: SEL, object: NSWindow):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419479-initialfirstresponder
    initialFirstResponder(): NSView;
    setInitialFirstResponder(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419440-firstresponder
    firstResponder(): NSResponder;
    setFirstResponder(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419366-makefirstresponder
    makeFirstResponder(responder: NSResponder):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419757-selectkeyviewprecedingview
    selectKeyViewPrecedingView(view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419633-selectkeyviewfollowingview
    selectKeyViewFollowingView(view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419110-selectpreviouskeyview
    selectPreviousKeyView(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419715-selectnextkeyview
    selectNextKeyView(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419158-keyviewselectiondirection
    keyViewSelectionDirection(): NSSelectionDirection;
    setKeyViewSelectionDirection(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419214-autorecalculateskeyviewloop
    autorecalculatesKeyViewLoop(): BOOL;
    setAutorecalculatesKeyViewLoop(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419350-recalculatekeyviewloop
    recalculateKeyViewLoop():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419200-keydown
    keyDown(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419340-acceptsmousemovedevents
    acceptsMouseMovedEvents(): BOOL;
    setAcceptsMouseMovedEvents(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419354-ignoresmouseevents
    ignoresMouseEvents(): BOOL;
    setIgnoresMouseEvents(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419280-mouselocationoutsideofeventstrea
    mouseLocationOutsideOfEventStream(): NSPoint;
    setMouseLocationOutsideOfEventStream(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419210-windownumberatpoint
    windowNumberAtPoint_belowWindowWithWindowNumber(point: NSPoint, windowNumber: NSInteger):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419727-trackeventsmatchingmask
    trackEventsMatchingMask_timeout_mode_handler(mask: NSEventMask, timeout: NSTimeInterval, mode: NSRunLoopMode, trackingHandler: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419386-performwindowdragwithevent
    performWindowDragWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1526255-restorable
    restorable(): BOOL;
    setRestorable(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1526241-restorationclass
    restorationClass(): NSWindowRestoration;
    setRestorationClass(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1526239-disablesnapshotrestoration
    disableSnapshotRestoration():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1525288-enablesnapshotrestoration
    enableSnapshotRestoration():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419358-display
    display():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419096-displayifneeded
    displayIfNeeded():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419609-viewsneeddisplay
    viewsNeedDisplay(): BOOL;
    setViewsNeedDisplay(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419300-allowsconcurrentviewdrawing
    allowsConcurrentViewDrawing(): BOOL;
    setAllowsConcurrentViewDrawing(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419763-animationbehavior
    animationBehavior(): NSWindowAnimationBehavior;
    setAnimationBehavior(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419483-disablescreenupdatesuntilflush
    disableScreenUpdatesUntilFlush():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419577-update
    update():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419224-dragimage
    dragImage_at_offset_event_pasteboard_source_slideBack(image: NSImage, baseLocation: NSPoint, initialOffset: NSSize, event: NSEvent, pboard: NSPasteboard, sourceObj: NSWindow, slideFlag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419140-registerfordraggedtypes
    registerForDraggedTypes(newTypes: NSPasteboardType):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419456-unregisterdraggedtypes
    unregisterDraggedTypes():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419311-documentedited
    documentEdited(): BOOL;
    setDocumentEdited(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419459-backingscalefactor
    backingScaleFactor(): CGFloat;
    setBackingScaleFactor(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419319-backingalignedrect
    backingAlignedRect_options(rect: NSRect, options: NSAlignmentOptions):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419273-convertrectfrombacking
    convertRectFromBacking(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419260-convertrecttobacking
    convertRectToBacking(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419286-convertrecttoscreen
    convertRectToScreen(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419603-convertrectfromscreen
    convertRectFromScreen(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419404-title
    title(): string | NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/3608198-subtitle
    subtitle(): string | NSString;
    setSubtitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419635-titlevisibility
    titleVisibility(): NSWindowTitleVisibility;
    setTitleVisibility(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419192-settitlewithrepresentedfilename
    setTitleWithRepresentedFilename(filename: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419631-representedfilename
    representedFilename(): string | NSString;
    setRepresentedFilename(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419066-representedurl
    representedURL(): NSURL;
    setRepresentedURL(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419232-screen
    screen(): NSScreen;
    setScreen(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419080-deepestscreen
    deepestScreen(): NSScreen;
    setDeepestScreen(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419430-displayswhenscreenprofilechanges
    displaysWhenScreenProfileChanges(): BOOL;
    setDisplaysWhenScreenProfileChanges(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419072-movablebywindowbackground
    movableByWindowBackground(): BOOL;
    setMovableByWindowBackground(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419579-movable
    movable(): BOOL;
    setMovable(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419090-center
    center():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419288-performclose
    performClose(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419662-close
    close():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419062-releasedwhenclosed
    releasedWhenClosed(): BOOL;
    setReleasedWhenClosed(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419699-miniaturized
    miniaturized(): BOOL;
    setMiniaturized(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419749-performminiaturize
    performMiniaturize(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419426-miniaturize
    miniaturize(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419334-deminiaturize
    deminiaturize(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419185-miniwindowimage
    miniwindowImage(): NSImage;
    setMiniwindowImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419571-miniwindowtitle
    miniwindowTitle(): string | NSString;
    setMiniwindowTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419088-docktile
    dockTile(): NSDockTile;
    setDockTile(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419767-print
    print(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419128-datawithepsinsiderect
    dataWithEPSInsideRect(rect: NSRect):NSData;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419418-datawithpdfinsiderect
    dataWithPDFInsideRect(rect: NSRect):NSData;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419454-validrequestorforsendtype
    validRequestorForSendType_returnType(sendType: NSPasteboardType, returnType: NSPasteboardType):NSWindow;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1526915-updateconstraintsifneeded
    updateConstraintsIfNeeded():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1526910-layoutifneeded
    layoutIfNeeded():void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1526997-visualizeconstraints
    visualizeConstraints(constraints: NSLayoutConstraint):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1526957-anchorattributefororientation
    anchorAttributeForOrientation(orientation: NSLayoutConstraintOrientation):NSLayoutAttribute;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1526985-setanchorattribute
    setAnchorAttribute_forOrientation(attr: NSLayoutAttribute, orientation: NSLayoutConstraintOrientation):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419446-initwithwindowref
    initWithWindowRef(windowRef: void):NSWindow;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419485-windowref
    windowRef(): void;
    setWindowRef(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1449574-hasclosebox
    hasCloseBox(): BOOL;
    setHasCloseBox(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1449568-hastitlebar
    hasTitleBar(): BOOL;
    setHasTitleBar(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1449566-setisminiaturized
    setIsMiniaturized(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1449570-setisvisible
    setIsVisible(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1449589-setiszoomed
    setIsZoomed(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1449581-handleclosescriptcommand
    handleCloseScriptCommand(command: NSCloseCommand):NSWindow;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1449585-handleprintscriptcommand
    handlePrintScriptCommand(command: NSScriptCommand):NSWindow;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1449591-handlesavescriptcommand
    handleSaveScriptCommand(command: NSScriptCommand):NSWindow;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1449577-orderedindex
    orderedIndex(): NSInteger;
    setOrderedIndex(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/2998855-appearancesource
    appearanceSource(): NSAppearanceCustomization;
    setAppearanceSource(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1449579-floatingpanel
    floatingPanel(): BOOL;
    setFloatingPanel(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1449583-miniaturizable
    miniaturizable(): BOOL;
    setMiniaturizable(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1449576-modalpanel
    modalPanel(): BOOL;
    setModalPanel(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1449572-resizable
    resizable(): BOOL;
    setResizable(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419078-stylemask
    styleMask(): NSWindowStyleMask;
    setStyleMask(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1644535-windowtitlebarlayoutdirection
    windowTitlebarLayoutDirection(): NSUserInterfaceLayoutDirection;
    setWindowTitlebarLayoutDirection(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1449587-zoomable
    zoomable(): BOOL;
    setZoomable(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/2138278-canrepresentdisplaygamut
    canRepresentDisplayGamut(displayGamut: NSDisplayGamut):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nswindow/2967180-convertpointfromscreen
    convertPointFromScreen(point: NSPoint):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nswindow/2967182-convertpointtoscreen
    convertPointToScreen(point: NSPoint):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nswindow/2967179-convertpointfrombacking
    convertPointFromBacking(point: NSPoint):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nswindow/2967181-convertpointtobacking
    convertPointToBacking(point: NSPoint):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1644639-mergeallwindows
    mergeAllWindows(sender: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419473-setdynamicdepthlimit
    setDynamicDepthLimit(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nswindow/1419509-setframeautosavename
    setFrameAutosaveName(name: NSWindowFrameAutosaveName):BOOL;
    //
    alloc():NSWindow;
    //
    init():NSWindow;
  }
}

declare const NSWindow: cocoascript.NSWindow;
// doc://com.apple.documentation/documentation/appkit/1473812-nsbestdepth
declare const NSBestDepth: BOOL;
// doc://com.apple.documentation/documentation/appkit/1473660-nsbitsperpixelfromdepth
declare const NSBitsPerPixelFromDepth: NSWindowDepth;
// doc://com.apple.documentation/documentation/appkit/1473674-nsbitspersamplefromdepth
declare const NSBitsPerSampleFromDepth: NSWindowDepth;
// doc://com.apple.documentation/documentation/appkit/1473594-nscolorspacefromdepth
declare const NSColorSpaceFromDepth: NSWindowDepth;
// doc://com.apple.documentation/documentation/appkit/1473710-nsnumberofcolorcomponents
declare const NSNumberOfColorComponents: NSColorSpaceName;
// doc://com.apple.documentation/documentation/appkit/nswindowdidbecomekeynotification
declare const NSWindowDidBecomeKeyNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowdidbecomemainnotification
declare const NSWindowDidBecomeMainNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowdidchangescreennotification
declare const NSWindowDidChangeScreenNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowdidchangescreenprofilenotification
declare const NSWindowDidChangeScreenProfileNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowdiddeminiaturizenotification
declare const NSWindowDidDeminiaturizeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowdidendsheetnotification
declare const NSWindowDidEndSheetNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowdidexposenotification
declare const NSWindowDidExposeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowdidminiaturizenotification
declare const NSWindowDidMiniaturizeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowdidmovenotification
declare const NSWindowDidMoveNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowdidresignkeynotification
declare const NSWindowDidResignKeyNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowdidresignmainnotification
declare const NSWindowDidResignMainNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowdidresizenotification
declare const NSWindowDidResizeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowdidupdatenotification
declare const NSWindowDidUpdateNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowwillbeginsheetnotification
declare const NSWindowWillBeginSheetNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowwillclosenotification
declare const NSWindowWillCloseNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowwillminiaturizenotification
declare const NSWindowWillMiniaturizeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowwillmovenotification
declare const NSWindowWillMoveNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * A modal dialog or sheet attached to a document window.
   * doc://com.apple.documentation/documentation/appkit/nsalert
   */
  interface NSAlert extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsalert/1531823-alertwitherror
    alertWithError(error: NSError):NSAlert;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1550982-alertwithmessagetext
    alertWithMessageText_defaultButton_alternateButton_otherButton_informativeTextWithFormat(message: string | NSString, defaultButton: string | NSString, alternateButton: string | NSString, otherButton: string | NSString, ...format: Array<string | NSString>):NSAlert;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1526747-layout
    layout():void;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1528506-alertstyle
    alertStyle(): NSAlertStyle;
    setAlertStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1530575-accessoryview
    accessoryView(): NSView;
    setAccessoryView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1535856-showshelp
    showsHelp(): BOOL;
    setShowsHelp(): void;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1534314-helpanchor
    helpAnchor(): NSHelpAnchorName;
    setHelpAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1534327-delegate
    delegate(): NSAlertDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1535441-runmodal
    runModal():NSModalResponse;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1524296-beginsheetmodalforwindow
    beginSheetModalForWindow_completionHandler(sheetWindow: NSWindow, handler: NSModalResponse):void;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1532128-beginsheetmodalforwindow
    beginSheetModalForWindow_modalDelegate_didEndSelector_contextInfo(window: NSWindow, delegate: NSAlert, didEndSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1532209-suppressionbutton
    suppressionButton(): NSButton;
    setSuppressionButton(): void;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1535196-showssuppressionbutton
    showsSuppressionButton(): BOOL;
    setShowsSuppressionButton(): void;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1529629-informativetext
    informativeText(): string | NSString;
    setInformativeText(): void;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1532498-messagetext
    messageText(): string | NSString;
    setMessageText(): void;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1531688-icon
    icon(): NSImage;
    setIcon(): void;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1532992-buttons
    buttons(): NSButton;
    setButtons(): void;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1524532-addbuttonwithtitle
    addButtonWithTitle(title: string | NSString):NSButton;
    // doc://com.apple.documentation/documentation/appkit/nsalert/1526566-window
    window(): NSWindow;
    setWindow(): void;
    //
    alloc():NSAlert;
    //
    init():NSAlert;
  }
}

declare const NSAlert: cocoascript.NSAlert;
declare namespace cocoascript {
  /**
   * A special kind of window that typically performs a function that is auxiliary to the main window.
   * doc://com.apple.documentation/documentation/appkit/nspanel
   */
  interface NSPanel extends NSWindow {
    // doc://com.apple.documentation/documentation/appkit/nspanel/1531901-floatingpanel
    floatingPanel(): BOOL;
    setFloatingPanel(): void;
    // doc://com.apple.documentation/documentation/appkit/nspanel/1528836-becomeskeyonlyifneeded
    becomesKeyOnlyIfNeeded(): BOOL;
    setBecomesKeyOnlyIfNeeded(): void;
    // doc://com.apple.documentation/documentation/appkit/nspanel/1525549-workswhenmodal
    worksWhenModal(): BOOL;
    setWorksWhenModal(): void;
    //
    alloc():NSPanel;
    //
    init():NSPanel;
  }
}

declare const NSPanel: cocoascript.NSPanel;
declare namespace cocoascript {
  /**
   * A set of optional methods that a delegate of
   * doc://com.apple.documentation/documentation/appkit/nswindowdelegate
   */
  interface NSWindowDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419611-window
    window_willPositionSheet_usingRect(window: NSWindow, sheet: NSWindow, rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419408-windowwillbeginsheet
    windowWillBeginSheet(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419773-windowdidendsheet
    windowDidEndSheet(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419292-windowwillresize
    windowWillResize_toSize(sender: NSWindow, frameSize: NSSize):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419567-windowdidresize
    windowDidResize(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419555-windowwillstartliveresize
    windowWillStartLiveResize(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419150-windowdidendliveresize
    windowDidEndLiveResize(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419461-windowwillminiaturize
    windowWillMiniaturize(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419621-windowdidminiaturize
    windowDidMiniaturize(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419296-windowdiddeminiaturize
    windowDidDeminiaturize(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419684-windowwillusestandardframe
    windowWillUseStandardFrame_defaultFrame(window: NSWindow, newFrame: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419533-windowshouldzoom
    windowShouldZoom_toFrame(window: NSWindow, newFrame: NSRect):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419282-window
    window_willUseFullScreenContentSize(window: NSWindow, proposedSize: NSSize):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419144-window
    window_willUseFullScreenPresentationOptions(window: NSWindow, proposedOptions: NSApplicationPresentationOptions):NSApplicationPresentationOptions;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419563-windowwillenterfullscreen
    windowWillEnterFullScreen(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419116-windowdidenterfullscreen
    windowDidEnterFullScreen(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419332-windowwillexitfullscreen
    windowWillExitFullScreen(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419146-windowdidexitfullscreen
    windowDidExitFullScreen(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419521-customwindowstoenterfullscreenfo
    customWindowsToEnterFullScreenForWindow(window: NSWindow):NSWindow;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419557-customwindowstoenterfullscreenfo
    customWindowsToEnterFullScreenForWindow_onScreen(window: NSWindow, screen: NSScreen):NSWindow;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419406-window
    window_startCustomAnimationToEnterFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419709-window
    window_startCustomAnimationToEnterFullScreenOnScreen_withDuration(window: NSWindow, screen: NSScreen, duration: NSTimeInterval):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419591-windowdidfailtoenterfullscreen
    windowDidFailToEnterFullScreen(window: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419070-customwindowstoexitfullscreenfor
    customWindowsToExitFullScreenForWindow(window: NSWindow):NSWindow;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419705-window
    window_startCustomAnimationToExitFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419573-windowdidfailtoexitfullscreen
    windowDidFailToExitFullScreen(window: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419336-windowwillmove
    windowWillMove(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419674-windowdidmove
    windowDidMove(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419267-windowdidchangescreen
    windowDidChangeScreen(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419581-windowdidchangescreenprofile
    windowDidChangeScreenProfile(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419517-windowdidchangebackingproperties
    windowDidChangeBackingProperties(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419380-windowshouldclose
    windowShouldClose(sender: NSWindow):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419605-windowwillclose
    windowWillClose(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419737-windowdidbecomekey
    windowDidBecomeKey(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419711-windowdidresignkey
    windowDidResignKey(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419190-windowdidbecomemain
    windowDidBecomeMain(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419584-windowdidresignmain
    windowDidResignMain(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419416-windowwillreturnfieldeditor
    windowWillReturnFieldEditor_toObject(sender: NSWindow, client: NSWindowDelegate):NSWindowDelegate;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419493-windowdidupdate
    windowDidUpdate(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419258-windowdidexpose
    windowDidExpose(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419424-windowdidchangeocclusionstate
    windowDidChangeOcclusionState(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419452-window
    window_shouldDragDocumentWithEvent_from_withPasteboard(window: NSWindow, event: NSEvent, dragImageLocation: NSPoint, pasteboard: NSPasteboard):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419745-windowwillreturnundomanager
    windowWillReturnUndoManager(window: NSWindow):NSUndoManager;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419465-window
    window_shouldPopUpDocumentPathMenu(window: NSWindow, menu: NSMenu):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419619-window
    window_willEncodeRestorableState(window: NSWindow, state: NSCoder):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419475-window
    window_didDecodeRestorableState(window: NSWindow, state: NSCoder):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419360-window
    window_willResizeForVersionBrowserWithMaxPreferredSize_maxAllowedSize(window: NSWindow, maxPreferredFrameSize: NSSize, maxAllowedFrameSize: NSSize):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419463-windowwillenterversionbrowser
    windowWillEnterVersionBrowser(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419064-windowdidenterversionbrowser
    windowDidEnterVersionBrowser(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419252-windowwillexitversionbrowser
    windowWillExitVersionBrowser(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowdelegate/1419501-windowdidexitversionbrowser
    windowDidExitVersionBrowser(notification: NSNotification):void;
  }
}
declare namespace cocoascript {
  /**
   * A tab associated with a window that is part of a tabbing group.
   * doc://com.apple.documentation/documentation/appkit/nswindowtab
   */
  interface NSWindowTab extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nswindowtab/2869746-title
    title(): string | NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowtab/2869743-attributedtitle
    attributedTitle(): NSAttributedString;
    setAttributedTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowtab/2869744-tooltip
    toolTip(): string | NSString;
    setToolTip(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowtab/2869745-accessoryview
    accessoryView(): NSView;
    setAccessoryView(): void;
    //
    alloc():NSWindowTab;
    //
    init():NSWindowTab;
  }
}

declare const NSWindowTab: cocoascript.NSWindowTab;
declare namespace cocoascript {
  /**
   * A group of windows that display together as a single tabbed window.
   * doc://com.apple.documentation/documentation/appkit/nswindowtabgroup
   */
  interface NSWindowTabGroup extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nswindowtabgroup/2879445-identifier
    identifier(): NSWindowTabbingIdentifier;
    setIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowtabgroup/2879448-overviewvisible
    overviewVisible(): BOOL;
    setOverviewVisible(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowtabgroup/2879451-tabbarvisible
    tabBarVisible(): BOOL;
    setTabBarVisible(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowtabgroup/2879458-windows
    windows(): NSWindow;
    setWindows(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowtabgroup/2879457-selectedwindow
    selectedWindow(): NSWindow;
    setSelectedWindow(): void;
    // doc://com.apple.documentation/documentation/appkit/nswindowtabgroup/2879450-addwindow
    addWindow(window: NSWindow):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowtabgroup/2879455-insertwindow
    insertWindow_atIndex(window: NSWindow, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nswindowtabgroup/2879459-removewindow
    removeWindow(window: NSWindow):void;
    //
    alloc():NSWindowTabGroup;
    //
    init():NSWindowTabGroup;
  }
}

declare const NSWindowTabGroup: cocoascript.NSWindowTabGroup;
declare namespace cocoascript {
  /**
   * A set of methods that restoration classes must implement to handle the recreation of windows.
   * doc://com.apple.documentation/documentation/appkit/nswindowrestoration
   */
  interface NSWindowRestoration extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nswindowrestoration/1526251-restorewindowwithidentifier
    restoreWindowWithIdentifier_state_completionHandler(identifier: NSUserInterfaceItemIdentifier, state: NSCoder, completionHandler: NSError):void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods used to associate a unique identifier with objects in your user interface.
   * doc://com.apple.documentation/documentation/appkit/nsuserinterfaceitemidentification
   */
  interface NSUserInterfaceItemIdentification {
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfaceitemidentification/1396829-identifier
    identifier(): NSUserInterfaceItemIdentifier;
    setIdentifier(): void;
  }
}
declare namespace cocoascript {
  /**
   * An object that describes the attributes of a computer’s monitor or screen.
   * doc://com.apple.documentation/documentation/appkit/nsscreen
   */
  interface NSScreen extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsscreen/1388371-mainscreen
    mainScreen(): NSScreen;
    setMainScreen(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/1388374-deepestscreen
    deepestScreen(): NSScreen;
    setDeepestScreen(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/1388393-screens
    screens(): NSScreen;
    setScreens(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/1388373-depth
    depth(): NSWindowDepth;
    setDepth(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/1388387-frame
    frame(): NSRect;
    setFrame(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/1388391-supportedwindowdepths
    supportedWindowDepths(): NSWindowDepth;
    setSupportedWindowDepths(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/1388360-devicedescription
    deviceDescription(): id;
    setDeviceDescription(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/1388375-userspacescalefactor
    userSpaceScaleFactor():CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/1388369-visibleframe
    visibleFrame(): NSRect;
    setVisibleFrame(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/1388383-colorspace
    colorSpace(): NSColorSpace;
    setColorSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/2138325-canrepresentdisplaygamut
    canRepresentDisplayGamut(displayGamut: NSDisplayGamut):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/1388365-screenshaveseparatespaces
    screensHaveSeparateSpaces(): BOOL;
    setScreensHaveSeparateSpaces(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/1388381-backingalignedrect
    backingAlignedRect_options(rect: NSRect, options: NSAlignmentOptions):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/1388385-backingscalefactor
    backingScaleFactor(): CGFloat;
    setBackingScaleFactor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/1388364-convertrectfrombacking
    convertRectFromBacking(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/1388389-convertrecttobacking
    convertRectToBacking(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/3180381-maximumpotentialextendeddynamicr
    maximumPotentialExtendedDynamicRangeColorComponentValue(): CGFloat;
    setMaximumPotentialExtendedDynamicRangeColorComponentValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/1388362-maximumextendeddynamicrangecolor
    maximumExtendedDynamicRangeColorComponentValue(): CGFloat;
    setMaximumExtendedDynamicRangeColorComponentValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/3180382-maximumreferenceextendeddynamicr
    maximumReferenceExtendedDynamicRangeColorComponentValue(): CGFloat;
    setMaximumReferenceExtendedDynamicRangeColorComponentValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscreen/3228043-localizedname
    localizedName(): string | NSString;
    setLocalizedName(): void;
    //
    alloc():NSScreen;
    //
    init():NSScreen;
  }
}

declare const NSScreen: cocoascript.NSScreen;
declare namespace cocoascript {
  /**
   * A means to display additional content related to existing content on the screen.
   * doc://com.apple.documentation/documentation/appkit/nspopover
   */
  interface NSPopover extends NSResponder {
    // doc://com.apple.documentation/documentation/appkit/nspopover/1526794-contentviewcontroller
    contentViewController(): NSViewController;
    setContentViewController(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopover/1533539-behavior
    behavior(): NSPopoverBehavior;
    setBehavior(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopover/1532113-showrelativetorect
    showRelativeToRect_ofView_preferredEdge(positioningRect: NSRect, positioningView: NSView, preferredEdge: NSRectEdge):void;
    // doc://com.apple.documentation/documentation/appkit/nspopover/1526090-positioningrect
    positioningRect(): NSRect;
    setPositioningRect(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopover/1529859-appearance
    appearance(): NSAppearance;
    setAppearance(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopover/1526863-effectiveappearance
    effectiveAppearance(): NSAppearance;
    setEffectiveAppearance(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopover/1526527-animates
    animates(): BOOL;
    setAnimates(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopover/1524677-contentsize
    contentSize(): NSSize;
    setContentSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopover/1535120-shown
    shown(): BOOL;
    setShown(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopover/1534278-detached
    detached(): BOOL;
    setDetached(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopover/1534290-performclose
    performClose(sender: NSPopover):void;
    // doc://com.apple.documentation/documentation/appkit/nspopover/1526823-close
    close():void;
    // doc://com.apple.documentation/documentation/appkit/nspopover/1526708-delegate
    delegate(): NSPopoverDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopover/1526851-init
    init():NSPopover;
    // doc://com.apple.documentation/documentation/appkit/nspopover/1524631-initwithcoder
    initWithCoder(coder: NSCoder):NSPopover;
    //
    alloc():NSPopover;
    //
    init():NSPopover;
  }
}

declare const NSPopover: cocoascript.NSPopover;
// doc://com.apple.documentation/documentation/appkit/nspopoverclosereasonkey
declare const NSPopoverCloseReasonKey: string | NSString;
declare namespace cocoascript {
  /**
   * A set of optional methods that a popover delegate can implement to provide additional or custom functionality.
   * doc://com.apple.documentation/documentation/appkit/nspopoverdelegate
   */
  interface NSPopoverDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nspopoverdelegate/1534822-detachablewindowforpopover
    detachableWindowForPopover(popover: NSPopover):NSWindow;
    // doc://com.apple.documentation/documentation/appkit/nspopoverdelegate/1532593-popovershouldclose
    popoverShouldClose(popover: NSPopover):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspopoverdelegate/1532556-popoverwillshow
    popoverWillShow(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nspopoverdelegate/1533573-popoverdidshow
    popoverDidShow(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nspopoverdelegate/1535119-popoverwillclose
    popoverWillClose(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nspopoverdelegate/1526581-popoverdidclose
    popoverDidClose(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nspopoverdelegate/1524674-popoverdiddetach
    popoverDidDetach(popover: NSPopover):void;
    // doc://com.apple.documentation/documentation/appkit/nspopoverdelegate/1529911-popovershoulddetach
    popoverShouldDetach(popover: NSPopover):BOOL;
  }
}
declare namespace cocoascript {
  /**
   * A set of optional methods implemented by the delegate of an
   * doc://com.apple.documentation/documentation/appkit/nsalertdelegate
   */
  interface NSAlertDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsalertdelegate/1526980-alertshowhelp
    alertShowHelp(alert: NSAlert):BOOL;
  }
}
declare namespace cocoascript {
  /**
   * A panel that prompts the user to select a file to open.
   * doc://com.apple.documentation/documentation/appkit/nsopenpanel
   */
  interface NSOpenPanel extends NSSavePanel {
    // doc://com.apple.documentation/documentation/appkit/nsopenpanel/1584365-openpanel
    openPanel():NSOpenPanel;
    // doc://com.apple.documentation/documentation/appkit/nsopenpanel/1527060-canchoosefiles
    canChooseFiles(): BOOL;
    setCanChooseFiles(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenpanel/1532668-canchoosedirectories
    canChooseDirectories(): BOOL;
    setCanChooseDirectories(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenpanel/1533625-resolvesaliases
    resolvesAliases(): BOOL;
    setResolvesAliases(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenpanel/1530786-allowsmultipleselection
    allowsMultipleSelection(): BOOL;
    setAllowsMultipleSelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenpanel/1535036-accessoryviewdisclosed
    accessoryViewDisclosed(): BOOL;
    setAccessoryViewDisclosed(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenpanel/1529845-urls
    URLs(): NSURL;
    setURLs(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenpanel/1533418-candownloadubiquitouscontents
    canDownloadUbiquitousContents(): BOOL;
    setCanDownloadUbiquitousContents(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenpanel/1533261-canresolveubiquitousconflicts
    canResolveUbiquitousConflicts(): BOOL;
    setCanResolveUbiquitousConflicts(): void;
    //
    alloc():NSOpenPanel;
    //
    init():NSOpenPanel;
  }
}

declare const NSOpenPanel: cocoascript.NSOpenPanel;
declare namespace cocoascript {
  /**
   * A panel that prompts the user for information about where to save a file.
   * doc://com.apple.documentation/documentation/appkit/nssavepanel
   */
  interface NSSavePanel extends NSPanel {
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1539016-savepanel
    savePanel():NSSavePanel;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1532570-delegate
    delegate(): NSOpenSavePanelDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1535870-beginsheetmodalforwindow
    beginSheetModalForWindow_completionHandler(window: NSWindow, handler: NSModalResponse):void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1527007-beginwithcompletionhandler
    beginWithCompletionHandler(handler: NSModalResponse):void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1525357-runmodal
    runModal():NSModalResponse;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1526381-validatevisiblecolumns
    validateVisibleColumns():void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1534384-url
    URL(): NSURL;
    setURL(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1535071-title
    title(): string | NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1525227-prompt
    prompt(): string | NSString;
    setPrompt(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1528581-message
    message(): string | NSString;
    setMessage(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1535411-namefieldlabel
    nameFieldLabel(): string | NSString;
    setNameFieldLabel(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1529299-namefieldstringvalue
    nameFieldStringValue(): string | NSString;
    setNameFieldStringValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1531279-directoryurl
    directoryURL(): NSURL;
    setDirectoryURL(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1525544-accessoryview
    accessoryView(): NSView;
    setAccessoryView(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1525589-showstagfield
    showsTagField(): BOOL;
    setShowsTagField(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1535928-tagnames
    tagNames(): string | NSString;
    setTagNames(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1532626-cancreatedirectories
    canCreateDirectories(): BOOL;
    setCanCreateDirectories(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1535360-canselecthiddenextension
    canSelectHiddenExtension(): BOOL;
    setCanSelectHiddenExtension(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1524285-showshiddenfiles
    showsHiddenFiles(): BOOL;
    setShowsHiddenFiles(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1529267-extensionhidden
    extensionHidden(): BOOL;
    setExtensionHidden(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1534515-expanded
    expanded(): BOOL;
    setExpanded(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/3566857-allowedcontenttypes
    allowedContentTypes(): UTType;
    setAllowedContentTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1526960-allowsotherfiletypes
    allowsOtherFileTypes(): BOOL;
    setAllowsOtherFileTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1529384-treatsfilepackagesasdirectories
    treatsFilePackagesAsDirectories(): BOOL;
    setTreatsFilePackagesAsDirectories(): void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1535364-ok
    ok(sender: NSSavePanel):void;
    // doc://com.apple.documentation/documentation/appkit/nssavepanel/1534357-cancel
    cancel(sender: NSSavePanel):void;
    //
    alloc():NSSavePanel;
    //
    init():NSSavePanel;
  }
}

declare const NSSavePanel: cocoascript.NSSavePanel;
declare namespace cocoascript {
  /**
   * A set of methods for managing interactions with an open or save panel.
   * doc://com.apple.documentation/documentation/appkit/nsopensavepaneldelegate
   */
  interface NSOpenSavePanelDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsopensavepaneldelegate/1524630-panel
    panel_userEnteredFilename_confirmed(sender: NSOpenSavePanelDelegate, filename: string | NSString, okFlag: BOOL):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsopensavepaneldelegate/1533556-panelselectiondidchange
    panelSelectionDidChange(sender: NSOpenSavePanelDelegate):void;
    // doc://com.apple.documentation/documentation/appkit/nsopensavepaneldelegate/1527117-panel
    panel_didChangeToDirectoryURL(sender: NSOpenSavePanelDelegate, url: NSURL):void;
    // doc://com.apple.documentation/documentation/appkit/nsopensavepaneldelegate/1532953-panel
    panel_willExpand(sender: NSOpenSavePanelDelegate, expanding: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsopensavepaneldelegate/1535200-panel
    panel_shouldEnableURL(sender: NSOpenSavePanelDelegate, url: NSURL):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsopensavepaneldelegate/1535141-panel
    panel_validateURL_error(sender: NSOpenSavePanelDelegate, url: NSURL, outError: NSError):BOOL;
  }
}
declare namespace cocoascript {
  /**
   * A Save or Export as PDF panel that’s consistent with the macOS user interface.
   * doc://com.apple.documentation/documentation/appkit/nspdfpanel
   */
  interface NSPDFPanel extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nspdfpanel/1577141-panel
    panel():NSPDFPanel;
    // doc://com.apple.documentation/documentation/appkit/nspdfpanel/1524637-accessorycontroller
    accessoryController(): NSViewController;
    setAccessoryController(): void;
    // doc://com.apple.documentation/documentation/appkit/nspdfpanel/1532479-options
    options(): NSPDFPanelOptions;
    setOptions(): void;
    // doc://com.apple.documentation/documentation/appkit/nspdfpanel/1532720-defaultfilename
    defaultFileName(): string | NSString;
    setDefaultFileName(): void;
    // doc://com.apple.documentation/documentation/appkit/nspdfpanel/1529098-beginsheetwithpdfinfo
    beginSheetWithPDFInfo_modalForWindow_completionHandler(pdfInfo: NSPDFInfo, docWindow: NSWindow, completionHandler: NSInteger):void;
    //
    alloc():NSPDFPanel;
    //
    init():NSPDFPanel;
  }
}

declare const NSPDFPanel: cocoascript.NSPDFPanel;
declare namespace cocoascript {
  /**
   * A set of methods that a Print panel object can use to get information from a printing accessory controller.
   * doc://com.apple.documentation/documentation/appkit/nsprintpanelaccessorizing
   */
  interface NSPrintPanelAccessorizing {
    // doc://com.apple.documentation/documentation/appkit/nsprintpanelaccessorizing/1490521-localizedsummaryitems
    localizedSummaryItems():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanelaccessorizing/1490516-keypathsforvaluesaffectingprevie
    keyPathsForValuesAffectingPreview():string | NSString;
  }
}
declare namespace cocoascript {
  /**
   * A standard user interface for selecting color in an app.
   * doc://com.apple.documentation/documentation/appkit/nscolorpanel
   */
  interface NSColorPanel extends NSPanel {
    // doc://com.apple.documentation/documentation/appkit/nscolorpanel/1524482-sharedcolorpanel
    sharedColorPanel(): NSColorPanel;
    setSharedColorPanel(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpanel/1525183-sharedcolorpanelexists
    sharedColorPanelExists(): BOOL;
    setSharedColorPanelExists(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpanel/1532235-setpickermode
    setPickerMode(mode: NSColorPanelMode):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpanel/1525410-mode
    mode(): NSColorPanelMode;
    setMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpanel/1534004-setpickermask
    setPickerMask(mask: NSColorPanelOptions):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpanel/1526892-accessoryview
    accessoryView(): NSView;
    setAccessoryView(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpanel/1528265-continuous
    continuous(): BOOL;
    setContinuous(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpanel/1531244-setaction
    setAction(selector: SEL):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpanel/1524753-settarget
    setTarget(target: NSColorPanel):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpanel/1525279-showsalpha
    showsAlpha(): BOOL;
    setShowsAlpha(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpanel/1531970-attachcolorlist
    attachColorList(colorList: NSColorList):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpanel/1529357-detachcolorlist
    detachColorList(colorList: NSColorList):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpanel/1529152-dragcolor
    dragColor_withEvent_fromView(color: NSColor, event: NSEvent, sourceView: NSView):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscolorpanel/1530835-color
    color(): NSColor;
    setColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpanel/1526246-alpha
    alpha(): CGFloat;
    setAlpha(): void;
    // doc://com.apple.documentation/documentation/objectivec/nsobject/1532638-changecolor
    changeColor(sender: NSColorPanel):void;
    //
    alloc():NSColorPanel;
    //
    init():NSColorPanel;
  }
}

declare const NSColorPanel: cocoascript.NSColorPanel;
// doc://com.apple.documentation/documentation/appkit/nscolorpanelcolordidchangenotification
declare const NSColorPanelColorDidChangeNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * A set of methods that provides a way to add color pickers—custom user interfaces for color selection—to an app’s color panel.
   * doc://com.apple.documentation/documentation/appkit/nscolorpickingcustom
   */
  interface NSColorPickingCustom extends NSColorPickingDefault {
    // doc://com.apple.documentation/documentation/appkit/nscolorpickingcustom/1526545-setcolor
    setColor(newColor: NSColor):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickingcustom/1524671-currentmode
    currentMode():NSColorPanelMode;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickingcustom/1524683-supportsmode
    supportsMode(mode: NSColorPanelMode):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickingcustom/1525701-providenewview
    provideNewView(initialRequest: BOOL):NSView;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that provides basic behavior for a color picker.
   * doc://com.apple.documentation/documentation/appkit/nscolorpickingdefault
   */
  interface NSColorPickingDefault {
    // doc://com.apple.documentation/documentation/appkit/nscolorpickingdefault/1528432-initwithpickermask
    initWithPickerMask_colorPanel(mask: NSUInteger, owningColorPanel: NSColorPanel):NSColorPickingDefault;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickingdefault/1525088-setmode
    setMode(mode: NSColorPanelMode):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickingdefault/1525078-insertnewbuttonimage
    insertNewButtonImage_in(newButtonImage: NSImage, buttonCell: NSButtonCell):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickingdefault/1534615-providenewbuttonimage
    provideNewButtonImage():NSImage;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickingdefault/1535437-mincontentsize
    minContentSize():NSSize;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickingdefault/1535160-buttontooltip
    buttonToolTip():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickingdefault/1535478-alphacontroladdedorremoved
    alphaControlAddedOrRemoved(sender: NSColorPickingDefault):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickingdefault/1535866-viewsizechanged
    viewSizeChanged(sender: NSColorPickingDefault):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickingdefault/1531650-attachcolorlist
    attachColorList(colorList: NSColorList):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickingdefault/1532761-detachcolorlist
    detachColorList(colorList: NSColorList):void;
  }
}
declare namespace cocoascript {
  /**
   * An abstract superclass that implements the default color picking protocol.
   * doc://com.apple.documentation/documentation/appkit/nscolorpicker
   */
  interface NSColorPicker extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscolorpicker/1492397-initwithpickermask
    initWithPickerMask_colorPanel(mask: NSUInteger, owningColorPanel: NSColorPanel):NSColorPicker;
    // doc://com.apple.documentation/documentation/appkit/nscolorpicker/1492396-colorpanel
    colorPanel(): NSColorPanel;
    setColorPanel(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpicker/1492402-insertnewbuttonimage
    insertNewButtonImage_in(newButtonImage: NSImage, buttonCell: NSButtonCell):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpicker/1492393-providenewbuttonimage
    provideNewButtonImage(): NSImage;
    setProvideNewButtonImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpicker/1492394-setmode
    setMode(mode: NSColorPanelMode):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpicker/1492395-attachcolorlist
    attachColorList(colorList: NSColorList):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpicker/1492388-detachcolorlist
    detachColorList(colorList: NSColorList):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpicker/1492389-viewsizechanged
    viewSizeChanged(sender: NSColorPicker):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpicker/1492404-buttontooltip
    buttonToolTip(): string | NSString;
    setButtonToolTip(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpicker/1492391-mincontentsize
    minContentSize(): NSSize;
    setMinContentSize(): void;
    //
    alloc():NSColorPicker;
    //
    init():NSColorPicker;
  }
}

declare const NSColorPicker: cocoascript.NSColorPicker;
declare namespace cocoascript {
  /**
   * The Font panel—a user interface object that displays a list of available fonts, letting the user preview them and change the font used to display text.
   * doc://com.apple.documentation/documentation/appkit/nsfontpanel
   */
  interface NSFontPanel extends NSPanel {
    // doc://com.apple.documentation/documentation/appkit/nsfontpanel/1527046-sharedfontpanel
    sharedFontPanel(): NSFontPanel;
    setSharedFontPanel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontpanel/1524657-sharedfontpanelexists
    sharedFontPanelExists(): BOOL;
    setSharedFontPanelExists(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontpanel/1526041-enabled
    enabled(): BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontpanel/1535396-reloaddefaultfontfamilies
    reloadDefaultFontFamilies():void;
    // doc://com.apple.documentation/documentation/appkit/nsfontpanel/1532648-setpanelfont
    setPanelFont_isMultiple(fontObj: NSFont, flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsfontpanel/1535338-panelconvertfont
    panelConvertFont(fontObj: NSFont):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfontpanel/1529532-workswhenmodal
    worksWhenModal(): BOOL;
    setWorksWhenModal(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontpanel/1535927-accessoryview
    accessoryView(): NSView;
    setAccessoryView(): void;
    //
    alloc():NSFontPanel;
    //
    init():NSFontPanel;
  }
}

declare const NSFontPanel: cocoascript.NSFontPanel;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontpanelmodemask
  type NSFontPanelModeMask = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsfontchanging
   */
  interface NSFontChanging extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsfontchanging/3005180-changefont
    changeFont(sender: NSFontManager):void;
    // doc://com.apple.documentation/documentation/appkit/nsfontchanging/3005181-validmodesforfontpanel
    validModesForFontPanel(fontPanel: NSFontPanel):NSFontPanelModeMask;
  }
}
declare namespace cocoascript {
  /**
   * A simple interface for loading and playing audio files.
   * doc://com.apple.documentation/documentation/appkit/nssound
   */
  interface NSSound extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nssound/1477300-delegate
    delegate(): NSSoundDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477276-caninitwithpasteboard
    canInitWithPasteboard(pasteboard: NSPasteboard):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477274-initwithcontentsoffile
    initWithContentsOfFile_byReference(path: string | NSString, byRef: BOOL):NSSound;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477288-initwithcontentsofurl
    initWithContentsOfURL_byReference(url: NSURL, byRef: BOOL):NSSound;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477292-initwithdata
    initWithData(data: NSData):NSSound;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477294-initwithpasteboard
    initWithPasteboard(pasteboard: NSPasteboard):NSSound;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477296-name
    name(): NSSoundName;
    setName(): void;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477286-setname
    setName(string: NSSoundName):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477315-volume
    volume(): number;
    setVolume(): void;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477320-currenttime
    currentTime(): NSTimeInterval;
    setCurrentTime(): void;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477311-loops
    loops(): BOOL;
    setLoops(): void;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477284-playbackdeviceidentifier
    playbackDeviceIdentifier(): NSSoundPlaybackDeviceIdentifier;
    setPlaybackDeviceIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477290-soundunfilteredtypes
    soundUnfilteredTypes(): string | NSString;
    setSoundUnfilteredTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477318-soundnamed
    soundNamed(name: NSSoundName):NSSound;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477313-duration
    duration(): NSTimeInterval;
    setDuration(): void;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477302-playing
    playing(): BOOL;
    setPlaying(): void;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477307-pause
    pause():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477322-play
    play():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477336-resume
    resume():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477282-stop
    stop():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477338-writetopasteboard
    writeToPasteboard(pasteboard: NSPasteboard):void;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477326-channelmapping
    channelMapping():NSArray;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477317-setchannelmapping
    setChannelMapping(channelMapping: NSArray):void;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477309-soundunfilteredfiletypes
    soundUnfilteredFileTypes():NSArray;
    // doc://com.apple.documentation/documentation/appkit/nssound/1477278-soundunfilteredpasteboardtypes
    soundUnfilteredPasteboardTypes():NSArray;
    //
    alloc():NSSound;
    //
    init():NSSound;
  }
}

declare const NSSound: cocoascript.NSSound;
declare namespace cocoascript {
  /**
   * The Cocoa interface to speech recognition in macOS.
   * doc://com.apple.documentation/documentation/appkit/nsspeechrecognizer
   */
  interface NSSpeechRecognizer extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsspeechrecognizer/1527990-init
    init():NSSpeechRecognizer;
    // doc://com.apple.documentation/documentation/appkit/nsspeechrecognizer/1528171-delegate
    delegate(): NSSpeechRecognizerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechrecognizer/1529757-commands
    commands(): string | NSString;
    setCommands(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechrecognizer/1530622-displayedcommandstitle
    displayedCommandsTitle(): string | NSString;
    setDisplayedCommandsTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechrecognizer/1533405-listensinforegroundonly
    listensInForegroundOnly(): BOOL;
    setListensInForegroundOnly(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechrecognizer/1533022-blocksotherrecognizers
    blocksOtherRecognizers(): BOOL;
    setBlocksOtherRecognizers(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechrecognizer/1528154-startlistening
    startListening():void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechrecognizer/1529583-stoplistening
    stopListening():void;
    //
    alloc():NSSpeechRecognizer;
    //
    init():NSSpeechRecognizer;
  }
}

declare const NSSpeechRecognizer: cocoascript.NSSpeechRecognizer;
declare namespace cocoascript {
  /**
   * The Cocoa interface to speech synthesis in macOS.
   * doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer
   */
  interface NSSpeechSynthesizer extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448381-initwithvoice
    initWithVoice(voice: NSSpeechSynthesizerVoiceName):NSSpeechSynthesizer;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448460-delegate
    delegate(): NSSpeechSynthesizerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448488-usesfeedbackwindow
    usesFeedbackWindow(): BOOL;
    setUsesFeedbackWindow(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448494-voice
    voice():NSSpeechSynthesizerVoiceName;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448384-setvoice
    setVoice(voice: NSSpeechSynthesizerVoiceName):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448450-rate
    rate(): number;
    setRate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448501-volume
    volume(): number;
    setVolume(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448532-addspeechdictionary
    addSpeechDictionary(speechDictionary: NSSpeechSynthesizer):void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448436-objectforproperty
    objectForProperty_error(property: NSSpeechPropertyKey, outError: NSError):NSSpeechSynthesizer;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448425-setobject
    setObject_forProperty_error(object: NSSpeechSynthesizer, property: NSSpeechPropertyKey, outError: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448470-availablevoices
    availableVoices(): NSSpeechSynthesizerVoiceName;
    setAvailableVoices(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448458-attributesforvoice
    attributesForVoice(voice: NSSpeechSynthesizerVoiceName):NSSpeechSynthesizer;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448513-defaultvoice
    defaultVoice(): NSSpeechSynthesizerVoiceName;
    setDefaultVoice(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/2870216-anyapplicationspeaking
    anyApplicationSpeaking(): BOOL;
    setAnyApplicationSpeaking(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448511-speaking
    speaking(): BOOL;
    setSpeaking(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448378-startspeakingstring
    startSpeakingString(string: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448394-startspeakingstring
    startSpeakingString_toURL(string: string | NSString, url: NSURL):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448492-pausespeakingatboundary
    pauseSpeakingAtBoundary(boundary: NSSpeechBoundary):void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448505-continuespeaking
    continueSpeaking():void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448392-stopspeaking
    stopSpeaking():void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448374-stopspeakingatboundary
    stopSpeakingAtBoundary(boundary: NSSpeechBoundary):void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizer/1448500-phonemesfromtext
    phonemesFromText(text: string | NSString):string | NSString;
    //
    alloc():NSSpeechSynthesizer;
    //
    init():NSSpeechSynthesizer;
  }
}

declare const NSSpeechSynthesizer: cocoascript.NSSpeechSynthesizer;
declare namespace cocoascript {
  /**
   * An object that provides access to the haptic feedback management attributes on a system with a Force Touch trackpad.
   * doc://com.apple.documentation/documentation/appkit/nshapticfeedbackmanager
   */
  interface NSHapticFeedbackManager extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nshapticfeedbackmanager/1441752-defaultperformer
    defaultPerformer(): NSHapticFeedbackPerformer;
    setDefaultPerformer(): void;
    //
    alloc():NSHapticFeedbackManager;
    //
    init():NSHapticFeedbackManager;
  }
}

declare const NSHapticFeedbackManager: cocoascript.NSHapticFeedbackManager;
declare namespace cocoascript {
  /**
   * A set of methods and constants that a haptic feedback performer implements.
   * doc://com.apple.documentation/documentation/appkit/nshapticfeedbackperformer
   */
  interface NSHapticFeedbackPerformer extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nshapticfeedbackperformer/1441738-performfeedbackpattern
    performFeedbackPattern_performanceTime(pattern: NSHapticFeedbackPattern, performanceTime: NSHapticFeedbackPerformanceTime):void;
  }
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsalignmentfeedbacktoken
   */
  interface NSAlignmentFeedbackToken extends NSObject {
  }
}
declare namespace cocoascript {
  /**
   * An object that can filter the movement of an object and provides haptic feedback when alignment occurs.
   * doc://com.apple.documentation/documentation/appkit/nsalignmentfeedbackfilter
   */
  interface NSAlignmentFeedbackFilter extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsalignmentfeedbackfilter/1530921-inputeventmask
    inputEventMask(): NSEventMask;
    setInputEventMask(): void;
    // doc://com.apple.documentation/documentation/appkit/nsalignmentfeedbackfilter/1532257-updatewithevent
    updateWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsalignmentfeedbackfilter/1527844-updatewithpanrecognizer
    updateWithPanRecognizer(panRecognizer: NSPanGestureRecognizer):void;
    // doc://com.apple.documentation/documentation/appkit/nsalignmentfeedbackfilter/1535346-alignmentfeedbacktokenformovemen
    alignmentFeedbackTokenForMovementInView_previousPoint_alignedPoint_defaultPoint(view: NSView, previousPoint: NSPoint, alignedPoint: NSPoint, defaultPoint: NSPoint):NSAlignmentFeedbackToken;
    // doc://com.apple.documentation/documentation/appkit/nsalignmentfeedbackfilter/1534596-alignmentfeedbacktokenforhorizon
    alignmentFeedbackTokenForHorizontalMovementInView_previousX_alignedX_defaultX(view: NSView, previousX: CGFloat, alignedX: CGFloat, defaultX: CGFloat):NSAlignmentFeedbackToken;
    // doc://com.apple.documentation/documentation/appkit/nsalignmentfeedbackfilter/1531563-alignmentfeedbacktokenforvertica
    alignmentFeedbackTokenForVerticalMovementInView_previousY_alignedY_defaultY(view: NSView, previousY: CGFloat, alignedY: CGFloat, defaultY: CGFloat):NSAlignmentFeedbackToken;
    // doc://com.apple.documentation/documentation/appkit/nsalignmentfeedbackfilter/1534423-performfeedback
    performFeedback_performanceTime(alignmentFeedbackTokens: NSAlignmentFeedbackToken, performanceTime: NSHapticFeedbackPerformanceTime):void;
    //
    alloc():NSAlignmentFeedbackFilter;
    //
    init():NSAlignmentFeedbackFilter;
  }
}

declare const NSAlignmentFeedbackFilter: cocoascript.NSAlignmentFeedbackFilter;
declare namespace cocoascript {
  /**
   * An abstract class that forms the basis of event and command processing in AppKit.
   * doc://com.apple.documentation/documentation/appkit/nsresponder
   */
  interface NSResponder extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1528708-acceptsfirstresponder
    acceptsFirstResponder(): BOOL;
    setAcceptsFirstResponder(): void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1526750-becomefirstresponder
    becomeFirstResponder():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1532115-resignfirstresponder
    resignFirstResponder():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1527066-validateproposedfirstresponder
    validateProposedFirstResponder_forEvent(responder: NSResponder, event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1528245-nextresponder
    nextResponder(): NSResponder;
    setNextResponder(): void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1524634-mousedown
    mouseDown(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1527420-mousedragged
    mouseDragged(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1535349-mouseup
    mouseUp(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1525114-mousemoved
    mouseMoved(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1529306-mouseentered
    mouseEntered(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1527561-mouseexited
    mouseExited(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1524727-rightmousedown
    rightMouseDown(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1529135-rightmousedragged
    rightMouseDragged(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1526309-rightmouseup
    rightMouseUp(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1525719-othermousedown
    otherMouseDown(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1529804-othermousedragged
    otherMouseDragged(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1531343-othermouseup
    otherMouseUp(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1525805-keydown
    keyDown(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1527436-keyup
    keyUp(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1531599-interpretkeyevents
    interpretKeyEvents(eventArray: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1524690-performkeyequivalent
    performKeyEquivalent(event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1584388-performmnemonic
    performMnemonic(string: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1527264-flushbufferedkeyevents
    flushBufferedKeyEvents():void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1534071-pressurechangewithevent
    pressureChangeWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1525066-cursorupdate
    cursorUpdate(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1527647-flagschanged
    flagsChanged(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1530905-tabletpoint
    tabletPoint(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1527018-tabletproximity
    tabletProximity(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1525123-helprequested
    helpRequested(eventPtr: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1534192-scrollwheel
    scrollWheel(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1535080-quicklookwithevent
    quickLookWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/3237219-changemodewithevent
    changeModeWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1535269-supplementaltargetforaction
    supplementalTargetForAction_sender(action: SEL, sender: NSResponder):NSResponder;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1526236-encoderestorablestatewithcoder
    encodeRestorableStateWithCoder(coder: NSCoder):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1526253-restorestatewithcoder
    restoreStateWithCoder(coder: NSCoder):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1526242-restorablestatekeypaths
    restorableStateKeyPaths(): string | NSString;
    setRestorableStateKeyPaths(): void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1526243-invalidaterestorablestate
    invalidateRestorableState():void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1534108-useractivity
    userActivity(): NSUserActivity;
    setUserActivity(): void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1534884-updateuseractivitystate
    updateUserActivityState(userActivity: NSUserActivity):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1531294-presenterror
    presentError(error: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1534705-presenterror
    presentError_modalForWindow_delegate_didPresentSelector_contextInfo(error: NSError, window: NSWindow, delegate: NSResponder, didPresentSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1525188-willpresenterror
    willPresentError(error: NSError):NSError;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1524516-trytoperform
    tryToPerform_with(action: SEL, object: NSResponder):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1533094-menu
    menu(): NSMenu;
    setMenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1524638-validrequestorforsendtype
    validRequestorForSendType_returnType(sendType: NSPasteboardType, returnType: NSPasteboardType):NSResponder;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1535376-undomanager
    undoManager(): NSUndoManager;
    setUndoManager(): void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1534105-shouldbetreatedasinkevent
    shouldBeTreatedAsInkEvent(event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1534197-noresponderfor
    noResponderFor(eventSelector: SEL):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1555072-setinterfacestyle
    setInterfaceStyle(interfaceStyle: NSInterfaceStyle):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1555071-interfacestyle
    interfaceStyle():NSInterfaceStyle;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1526368-begingesturewithevent
    beginGestureWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1531251-endgesturewithevent
    endGestureWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1525862-magnifywithevent
    magnifyWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1525572-rotatewithevent
    rotateWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1524275-swipewithevent
    swipeWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1531151-touchesbeganwithevent
    touchesBeganWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1524501-touchesmovedwithevent
    touchesMovedWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1530614-touchescancelledwithevent
    touchesCancelledWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1525779-touchesendedwithevent
    touchesEndedWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1534209-wantsforwardedscrolleventsforaxi
    wantsForwardedScrollEventsForAxis(axis: NSEventGestureAxis):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1532984-smartmagnifywithevent
    smartMagnifyWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1527456-wantsscrolleventsforswipetrackin
    wantsScrollEventsForSwipeTrackingOnAxis(axis: NSEventGestureAxis):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1525967-performtextfinderaction
    performTextFinderAction(sender: NSResponder):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1525437-init
    init():NSResponder;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1535389-initwithcoder
    initWithCoder(coder: NSCoder):NSResponder;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/2544731-touchbar
    touchBar(): NSTouchBar;
    setTouchBar(): void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/2876293-encoderestorablestatewithcoder
    encodeRestorableStateWithCoder_backgroundQueue(coder: NSCoder, queue: NSOperationQueue):void;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/2544690-maketouchbar
    makeTouchBar():NSTouchBar;
    // doc://com.apple.documentation/documentation/appkit/nsresponder/1644675-newwindowfortab
    newWindowForTab(sender: NSResponder):void;
    //
    alloc():NSResponder;
    //
    init():NSResponder;
  }
}

declare const NSResponder: cocoascript.NSResponder;
// doc://com.apple.documentation/documentation/appkit/nsinterfacestyledefault
declare const NSInterfaceStyleDefault: string | NSString;
declare namespace cocoascript {
  /**
   * An object that contains information about an input action, such as a mouse click or a key press.
   * doc://com.apple.documentation/documentation/appkit/nsevent
   */
  interface NSEvent extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsevent/1533943-keyeventwithtype
    keyEventWithType_location_modifierFlags_timestamp_windowNumber_context_characters_charactersIgnoringModifiers_isARepeat_keyCode(type: NSEventType, location: NSPoint, flags: NSEventModifierFlags, time: NSTimeInterval, wNum: NSInteger, unusedPassNil: NSGraphicsContext, keys: string | NSString, ukeys: string | NSString, flag: BOOL, code: number):NSEvent;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1532495-mouseeventwithtype
    mouseEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_clickCount_pressure(type: NSEventType, location: NSPoint, flags: NSEventModifierFlags, time: NSTimeInterval, wNum: NSInteger, unusedPassNil: NSGraphicsContext, eNum: NSInteger, cNum: NSInteger, pressure: number):NSEvent;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1535383-enterexiteventwithtype
    enterExitEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_trackingNumber_userData(type: NSEventType, location: NSPoint, flags: NSEventModifierFlags, time: NSTimeInterval, wNum: NSInteger, unusedPassNil: NSGraphicsContext, eNum: NSInteger, tNum: NSInteger, data: void):NSEvent;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1530010-othereventwithtype
    otherEventWithType_location_modifierFlags_timestamp_windowNumber_context_subtype_data1_data2(type: NSEventType, location: NSPoint, flags: NSEventModifierFlags, time: NSTimeInterval, wNum: NSInteger, unusedPassNil: NSGraphicsContext, subtype: number, d1: NSInteger, d2: NSInteger):NSEvent;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1528021-eventwitheventref
    eventWithEventRef(eventRef: void):NSEvent;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1526299-eventwithcgevent
    eventWithCGEvent(cgEvent: CGEventRef):NSEvent;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1528439-type
    type(): NSEventType;
    setType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1527726-subtype
    subtype(): NSEventSubtype;
    setSubtype(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1534405-modifierflags
    modifierFlags(): NSEventModifierFlags;
    setModifierFlags(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1524291-context
    context(): NSGraphicsContext;
    setContext(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1529068-locationinwindow
    locationInWindow(): NSPoint;
    setLocationInWindow(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1528239-timestamp
    timestamp(): NSTimeInterval;
    setTimestamp(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1530808-window
    window(): NSWindow;
    setWindow(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1531361-windownumber
    windowNumber(): NSInteger;
    setWindowNumber(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1525143-eventref
    eventRef(): void;
    setEventRef(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1530429-cgevent
    CGEvent(): CGEventRef;
    setCGEvent(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1535211-modifierflags
    modifierFlags(): NSEventModifierFlags;
    setModifierFlags(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1530832-keyrepeatdelay
    keyRepeatDelay(): NSTimeInterval;
    setKeyRepeatDelay(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1526076-keyrepeatinterval
    keyRepeatInterval(): NSTimeInterval;
    setKeyRepeatInterval(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1534183-characters
    characters(): string | NSString;
    setCharacters(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1524605-charactersignoringmodifiers
    charactersIgnoringModifiers(): string | NSString;
    setCharactersIgnoringModifiers(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1528049-arepeat
    ARepeat(): BOOL;
    setARepeat(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1534513-keycode
    keyCode(): number;
    setKeyCode(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1527943-pressedmousebuttons
    pressedMouseButtons(): NSUInteger;
    setPressedMouseButtons(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1528384-doubleclickinterval
    doubleClickInterval(): NSTimeInterval;
    setDoubleClickInterval(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1533380-mouselocation
    mouseLocation(): NSPoint;
    setMouseLocation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1527828-buttonnumber
    buttonNumber(): NSInteger;
    setButtonNumber(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1528200-clickcount
    clickCount(): NSInteger;
    setClickCount(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1529610-associatedeventsmask
    associatedEventsMask(): NSEventMask;
    setAssociatedEventsMask(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1535220-eventnumber
    eventNumber(): NSInteger;
    setEventNumber(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1533974-trackingnumber
    trackingNumber(): NSInteger;
    setTrackingNumber(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1534800-trackingarea
    trackingArea(): NSTrackingArea;
    setTrackingArea(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1526810-userdata
    userData(): void;
    setUserData(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1528289-data1
    data1(): NSInteger;
    setData1(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1528647-data2
    data2(): NSInteger;
    setData2(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1534871-deltax
    deltaX(): CGFloat;
    setDeltaX(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1534158-deltay
    deltaY(): CGFloat;
    setDeltaY(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1531528-deltaz
    deltaZ(): CGFloat;
    setDeltaZ(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1534543-pressure
    pressure(): number;
    setPressure(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1527242-stage
    stage(): NSInteger;
    setStage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1526739-stagetransition
    stageTransition(): CGFloat;
    setStageTransition(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1531392-pressurebehavior
    pressureBehavior(): NSPressureBehavior;
    setPressureBehavior(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1534648-capabilitymask
    capabilityMask(): NSUInteger;
    setCapabilityMask(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1530014-deviceid
    deviceID(): NSUInteger;
    setDeviceID(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1531702-enteringproximity
    enteringProximity(): BOOL;
    setEnteringProximity(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1528818-pointingdeviceid
    pointingDeviceID(): NSUInteger;
    setPointingDeviceID(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1533420-pointingdeviceserialnumber
    pointingDeviceSerialNumber(): NSUInteger;
    setPointingDeviceSerialNumber(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1535573-pointingdevicetype
    pointingDeviceType(): NSPointingDeviceType;
    setPointingDeviceType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1528299-systemtabletid
    systemTabletID(): NSUInteger;
    setSystemTabletID(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1527003-tabletid
    tabletID(): NSUInteger;
    setTabletID(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1535813-uniqueid
    uniqueID(): number;
    setUniqueID(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1525177-vendorid
    vendorID(): NSUInteger;
    setVendorID(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1527736-vendorpointingdevicetype
    vendorPointingDeviceType(): NSUInteger;
    setVendorPointingDeviceType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1530617-absolutex
    absoluteX(): NSInteger;
    setAbsoluteX(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1528904-absolutey
    absoluteY(): NSInteger;
    setAbsoluteY(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1532154-absolutez
    absoluteZ(): NSInteger;
    setAbsoluteZ(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1535428-buttonmask
    buttonMask(): NSEventButtonMask;
    setButtonMask(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1526249-rotation
    rotation(): number;
    setRotation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1525959-tangentialpressure
    tangentialPressure(): number;
    setTangentialPressure(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1534226-tilt
    tilt(): NSPoint;
    setTilt(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1530551-vendordefined
    vendorDefined(): id;
    setVendorDefined(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1526044-startperiodiceventsafterdelay
    startPeriodicEventsAfterDelay_withPeriod(delay: NSTimeInterval, period: NSTimeInterval):void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1533746-stopperiodicevents
    stopPeriodicEvents():void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1531642-magnification
    magnification(): CGFloat;
    setMagnification(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1530950-touchesmatchingphase
    touchesMatchingPhase_inView(phase: NSTouchPhase, view: NSView):NSTouch;
    // doc://com.apple.documentation/documentation/appkit/nsevent/2646917-alltouches
    allTouches():NSTouch;
    // doc://com.apple.documentation/documentation/appkit/nsevent/2646918-touchesforview
    touchesForView(view: NSView):NSTouch;
    // doc://com.apple.documentation/documentation/appkit/nsevent/2646916-coalescedtouchesfortouch
    coalescedTouchesForTouch(touch: NSTouch):NSTouch;
    // doc://com.apple.documentation/documentation/appkit/nsevent/2870068-mousecoalescingenabled
    mouseCoalescingEnabled(): BOOL;
    setMouseCoalescingEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1535472-addglobalmonitorforeventsmatchin
    addGlobalMonitorForEventsMatchingMask_handler(mask: NSEventMask, block: NSEvent):NSEvent;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1534971-addlocalmonitorforeventsmatching
    addLocalMonitorForEventsMatchingMask_handler(mask: NSEventMask, block: NSEvent):NSEvent;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1533709-removemonitor
    removeMonitor(eventMonitor: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1525758-hasprecisescrollingdeltas
    hasPreciseScrollingDeltas(): BOOL;
    setHasPreciseScrollingDeltas(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1524505-scrollingdeltax
    scrollingDeltaX(): CGFloat;
    setScrollingDeltaX(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1535387-scrollingdeltay
    scrollingDeltaY(): CGFloat;
    setScrollingDeltaY(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1525439-momentumphase
    momentumPhase(): NSEventPhase;
    setMomentumPhase(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1533550-phase
    phase(): NSEventPhase;
    setPhase(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/2870067-swipetrackingfromscrolleventsena
    swipeTrackingFromScrollEventsEnabled(): BOOL;
    setSwipeTrackingFromScrollEventsEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1533300-trackswipeeventwithoptions
    trackSwipeEventWithOptions_dampenAmountThresholdMin_max_usingHandler(options: NSEventSwipeTrackingOptions, minDampenThreshold: CGFloat, maxDampenThreshold: CGFloat, trackingHandler: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1525151-directioninvertedfromdevice
    directionInvertedFromDevice(): BOOL;
    setDirectionInvertedFromDevice(): void;
    // doc://com.apple.documentation/documentation/appkit/nsevent/1483105-locationinnode
    locationInNode(node: SKNode):CGPoint;
    // doc://com.apple.documentation/documentation/appkit/nsevent/3242717-charactersbyapplyingmodifiers
    charactersByApplyingModifiers(modifiers: NSEventModifierFlags):string | NSString;
    //
    alloc():NSEvent;
    //
    init():NSEvent;
  }
}

declare const NSEvent: cocoascript.NSEvent;
declare namespace cocoascript {
  /**
   * A snapshot of a particular touch at an instant in time.
   * doc://com.apple.documentation/documentation/appkit/nstouch
   */
  interface NSTouch extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstouch/2544708-type
    type(): NSTouchType;
    setType(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouch/1535399-identity
    identity(): NSCopying;
    setIdentity(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouch/1531520-phase
    phase(): NSTouchPhase;
    setPhase(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouch/1534031-normalizedposition
    normalizedPosition(): NSPoint;
    setNormalizedPosition(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouch/1525663-resting
    resting(): BOOL;
    setResting(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouch/1533562-device
    device(): id;
    setDevice(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouch/1528476-devicesize
    deviceSize(): NSSize;
    setDeviceSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouch/2588250-locationinview
    locationInView(view: NSView):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nstouch/2588251-previouslocationinview
    previousLocationInView(view: NSView):NSPoint;
    //
    alloc():NSTouch;
    //
    init():NSTouch;
  }
}

declare const NSTouch: cocoascript.NSTouch;
declare namespace cocoascript {
  /**
   * An encapsulation of the behavior and progression of a Force Touch trackpad as it responds to specific events.
   * doc://com.apple.documentation/documentation/appkit/nspressureconfiguration
   */
  interface NSPressureConfiguration extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nspressureconfiguration/1426883-initwithpressurebehavior
    initWithPressureBehavior(pressureBehavior: NSPressureBehavior):NSPressureConfiguration;
    // doc://com.apple.documentation/documentation/appkit/nspressureconfiguration/1426887-set
    set():void;
    // doc://com.apple.documentation/documentation/appkit/nspressureconfiguration/1426889-pressurebehavior
    pressureBehavior(): NSPressureBehavior;
    setPressureBehavior(): void;
    //
    alloc():NSPressureConfiguration;
    //
    init():NSPressureConfiguration;
  }
}

declare const NSPressureConfiguration: cocoascript.NSPressureConfiguration;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nseventmask
  type NSEventMask = number;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nseventbuttonmask
  type NSEventButtonMask = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nseventmodifierflags
  type NSEventModifierFlags = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nseventphase
  type NSEventPhase = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nseventswipetrackingoptions
  type NSEventSwipeTrackingOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * An object that manages an app’s menus.
   * doc://com.apple.documentation/documentation/appkit/nsmenu
   */
  interface NSMenu extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518236-menubarvisible
    menuBarVisible():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518200-setmenubarvisible
    setMenuBarVisible(visible: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518141-menubarheight
    menuBarHeight(): CGFloat;
    setMenuBarHeight(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518144-initwithtitle
    initWithTitle(title: string | NSString):NSMenu;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518201-insertitem
    insertItem_atIndex(newItem: NSMenuItem, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518146-insertitemwithtitle
    insertItemWithTitle_action_keyEquivalent_atIndex(string: string | NSString, selector: SEL, charCode: string | NSString, index: NSInteger):NSMenuItem;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518176-additem
    addItem(newItem: NSMenuItem):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518181-additemwithtitle
    addItemWithTitle_action_keyEquivalent(string: string | NSString, selector: SEL, charCode: string | NSString):NSMenuItem;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518257-removeitem
    removeItem(item: NSMenuItem):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518207-removeitematindex
    removeItemAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518154-itemchanged
    itemChanged(item: NSMenuItem):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518234-removeallitems
    removeAllItems():void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518223-itemwithtag
    itemWithTag(tag: NSInteger):NSMenuItem;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518248-itemwithtitle
    itemWithTitle(title: string | NSString):NSMenuItem;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518218-itematindex
    itemAtIndex(index: NSInteger):NSMenuItem;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518202-numberofitems
    numberOfItems(): NSInteger;
    setNumberOfItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518186-itemarray
    itemArray(): NSMenuItem;
    setItemArray(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518178-indexofitem
    indexOfItem(item: NSMenuItem):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518237-indexofitemwithtitle
    indexOfItemWithTitle(title: string | NSString):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518164-indexofitemwithtag
    indexOfItemWithTag(tag: NSInteger):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518153-indexofitemwithtarget
    indexOfItemWithTarget_andAction(target: NSMenu, actionSelector: SEL):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518175-indexofitemwithrepresentedobject
    indexOfItemWithRepresentedObject(object: NSMenu):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518216-indexofitemwithsubmenu
    indexOfItemWithSubmenu(submenu: NSMenu):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518194-setsubmenu
    setSubmenu_forItem(menu: NSMenu, item: NSMenuItem):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518179-submenuaction
    submenuAction(sender: NSMenu):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518233-attachedmenu
    attachedMenu():NSMenu;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518151-isattached
    isAttached():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518158-locationforsubmenu
    locationForSubmenu(submenu: NSMenu):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518204-supermenu
    supermenu(): NSMenu;
    setSupermenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518190-tornoff
    tornOff(): BOOL;
    setTornOff(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518227-autoenablesitems
    autoenablesItems(): BOOL;
    setAutoenablesItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518249-update
    update():void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518230-font
    font(): NSFont;
    setFont(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518198-performkeyequivalent
    performKeyEquivalent(event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518210-performactionforitematindex
    performActionForItemAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518192-title
    title(): string | NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518221-minimumwidth
    minimumWidth(): CGFloat;
    setMinimumWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518185-size
    size(): NSSize;
    setSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518240-sizetofit
    sizeToFit():void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518245-propertiestoupdate
    propertiesToUpdate(): NSMenuProperties;
    setPropertiesToUpdate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518148-menuchangedmessagesenabled
    menuChangedMessagesEnabled(): BOOL;
    setMenuChangedMessagesEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518220-allowscontextmenuplugins
    allowsContextMenuPlugIns(): BOOL;
    setAllowsContextMenuPlugIns(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518170-popupcontextmenu
    popUpContextMenu_withEvent_forView(menu: NSMenu, event: NSEvent, view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518165-popupcontextmenu
    popUpContextMenu_withEvent_forView_withFont(menu: NSMenu, event: NSEvent, view: NSView, font: NSFont):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518188-helprequested
    helpRequested(eventPtr: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518212-popupmenupositioningitem
    popUpMenuPositioningItem_atLocation_inView(item: NSMenuItem, location: NSPoint, view: NSView):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518253-showsstatecolumn
    showsStateColumn(): BOOL;
    setShowsStateColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518143-menuzone
    menuZone():NSZone;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518263-setmenuzone
    setMenuZone(zone: NSZone):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518222-highlighteditem
    highlightedItem(): NSMenuItem;
    setHighlightedItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518254-userinterfacelayoutdirection
    userInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection;
    setUserInterfaceLayoutDirection(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518169-delegate
    delegate(): NSMenuDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518150-canceltracking
    cancelTracking():void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518244-canceltrackingwithoutanimation
    cancelTrackingWithoutAnimation():void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518173-contextmenurepresentation
    contextMenuRepresentation():NSMenu;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518139-setcontextmenurepresentation
    setContextMenuRepresentation(menuRep: NSMenu):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518262-tearoffmenurepresentation
    tearOffMenuRepresentation():NSMenu;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518214-settearoffmenurepresentation
    setTearOffMenuRepresentation(menuRep: NSMenu):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518137-setmenurepresentation
    setMenuRepresentation(menuRep: NSMenu):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1518252-menurepresentation
    menuRepresentation():NSMenu;
    // doc://com.apple.documentation/documentation/appkit/nsmenu/1644714-initwithcoder
    initWithCoder(coder: NSCoder):NSMenu;
    //
    alloc():NSMenu;
    //
    init():NSMenu;
  }
}

declare const NSMenu: cocoascript.NSMenu;
// doc://com.apple.documentation/documentation/appkit/nsmenudidadditemnotification
declare const NSMenuDidAddItemNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsmenudidchangeitemnotification
declare const NSMenuDidChangeItemNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsmenudidbegintrackingnotification
declare const NSMenuDidBeginTrackingNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsmenudidendtrackingnotification
declare const NSMenuDidEndTrackingNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsmenudidremoveitemnotification
declare const NSMenuDidRemoveItemNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsmenudidsendactionnotification
declare const NSMenuDidSendActionNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsmenuwillsendactionnotification
declare const NSMenuWillSendActionNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * A command item in an app menu.
   * doc://com.apple.documentation/documentation/appkit/nsmenuitem
   */
  interface NSMenuItem extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514858-initwithtitle
    initWithTitle_action_keyEquivalent(string: string | NSString, selector: SEL, charCode: string | NSString):NSMenuItem;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514863-enabled
    enabled(): BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514846-hidden
    hidden(): BOOL;
    setHidden(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514832-hiddenorhashiddenancestor
    hiddenOrHasHiddenAncestor(): BOOL;
    setHiddenOrHasHiddenAncestor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514843-target
    target(): id;
    setTarget(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514825-action
    action(): SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514805-title
    title(): string | NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514860-attributedtitle
    attributedTitle(): NSAttributedString;
    setAttributedTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514840-tag
    tag(): NSInteger;
    setTag(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514804-state
    state(): NSControlStateValue;
    setState(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514819-image
    image(): NSImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514861-onstateimage
    onStateImage(): NSImage;
    setOnStateImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514821-offstateimage
    offStateImage(): NSImage;
    setOffStateImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514827-mixedstateimage
    mixedStateImage(): NSImage;
    setMixedStateImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514845-submenu
    submenu(): NSMenu;
    setSubmenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514817-hassubmenu
    hasSubmenu(): BOOL;
    setHasSubmenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514813-parentitem
    parentItem(): NSMenuItem;
    setParentItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514837-separatoritem
    separatorItem(): BOOL;
    setSeparatorItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514838-separatoritem
    separatorItem():NSMenuItem;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514830-menu
    menu(): NSMenu;
    setMenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514842-keyequivalent
    keyEquivalent(): string | NSString;
    setKeyEquivalent(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514815-keyequivalentmodifiermask
    keyEquivalentModifierMask(): NSEventModifierFlags;
    setKeyEquivalentModifierMask(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514829-setmnemoniclocation
    setMnemonicLocation(location: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514803-mnemoniclocation
    mnemonicLocation():NSUInteger;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514851-settitlewithmnemonic
    setTitleWithMnemonic(stringWithAmpersand: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514852-mnemonic
    mnemonic():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514811-usesuserkeyequivalents
    usesUserKeyEquivalents(): BOOL;
    setUsesUserKeyEquivalents(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514850-userkeyequivalent
    userKeyEquivalent(): string | NSString;
    setUserKeyEquivalent(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514823-alternate
    alternate(): BOOL;
    setAlternate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514809-indentationlevel
    indentationLevel(): NSInteger;
    setIndentationLevel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514848-tooltip
    toolTip(): string | NSString;
    setToolTip(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514834-representedobject
    representedObject(): id;
    setRepresentedObject(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514835-view
    view(): NSView;
    setView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1514856-highlighted
    highlighted(): BOOL;
    setHighlighted(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/1644728-initwithcoder
    initWithCoder(coder: NSCoder):NSMenuItem;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitem/2880316-allowskeyequivalentwhenhidden
    allowsKeyEquivalentWhenHidden(): BOOL;
    setAllowsKeyEquivalentWhenHidden(): void;
    //
    alloc():NSMenuItem;
    //
    init():NSMenuItem;
  }
}

declare const NSMenuItem: cocoascript.NSMenuItem;
declare namespace cocoascript {
  /**
   * The optional methods implemented by delegates of
   * doc://com.apple.documentation/documentation/appkit/nsmenudelegate
   */
  interface NSMenuDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsmenudelegate/1518211-menuhaskeyequivalent
    menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: NSMenuDelegate, action: SEL):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsmenudelegate/1518256-menu
    menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: BOOL):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsmenudelegate/1518247-confinementrectformenu
    confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsmenudelegate/1518260-menu
    menu_willHighlightItem(menu: NSMenu, item: NSMenuItem):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenudelegate/1518156-menuwillopen
    menuWillOpen(menu: NSMenu):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenudelegate/1518167-menudidclose
    menuDidClose(menu: NSMenu):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenudelegate/1518242-numberofitemsinmenu
    numberOfItemsInMenu(menu: NSMenu):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsmenudelegate/1518235-menuneedsupdate
    menuNeedsUpdate(menu: NSMenu):void;
  }
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsmenuitemvalidation
   */
  interface NSMenuItemValidation extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemvalidation/3005191-validatemenuitem
    validateMenuItem(menuItem: NSMenuItem):BOOL;
  }
}
declare namespace cocoascript {
  /**
   * An object that manages a collection of status items displayed within the system-wide menu bar.
   * doc://com.apple.documentation/documentation/appkit/nsstatusbar
   */
  interface NSStatusBar extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsstatusbar/1530619-systemstatusbar
    systemStatusBar(): NSStatusBar;
    setSystemStatusBar(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusbar/1532895-statusitemwithlength
    statusItemWithLength(length: CGFloat):NSStatusItem;
    // doc://com.apple.documentation/documentation/appkit/nsstatusbar/1530377-removestatusitem
    removeStatusItem(item: NSStatusItem):void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusbar/1530580-vertical
    vertical(): BOOL;
    setVertical(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusbar/1534591-thickness
    thickness(): CGFloat;
    setThickness(): void;
    //
    alloc():NSStatusBar;
    //
    init():NSStatusBar;
  }
}

declare const NSStatusBar: cocoascript.NSStatusBar;
declare namespace cocoascript {
  /**
   * An individual element displayed in the system menu bar.
   * doc://com.apple.documentation/documentation/appkit/nsstatusitem
   */
  interface NSStatusItem extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1525951-statusbar
    statusBar(): NSStatusBar;
    setStatusBar(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1644024-behavior
    behavior(): NSStatusItemBehavior;
    setBehavior(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1535056-button
    button(): NSStatusBarButton;
    setButton(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1535918-menu
    menu(): NSMenu;
    setMenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1644025-visible
    visible(): BOOL;
    setVisible(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1529402-length
    length(): CGFloat;
    setLength(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1644022-autosavename
    autosaveName(): NSStatusItemAutosaveName;
    setAutosaveName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1527352-enabled
    enabled(): BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1532686-target
    target(): id;
    setTarget(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1531580-action
    action(): SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1535555-doubleaction
    doubleAction(): SEL;
    setDoubleAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1535025-sendactionon
    sendActionOn(mask: NSEventMask):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1524256-popupstatusitemmenu
    popUpStatusItemMenu(menu: NSMenu):void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1534494-title
    title(): string | NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1534223-attributedtitle
    attributedTitle(): NSAttributedString;
    setAttributedTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1524711-image
    image(): NSImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1534014-alternateimage
    alternateImage(): NSImage;
    setAlternateImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1528609-highlightmode
    highlightMode(): BOOL;
    setHighlightMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1534916-tooltip
    toolTip(): string | NSString;
    setToolTip(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1531522-view
    view(): NSView;
    setView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsstatusitem/1532509-drawstatusbarbackgroundinrect
    drawStatusBarBackgroundInRect_withHighlight(rect: NSRect, highlight: BOOL):void;
    //
    alloc():NSStatusItem;
    //
    init():NSStatusItem;
  }
}

declare const NSStatusItem: cocoascript.NSStatusItem;
declare namespace cocoascript {
  /**
   * The appearance and behavior of an item in the systemwide menu bar.
   * doc://com.apple.documentation/documentation/appkit/nsstatusbarbutton
   */
  interface NSStatusBarButton extends NSButton {
    // doc://com.apple.documentation/documentation/appkit/nsstatusbarbutton/1409292-appearsdisabled
    appearsDisabled(): BOOL;
    setAppearsDisabled(): void;
    //
    alloc():NSStatusBarButton;
    //
    init():NSStatusBarButton;
  }
}

declare const NSStatusBarButton: cocoascript.NSStatusBarButton;
declare namespace cocoascript {
  /**
   * A pointer (also called a cursor).
   * doc://com.apple.documentation/documentation/appkit/nscursor
   */
  interface NSCursor extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscursor/1524612-initwithimage
    initWithImage_hotSpot(newImage: NSImage, point: NSPoint):NSCursor;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1524604-initwithimage
    initWithImage_foregroundColorHint_backgroundColorHint_hotSpot(newImage: NSImage, fg: NSColor, bg: NSColor, hotSpot: NSPoint):NSCursor;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1527062-image
    image(): NSImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1529096-hotspot
    hotSpot(): NSPoint;
    setHotSpot(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1527345-hide
    hide():void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1532996-unhide
    unhide():void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1534665-sethiddenuntilmousemoves
    setHiddenUntilMouseMoves(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1532104-pop
    pop():void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1532408-pop
    pop():void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1532500-push
    push():void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1526148-set
    set():void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1524582-mouseentered
    mouseEntered(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1528331-setonmouseentered
    setOnMouseEntered(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1525108-setonmouseentered
    setOnMouseEntered(): BOOL;
    setSetOnMouseEntered(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1535790-mouseexited
    mouseExited(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1535131-setonmouseexited
    setOnMouseExited(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1532492-setonmouseexited
    setOnMouseExited(): BOOL;
    setSetOnMouseExited(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1524595-currentcursor
    currentCursor(): NSCursor;
    setCurrentCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1533611-currentsystemcursor
    currentSystemCursor(): NSCursor;
    setCurrentSystemCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1527160-arrowcursor
    arrowCursor(): NSCursor;
    setArrowCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1529142-contextualmenucursor
    contextualMenuCursor(): NSCursor;
    setContextualMenuCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1524603-closedhandcursor
    closedHandCursor(): NSCursor;
    setClosedHandCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1525359-crosshaircursor
    crosshairCursor(): NSCursor;
    setCrosshairCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1534280-disappearingitemcursor
    disappearingItemCursor(): NSCursor;
    setDisappearingItemCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1529900-dragcopycursor
    dragCopyCursor(): NSCursor;
    setDragCopyCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1534435-draglinkcursor
    dragLinkCursor(): NSCursor;
    setDragLinkCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1526109-ibeamcursor
    IBeamCursor(): NSCursor;
    setIBeamCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1528540-openhandcursor
    openHandCursor(): NSCursor;
    setOpenHandCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1525180-operationnotallowedcursor
    operationNotAllowedCursor(): NSCursor;
    setOperationNotAllowedCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1531896-pointinghandcursor
    pointingHandCursor(): NSCursor;
    setPointingHandCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1531340-resizedowncursor
    resizeDownCursor(): NSCursor;
    setResizeDownCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1535416-resizeleftcursor
    resizeLeftCursor(): NSCursor;
    setResizeLeftCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1525074-resizeleftrightcursor
    resizeLeftRightCursor(): NSCursor;
    setResizeLeftRightCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1526314-resizerightcursor
    resizeRightCursor(): NSCursor;
    setResizeRightCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1532226-resizeupcursor
    resizeUpCursor(): NSCursor;
    setResizeUpCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1524641-resizeupdowncursor
    resizeUpDownCursor(): NSCursor;
    setResizeUpDownCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1525182-ibeamcursorforverticallayout
    IBeamCursorForVerticalLayout(): NSCursor;
    setIBeamCursorForVerticalLayout(): void;
    // doc://com.apple.documentation/documentation/appkit/nscursor/1640963-initwithcoder
    initWithCoder(coder: NSCoder):NSCursor;
    //
    alloc():NSCursor;
    //
    init():NSCursor;
  }
}

declare const NSCursor: cocoascript.NSCursor;
declare namespace cocoascript {
  /**
   * A region of a view that generates mouse-tracking and cursor-update events when the pointer is over that region.
   * doc://com.apple.documentation/documentation/appkit/nstrackingarea
   */
  interface NSTrackingArea extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstrackingarea/1524488-initwithrect
    initWithRect_options_owner_userInfo(rect: NSRect, options: NSTrackingAreaOptions, owner: NSTrackingArea, userInfo: NSTrackingArea):NSTrackingArea;
    // doc://com.apple.documentation/documentation/appkit/nstrackingarea/1533013-options
    options(): NSTrackingAreaOptions;
    setOptions(): void;
    // doc://com.apple.documentation/documentation/appkit/nstrackingarea/1525965-owner
    owner(): id;
    setOwner(): void;
    // doc://com.apple.documentation/documentation/appkit/nstrackingarea/1525874-rect
    rect(): NSRect;
    setRect(): void;
    // doc://com.apple.documentation/documentation/appkit/nstrackingarea/1527949-userinfo
    userInfo(): id;
    setUserInfo(): void;
    //
    alloc():NSTrackingArea;
    //
    init():NSTrackingArea;
  }
}

declare const NSTrackingArea: cocoascript.NSTrackingArea;
declare namespace cocoascript {
  /**
   * The visual representation of your app’s miniaturized windows and app icon as they appear in the Dock.
   * doc://com.apple.documentation/documentation/appkit/nsdocktile
   */
  interface NSDockTile extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsdocktile/1525995-contentview
    contentView(): NSView;
    setContentView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocktile/1534239-size
    size(): NSSize;
    setSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocktile/1533723-owner
    owner(): id;
    setOwner(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocktile/1528057-showsapplicationbadge
    showsApplicationBadge(): BOOL;
    setShowsApplicationBadge(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocktile/1524433-badgelabel
    badgeLabel(): string | NSString;
    setBadgeLabel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdocktile/1527292-display
    display():void;
    //
    alloc():NSDockTile;
    //
    init():NSDockTile;
  }
}

declare const NSDockTile: cocoascript.NSDockTile;
declare namespace cocoascript {
  /**
   * A set of methods implemented by plug-ins that allow an app’s Dock tile to be customized while the app is not running.
   * doc://com.apple.documentation/documentation/appkit/nsdocktileplugin
   */
  interface NSDockTilePlugIn extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsdocktileplugin/1534120-setdocktile
    setDockTile(dockTile: NSDockTile):void;
    // doc://com.apple.documentation/documentation/appkit/nsdocktileplugin/1527547-dockmenu
    dockMenu():NSMenu;
  }
}
declare namespace cocoascript {
  /**
   * A discrete gesture recognizer that tracks a specified number of mouse clicks.
   * doc://com.apple.documentation/documentation/appkit/nsclickgesturerecognizer
   */
  interface NSClickGestureRecognizer extends NSGestureRecognizer {
    // doc://com.apple.documentation/documentation/appkit/nsclickgesturerecognizer/1530136-buttonmask
    buttonMask(): NSUInteger;
    setButtonMask(): void;
    // doc://com.apple.documentation/documentation/appkit/nsclickgesturerecognizer/1534485-numberofclicksrequired
    numberOfClicksRequired(): NSInteger;
    setNumberOfClicksRequired(): void;
    // doc://com.apple.documentation/documentation/appkit/nsclickgesturerecognizer/2544764-numberoftouchesrequired
    numberOfTouchesRequired(): NSInteger;
    setNumberOfTouchesRequired(): void;
    //
    alloc():NSClickGestureRecognizer;
    //
    init():NSClickGestureRecognizer;
  }
}

declare const NSClickGestureRecognizer: cocoascript.NSClickGestureRecognizer;
declare namespace cocoascript {
  /**
   * A discrete gesture recognizer that tracks whether the user holds down a mouse button for a minimum amount of time before releasing it.
   * doc://com.apple.documentation/documentation/appkit/nspressgesturerecognizer
   */
  interface NSPressGestureRecognizer extends NSGestureRecognizer {
    // doc://com.apple.documentation/documentation/appkit/nspressgesturerecognizer/1527495-allowablemovement
    allowableMovement(): CGFloat;
    setAllowableMovement(): void;
    // doc://com.apple.documentation/documentation/appkit/nspressgesturerecognizer/1534468-buttonmask
    buttonMask(): NSUInteger;
    setButtonMask(): void;
    // doc://com.apple.documentation/documentation/appkit/nspressgesturerecognizer/1531726-minimumpressduration
    minimumPressDuration(): NSTimeInterval;
    setMinimumPressDuration(): void;
    // doc://com.apple.documentation/documentation/appkit/nspressgesturerecognizer/2544818-numberoftouchesrequired
    numberOfTouchesRequired(): NSInteger;
    setNumberOfTouchesRequired(): void;
    //
    alloc():NSPressGestureRecognizer;
    //
    init():NSPressGestureRecognizer;
  }
}

declare const NSPressGestureRecognizer: cocoascript.NSPressGestureRecognizer;
declare namespace cocoascript {
  /**
   * A continuous gesture recognizer for panning gestures.
   * doc://com.apple.documentation/documentation/appkit/nspangesturerecognizer
   */
  interface NSPanGestureRecognizer extends NSGestureRecognizer {
    // doc://com.apple.documentation/documentation/appkit/nspangesturerecognizer/1515529-buttonmask
    buttonMask(): NSUInteger;
    setButtonMask(): void;
    // doc://com.apple.documentation/documentation/appkit/nspangesturerecognizer/2544781-numberoftouchesrequired
    numberOfTouchesRequired(): NSInteger;
    setNumberOfTouchesRequired(): void;
    // doc://com.apple.documentation/documentation/appkit/nspangesturerecognizer/1515531-translationinview
    translationInView(view: NSView):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nspangesturerecognizer/1515533-settranslation
    setTranslation_inView(translation: NSPoint, view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nspangesturerecognizer/1515532-velocityinview
    velocityInView(view: NSView):NSPoint;
    //
    alloc():NSPanGestureRecognizer;
    //
    init():NSPanGestureRecognizer;
  }
}

declare const NSPanGestureRecognizer: cocoascript.NSPanGestureRecognizer;
declare namespace cocoascript {
  /**
   * A continuous gesture recognizer that tracks two trackpad touches moving opposite each other in a circular motion.
   * doc://com.apple.documentation/documentation/appkit/nsrotationgesturerecognizer
   */
  interface NSRotationGestureRecognizer extends NSGestureRecognizer {
    // doc://com.apple.documentation/documentation/appkit/nsrotationgesturerecognizer/1527087-rotation
    rotation(): CGFloat;
    setRotation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrotationgesturerecognizer/1535523-rotationindegrees
    rotationInDegrees(): CGFloat;
    setRotationInDegrees(): void;
    //
    alloc():NSRotationGestureRecognizer;
    //
    init():NSRotationGestureRecognizer;
  }
}

declare const NSRotationGestureRecognizer: cocoascript.NSRotationGestureRecognizer;
declare namespace cocoascript {
  /**
   * A continuous gesture recognizer that tracks a pinch gesture that magnifies content.
   * doc://com.apple.documentation/documentation/appkit/nsmagnificationgesturerecognizer
   */
  interface NSMagnificationGestureRecognizer extends NSGestureRecognizer {
    // doc://com.apple.documentation/documentation/appkit/nsmagnificationgesturerecognizer/1510428-magnification
    magnification(): CGFloat;
    setMagnification(): void;
    //
    alloc():NSMagnificationGestureRecognizer;
    //
    init():NSMagnificationGestureRecognizer;
  }
}

declare const NSMagnificationGestureRecognizer: cocoascript.NSMagnificationGestureRecognizer;
declare namespace cocoascript {
  /**
   * An object that monitors events and calls its action method when a predefined sequence of events occur.
   * doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer
   */
  interface NSGestureRecognizer extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1535012-initwithtarget
    initWithTarget_action(target: NSGestureRecognizer, action: SEL):NSGestureRecognizer;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1529280-action
    action(): SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1530932-target
    target(): id;
    setTarget(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1524261-locationinview
    locationInView(view: NSView):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1535694-state
    state(): NSGestureRecognizerState;
    setState(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1527192-view
    view(): NSView;
    setView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1535263-enabled
    enabled(): BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1533619-delaysprimarymousebuttonevents
    delaysPrimaryMouseButtonEvents(): BOOL;
    setDelaysPrimaryMouseButtonEvents(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1535204-delayssecondarymousebuttonevents
    delaysSecondaryMouseButtonEvents(): BOOL;
    setDelaysSecondaryMouseButtonEvents(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1530375-delaysothermousebuttonevents
    delaysOtherMouseButtonEvents(): BOOL;
    setDelaysOtherMouseButtonEvents(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1529788-delayskeyevents
    delaysKeyEvents(): BOOL;
    setDelaysKeyEvents(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1529974-delaysmagnificationevents
    delaysMagnificationEvents(): BOOL;
    setDelaysMagnificationEvents(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1535384-delaysrotationevents
    delaysRotationEvents(): BOOL;
    setDelaysRotationEvents(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1529879-delegate
    delegate(): NSGestureRecognizerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1527219-reset
    reset():void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1524901-mousedown
    mouseDown(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1534535-mousedragged
    mouseDragged(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1526116-mouseup
    mouseUp(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1534433-othermousedown
    otherMouseDown(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1534208-othermousedragged
    otherMouseDragged(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1527874-othermouseup
    otherMouseUp(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1527421-rightmousedown
    rightMouseDown(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1529778-rightmousedragged
    rightMouseDragged(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1525729-rightmouseup
    rightMouseUp(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1528828-magnifywithevent
    magnifyWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1531401-rotatewithevent
    rotateWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1534587-canbepreventedbygesturerecognize
    canBePreventedByGestureRecognizer(preventingGestureRecognizer: NSGestureRecognizer):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1534503-canpreventgesturerecognizer
    canPreventGestureRecognizer(preventedGestureRecognizer: NSGestureRecognizer):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1530755-shouldberequiredtofailbygesturer
    shouldBeRequiredToFailByGestureRecognizer(otherGestureRecognizer: NSGestureRecognizer):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1532939-shouldrequirefailureofgesturerec
    shouldRequireFailureOfGestureRecognizer(otherGestureRecognizer: NSGestureRecognizer):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1532158-keydown
    keyDown(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1526578-keyup
    keyUp(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1529889-tabletpoint
    tabletPoint(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1532604-flagschanged
    flagsChanged(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1527009-pressurechangewithevent
    pressureChangeWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1535895-pressureconfiguration
    pressureConfiguration(): NSPressureConfiguration;
    setPressureConfiguration(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/1534865-initwithcoder
    initWithCoder(coder: NSCoder):NSGestureRecognizer;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/2588249-allowedtouchtypes
    allowedTouchTypes(): NSTouchTypeMask;
    setAllowedTouchTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/2544794-touchesbeganwithevent
    touchesBeganWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/2544757-touchescancelledwithevent
    touchesCancelledWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/2544740-touchesendedwithevent
    touchesEndedWithEvent(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizer/2544863-touchesmovedwithevent
    touchesMovedWithEvent(event: NSEvent):void;
    //
    alloc():NSGestureRecognizer;
    //
    init():NSGestureRecognizer;
  }
}

declare const NSGestureRecognizer: cocoascript.NSGestureRecognizer;
declare namespace cocoascript {
  /**
   * A set of methods for fine-tuning a gesture recognizer’s behavior.
   * doc://com.apple.documentation/documentation/appkit/nsgesturerecognizerdelegate
   */
  interface NSGestureRecognizerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizerdelegate/1529420-gesturerecognizer
    gestureRecognizer_shouldAttemptToRecognizeWithEvent(gestureRecognizer: NSGestureRecognizer, event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizerdelegate/1535463-gesturerecognizershouldbegin
    gestureRecognizerShouldBegin(gestureRecognizer: NSGestureRecognizer):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizerdelegate/1529773-gesturerecognizer
    gestureRecognizer_shouldRecognizeSimultaneouslyWithGestureRecognizer(gestureRecognizer: NSGestureRecognizer, otherGestureRecognizer: NSGestureRecognizer):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizerdelegate/1527318-gesturerecognizer
    gestureRecognizer_shouldRequireFailureOfGestureRecognizer(gestureRecognizer: NSGestureRecognizer, otherGestureRecognizer: NSGestureRecognizer):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizerdelegate/1535422-gesturerecognizer
    gestureRecognizer_shouldBeRequiredToFailByGestureRecognizer(gestureRecognizer: NSGestureRecognizer, otherGestureRecognizer: NSGestureRecognizer):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizerdelegate/2544787-gesturerecognizer
    gestureRecognizer_shouldReceiveTouch(gestureRecognizer: NSGestureRecognizer, touch: NSTouch):BOOL;
  }
}
declare namespace cocoascript {
  /**
   * A customizable item picker control for the Touch Bar.
   * doc://com.apple.documentation/documentation/appkit/nsscrubber
   */
  interface NSScrubber extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2588263-initwithframe
    initWithFrame(frameRect: NSRect):NSScrubber;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544802-initwithcoder
    initWithCoder(coder: NSCoder):NSScrubber;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544804-datasource
    dataSource(): NSScrubberDataSource;
    setDataSource(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544738-delegate
    delegate(): NSScrubberDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544773-registerclass
    registerClass_forItemIdentifier(itemViewClass: Class, itemIdentifier: NSUserInterfaceItemIdentifier):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2646903-registernib
    registerNib_forItemIdentifier(nib: NSNib, itemIdentifier: NSUserInterfaceItemIdentifier):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544776-makeitemwithidentifier
    makeItemWithIdentifier_owner(itemIdentifier: NSUserInterfaceItemIdentifier, owner: NSScrubber):NSScrubberItemView;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544850-scrubberlayout
    scrubberLayout(): NSScrubberLayout;
    setScrubberLayout(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544687-mode
    mode(): NSScrubberMode;
    setMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544782-itemalignment
    itemAlignment(): NSScrubberAlignment;
    setItemAlignment(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544694-continuous
    continuous(): BOOL;
    setContinuous(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544869-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544847-backgroundview
    backgroundView(): NSView;
    setBackgroundView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544827-showsadditionalcontentindicators
    showsAdditionalContentIndicators(): BOOL;
    setShowsAdditionalContentIndicators(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544865-showsarrowbuttons
    showsArrowButtons(): BOOL;
    setShowsArrowButtons(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2646904-floatsselectionviews
    floatsSelectionViews(): BOOL;
    setFloatsSelectionViews(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2588265-selectionoverlaystyle
    selectionOverlayStyle(): NSScrubberSelectionStyle;
    setSelectionOverlayStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2588270-selectionbackgroundstyle
    selectionBackgroundStyle(): NSScrubberSelectionStyle;
    setSelectionBackgroundStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544712-reloaddata
    reloadData():void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544874-reloaditemsatindexes
    reloadItemsAtIndexes(indexes: NSIndexSet):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544836-numberofitems
    numberOfItems(): NSInteger;
    setNumberOfItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2588262-highlightedindex
    highlightedIndex(): NSInteger;
    setHighlightedIndex(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2588260-selectedindex
    selectedIndex(): NSInteger;
    setSelectedIndex(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544867-insertitemsatindexes
    insertItemsAtIndexes(indexes: NSIndexSet):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544864-moveitematindex
    moveItemAtIndex_toIndex(oldIndex: NSInteger, newIndex: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544679-removeitemsatindexes
    removeItemsAtIndexes(indexes: NSIndexSet):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2646906-performsequentialbatchupdates
    performSequentialBatchUpdates(updateBlock: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544724-scrollitematindex
    scrollItemAtIndex_toAlignment(index: NSInteger, alignment: NSScrubberAlignment):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubber/2544862-itemviewforitematindex
    itemViewForItemAtIndex(index: NSInteger):NSScrubberItemView;
    //
    alloc():NSScrubber;
    //
    init():NSScrubber;
  }
}

declare const NSScrubber: cocoascript.NSScrubber;
declare namespace cocoascript {
  /**
   * A protocol that allows you to provide the items for a bar dynamically.
   * doc://com.apple.documentation/documentation/appkit/nstouchbardelegate
   */
  interface NSTouchBarDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstouchbardelegate/2544851-touchbar
    touchBar_makeItemForIdentifier(touchBar: NSTouchBar, identifier: NSTouchBarItemIdentifier):NSTouchBarItem;
  }
}
declare namespace cocoascript {
  /**
   * A protocol that an object adopts to create a bar object in your app.
   * doc://com.apple.documentation/documentation/appkit/nstouchbarprovider
   */
  interface NSTouchBarProvider extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstouchbarprovider/2544662-touchbar
    touchBar(): NSTouchBar;
    setTouchBar(): void;
  }
}
declare namespace cocoascript {
  /**
   * A UI control shown in the Touch Bar on supported models of MacBook Pro.
   * doc://com.apple.documentation/documentation/appkit/nstouchbaritem
   */
  interface NSTouchBarItem extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstouchbaritem/2544755-initwithidentifier
    initWithIdentifier(identifier: NSTouchBarItemIdentifier):NSTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nstouchbaritem/2544766-initwithcoder
    initWithCoder(coder: NSCoder):NSTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nstouchbaritem/2544812-identifier
    identifier(): NSTouchBarItemIdentifier;
    setIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouchbaritem/2544689-visibilitypriority
    visibilityPriority(): NSTouchBarItemPriority;
    setVisibilityPriority(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouchbaritem/2544669-visible
    visible(): BOOL;
    setVisible(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouchbaritem/2544693-customizationlabel
    customizationLabel(): string | NSString;
    setCustomizationLabel(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouchbaritem/2544843-viewcontroller
    viewController(): NSViewController;
    setViewController(): void;
    // doc://com.apple.documentation/documentation/appkit/nstouchbaritem/2544719-view
    view(): NSView;
    setView(): void;
    //
    alloc():NSTouchBarItem;
    //
    init():NSTouchBarItem;
  }
}

declare const NSTouchBarItem: cocoascript.NSTouchBarItem;
declare namespace cocoascript {
  /**
   * A bar item that, along with its delegate, provides a list of textual suggestions for the current text view.
   * doc://com.apple.documentation/documentation/appkit/nscandidatelisttouchbaritem
   */
  interface NSCandidateListTouchBarItem extends NSTouchBarItem {
    // doc://com.apple.documentation/documentation/appkit/nscandidatelisttouchbaritem/2544873-client
    client(): NSTextInputClient;
    setClient(): void;
    // doc://com.apple.documentation/documentation/appkit/nscandidatelisttouchbaritem/2544820-delegate
    delegate(): NSCandidateListTouchBarItemDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nscandidatelisttouchbaritem/2544701-setcandidates
    setCandidates_forSelectedRange_inString(candidates: any, selectedRange: NSRange, originalString: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nscandidatelisttouchbaritem/2544728-candidates
    candidates(): any;
    setCandidates(): void;
    // doc://com.apple.documentation/documentation/appkit/nscandidatelisttouchbaritem/2544823-attributedstringforcandidate
    attributedStringForCandidate(): NSInteger;
    setAttributedStringForCandidate(): void;
    // doc://com.apple.documentation/documentation/appkit/nscandidatelisttouchbaritem/2544668-allowstextinputcontextcandidates
    allowsTextInputContextCandidates(): BOOL;
    setAllowsTextInputContextCandidates(): void;
    // doc://com.apple.documentation/documentation/appkit/nscandidatelisttouchbaritem/2544718-allowscollapsing
    allowsCollapsing(): BOOL;
    setAllowsCollapsing(): void;
    // doc://com.apple.documentation/documentation/appkit/nscandidatelisttouchbaritem/2544733-collapsed
    collapsed(): BOOL;
    setCollapsed(): void;
    // doc://com.apple.documentation/documentation/appkit/nscandidatelisttouchbaritem/2544870-candidatelistvisible
    candidateListVisible(): BOOL;
    setCandidateListVisible(): void;
    // doc://com.apple.documentation/documentation/appkit/nscandidatelisttouchbaritem/2544658-updatewithinsertionpointvisibili
    updateWithInsertionPointVisibility(isVisible: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nscandidatelisttouchbaritem/2544821-customizationlabel
    customizationLabel(): string | NSString;
    setCustomizationLabel(): void;
    //
    alloc():NSCandidateListTouchBarItem;
    //
    init():NSCandidateListTouchBarItem;
  }
}

declare const NSCandidateListTouchBarItem: cocoascript.NSCandidateListTouchBarItem;
declare namespace cocoascript {
  /**
   * A bar item that provides a system-defined color picker.
   * doc://com.apple.documentation/documentation/appkit/nscolorpickertouchbaritem
   */
  interface NSColorPickerTouchBarItem extends NSTouchBarItem {
    // doc://com.apple.documentation/documentation/appkit/nscolorpickertouchbaritem/2544807-colorpickerwithidentifier
    colorPickerWithIdentifier(identifier: NSTouchBarItemIdentifier):NSColorPickerTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickertouchbaritem/2560995-textcolorpickerwithidentifier
    textColorPickerWithIdentifier(identifier: NSTouchBarItemIdentifier):NSColorPickerTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickertouchbaritem/2560993-strokecolorpickerwithidentifier
    strokeColorPickerWithIdentifier(identifier: NSTouchBarItemIdentifier):NSColorPickerTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickertouchbaritem/2544784-colorpickerwithidentifier
    colorPickerWithIdentifier_buttonImage(identifier: NSTouchBarItemIdentifier, image: NSImage):NSColorPickerTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickertouchbaritem/2641681-colorlist
    colorList(): NSColorList;
    setColorList(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickertouchbaritem/2881218-allowedcolorspaces
    allowedColorSpaces(): NSColorSpace;
    setAllowedColorSpaces(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickertouchbaritem/2544828-showsalpha
    showsAlpha(): BOOL;
    setShowsAlpha(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickertouchbaritem/2641680-enabled
    enabled(): BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickertouchbaritem/2544768-color
    color(): NSColor;
    setColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickertouchbaritem/2544857-target
    target(): id;
    setTarget(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickertouchbaritem/2544673-action
    action(): SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorpickertouchbaritem/2544803-customizationlabel
    customizationLabel(): string | NSString;
    setCustomizationLabel(): void;
    //
    alloc():NSColorPickerTouchBarItem;
    //
    init():NSColorPickerTouchBarItem;
  }
}

declare const NSColorPickerTouchBarItem: cocoascript.NSColorPickerTouchBarItem;
declare namespace cocoascript {
  /**
   * A bar item that contains a responder of your choice, such as a view, a button, or a scrubber (an instance of the
   * doc://com.apple.documentation/documentation/appkit/nscustomtouchbaritem
   */
  interface NSCustomTouchBarItem extends NSTouchBarItem {
    // doc://com.apple.documentation/documentation/appkit/nscustomtouchbaritem/2544813-view
    view(): NSView;
    setView(): void;
    // doc://com.apple.documentation/documentation/appkit/nscustomtouchbaritem/2544745-viewcontroller
    viewController(): NSViewController;
    setViewController(): void;
    // doc://com.apple.documentation/documentation/appkit/nscustomtouchbaritem/2544770-customizationlabel
    customizationLabel(): string | NSString;
    setCustomizationLabel(): void;
    //
    alloc():NSCustomTouchBarItem;
    //
    init():NSCustomTouchBarItem;
  }
}

declare const NSCustomTouchBarItem: cocoascript.NSCustomTouchBarItem;
declare namespace cocoascript {
  /**
   * A bar item that provides a bar to contain other items.
   * doc://com.apple.documentation/documentation/appkit/nsgrouptouchbaritem
   */
  interface NSGroupTouchBarItem extends NSTouchBarItem {
    // doc://com.apple.documentation/documentation/appkit/nsgrouptouchbaritem/2544686-groupitemwithidentifier
    groupItemWithIdentifier_items(identifier: NSTouchBarItemIdentifier, items: NSTouchBarItem):NSGroupTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nsgrouptouchbaritem/2909988-groupitemwithidentifier
    groupItemWithIdentifier_items_allowedCompressionOptions(identifier: NSTouchBarItemIdentifier, items: NSTouchBarItem, allowedCompressionOptions: NSUserInterfaceCompressionOptions):NSGroupTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nsgrouptouchbaritem/2909967-alertstylegroupitemwithidentifie
    alertStyleGroupItemWithIdentifier(identifier: NSTouchBarItemIdentifier):NSGroupTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nsgrouptouchbaritem/2544717-grouptouchbar
    groupTouchBar(): NSTouchBar;
    setGroupTouchBar(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgrouptouchbaritem/2876344-groupuserinterfacelayoutdirectio
    groupUserInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection;
    setGroupUserInterfaceLayoutDirection(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgrouptouchbaritem/2909972-prefersequalwidths
    prefersEqualWidths(): BOOL;
    setPrefersEqualWidths(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgrouptouchbaritem/2909975-preferreditemwidth
    preferredItemWidth(): CGFloat;
    setPreferredItemWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgrouptouchbaritem/2909985-effectivecompressionoptions
    effectiveCompressionOptions(): NSUserInterfaceCompressionOptions;
    setEffectiveCompressionOptions(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgrouptouchbaritem/2909968-prioritizedcompressionoptions
    prioritizedCompressionOptions(): NSUserInterfaceCompressionOptions;
    setPrioritizedCompressionOptions(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgrouptouchbaritem/2544877-customizationlabel
    customizationLabel(): string | NSString;
    setCustomizationLabel(): void;
    //
    alloc():NSGroupTouchBarItem;
    //
    init():NSGroupTouchBarItem;
  }
}

declare const NSGroupTouchBarItem: cocoascript.NSGroupTouchBarItem;
declare namespace cocoascript {
  /**
   * A bar item that provides a two-state control that can expand into its second state, showing the contents of a bar that it owns.
   * doc://com.apple.documentation/documentation/appkit/nspopovertouchbaritem
   */
  interface NSPopoverTouchBarItem extends NSTouchBarItem {
    // doc://com.apple.documentation/documentation/appkit/nspopovertouchbaritem/2544699-collapsedrepresentation
    collapsedRepresentation(): NSView;
    setCollapsedRepresentation(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopovertouchbaritem/2544725-collapsedrepresentationimage
    collapsedRepresentationImage(): NSImage;
    setCollapsedRepresentationImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopovertouchbaritem/2544772-collapsedrepresentationlabel
    collapsedRepresentationLabel(): string | NSString;
    setCollapsedRepresentationLabel(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopovertouchbaritem/2544856-popovertouchbar
    popoverTouchBar(): NSTouchBar;
    setPopoverTouchBar(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopovertouchbaritem/2544711-showsclosebutton
    showsCloseButton(): BOOL;
    setShowsCloseButton(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopovertouchbaritem/2646955-pressandholdtouchbar
    pressAndHoldTouchBar(): NSTouchBar;
    setPressAndHoldTouchBar(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopovertouchbaritem/2544797-showpopover
    showPopover(sender: NSPopoverTouchBarItem):void;
    // doc://com.apple.documentation/documentation/appkit/nspopovertouchbaritem/2544697-dismisspopover
    dismissPopover(sender: NSPopoverTouchBarItem):void;
    // doc://com.apple.documentation/documentation/appkit/nspopovertouchbaritem/2544842-makestandardactivatepopovergestu
    makeStandardActivatePopoverGestureRecognizer():NSGestureRecognizer;
    // doc://com.apple.documentation/documentation/appkit/nspopovertouchbaritem/2544684-customizationlabel
    customizationLabel(): string | NSString;
    setCustomizationLabel(): void;
    //
    alloc():NSPopoverTouchBarItem;
    //
    init():NSPopoverTouchBarItem;
  }
}

declare const NSPopoverTouchBarItem: cocoascript.NSPopoverTouchBarItem;
declare namespace cocoascript {
  /**
   * A bar item that, along with its delegate, provides a list of objects eligible for sharing.
   * doc://com.apple.documentation/documentation/appkit/nssharingservicepickertouchbaritem
   */
  interface NSSharingServicePickerTouchBarItem extends NSTouchBarItem {
    // doc://com.apple.documentation/documentation/appkit/nssharingservicepickertouchbaritem/2539408-delegate
    delegate(): NSSharingServicePickerTouchBarItemDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservicepickertouchbaritem/2646965-buttonimage
    buttonImage(): NSImage;
    setButtonImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservicepickertouchbaritem/2646971-buttontitle
    buttonTitle(): string | NSString;
    setButtonTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservicepickertouchbaritem/2560996-enabled
    enabled(): BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservicepickertouchbaritem/3375791-activityitemsconfiguration
    activityItemsConfiguration(): UIActivityItemsConfigurationReading;
    setActivityItemsConfiguration(): void;
    //
    alloc():NSSharingServicePickerTouchBarItem;
    //
    init():NSSharingServicePickerTouchBarItem;
  }
}

declare const NSSharingServicePickerTouchBarItem: cocoascript.NSSharingServicePickerTouchBarItem;
declare namespace cocoascript {
  /**
   * A bar item that provides a slider control for choosing a value in a range.
   * doc://com.apple.documentation/documentation/appkit/nsslidertouchbaritem
   */
  interface NSSliderTouchBarItem extends NSTouchBarItem {
    // doc://com.apple.documentation/documentation/appkit/nsslidertouchbaritem/2544809-slider
    slider(): NSSlider;
    setSlider(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidertouchbaritem/2544741-label
    label(): string | NSString;
    setLabel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidertouchbaritem/2544846-minimumvalueaccessory
    minimumValueAccessory(): NSSliderAccessory;
    setMinimumValueAccessory(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidertouchbaritem/2544672-maximumvalueaccessory
    maximumValueAccessory(): NSSliderAccessory;
    setMaximumValueAccessory(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidertouchbaritem/2544811-valueaccessorywidth
    valueAccessoryWidth(): NSSliderAccessoryWidth;
    setValueAccessoryWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidertouchbaritem/2544814-target
    target(): id;
    setTarget(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidertouchbaritem/2544765-action
    action(): SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidertouchbaritem/2544793-customizationlabel
    customizationLabel(): string | NSString;
    setCustomizationLabel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidertouchbaritem/3237220-doublevalue
    doubleValue(): number;
    setDoubleValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidertouchbaritem/3237221-maximumsliderwidth
    maximumSliderWidth(): CGFloat;
    setMaximumSliderWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidertouchbaritem/3237222-minimumsliderwidth
    minimumSliderWidth(): CGFloat;
    setMinimumSliderWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidertouchbaritem/2951981-view
    view(): NSUserInterfaceCompression;
    setView(): void;
    //
    alloc():NSSliderTouchBarItem;
    //
    init():NSSliderTouchBarItem;
  }
}

declare const NSSliderTouchBarItem: cocoascript.NSSliderTouchBarItem;
declare namespace cocoascript {
  /**
   * An object that specifies how user interface elements resize themselves when space is constrained.
   * doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompressionoptions
   */
  interface NSUserInterfaceCompressionOptions extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompressionoptions/2909982-init
    init():NSUserInterfaceCompressionOptions;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompressionoptions/2909987-initwithcompressionoptions
    initWithCompressionOptions(options: NSUserInterfaceCompressionOptions):NSUserInterfaceCompressionOptions;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompressionoptions/2909979-initwithidentifier
    initWithIdentifier(identifier: string | NSString):NSUserInterfaceCompressionOptions;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompressionoptions/2909964-initwithcoder
    initWithCoder(coder: NSCoder):NSUserInterfaceCompressionOptions;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompressionoptions/2909980-hideimagesoption
    hideImagesOption(): NSUserInterfaceCompressionOptions;
    setHideImagesOption(): void;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompressionoptions/2909971-hidetextoption
    hideTextOption(): NSUserInterfaceCompressionOptions;
    setHideTextOption(): void;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompressionoptions/2909976-reducemetricsoption
    reduceMetricsOption(): NSUserInterfaceCompressionOptions;
    setReduceMetricsOption(): void;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompressionoptions/2909966-breakequalwidthsoption
    breakEqualWidthsOption(): NSUserInterfaceCompressionOptions;
    setBreakEqualWidthsOption(): void;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompressionoptions/2909974-standardoptions
    standardOptions(): NSUserInterfaceCompressionOptions;
    setStandardOptions(): void;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompressionoptions/2909986-empty
    empty(): BOOL;
    setEmpty(): void;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompressionoptions/2909983-containsoptions
    containsOptions(options: NSUserInterfaceCompressionOptions):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompressionoptions/2909977-intersectsoptions
    intersectsOptions(options: NSUserInterfaceCompressionOptions):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompressionoptions/2909965-optionsbyaddingoptions
    optionsByAddingOptions(options: NSUserInterfaceCompressionOptions):NSUserInterfaceCompressionOptions;
    // doc://com.apple.documentation/documentation/appkit/nsuserinterfacecompressionoptions/2909969-optionsbyremovingoptions
    optionsByRemovingOptions(options: NSUserInterfaceCompressionOptions):NSUserInterfaceCompressionOptions;
    //
    alloc():NSUserInterfaceCompressionOptions;
    //
    init():NSUserInterfaceCompressionOptions;
  }
}

declare const NSUserInterfaceCompressionOptions: cocoascript.NSUserInterfaceCompressionOptions;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsbuttontouchbaritem
   */
  interface NSButtonTouchBarItem extends NSTouchBarItem {
    // doc://com.apple.documentation/documentation/appkit/nsbuttontouchbaritem/3237178-buttontouchbaritemwithidentifier
    buttonTouchBarItemWithIdentifier_image_target_action(identifier: NSTouchBarItemIdentifier, image: NSImage, target: NSButtonTouchBarItem, action: SEL):NSButtonTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nsbuttontouchbaritem/3237179-buttontouchbaritemwithidentifier
    buttonTouchBarItemWithIdentifier_title_image_target_action(identifier: NSTouchBarItemIdentifier, title: string | NSString, image: NSImage, target: NSButtonTouchBarItem, action: SEL):NSButtonTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nsbuttontouchbaritem/3237180-buttontouchbaritemwithidentifier
    buttonTouchBarItemWithIdentifier_title_target_action(identifier: NSTouchBarItemIdentifier, title: string | NSString, target: NSButtonTouchBarItem, action: SEL):NSButtonTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nsbuttontouchbaritem/3237176-action
    action(): SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttontouchbaritem/3237177-bezelcolor
    bezelColor(): NSColor;
    setBezelColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttontouchbaritem/3237181-customizationlabel
    customizationLabel(): string | NSString;
    setCustomizationLabel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttontouchbaritem/3237182-image
    image(): NSImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttontouchbaritem/3353052-enabled
    enabled(): BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttontouchbaritem/3237184-target
    target(): id;
    setTarget(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttontouchbaritem/3237185-title
    title(): string | NSString;
    setTitle(): void;
    //
    alloc():NSButtonTouchBarItem;
    //
    init():NSButtonTouchBarItem;
  }
}

declare const NSButtonTouchBarItem: cocoascript.NSButtonTouchBarItem;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem
   */
  interface NSPickerTouchBarItem extends NSTouchBarItem {
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3237203-pickertouchbaritemwithidentifier
    pickerTouchBarItemWithIdentifier_images_selectionMode_target_action(identifier: NSTouchBarItemIdentifier, images: NSImage, selectionMode: NSPickerTouchBarItemSelectionMode, target: NSPickerTouchBarItem, action: SEL):NSPickerTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3237204-pickertouchbaritemwithidentifier
    pickerTouchBarItemWithIdentifier_labels_selectionMode_target_action(identifier: NSTouchBarItemIdentifier, labels: string | NSString, selectionMode: NSPickerTouchBarItemSelectionMode, target: NSPickerTouchBarItem, action: SEL):NSPickerTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3237194-action
    action(): SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3237195-collapsedrepresentationimage
    collapsedRepresentationImage(): NSImage;
    setCollapsedRepresentationImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3237196-collapsedrepresentationlabel
    collapsedRepresentationLabel(): string | NSString;
    setCollapsedRepresentationLabel(): void;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3237197-controlrepresentation
    controlRepresentation(): NSPickerTouchBarItemControlRepresentation;
    setControlRepresentation(): void;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3237198-customizationlabel
    customizationLabel(): string | NSString;
    setCustomizationLabel(): void;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3353055-enabled
    enabled(): BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3237202-numberofoptions
    numberOfOptions(): NSInteger;
    setNumberOfOptions(): void;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3237205-selectedindex
    selectedIndex(): NSInteger;
    setSelectedIndex(): void;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3237206-selectioncolor
    selectionColor(): NSColor;
    setSelectionColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3237207-selectionmode
    selectionMode(): NSPickerTouchBarItemSelectionMode;
    setSelectionMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3237210-target
    target(): id;
    setTarget(): void;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3237199-imageatindex
    imageAtIndex(index: NSInteger):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3353056-isenabledatindex
    isEnabledAtIndex(index: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3237201-labelatindex
    labelAtIndex(index: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3353057-setenabled
    setEnabled_atIndex(enabled: BOOL, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3237208-setimage
    setImage_atIndex(image: NSImage, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritem/3237209-setlabel
    setLabel_atIndex(label: string | NSString, index: NSInteger):void;
    //
    alloc():NSPickerTouchBarItem;
    //
    init():NSPickerTouchBarItem;
  }
}

declare const NSPickerTouchBarItem: cocoascript.NSPickerTouchBarItem;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nssteppertouchbaritem
   */
  interface NSStepperTouchBarItem extends NSTouchBarItem {
    // doc://com.apple.documentation/documentation/appkit/nssteppertouchbaritem/3334935-steppertouchbaritemwithidentifie
    stepperTouchBarItemWithIdentifier_drawingHandler(identifier: NSTouchBarItemIdentifier, drawingHandler: number):NSStepperTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nssteppertouchbaritem/3334936-steppertouchbaritemwithidentifie
    stepperTouchBarItemWithIdentifier_formatter(identifier: NSTouchBarItemIdentifier, formatter: NSFormatter):NSStepperTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nssteppertouchbaritem/3334930-action
    action(): SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nssteppertouchbaritem/3334931-customizationlabel
    customizationLabel(): string | NSString;
    setCustomizationLabel(): void;
    // doc://com.apple.documentation/documentation/appkit/nssteppertouchbaritem/3334932-increment
    increment(): number;
    setIncrement(): void;
    // doc://com.apple.documentation/documentation/appkit/nssteppertouchbaritem/3334933-maxvalue
    maxValue(): number;
    setMaxValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nssteppertouchbaritem/3334934-minvalue
    minValue(): number;
    setMinValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nssteppertouchbaritem/3334937-target
    target(): id;
    setTarget(): void;
    // doc://com.apple.documentation/documentation/appkit/nssteppertouchbaritem/3334938-value
    value(): number;
    setValue(): void;
    //
    alloc():NSStepperTouchBarItem;
    //
    init():NSStepperTouchBarItem;
  }
}

declare const NSStepperTouchBarItem: cocoascript.NSStepperTouchBarItem;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritemcontrolrepresentation
  type NSPickerTouchBarItemControlRepresentation = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspickertouchbaritemselectionmode
  type NSPickerTouchBarItemSelectionMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * A set of methods that a scrubber data source object implements to provide items to the scrubber from an associated data collection in your app.
   * doc://com.apple.documentation/documentation/appkit/nsscrubberdatasource
   */
  interface NSScrubberDataSource extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsscrubberdatasource/2544845-numberofitemsforscrubber
    numberOfItemsForScrubber(scrubber: NSScrubber):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberdatasource/2544709-scrubber
    scrubber_viewForItemAtIndex(scrubber: NSScrubber, index: NSInteger):NSScrubberItemView;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that a scrubber delegate implements to respond to user interactions.
   * doc://com.apple.documentation/documentation/appkit/nsscrubberdelegate
   */
  interface NSScrubberDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsscrubberdelegate/2544714-scrubber
    scrubber_didSelectItemAtIndex(scrubber: NSScrubber, selectedIndex: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberdelegate/2544788-scrubber
    scrubber_didHighlightItemAtIndex(scrubber: NSScrubber, highlightedIndex: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberdelegate/2544817-scrubber
    scrubber_didChangeVisibleRange(scrubber: NSScrubber, visibleRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberdelegate/2544657-didbegininteractingwithscrubber
    didBeginInteractingWithScrubber(scrubber: NSScrubber):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberdelegate/2544653-didfinishinteractingwithscrubber
    didFinishInteractingWithScrubber(scrubber: NSScrubber):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberdelegate/2646905-didcancelinteractingwithscrubber
    didCancelInteractingWithScrubber(scrubber: NSScrubber):void;
  }
}
declare namespace cocoascript {
  /**
   * An item at a specific index position in the scrubber.
   * doc://com.apple.documentation/documentation/appkit/nsscrubberitemview
   */
  interface NSScrubberItemView extends NSScrubberArrangedView {
    //
    alloc():NSScrubberItemView;
    //
    init():NSScrubberItemView;
  }
}

declare const NSScrubberItemView: cocoascript.NSScrubberItemView;
declare namespace cocoascript {
  /**
   * An abstract base class for the views whose layout is managed by a scrubber.
   * doc://com.apple.documentation/documentation/appkit/nsscrubberarrangedview
   */
  interface NSScrubberArrangedView extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nsscrubberarrangedview/2588255-highlighted
    highlighted(): BOOL;
    setHighlighted(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberarrangedview/2588256-selected
    selected(): BOOL;
    setSelected(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberarrangedview/2588268-applylayoutattributes
    applyLayoutAttributes(layoutAttributes: NSScrubberLayoutAttributes):void;
    //
    alloc():NSScrubberArrangedView;
    //
    init():NSScrubberArrangedView;
  }
}

declare const NSScrubberArrangedView: cocoascript.NSScrubberArrangedView;
declare namespace cocoascript {
  /**
   * A concrete view subclass for displaying images in a scrubber items.
   * doc://com.apple.documentation/documentation/appkit/nsscrubberimageitemview
   */
  interface NSScrubberImageItemView extends NSScrubberItemView {
    // doc://com.apple.documentation/documentation/appkit/nsscrubberimageitemview/2544761-image
    image(): NSImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberimageitemview/2544876-imageview
    imageView(): NSImageView;
    setImageView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberimageitemview/2544674-imagealignment
    imageAlignment(): NSImageAlignment;
    setImageAlignment(): void;
    //
    alloc():NSScrubberImageItemView;
    //
    init():NSScrubberImageItemView;
  }
}

declare const NSScrubberImageItemView: cocoascript.NSScrubberImageItemView;
declare namespace cocoascript {
  /**
   * An abstract class that provides decorative accessory views for selected and highlighted items within a scrubber control.
   * doc://com.apple.documentation/documentation/appkit/nsscrubberselectionstyle
   */
  interface NSScrubberSelectionStyle extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsscrubberselectionstyle/2588266-outlineoverlaystyle
    outlineOverlayStyle(): NSScrubberSelectionStyle;
    setOutlineOverlayStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberselectionstyle/2588261-roundedbackgroundstyle
    roundedBackgroundStyle(): NSScrubberSelectionStyle;
    setRoundedBackgroundStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberselectionstyle/2588269-init
    init():NSScrubberSelectionStyle;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberselectionstyle/2588264-initwithcoder
    initWithCoder(coder: NSCoder):NSScrubberSelectionStyle;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberselectionstyle/2588257-makeselectionview
    makeSelectionView():NSScrubberSelectionView;
    //
    alloc():NSScrubberSelectionStyle;
    //
    init():NSScrubberSelectionStyle;
  }
}

declare const NSScrubberSelectionStyle: cocoascript.NSScrubberSelectionStyle;
declare namespace cocoascript {
  /**
   * An abstract base class for specifying the appearance of a highlighted or selected item in a scrubber.
   * doc://com.apple.documentation/documentation/appkit/nsscrubberselectionview
   */
  interface NSScrubberSelectionView extends NSScrubberArrangedView {
    //
    alloc():NSScrubberSelectionView;
    //
    init():NSScrubberSelectionView;
  }
}

declare const NSScrubberSelectionView: cocoascript.NSScrubberSelectionView;
declare namespace cocoascript {
  /**
   * A concrete view subclass for displaying text for an item in a scrubber.
   * doc://com.apple.documentation/documentation/appkit/nsscrubbertextitemview
   */
  interface NSScrubberTextItemView extends NSScrubberItemView {
    // doc://com.apple.documentation/documentation/appkit/nsscrubbertextitemview/2544795-title
    title(): string | NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubbertextitemview/2544844-textfield
    textField(): NSTextField;
    setTextField(): void;
    //
    alloc():NSScrubberTextItemView;
    //
    init():NSScrubberTextItemView;
  }
}

declare const NSScrubberTextItemView: cocoascript.NSScrubberTextItemView;
declare namespace cocoascript {
  /**
   * A concrete layout object that arranges items end-to-end in a linear strip.
   * doc://com.apple.documentation/documentation/appkit/nsscrubberflowlayout
   */
  interface NSScrubberFlowLayout extends NSScrubberLayout {
    // doc://com.apple.documentation/documentation/appkit/nsscrubberflowlayout/2544649-itemspacing
    itemSpacing(): CGFloat;
    setItemSpacing(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberflowlayout/2544627-itemsize
    itemSize(): NSSize;
    setItemSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberflowlayout/2544642-invalidatelayoutforitemsatindexe
    invalidateLayoutForItemsAtIndexes(invalidItemIndexes: NSIndexSet):void;
    //
    alloc():NSScrubberFlowLayout;
    //
    init():NSScrubberFlowLayout;
  }
}

declare const NSScrubberFlowLayout: cocoascript.NSScrubberFlowLayout;
declare namespace cocoascript {
  /**
   * A protocol that a scrubber delegate can adopt to provide the size of an item.
   * doc://com.apple.documentation/documentation/appkit/nsscrubberflowlayoutdelegate
   */
  interface NSScrubberFlowLayoutDelegate extends NSScrubberDelegate {
    // doc://com.apple.documentation/documentation/appkit/nsscrubberflowlayoutdelegate/2544630-scrubber
    scrubber_layout_sizeForItemAtIndex(scrubber: NSScrubber, layout: NSScrubberFlowLayout, itemIndex: NSInteger):NSSize;
  }
}
declare namespace cocoascript {
  /**
   * A concrete layout object that sizes each item to some fraction of the scrubber's visible size.
   * doc://com.apple.documentation/documentation/appkit/nsscrubberproportionallayout
   */
  interface NSScrubberProportionalLayout extends NSScrubberLayout {
    // doc://com.apple.documentation/documentation/appkit/nsscrubberproportionallayout/2544646-initwithnumberofvisibleitems
    initWithNumberOfVisibleItems(numberOfVisibleItems: NSInteger):NSScrubberProportionalLayout;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberproportionallayout/2544624-initwithcoder
    initWithCoder(coder: NSCoder):NSScrubberProportionalLayout;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberproportionallayout/2544651-numberofvisibleitems
    numberOfVisibleItems(): NSInteger;
    setNumberOfVisibleItems(): void;
    //
    alloc():NSScrubberProportionalLayout;
    //
    init():NSScrubberProportionalLayout;
  }
}

declare const NSScrubberProportionalLayout: cocoascript.NSScrubberProportionalLayout;
declare namespace cocoascript {
  /**
   * The layout of a scrubber item.
   * doc://com.apple.documentation/documentation/appkit/nsscrubberlayoutattributes
   */
  interface NSScrubberLayoutAttributes extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayoutattributes/2544645-layoutattributesforitematindex
    layoutAttributesForItemAtIndex(index: NSInteger):NSScrubberLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayoutattributes/2544648-alpha
    alpha(): CGFloat;
    setAlpha(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayoutattributes/2544623-frame
    frame(): NSRect;
    setFrame(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayoutattributes/2544635-itemindex
    itemIndex(): NSInteger;
    setItemIndex(): void;
    //
    alloc():NSScrubberLayoutAttributes;
    //
    init():NSScrubberLayoutAttributes;
  }
}

declare const NSScrubberLayoutAttributes: cocoascript.NSScrubberLayoutAttributes;
declare namespace cocoascript {
  /**
   * An abstract class that describes the layout of items within a scrubber control.
   * doc://com.apple.documentation/documentation/appkit/nsscrubberlayout
   */
  interface NSScrubberLayout extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayout/2544643-init
    init():NSScrubberLayout;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayout/2544647-initwithcoder
    initWithCoder(coder: NSCoder):NSScrubberLayout;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayout/2544628-layoutattributesclass
    layoutAttributesClass(): Class;
    setLayoutAttributesClass(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayout/2544638-scrubber
    scrubber(): NSScrubber;
    setScrubber(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayout/2544637-visiblerect
    visibleRect(): NSRect;
    setVisibleRect(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayout/2544626-invalidatelayout
    invalidateLayout():void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayout/2544632-preparelayout
    prepareLayout():void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayout/2544644-scrubbercontentsize
    scrubberContentSize(): NSSize;
    setScrubberContentSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayout/2544650-layoutattributesforitematindex
    layoutAttributesForItemAtIndex(index: NSInteger):NSScrubberLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayout/2544636-layoutattributesforitemsinrect
    layoutAttributesForItemsInRect(rect: NSRect):NSScrubberLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayout/2544631-shouldinvalidatelayoutforselecti
    shouldInvalidateLayoutForSelectionChange(): BOOL;
    setShouldInvalidateLayoutForSelectionChange(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayout/2544639-shouldinvalidatelayoutforhighlig
    shouldInvalidateLayoutForHighlightChange(): BOOL;
    setShouldInvalidateLayoutForHighlightChange(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayout/2544633-shouldinvalidatelayoutforchangef
    shouldInvalidateLayoutForChangeFromVisibleRect_toVisibleRect(fromVisibleRect: NSRect, toVisibleRect: NSRect):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsscrubberlayout/2646926-automaticallymirrorsinrighttolef
    automaticallyMirrorsInRightToLeftLayout(): BOOL;
    setAutomaticallyMirrorsInRightToLeftLayout(): void;
    //
    alloc():NSScrubberLayout;
    //
    init():NSScrubberLayout;
  }
}

declare const NSScrubberLayout: cocoascript.NSScrubberLayout;
declare namespace cocoascript {
  /**
   * A set of methods that are implemented by the source object in a dragging session.
   * doc://com.apple.documentation/documentation/appkit/nsdraggingsource
   */
  interface NSDraggingSource extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsource/1416000-draggingsession
    draggingSession_sourceOperationMaskForDraggingContext(session: NSDraggingSession, context: NSDraggingContext):NSDragOperation;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsource/1416017-draggingsession
    draggingSession_endedAtPoint_operation(session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation):void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsource/1416079-draggingsession
    draggingSession_movedToPoint(session: NSDraggingSession, screenPoint: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsource/1415960-draggingsession
    draggingSession_willBeginAtPoint(session: NSDraggingSession, screenPoint: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsource/1415974-ignoremodifierkeysfordraggingses
    ignoreModifierKeysForDraggingSession(session: NSDraggingSession):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsource/1806936-draggingsourceoperationmaskforlo
    ():void;
    // doc://com.apple.documentation/documentation/objectivec/nsobject/1416082-namesofpromisedfilesdroppedatdes
    namesOfPromisedFilesDroppedAtDestination(dropDestination: NSURL):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsource/1806939-ignoremodifierkeyswhiledragging
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsource/1806941-draggedimage
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsource/1806944-draggedimage
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsource/1806946-draggedimage
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsource/1806949-draggedimage
    ():void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that the destination object (or recipient) of a dragged image must implement.
   * doc://com.apple.documentation/documentation/appkit/nsdraggingdestination
   */
  interface NSDraggingDestination extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsdraggingdestination/1416019-draggingentered
    draggingEntered(sender: NSDraggingInfo):NSDragOperation;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingdestination/1416049-wantsperiodicdraggingupdates
    wantsPeriodicDraggingUpdates():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingdestination/1415998-draggingupdated
    draggingUpdated(sender: NSDraggingInfo):NSDragOperation;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingdestination/1416096-draggingended
    draggingEnded(sender: NSDraggingInfo):void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingdestination/1416056-draggingexited
    draggingExited(sender: NSDraggingInfo):void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingdestination/1416066-preparefordragoperation
    prepareForDragOperation(sender: NSDraggingInfo):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingdestination/1415970-performdragoperation
    performDragOperation(sender: NSDraggingInfo):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingdestination/1416010-concludedragoperation
    concludeDragOperation(sender: NSDraggingInfo):void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingdestination/1416050-updatedraggingitemsfordrag
    updateDraggingItemsForDrag(sender: NSDraggingInfo):void;
  }
}
declare namespace cocoascript {
  /**
   * A single dragged item within a dragging session.
   * doc://com.apple.documentation/documentation/appkit/nsdraggingitem
   */
  interface NSDraggingItem extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsdraggingitem/1535417-initwithpasteboardwriter
    initWithPasteboardWriter(pasteboardWriter: NSPasteboardWriting):NSDraggingItem;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingitem/1528746-setdraggingframe
    setDraggingFrame_contents(frame: NSRect, contents: NSDraggingItem):void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingitem/1528559-draggingframe
    draggingFrame(): NSRect;
    setDraggingFrame(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingitem/1524302-imagecomponents
    imageComponents(): NSDraggingImageComponent;
    setImageComponents(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingitem/1535607-imagecomponentsprovider
    imageComponentsProvider(): void;
    setImageComponentsProvider(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingitem/1533258-item
    item(): id;
    setItem(): void;
    //
    alloc():NSDraggingItem;
    //
    init():NSDraggingItem;
  }
}

declare const NSDraggingItem: cocoascript.NSDraggingItem;
declare namespace cocoascript {
  /**
   * The encapsulation of a drag-and-drop action that supports modification of the drag while in progress.
   * doc://com.apple.documentation/documentation/appkit/nsdraggingsession
   */
  interface NSDraggingSession extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsession/1534103-draggingpasteboard
    draggingPasteboard(): NSPasteboard;
    setDraggingPasteboard(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsession/1531277-animatestostartingpositionsoncan
    animatesToStartingPositionsOnCancelOrFail(): BOOL;
    setAnimatesToStartingPositionsOnCancelOrFail(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsession/1524544-draggingformation
    draggingFormation(): NSDraggingFormation;
    setDraggingFormation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsession/1533229-draggingsequencenumber
    draggingSequenceNumber(): NSInteger;
    setDraggingSequenceNumber(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsession/1532445-enumeratedraggingitemswithoption
    enumerateDraggingItemsWithOptions_forView_classes_searchOptions_usingBlock(enumOpts: NSDraggingItemEnumerationOptions, view: NSView, classArray: Class, searchOptions: NSDraggingSession, block: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsession/1529395-dragginglocation
    draggingLocation(): NSPoint;
    setDraggingLocation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingsession/1533729-draggingleaderindex
    draggingLeaderIndex(): NSInteger;
    setDraggingLeaderIndex(): void;
    //
    alloc():NSDraggingSession;
    //
    init():NSDraggingSession;
  }
}

declare const NSDraggingSession: cocoascript.NSDraggingSession;
declare namespace cocoascript {
  /**
   * A single object in a dragging item.
   * doc://com.apple.documentation/documentation/appkit/nsdraggingimagecomponent
   */
  interface NSDraggingImageComponent extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsdraggingimagecomponent/1534187-initwithkey
    initWithKey(key: NSDraggingImageComponentKey):NSDraggingImageComponent;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingimagecomponent/1557913-draggingimagecomponentwithkey
    draggingImageComponentWithKey(key: NSDraggingImageComponentKey):NSDraggingImageComponent;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingimagecomponent/1535631-key
    key(): NSDraggingImageComponentKey;
    setKey(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingimagecomponent/1529426-contents
    contents(): id;
    setContents(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdraggingimagecomponent/1535507-frame
    frame(): NSRect;
    setFrame(): void;
    //
    alloc():NSDraggingImageComponent;
    //
    init():NSDraggingImageComponent;
  }
}

declare const NSDraggingImageComponent: cocoascript.NSDraggingImageComponent;
declare namespace cocoascript {
  /**
   * A set of methods that supply information about a dragging session.
   * doc://com.apple.documentation/documentation/appkit/nsdragginginfo
   */
  interface NSDraggingInfo extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsdragginginfo/1416092-draggingpasteboard
    draggingPasteboard(): NSPasteboard;
    setDraggingPasteboard(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdragginginfo/1416039-draggingsequencenumber
    draggingSequenceNumber(): NSInteger;
    setDraggingSequenceNumber(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdragginginfo/1416068-draggingsource
    draggingSource(): id;
    setDraggingSource(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdragginginfo/1415966-draggingsourceoperationmask
    draggingSourceOperationMask(): NSDragOperation;
    setDraggingSourceOperationMask(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdragginginfo/1416070-dragginglocation
    draggingLocation(): NSPoint;
    setDraggingLocation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdragginginfo/1416088-draggingdestinationwindow
    draggingDestinationWindow(): NSWindow;
    setDraggingDestinationWindow(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdragginginfo/1415980-namesofpromisedfilesdroppedatdes
    namesOfPromisedFilesDroppedAtDestination(dropDestination: NSURL):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsdragginginfo/1416033-numberofvaliditemsfordrop
    numberOfValidItemsForDrop(): NSInteger;
    setNumberOfValidItemsForDrop(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdragginginfo/1416102-draggedimage
    draggedImage(): NSImage;
    setDraggedImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdragginginfo/1415990-draggedimagelocation
    draggedImageLocation(): NSPoint;
    setDraggedImageLocation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdragginginfo/1416045-slidedraggedimageto
    slideDraggedImageTo(screenPoint: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsdragginginfo/1416098-animatestodestination
    animatesToDestination(): BOOL;
    setAnimatesToDestination(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdragginginfo/1416041-draggingformation
    draggingFormation(): NSDraggingFormation;
    setDraggingFormation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdragginginfo/1416074-enumeratedraggingitemswithoption
    enumerateDraggingItemsWithOptions_forView_classes_searchOptions_usingBlock(enumOpts: NSDraggingItemEnumerationOptions, view: NSView, classArray: Class, searchOptions: NSDraggingInfo, block: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsdragginginfo/1416077-springloadinghighlight
    springLoadingHighlight(): NSSpringLoadingHighlight;
    setSpringLoadingHighlight(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdragginginfo/1416012-resetspringloading
    resetSpringLoading():void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that the destination object (or recipient) of a dragged object can implement to support spring-loading.
   * doc://com.apple.documentation/documentation/appkit/nsspringloadingdestination
   */
  interface NSSpringLoadingDestination extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsspringloadingdestination/1416106-springloadingactivated
    springLoadingActivated_draggingInfo(activated: BOOL, draggingInfo: NSDraggingInfo):void;
    // doc://com.apple.documentation/documentation/appkit/nsspringloadingdestination/1416062-springloadinghighlightchanged
    springLoadingHighlightChanged(draggingInfo: NSDraggingInfo):void;
    // doc://com.apple.documentation/documentation/appkit/nsspringloadingdestination/1415996-springloadingentered
    springLoadingEntered(draggingInfo: NSDraggingInfo):NSSpringLoadingOptions;
    // doc://com.apple.documentation/documentation/appkit/nsspringloadingdestination/1415976-springloadingupdated
    springLoadingUpdated(draggingInfo: NSDraggingInfo):NSSpringLoadingOptions;
    // doc://com.apple.documentation/documentation/appkit/nsspringloadingdestination/1415972-springloadingexited
    springLoadingExited(draggingInfo: NSDraggingInfo):void;
    // doc://com.apple.documentation/documentation/appkit/nsspringloadingdestination/1416047-draggingended
    draggingEnded(draggingInfo: NSDraggingInfo):void;
  }
}
declare namespace cocoascript {
  /**
   * The complete list of properties and methods implemented by accessible elements.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibility
   */
  interface NSAccessibility extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535002-accessibilityelement
    accessibilityElement(): BOOL;
    setAccessibilityElement(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535024-accessibilityenabled
    accessibilityEnabled(): BOOL;
    setAccessibilityEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534939-accessibilityframe
    accessibilityFrame(): NSRect;
    setAccessibilityFrame(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534974-accessibilityhelp
    accessibilityHelp(): string | NSString;
    setAccessibilityHelp(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534976-accessibilitylabel
    accessibilityLabel(): string | NSString;
    setAccessibilityLabel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535033-accessibilitytitle
    accessibilityTitle(): string | NSString;
    setAccessibilityTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535103-accessibilityvalue
    accessibilityValue(): id;
    setAccessibilityValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535026-accessibilitycontents
    accessibilityContents(): NSArray;
    setAccessibilityContents(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534973-accessibilitycriticalvalue
    accessibilityCriticalValue(): id;
    setAccessibilityCriticalValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535023-accessibilityidentifier
    accessibilityIdentifier(): string | NSString;
    setAccessibilityIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535078-accessibilitymaxvalue
    accessibilityMaxValue(): id;
    setAccessibilityMaxValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534995-accessibilityminvalue
    accessibilityMinValue(): id;
    setAccessibilityMinValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535106-accessibilityorientation
    accessibilityOrientation(): NSAccessibilityOrientation;
    setAccessibilityOrientation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535083-accessibilityprotectedcontent
    accessibilityProtectedContent(): BOOL;
    setAccessibilityProtectedContent(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534981-accessibilityselected
    accessibilitySelected(): BOOL;
    setAccessibilitySelected(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535157-accessibilityurl
    accessibilityURL(): NSURL;
    setAccessibilityURL(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535113-accessibilityvaluedescription
    accessibilityValueDescription(): string | NSString;
    setAccessibilityValueDescription(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535032-accessibilitywarningvalue
    accessibilityWarningValue(): id;
    setAccessibilityWarningValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535018-accessibilitychildren
    accessibilityChildren(): NSArray;
    setAccessibilityChildren(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/2869552-accessibilitychildreninnavigatio
    accessibilityChildrenInNavigationOrder(): NSAccessibilityElement;
    setAccessibilityChildrenInNavigationOrder(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535040-accessibilityparent
    accessibilityParent(): id;
    setAccessibilityParent(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534970-accessibilityselectedchildren
    accessibilitySelectedChildren(): NSArray;
    setAccessibilitySelectedChildren(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535092-accessibilitytopleveluielement
    accessibilityTopLevelUIElement(): id;
    setAccessibilityTopLevelUIElement(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534964-accessibilityvisiblechildren
    accessibilityVisibleChildren(): NSArray;
    setAccessibilityVisibleChildren(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535139-accessibilityapplicationfocusedu
    accessibilityApplicationFocusedUIElement(): id;
    setAccessibilityApplicationFocusedUIElement(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534994-accessibilityfocused
    accessibilityFocused(): BOOL;
    setAccessibilityFocused(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534986-accessibilityfocusedwindow
    accessibilityFocusedWindow(): id;
    setAccessibilityFocusedWindow(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534990-accessibilitysharedfocuselements
    accessibilitySharedFocusElements(): NSArray;
    setAccessibilitySharedFocusElements(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/2869551-accessibilitycustomactions
    accessibilityCustomActions(): NSAccessibilityCustomAction;
    setAccessibilityCustomActions(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/2876053-accessibilitycustomrotors
    accessibilityCustomRotors(): NSAccessibilityCustomRotor;
    setAccessibilityCustomRotors(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1646618-accessibilityrequired
    accessibilityRequired(): BOOL;
    setAccessibilityRequired(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535005-accessibilityrole
    accessibilityRole(): NSAccessibilityRole;
    setAccessibilityRole(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535144-accessibilityroledescription
    accessibilityRoleDescription(): string | NSString;
    setAccessibilityRoleDescription(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535070-accessibilitysubrole
    accessibilitySubrole(): NSAccessibilitySubrole;
    setAccessibilitySubrole(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535050-accessibilityinsertionpointlinen
    accessibilityInsertionPointLineNumber(): NSInteger;
    setAccessibilityInsertionPointLineNumber(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534982-accessibilitynumberofcharacters
    accessibilityNumberOfCharacters(): NSInteger;
    setAccessibilityNumberOfCharacters(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535063-accessibilityplaceholdervalue
    accessibilityPlaceholderValue(): string | NSString;
    setAccessibilityPlaceholderValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535038-accessibilityselectedtext
    accessibilitySelectedText(): string | NSString;
    setAccessibilitySelectedText(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534989-accessibilityselectedtextrange
    accessibilitySelectedTextRange(): NSRange;
    setAccessibilitySelectedTextRange(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535133-accessibilityselectedtextranges
    accessibilitySelectedTextRanges(): NSValue;
    setAccessibilitySelectedTextRanges(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535069-accessibilitysharedcharacterrang
    accessibilitySharedCharacterRange(): NSRange;
    setAccessibilitySharedCharacterRange(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534991-accessibilitysharedtextuielement
    accessibilitySharedTextUIElements(): NSArray;
    setAccessibilitySharedTextUIElements(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535058-accessibilityvisiblecharacterran
    accessibilityVisibleCharacterRange(): NSRange;
    setAccessibilityVisibleCharacterRange(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534940-accessibilitystringforrange
    accessibilityStringForRange(range: NSRange):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1532250-accessibilityattributedstringfor
    accessibilityAttributedStringForRange(range: NSRange):NSAttributedString;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1529273-accessibilityrtfforrange
    accessibilityRTFForRange(range: NSRange):NSData;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1526088-accessibilityframeforrange
    accessibilityFrameForRange(range: NSRange):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1525305-accessibilitylineforindex
    accessibilityLineForIndex(index: NSInteger):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1525329-accessibilityrangeforindex
    accessibilityRangeForIndex(index: NSInteger):NSRange;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1530474-accessibilitystylerangeforindex
    accessibilityStyleRangeForIndex(index: NSInteger):NSRange;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1528813-accessibilityrangeforline
    accessibilityRangeForLine(line: NSInteger):NSRange;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1531615-accessibilityrangeforposition
    accessibilityRangeForPosition(point: NSPoint):NSRange;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535149-accessibilityactivationpoint
    accessibilityActivationPoint(): NSPoint;
    setAccessibilityActivationPoint(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535035-accessibilityalternateuivisible
    accessibilityAlternateUIVisible(): BOOL;
    setAccessibilityAlternateUIVisible(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535060-accessibilitycancelbutton
    accessibilityCancelButton(): id;
    setAccessibilityCancelButton(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535022-accessibilityclosebutton
    accessibilityCloseButton(): id;
    setAccessibilityCloseButton(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534957-accessibilitydefaultbutton
    accessibilityDefaultButton(): id;
    setAccessibilityDefaultButton(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534999-accessibilityfullscreenbutton
    accessibilityFullScreenButton(): id;
    setAccessibilityFullScreenButton(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535074-accessibilitygrowarea
    accessibilityGrowArea(): id;
    setAccessibilityGrowArea(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534936-accessibilitymain
    accessibilityMain(): BOOL;
    setAccessibilityMain(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535052-accessibilityminimizebutton
    accessibilityMinimizeButton(): id;
    setAccessibilityMinimizeButton(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535028-accessibilityminimized
    accessibilityMinimized(): BOOL;
    setAccessibilityMinimized(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535140-accessibilitymodal
    accessibilityModal(): BOOL;
    setAccessibilityModal(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535143-accessibilityproxy
    accessibilityProxy(): id;
    setAccessibilityProxy(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534983-accessibilityshownmenu
    accessibilityShownMenu(): id;
    setAccessibilityShownMenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535075-accessibilitytoolbarbutton
    accessibilityToolbarButton(): id;
    setAccessibilityToolbarButton(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535030-accessibilitywindow
    accessibilityWindow(): id;
    setAccessibilityWindow(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535090-accessibilityzoombutton
    accessibilityZoomButton(): id;
    setAccessibilityZoomButton(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534996-accessibilityextrasmenubar
    accessibilityExtrasMenuBar(): id;
    setAccessibilityExtrasMenuBar(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535073-accessibilityfrontmost
    accessibilityFrontmost(): BOOL;
    setAccessibilityFrontmost(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534961-accessibilityhidden
    accessibilityHidden(): BOOL;
    setAccessibilityHidden(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535138-accessibilitymainwindow
    accessibilityMainWindow(): id;
    setAccessibilityMainWindow(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535055-accessibilitymenubar
    accessibilityMenuBar(): id;
    setAccessibilityMenuBar(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535117-accessibilitywindows
    accessibilityWindows(): NSArray;
    setAccessibilityWindows(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534966-accessibilitycolumncount
    accessibilityColumnCount(): NSInteger;
    setAccessibilityColumnCount(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535061-accessibilityorderedbyrow
    accessibilityOrderedByRow(): BOOL;
    setAccessibilityOrderedByRow(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535013-accessibilityrowcount
    accessibilityRowCount(): NSInteger;
    setAccessibilityRowCount(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534942-accessibilityhorizontalscrollbar
    accessibilityHorizontalScrollBar(): id;
    setAccessibilityHorizontalScrollBar(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535053-accessibilityverticalscrollbar
    accessibilityVerticalScrollBar(): id;
    setAccessibilityVerticalScrollBar(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534988-accessibilitycolumnheaderuieleme
    accessibilityColumnHeaderUIElements(): NSArray;
    setAccessibilityColumnHeaderUIElements(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535115-accessibilitycolumns
    accessibilityColumns(): NSArray;
    setAccessibilityColumns(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535148-accessibilitycolumntitles
    accessibilityColumnTitles(): NSArray;
    setAccessibilityColumnTitles(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535045-accessibilityexpanded
    accessibilityExpanded(): BOOL;
    setAccessibilityExpanded(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534938-accessibilityheader
    accessibilityHeader(): id;
    setAccessibilityHeader(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535067-accessibilityindex
    accessibilityIndex(): NSInteger;
    setAccessibilityIndex(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535014-accessibilityrowheaderuielements
    accessibilityRowHeaderUIElements(): NSArray;
    setAccessibilityRowHeaderUIElements(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534945-accessibilityrows
    accessibilityRows(): NSArray;
    setAccessibilityRows(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534978-accessibilityselectedcolumns
    accessibilitySelectedColumns(): NSArray;
    setAccessibilitySelectedColumns(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535125-accessibilityselectedrows
    accessibilitySelectedRows(): NSArray;
    setAccessibilitySelectedRows(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534962-accessibilitysortdirection
    accessibilitySortDirection(): NSAccessibilitySortDirection;
    setAccessibilitySortDirection(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535150-accessibilityvisiblecolumns
    accessibilityVisibleColumns(): NSArray;
    setAccessibilityVisibleColumns(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535004-accessibilityvisiblerows
    accessibilityVisibleRows(): NSArray;
    setAccessibilityVisibleRows(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535124-accessibilitydisclosed
    accessibilityDisclosed(): BOOL;
    setAccessibilityDisclosed(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535146-accessibilitydisclosedbyrow
    accessibilityDisclosedByRow(): id;
    setAccessibilityDisclosedByRow(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535008-accessibilitydisclosedrows
    accessibilityDisclosedRows(): id;
    setAccessibilityDisclosedRows(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535111-accessibilitydisclosurelevel
    accessibilityDisclosureLevel(): NSInteger;
    setAccessibilityDisclosureLevel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534979-accessibilitycolumnindexrange
    accessibilityColumnIndexRange(): NSRange;
    setAccessibilityColumnIndexRange(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535153-accessibilityrowindexrange
    accessibilityRowIndexRange(): NSRange;
    setAccessibilityRowIndexRange(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535101-accessibilityselectedcells
    accessibilitySelectedCells(): NSArray;
    setAccessibilitySelectedCells(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535042-accessibilityvisiblecells
    accessibilityVisibleCells(): NSArray;
    setAccessibilityVisibleCells(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1532709-accessibilitycellforcolumn
    accessibilityCellForColumn_row(column: NSInteger, row: NSInteger):NSAccessibility;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535085-accessibilityhandles
    accessibilityHandles(): NSArray;
    setAccessibilityHandles(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535154-accessibilityhorizontalunits
    accessibilityHorizontalUnits(): NSAccessibilityUnits;
    setAccessibilityHorizontalUnits(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535095-accessibilityhorizontalunitdescr
    accessibilityHorizontalUnitDescription(): string | NSString;
    setAccessibilityHorizontalUnitDescription(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535011-accessibilityverticalunits
    accessibilityVerticalUnits(): NSAccessibilityUnits;
    setAccessibilityVerticalUnits(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535065-accessibilityverticalunitdescrip
    accessibilityVerticalUnitDescription(): string | NSString;
    setAccessibilityVerticalUnitDescription(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1526401-accessibilitylayoutpointforscree
    accessibilityLayoutPointForScreenPoint(point: NSPoint):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535016-accessibilitylayoutsizeforscreen
    accessibilityLayoutSizeForScreenSize(size: NSSize):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1524668-accessibilityscreenpointforlayou
    accessibilityScreenPointForLayoutPoint(point: NSPoint):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1526114-accessibilityscreensizeforlayout
    accessibilityScreenSizeForLayoutSize(size: NSSize):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534941-accessibilityallowedvalues
    accessibilityAllowedValues(): NSNumber;
    setAccessibilityAllowedValues(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534954-accessibilitylabeluielements
    accessibilityLabelUIElements(): NSArray;
    setAccessibilityLabelUIElements(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535108-accessibilitylabelvalue
    accessibilityLabelValue(): number;
    setAccessibilityLabelValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535034-accessibilitynextcontents
    accessibilityNextContents(): NSArray;
    setAccessibilityNextContents(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534950-accessibilitypreviouscontents
    accessibilityPreviousContents(): NSArray;
    setAccessibilityPreviousContents(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535088-accessibilitysplitters
    accessibilitySplitters(): NSArray;
    setAccessibilitySplitters(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534943-accessibilityoverflowbutton
    accessibilityOverflowButton(): id;
    setAccessibilityOverflowButton(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535044-accessibilitytabs
    accessibilityTabs(): NSArray;
    setAccessibilityTabs(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535081-accessibilitymarkergroupuielemen
    accessibilityMarkerGroupUIElement(): id;
    setAccessibilityMarkerGroupUIElement(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534968-accessibilitymarkertypedescripti
    accessibilityMarkerTypeDescription(): string | NSString;
    setAccessibilityMarkerTypeDescription(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535037-accessibilitymarkeruielements
    accessibilityMarkerUIElements(): NSArray;
    setAccessibilityMarkerUIElements(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535076-accessibilitymarkervalues
    accessibilityMarkerValues(): id;
    setAccessibilityMarkerValues(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535099-accessibilityrulermarkertype
    accessibilityRulerMarkerType(): NSAccessibilityRulerMarkerType;
    setAccessibilityRulerMarkerType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535029-accessibilityunits
    accessibilityUnits(): NSAccessibilityUnits;
    setAccessibilityUnits(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535094-accessibilityunitdescription
    accessibilityUnitDescription(): string | NSString;
    setAccessibilityUnitDescription(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534993-accessibilitydocument
    accessibilityDocument(): string | NSString;
    setAccessibilityDocument(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535077-accessibilityedited
    accessibilityEdited(): BOOL;
    setAccessibilityEdited(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535068-accessibilityfilename
    accessibilityFilename(): string | NSString;
    setAccessibilityFilename(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534972-accessibilitylinkeduielements
    accessibilityLinkedUIElements(): NSArray;
    setAccessibilityLinkedUIElements(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535122-accessibilityservesastitleforuie
    accessibilityServesAsTitleForUIElements(): NSArray;
    setAccessibilityServesAsTitleForUIElements(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535155-accessibilitytitleuielement
    accessibilityTitleUIElement(): id;
    setAccessibilityTitleUIElement(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534949-accessibilityclearbutton
    accessibilityClearButton(): id;
    setAccessibilityClearButton(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535097-accessibilitydecrementbutton
    accessibilityDecrementButton(): id;
    setAccessibilityDecrementButton(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535007-accessibilityincrementbutton
    accessibilityIncrementButton(): id;
    setAccessibilityIncrementButton(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535105-accessibilitysearchbutton
    accessibilitySearchButton(): id;
    setAccessibilitySearchButton(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535015-accessibilitysearchmenu
    accessibilitySearchMenu(): id;
    setAccessibilitySearchMenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1528679-accessibilityperformcancel
    accessibilityPerformCancel():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1534952-accessibilityperformconfirm
    accessibilityPerformConfirm():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1526626-accessibilityperformdecrement
    accessibilityPerformDecrement():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1524609-accessibilityperformdelete
    accessibilityPerformDelete():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1525705-accessibilityperformincrement
    accessibilityPerformIncrement():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1535130-accessibilityperformpick
    accessibilityPerformPick():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1526358-accessibilityperformpress
    accessibilityPerformPress():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1530545-accessibilityperformraise
    accessibilityPerformRaise():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1533983-accessibilityperformshowalternat
    accessibilityPerformShowAlternateUI():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1531207-accessibilityperformshowdefaultu
    accessibilityPerformShowDefaultUI():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1532774-accessibilityperformshowmenu
    accessibilityPerformShowMenu():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibility/1524956-isaccessibilityselectorallowed
    isAccessibilitySelectorAllowed(selector: SEL):BOOL;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that support accessibility in a UI that changes dynamically—usually in response to mouse-hover events.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilitycontainstransientui
   */
  interface NSAccessibilityContainsTransientUI extends NSAccessibilityElement {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycontainstransientui/1535134-accessibilityperformshowalternat
    accessibilityPerformShowAlternateUI():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycontainstransientui/1529235-accessibilityperformshowdefaultu
    accessibilityPerformShowDefaultUI():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycontainstransientui/1526272-isaccessibilityalternateuivisibl
    isAccessibilityAlternateUIVisible():BOOL;
  }
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilityelementloading
   */
  interface NSAccessibilityElementLoading extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilityelementloading/2890815-accessibilityelementwithtoken
    accessibilityElementWithToken(token: NSAccessibilityLoadingToken):NSAccessibilityElement;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilityelementloading/2890818-accessibilityrangeintargetelemen
    accessibilityRangeInTargetElementWithToken(token: NSAccessibilityLoadingToken):NSRange;
  }
}
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required to interact with an accessibility client.
   * doc://com.apple.documentation/documentation/appkit/1534023-nsaccessibilityelement
   */
  interface NSAccessibilityElement extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/1534023-nsaccessibilityelement/1528055-accessibilityframe
    accessibilityFrame():NSRect;
    // doc://com.apple.documentation/documentation/appkit/1534023-nsaccessibilityelement/1533707-accessibilityidentifier
    accessibilityIdentifier():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/1534023-nsaccessibilityelement/1529078-accessibilityparent
    accessibilityParent():NSAccessibilityElement;
    // doc://com.apple.documentation/documentation/appkit/1534023-nsaccessibilityelement/1525133-isaccessibilityfocused
    isAccessibilityFocused():BOOL;
  }
}
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required for an accessibility element to act as a button.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilitybutton
   */
  interface NSAccessibilityButton extends NSAccessibilityElement {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitybutton/1524910-accessibilitylabel
    accessibilityLabel():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitybutton/1525542-accessibilityperformpress
    accessibilityPerformPress():BOOL;
  }
}
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required for an accessibility element to act as a checkbox.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilitycheckbox
   */
  interface NSAccessibilityCheckBox extends NSAccessibilityButton {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycheckbox/1524299-accessibilityvalue
    accessibilityValue():NSNumber;
  }
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilitycolor
   */
  interface NSAccessibilityColor {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycolor/3566856-accessibilityname
    accessibilityName(): string | NSString;
    setAccessibilityName(): void;
  }
}
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required for an accessibility element to act as an image.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilityimage
   */
  interface NSAccessibilityImage extends NSAccessibilityElement {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilityimage/1531608-accessibilitylabel
    accessibilityLabel():string | NSString;
  }
}
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required for an accessibility element to act as a list view.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilitylist
   */
  interface NSAccessibilityList extends NSAccessibilityTable {
  }
}
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required for an accessibility element to act as navigable static text.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilitynavigablestatictext
   */
  interface NSAccessibilityNavigableStaticText extends NSAccessibilityStaticText {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitynavigablestatictext/1524702-accessibilityframeforrange
    accessibilityFrameForRange(range: NSRange):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitynavigablestatictext/1534931-accessibilitylineforindex
    accessibilityLineForIndex(index: NSInteger):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitynavigablestatictext/1527015-accessibilityrangeforline
    accessibilityRangeForLine(lineNumber: NSInteger):NSRange;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitynavigablestatictext/1525402-accessibilitystringforrange
    accessibilityStringForRange(range: NSRange):string | NSString;
  }
}
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required for an accessibility element to act as an outline view.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilityoutline
   */
  interface NSAccessibilityOutline extends NSAccessibilityTable {
  }
}
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required for an accessibility element to act as a progress indicator.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilityprogressindicator
   */
  interface NSAccessibilityProgressIndicator extends NSAccessibilityGroup {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilityprogressindicator/1531500-accessibilityvalue
    accessibilityValue():NSNumber;
  }
}
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required for an accessibility element to act as a radio button.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilityradiobutton
   */
  interface NSAccessibilityRadioButton extends NSAccessibilityButton {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilityradiobutton/1526534-accessibilityvalue
    accessibilityValue():NSNumber;
  }
}
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required for an accessibility element to act as a row for a table, list, or outline view.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilityrow
   */
  interface NSAccessibilityRow extends NSAccessibilityGroup {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilityrow/1531837-accessibilitydisclosurelevel
    accessibilityDisclosureLevel():NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilityrow/1526746-accessibilityindex
    accessibilityIndex():NSInteger;
  }
}
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required for an accessibility element to act as a slider.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilityslider
   */
  interface NSAccessibilitySlider extends NSAccessibilityElement {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilityslider/1530176-accessibilitylabel
    accessibilityLabel():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilityslider/1534967-accessibilityperformdecrement
    accessibilityPerformDecrement():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilityslider/1528478-accessibilityperformincrement
    accessibilityPerformIncrement():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilityslider/1530335-accessibilityvalue
    accessibilityValue():NSAccessibilitySlider;
  }
}
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required for an accessibility element to act as static text.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilitystatictext
   */
  interface NSAccessibilityStaticText extends NSAccessibilityElement {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitystatictext/1535001-accessibilityattributedstringfor
    accessibilityAttributedStringForRange(range: NSRange):NSAttributedString;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitystatictext/1528730-accessibilityvalue
    accessibilityValue():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitystatictext/1532230-accessibilityvisiblecharacterran
    accessibilityVisibleCharacterRange():NSRange;
  }
}
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required for an accessibility element to act as a stepper.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilitystepper
   */
  interface NSAccessibilityStepper extends NSAccessibilityElement {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitystepper/1528702-accessibilitylabel
    accessibilityLabel():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitystepper/1525327-accessibilityperformdecrement
    accessibilityPerformDecrement():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitystepper/1533764-accessibilityperformincrement
    accessibilityPerformIncrement():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitystepper/1528167-accessibilityvalue
    accessibilityValue():NSAccessibilityStepper;
  }
}
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required for an accessibility element to act as a switch.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilityswitch
   */
  interface NSAccessibilitySwitch extends NSAccessibilityButton {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilityswitch/1528290-accessibilityperformdecrement
    accessibilityPerformDecrement():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilityswitch/1533985-accessibilityperformincrement
    accessibilityPerformIncrement():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilityswitch/1533946-accessibilityvalue
    accessibilityValue():string | NSString;
  }
}
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required for an accessibility element to act as a table view.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilitytable
   */
  interface NSAccessibilityTable extends NSAccessibilityGroup {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitytable/1526621-accessibilitycolumnheaderuieleme
    accessibilityColumnHeaderUIElements():NSArray;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitytable/1524744-accessibilitycolumns
    accessibilityColumns():NSArray;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitytable/1535017-accessibilityheadergroup
    accessibilityHeaderGroup():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitytable/1526563-accessibilitylabel
    accessibilityLabel():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitytable/1524262-accessibilityrowheaderuielements
    accessibilityRowHeaderUIElements():NSArray;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitytable/1526672-accessibilityrows
    accessibilityRows():NSAccessibilityRow;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitytable/1525577-accessibilityselectedcells
    accessibilitySelectedCells():NSArray;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitytable/1528430-accessibilityselectedcolumns
    accessibilitySelectedColumns():NSArray;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitytable/1529241-accessibilityselectedrows
    accessibilitySelectedRows():NSAccessibilityRow;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitytable/1526711-accessibilityvisiblecells
    accessibilityVisibleCells():NSArray;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitytable/1530264-accessibilityvisiblecolumns
    accessibilityVisibleColumns():NSArray;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitytable/1535128-accessibilityvisiblerows
    accessibilityVisibleRows():NSAccessibilityRow;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitytable/1534612-setaccessibilityselectedrows
    setAccessibilitySelectedRows(selectedRows: NSAccessibilityRow):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilityannotationattributekey
  type NSAccessibilityAnnotationAttributeKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilityannotationposition
  type NSAccessibilityAnnotationPosition = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * The basic infrastructure required to interact with an accessibility client.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilityelement
   */
  interface NSAccessibilityElement extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilityelement/1533717-accessibilityaddchildelement
    accessibilityAddChildElement(childElement: NSAccessibilityElement):void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilityelement/1531178-accessibilityelementwithrole
    accessibilityElementWithRole_frame_label_parent(role: NSAccessibilityRole, frame: NSRect, label: string | NSString, parent: NSAccessibilityElement):NSAccessibilityElement;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilityelement/1569648-accessibilityframeinparentspace
    accessibilityFrameInParentSpace(): NSRect;
    setAccessibilityFrameInParentSpace(): void;
    //
    alloc():NSAccessibilityElement;
    //
    init():NSAccessibilityElement;
  }
}

declare const NSAccessibilityElement: cocoascript.NSAccessibilityElement;
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required to act as a container for other user interface elements.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilitygroup
   */
  interface NSAccessibilityGroup extends NSAccessibilityElement {
  }
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomaction
   */
  interface NSAccessibilityCustomAction extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomaction/2870120-initwithname
    initWithName_handler(name: string | NSString, handler: void):NSAccessibilityCustomAction;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomaction/2870146-initwithname
    initWithName_target_selector(name: string | NSString, target: NSObject, selector: SEL):NSAccessibilityCustomAction;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomaction/2870118-name
    name(): string | NSString;
    setName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomaction/2870157-handler
    handler(): void;
    setHandler(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomaction/2870110-selector
    selector(): SEL;
    setSelector(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomaction/2870105-target
    target(): NSObject;
    setTarget(): void;
    //
    alloc():NSAccessibilityCustomAction;
    //
    init():NSAccessibilityCustomAction;
  }
}

declare const NSAccessibilityCustomAction: cocoascript.NSAccessibilityCustomAction;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotor
   */
  interface NSAccessibilityCustomRotor extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotor/2876333-initwithlabel
    initWithLabel_itemSearchDelegate(label: string | NSString, itemSearchDelegate: NSAccessibilityCustomRotorItemSearchDelegate):NSAccessibilityCustomRotor;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotor/2876299-initwithrotortype
    initWithRotorType_itemSearchDelegate(rotorType: NSAccessibilityCustomRotorType, itemSearchDelegate: NSAccessibilityCustomRotorItemSearchDelegate):NSAccessibilityCustomRotor;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotor/2890783-itemloadingdelegate
    itemLoadingDelegate(): NSAccessibilityElementLoading;
    setItemLoadingDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotor/2876307-itemsearchdelegate
    itemSearchDelegate(): NSAccessibilityCustomRotorItemSearchDelegate;
    setItemSearchDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotor/2876331-label
    label(): string | NSString;
    setLabel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotor/2876321-type
    type(): NSAccessibilityCustomRotorType;
    setType(): void;
    //
    alloc():NSAccessibilityCustomRotor;
    //
    init():NSAccessibilityCustomRotor;
  }
}

declare const NSAccessibilityCustomRotor: cocoascript.NSAccessibilityCustomRotor;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotoritemresult
   */
  interface NSAccessibilityCustomRotorItemResult extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotoritemresult/2890782-initwithitemloadingtoken
    initWithItemLoadingToken_customLabel(itemLoadingToken: NSAccessibilityLoadingToken, customLabel: string | NSString):NSAccessibilityCustomRotorItemResult;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotoritemresult/2876308-initwithtargetelement
    initWithTargetElement(targetElement: NSAccessibilityElement):NSAccessibilityCustomRotorItemResult;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotoritemresult/2876298-customlabel
    customLabel(): string | NSString;
    setCustomLabel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotoritemresult/2890781-itemloadingtoken
    itemLoadingToken(): NSAccessibilityLoadingToken;
    setItemLoadingToken(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotoritemresult/2876335-targetelement
    targetElement(): NSAccessibilityElement;
    setTargetElement(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotoritemresult/2876323-targetrange
    targetRange(): NSRange;
    setTargetRange(): void;
    //
    alloc():NSAccessibilityCustomRotorItemResult;
    //
    init():NSAccessibilityCustomRotorItemResult;
  }
}

declare const NSAccessibilityCustomRotorItemResult: cocoascript.NSAccessibilityCustomRotorItemResult;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotorsearchparameters
   */
  interface NSAccessibilityCustomRotorSearchParameters extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotorsearchparameters/2876332-currentitem
    currentItem(): NSAccessibilityCustomRotorItemResult;
    setCurrentItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotorsearchparameters/2876328-filterstring
    filterString(): string | NSString;
    setFilterString(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotorsearchparameters/2876322-searchdirection
    searchDirection(): NSAccessibilityCustomRotorSearchDirection;
    setSearchDirection(): void;
    //
    alloc():NSAccessibilityCustomRotorSearchParameters;
    //
    init():NSAccessibilityCustomRotorSearchParameters;
  }
}

declare const NSAccessibilityCustomRotorSearchParameters: cocoascript.NSAccessibilityCustomRotorSearchParameters;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotortype
  type NSAccessibilityCustomRotorType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotorsearchdirection
  type NSAccessibilityCustomRotorSearchDirection = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotoritemsearchdelegate
   */
  interface NSAccessibilityCustomRotorItemSearchDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomrotoritemsearchdelegate/2876324-rotor
    rotor_resultForSearchParameters(rotor: NSAccessibilityCustomRotor, searchParameters: NSAccessibilityCustomRotorSearchParameters):NSAccessibilityCustomRotorItemResult;
  }
}
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required for an accessibility element to act as a layout area.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilitylayoutarea
   */
  interface NSAccessibilityLayoutArea extends NSAccessibilityGroup {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitylayoutarea/1534997-accessibilitychildren
    accessibilityChildren():NSArray;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitylayoutarea/1533902-accessibilityfocuseduielement
    accessibilityFocusedUIElement(): id;
    setAccessibilityFocusedUIElement(): void;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitylayoutarea/1527051-accessibilitylabel
    accessibilityLabel():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitylayoutarea/1528883-accessibilityselectedchildren
    accessibilitySelectedChildren():NSArray;
  }
}
declare namespace cocoascript {
  /**
   * A role-based protocol that declares the minimum interface required for an accessibility element to act as a layout item.
   * doc://com.apple.documentation/documentation/appkit/nsaccessibilitylayoutitem
   */
  interface NSAccessibilityLayoutItem extends NSAccessibilityGroup {
    // doc://com.apple.documentation/documentation/appkit/nsaccessibilitylayoutitem/1533160-setaccessibilityframe
    setAccessibilityFrame(frame: NSRect):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilityattributename
  type NSAccessibilityAttributeName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilityfontattributekey
  type NSAccessibilityFontAttributeKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilityloadingtoken
  type NSAccessibilityLoadingToken = cocoascript.NSObject;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilityorientationvalue
  type NSAccessibilityOrientationValue = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilityparameterizedattributename
  type NSAccessibilityParameterizedAttributeName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilityrole
  type NSAccessibilityRole = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilitysubrole
  type NSAccessibilitySubrole = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilityrulermarkertypevalue
  type NSAccessibilityRulerMarkerTypeValue = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilityrulerunitvalue
  type NSAccessibilityRulerUnitValue = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilitysortdirectionvalue
  type NSAccessibilitySortDirectionValue = cocoascript.NSString;
}
declare namespace cocoascript {
  /**
   * A set of optional methods that you can use to respond to drawing failures and manage incremental loads.
   * doc://com.apple.documentation/documentation/appkit/nsimagedelegate
   */
  interface NSImageDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsimagedelegate/1519927-imagedidnotdraw
    imageDidNotDraw_inRect(sender: NSImage, rect: NSRect):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsimagedelegate/1519916-image
    image_didLoadPartOfRepresentation_withValidRows(image: NSImage, rep: NSImageRep, rows: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsimagedelegate/1520028-image
    image_didLoadRepresentation_withStatus(image: NSImage, rep: NSImageRep, status: NSImageLoadStatus):void;
    // doc://com.apple.documentation/documentation/appkit/nsimagedelegate/1519945-image
    image_didLoadRepresentationHeader(image: NSImage, rep: NSImageRep):void;
    // doc://com.apple.documentation/documentation/appkit/nsimagedelegate/1519934-image
    image_willLoadRepresentation(image: NSImage, rep: NSImageRep):void;
  }
}
declare namespace cocoascript {
  /**
   * A semiabstract superclass that provides subclasses that you use to draw an image from a particular type of source data.
   * doc://com.apple.documentation/documentation/appkit/nsimagerep
   */
  interface NSImageRep extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1526968-imagerepswithcontentsoffile
    imageRepsWithContentsOfFile(filename: string | NSString):NSImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1535586-imagerepswithpasteboard
    imageRepsWithPasteboard(pasteboard: NSPasteboard):NSImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1526978-imagerepswithcontentsofurl
    imageRepsWithContentsOfURL(url: NSURL):NSImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1534589-imagerepwithcontentsoffile
    imageRepWithContentsOfFile(filename: string | NSString):NSImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1533918-imagerepwithpasteboard
    imageRepWithPasteboard(pasteboard: NSPasteboard):NSImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1535840-imagerepwithcontentsofurl
    imageRepWithContentsOfURL(url: NSURL):NSImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1530271-init
    init():NSImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1535319-initwithcoder
    initWithCoder(coder: NSCoder):NSImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1535427-caninitwithdata
    canInitWithData(data: NSData):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1527887-caninitwithpasteboard
    canInitWithPasteboard(pasteboard: NSPasteboard):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1535246-imagetypes
    imageTypes(): string | NSString;
    setImageTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1534816-imageunfilteredtypes
    imageUnfilteredTypes(): string | NSString;
    setImageUnfilteredTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1532660-imagefiletypes
    imageFileTypes():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1527425-imagepasteboardtypes
    imagePasteboardTypes():NSPasteboardType;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1534890-imageunfilteredfiletypes
    imageUnfilteredFileTypes():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1525257-imageunfilteredpasteboardtypes
    imageUnfilteredPasteboardTypes():NSPasteboardType;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1524374-size
    size(): NSSize;
    setSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1533157-bitspersample
    bitsPerSample(): NSInteger;
    setBitsPerSample(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1535395-colorspacename
    colorSpaceName(): NSColorSpaceName;
    setColorSpaceName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1534506-alpha
    alpha(): BOOL;
    setAlpha(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1528462-opaque
    opaque(): BOOL;
    setOpaque(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1533989-pixelshigh
    pixelsHigh(): NSInteger;
    setPixelsHigh(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1526995-pixelswide
    pixelsWide(): NSInteger;
    setPixelsWide(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1690237-layoutdirection
    layoutDirection(): NSImageLayoutDirection;
    setLayoutDirection(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1533478-cgimageforproposedrect
    CGImageForProposedRect_context_hints(proposedDestRect: NSRect, context: NSGraphicsContext, hints: NSImageRep):CGImageRef;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1526674-draw
    draw():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1525632-drawatpoint
    drawAtPoint(point: NSPoint):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1535066-drawinrect
    drawInRect(rect: NSRect):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1533982-drawinrect
    drawInRect_fromRect_operation_fraction_respectFlipped_hints(dstSpacePortionRect: NSRect, srcSpacePortionRect: NSRect, op: NSCompositingOperation, requestedAlpha: CGFloat, respectContextIsFlipped: BOOL, hints: NSImageRep):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1529342-imagerepclassfortype
    imageRepClassForType(type: string | NSString):Class;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1534272-imagerepclassfordata
    imageRepClassForData(data: NSData):Class;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1525139-registeredimagerepclasses
    registeredImageRepClasses(): Class;
    setRegisteredImageRepClasses(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1535393-registerimagerepclass
    registerImageRepClass(imageRepClass: Class):void;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1535027-unregisterimagerepclass
    unregisterImageRepClass(imageRepClass: Class):void;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1535328-imagerepclassforfiletype
    imageRepClassForFileType(type: string | NSString):Class;
    // doc://com.apple.documentation/documentation/appkit/nsimagerep/1527017-imagerepclassforpasteboardtype
    imageRepClassForPasteboardType(type: NSPasteboardType):Class;
    //
    alloc():NSImageRep;
    //
    init():NSImageRep;
  }
}

declare const NSImageRep: cocoascript.NSImageRep;
// doc://com.apple.documentation/documentation/appkit/nsimagerepregistrydidchangenotification
declare const NSImageRepRegistryDidChangeNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * An object that renders an image from bitmap data.
   * doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep
   */
  interface NSBitmapImageRep extends NSImageRep {
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395502-imagerepwithdata
    imageRepWithData(data: NSData):NSBitmapImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395419-imagerepswithdata
    imageRepsWithData(data: NSData):NSImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395530-colorizebymappinggray
    colorizeByMappingGray_toColor_blackMapping_whiteMapping(midPoint: CGFloat, midPointColor: NSColor, shadowColor: NSColor, lightColor: NSColor):void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395538-initwithbitmapdataplanes
    initWithBitmapDataPlanes_pixelsWide_pixelsHigh_bitsPerSample_samplesPerPixel_hasAlpha_isPlanar_colorSpaceName_bitmapFormat_bytesPerRow_bitsPerPixel(planes: string, width: NSInteger, height: NSInteger, bps: NSInteger, spp: NSInteger, alpha: BOOL, isPlanar: BOOL, colorSpaceName: NSColorSpaceName, bitmapFormat: NSBitmapFormat, rBytes: NSInteger, pBits: NSInteger):NSBitmapImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395540-initwithbitmapdataplanes
    initWithBitmapDataPlanes_pixelsWide_pixelsHigh_bitsPerSample_samplesPerPixel_hasAlpha_isPlanar_colorSpaceName_bytesPerRow_bitsPerPixel(planes: string, width: NSInteger, height: NSInteger, bps: NSInteger, spp: NSInteger, alpha: BOOL, isPlanar: BOOL, colorSpaceName: NSColorSpaceName, rBytes: NSInteger, pBits: NSInteger):NSBitmapImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395423-initwithcgimage
    initWithCGImage(cgImage: CGImageRef):NSBitmapImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395587-initwithciimage
    initWithCIImage(ciImage: CIImage):NSBitmapImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395569-initwithdata
    initWithData(data: NSData):NSBitmapImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395522-initforincrementalload
    initForIncrementalLoad():NSBitmapImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395550-initwithfocusedviewrect
    initWithFocusedViewRect(rect: NSRect):NSBitmapImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395508-bitmapformat
    bitmapFormat(): NSBitmapFormat;
    setBitmapFormat(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395488-bitsperpixel
    bitsPerPixel(): NSInteger;
    setBitsPerPixel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395559-bytesperplane
    bytesPerPlane(): NSInteger;
    setBytesPerPlane(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395454-bytesperrow
    bytesPerRow(): NSInteger;
    setBytesPerRow(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395482-planar
    planar(): BOOL;
    setPlanar(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395474-numberofplanes
    numberOfPlanes(): NSInteger;
    setNumberOfPlanes(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395577-samplesperpixel
    samplesPerPixel(): NSInteger;
    setSamplesPerPixel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395421-bitmapdata
    bitmapData(): string;
    setBitmapData(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395490-getbitmapdataplanes
    getBitmapDataPlanes(data: string):void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395561-tiffrepresentationofimagerepsina
    TIFFRepresentationOfImageRepsInArray(array: NSImageRep):NSData;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395456-tiffrepresentationofimagerepsina
    TIFFRepresentationOfImageRepsInArray_usingCompression_factor(array: NSImageRep, comp: NSTIFFCompression, factor: number):NSData;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395557-tiffrepresentation
    TIFFRepresentation(): NSData;
    setTIFFRepresentation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395524-tiffrepresentationusingcompressi
    TIFFRepresentationUsingCompression_factor(comp: NSTIFFCompression, factor: number):NSData;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395520-representationofimagerepsinarray
    representationOfImageRepsInArray_usingType_properties(imageReps: NSImageRep, storageType: NSBitmapImageFileType, properties: NSBitmapImageRep):NSData;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395458-representationusingtype
    representationUsingType_properties(storageType: NSBitmapImageFileType, properties: NSBitmapImageRep):NSData;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395513-gettiffcompressiontypes
    getTIFFCompressionTypes_count(list: NSTIFFCompression, numTypes: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395548-localizednamefortiffcompressiont
    localizedNameForTIFFCompressionType(compression: NSTIFFCompression):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395427-canbecompressedusing
    canBeCompressedUsing(compression: NSTIFFCompression):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395478-setcompression
    setCompression_factor(compression: NSTIFFCompression, factor: number):void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395515-getcompression
    getCompression_factor(compression: NSTIFFCompression, factor: number):void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395486-setproperty
    setProperty_withValue(property: NSBitmapImageRepPropertyKey, value: NSBitmapImageRep):void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395492-valueforproperty
    valueForProperty(property: NSBitmapImageRepPropertyKey):NSBitmapImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395464-incrementalloadfromdata
    incrementalLoadFromData_complete(data: NSData, complete: BOOL):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395472-setcolor
    setColor_atX_y(color: NSColor, x: NSInteger, y: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395583-coloratx
    colorAtX_y(x: NSInteger, y: NSInteger):NSColor;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395446-setpixel
    setPixel_atX_y(p: NSUInteger, x: NSInteger, y: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395567-getpixel
    getPixel_atX_y(p: NSUInteger, x: NSInteger, y: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395506-cgimage
    CGImage(): CGImageRef;
    setCGImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395470-bitmapimagerepbyconvertingtocolo
    bitmapImageRepByConvertingToColorSpace_renderingIntent(targetSpace: NSColorSpace, renderingIntent: NSColorRenderingIntent):NSBitmapImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395512-bitmapimagerepbyretaggingwithcol
    bitmapImageRepByRetaggingWithColorSpace(newSpace: NSColorSpace):NSBitmapImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsbitmapimagerep/1395468-colorspace
    colorSpace(): NSColorSpace;
    setColorSpace(): void;
    //
    alloc():NSBitmapImageRep;
    //
    init():NSBitmapImageRep;
  }
}

declare const NSBitmapImageRep: cocoascript.NSBitmapImageRep;
declare namespace cocoascript {
  /**
   * An object that can render an image from a Core Image object.
   * doc://com.apple.documentation/documentation/appkit/nsciimagerep
   */
  interface NSCIImageRep extends NSImageRep {
    // doc://com.apple.documentation/documentation/appkit/nsciimagerep/1550736-imagerepwithciimage
    imageRepWithCIImage(image: CIImage):NSCIImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsciimagerep/1528642-initwithciimage
    initWithCIImage(image: CIImage):NSCIImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsciimagerep/1525696-ciimage
    CIImage(): CIImage;
    setCIImage(): void;
    //
    alloc():NSCIImageRep;
    //
    init():NSCIImageRep;
  }
}

declare const NSCIImageRep: cocoascript.NSCIImageRep;
declare namespace cocoascript {
  /**
   * An object that renders an image from a PICT format data stream of version 1, version 2, and extended version 2.
   * doc://com.apple.documentation/documentation/appkit/nspictimagerep
   */
  interface NSPICTImageRep extends NSImageRep {
    // doc://com.apple.documentation/documentation/appkit/nspictimagerep/1588725-imagerepwithdata
    imageRepWithData(pictData: NSData):NSPICTImageRep;
    // doc://com.apple.documentation/documentation/appkit/nspictimagerep/1533954-initwithdata
    initWithData(pictData: NSData):NSPICTImageRep;
    // doc://com.apple.documentation/documentation/appkit/nspictimagerep/1524978-boundingbox
    boundingBox(): NSRect;
    setBoundingBox(): void;
    // doc://com.apple.documentation/documentation/appkit/nspictimagerep/1524591-pictrepresentation
    PICTRepresentation(): NSData;
    setPICTRepresentation(): void;
    //
    alloc():NSPICTImageRep;
    //
    init():NSPICTImageRep;
  }
}

declare const NSPICTImageRep: cocoascript.NSPICTImageRep;
declare namespace cocoascript {
  /**
   * An object that stores image data in a form that can be readily transferred to the screen.
   * doc://com.apple.documentation/documentation/appkit/nscachedimagerep
   */
  interface NSCachedImageRep extends NSImageRep {
    // doc://com.apple.documentation/documentation/appkit/nscachedimagerep/1431038-initwithsize
    initWithSize_depth_separate_alpha(size: NSSize, depth: NSWindowDepth, flag: BOOL, alpha: BOOL):NSCachedImageRep;
    // doc://com.apple.documentation/documentation/appkit/nscachedimagerep/1431036-initwithwindow
    initWithWindow_rect(win: NSWindow, rect: NSRect):NSCachedImageRep;
    // doc://com.apple.documentation/documentation/appkit/nscachedimagerep/1431032-rect
    rect():NSRect;
    // doc://com.apple.documentation/documentation/appkit/nscachedimagerep/1431040-window
    window():NSWindow;
    //
    alloc():NSCachedImageRep;
    //
    init():NSCachedImageRep;
  }
}

declare const NSCachedImageRep: cocoascript.NSCachedImageRep;
declare namespace cocoascript {
  /**
   * An object that can render an image from a PDF format data stream.
   * doc://com.apple.documentation/documentation/appkit/nspdfimagerep
   */
  interface NSPDFImageRep extends NSImageRep {
    // doc://com.apple.documentation/documentation/appkit/nspdfimagerep/1586713-imagerepwithdata
    imageRepWithData(pdfData: NSData):NSPDFImageRep;
    // doc://com.apple.documentation/documentation/appkit/nspdfimagerep/1535547-initwithdata
    initWithData(pdfData: NSData):NSPDFImageRep;
    // doc://com.apple.documentation/documentation/appkit/nspdfimagerep/1533966-bounds
    bounds(): NSRect;
    setBounds(): void;
    // doc://com.apple.documentation/documentation/appkit/nspdfimagerep/1528846-currentpage
    currentPage(): NSInteger;
    setCurrentPage(): void;
    // doc://com.apple.documentation/documentation/appkit/nspdfimagerep/1533063-pagecount
    pageCount(): NSInteger;
    setPageCount(): void;
    // doc://com.apple.documentation/documentation/appkit/nspdfimagerep/1530162-pdfrepresentation
    PDFRepresentation(): NSData;
    setPDFRepresentation(): void;
    //
    alloc():NSPDFImageRep;
    //
    init():NSPDFImageRep;
  }
}

declare const NSPDFImageRep: cocoascript.NSPDFImageRep;
declare namespace cocoascript {
  /**
   * An object that stores information associated with the creation of a PDF file, such as its URL, tag names, page orientation, and paper size.
   * doc://com.apple.documentation/documentation/appkit/nspdfinfo
   */
  interface NSPDFInfo extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nspdfinfo/1528885-url
    URL(): NSURL;
    setURL(): void;
    // doc://com.apple.documentation/documentation/appkit/nspdfinfo/1527208-fileextensionhidden
    fileExtensionHidden(): BOOL;
    setFileExtensionHidden(): void;
    // doc://com.apple.documentation/documentation/appkit/nspdfinfo/1525418-tagnames
    tagNames(): string | NSString;
    setTagNames(): void;
    // doc://com.apple.documentation/documentation/appkit/nspdfinfo/1524848-orientation
    orientation(): NSPaperOrientation;
    setOrientation(): void;
    // doc://com.apple.documentation/documentation/appkit/nspdfinfo/1532272-papersize
    paperSize(): NSSize;
    setPaperSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nspdfinfo/1528715-attributes
    attributes(): id;
    setAttributes(): void;
    //
    alloc():NSPDFInfo;
    //
    init():NSPDFInfo;
  }
}

declare const NSPDFInfo: cocoascript.NSPDFInfo;
declare namespace cocoascript {
  /**
   * An object that can render an image from encapsulated PostScript (EPS) code.
   * doc://com.apple.documentation/documentation/appkit/nsepsimagerep
   */
  interface NSEPSImageRep extends NSImageRep {
    // doc://com.apple.documentation/documentation/appkit/nsepsimagerep/1575616-imagerepwithdata
    imageRepWithData(epsData: NSData):NSEPSImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsepsimagerep/1528187-initwithdata
    initWithData(epsData: NSData):NSEPSImageRep;
    // doc://com.apple.documentation/documentation/appkit/nsepsimagerep/1528455-boundingbox
    boundingBox(): NSRect;
    setBoundingBox(): void;
    // doc://com.apple.documentation/documentation/appkit/nsepsimagerep/1534453-epsrepresentation
    EPSRepresentation(): NSData;
    setEPSRepresentation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsepsimagerep/1526292-preparegstate
    prepareGState():void;
    //
    alloc():NSEPSImageRep;
    //
    init():NSEPSImageRep;
  }
}

declare const NSEPSImageRep: cocoascript.NSEPSImageRep;
declare namespace cocoascript {
  /**
   * An object that uses a delegate object to render an image from a custom format.
   * doc://com.apple.documentation/documentation/appkit/nscustomimagerep
   */
  interface NSCustomImageRep extends NSImageRep {
    // doc://com.apple.documentation/documentation/appkit/nscustomimagerep/1533328-initwithdrawselector
    initWithDrawSelector_delegate(selector: SEL, delegate: NSCustomImageRep):NSCustomImageRep;
    // doc://com.apple.documentation/documentation/appkit/nscustomimagerep/1526521-initwithsize
    initWithSize_flipped_drawingHandler(size: NSSize, drawingHandlerShouldBeCalledWithFlippedContext: BOOL, drawingHandler: NSRect):NSCustomImageRep;
    // doc://com.apple.documentation/documentation/appkit/nscustomimagerep/1527316-drawinghandler
    drawingHandler(): NSRect;
    setDrawingHandler(): void;
    // doc://com.apple.documentation/documentation/appkit/nscustomimagerep/1534716-delegate
    delegate(): id;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nscustomimagerep/1529935-drawselector
    drawSelector(): SEL;
    setDrawSelector(): void;
    //
    alloc():NSCustomImageRep;
    //
    init():NSCustomImageRep;
  }
}

declare const NSCustomImageRep: cocoascript.NSCustomImageRep;
declare namespace cocoascript {
  /**
   * An object that represents a graphics context.
   * doc://com.apple.documentation/documentation/appkit/nsgraphicscontext
   */
  interface NSGraphicsContext extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1524838-graphicscontextwithattributes
    graphicsContextWithAttributes(attributes: NSGraphicsContext):NSGraphicsContext;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1529827-graphicscontextwithbitmapimagere
    graphicsContextWithBitmapImageRep(bitmapRep: NSBitmapImageRep):NSGraphicsContext;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1535380-graphicscontextwithcgcontext
    graphicsContextWithCGContext_flipped(graphicsPort: CGContextRef, initialFlippedState: BOOL):NSGraphicsContext;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1532883-graphicscontextwithwindow
    graphicsContextWithWindow(window: NSWindow):NSGraphicsContext;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1529263-graphicscontextwithgraphicsport
    graphicsContextWithGraphicsPort_flipped(graphicsPort: void, initialFlippedState: BOOL):NSGraphicsContext;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1535352-currentcontext
    currentContext(): NSGraphicsContext;
    setCurrentContext(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1524878-cgcontext
    CGContext(): CGContextRef;
    setCGContext(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1524914-graphicsport
    graphicsPort(): void;
    setGraphicsPort(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1524294-restoregraphicsstate
    restoreGraphicsState():void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1525118-restoregraphicsstate
    restoreGraphicsState():void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1526017-savegraphicsstate
    saveGraphicsState():void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1533887-savegraphicsstate
    saveGraphicsState():void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1531891-setgraphicsstate
    setGraphicsState(gState: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1525944-currentcontextdrawingtoscreen
    currentContextDrawingToScreen():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1524673-drawingtoscreen
    drawingToScreen(): BOOL;
    setDrawingToScreen(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1528254-attributes
    attributes(): id;
    setAttributes(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1531568-flipped
    flipped(): BOOL;
    setFlipped(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1527919-flushgraphics
    flushGraphics():void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1564181-focusstack
    focusStack():NSGraphicsContext;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1564182-setfocusstack
    setFocusStack(stack: NSGraphicsContext):void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1525984-compositingoperation
    compositingOperation(): NSCompositingOperation;
    setCompositingOperation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1529711-imageinterpolation
    imageInterpolation(): NSImageInterpolation;
    setImageInterpolation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1529486-shouldantialias
    shouldAntialias(): BOOL;
    setShouldAntialias(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1527510-patternphase
    patternPhase(): NSPoint;
    setPatternPhase(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1534326-cicontext
    CIContext(): CIContext;
    setCIContext(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgraphicscontext/1533527-colorrenderingintent
    colorRenderingIntent(): NSColorRenderingIntent;
    setColorRenderingIntent(): void;
    //
    alloc():NSGraphicsContext;
    //
    init():NSGraphicsContext;
  }
}

declare const NSGraphicsContext: cocoascript.NSGraphicsContext;
declare namespace cocoascript {
  /**
   * An object that can create paths using PostScript-style commands.
   * doc://com.apple.documentation/documentation/appkit/nsbezierpath
   */
  interface NSBezierPath extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520652-bezierpath
    bezierPath():NSBezierPath;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520647-bezierpathwithovalinrect
    bezierPathWithOvalInRect(rect: NSRect):NSBezierPath;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520664-bezierpathwithrect
    bezierPathWithRect(rect: NSRect):NSBezierPath;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520638-bezierpathwithroundedrect
    bezierPathWithRoundedRect_xRadius_yRadius(rect: NSRect, xRadius: CGFloat, yRadius: CGFloat):NSBezierPath;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520733-bezierpathbyflatteningpath
    bezierPathByFlatteningPath(): NSBezierPath;
    setBezierPathByFlatteningPath(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520656-bezierpathbyreversingpath
    bezierPathByReversingPath(): NSBezierPath;
    setBezierPathByReversingPath(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520684-movetopoint
    moveToPoint(point: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520742-linetopoint
    lineToPoint(point: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520628-curvetopoint
    curveToPoint_controlPoint1_controlPoint2(endPoint: NSPoint, controlPoint1: NSPoint, controlPoint2: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520640-closepath
    closePath():void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520724-relativemovetopoint
    relativeMoveToPoint(point: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520709-relativelinetopoint
    relativeLineToPoint(point: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520714-relativecurvetopoint
    relativeCurveToPoint_controlPoint1_controlPoint2(endPoint: NSPoint, controlPoint1: NSPoint, controlPoint2: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520688-appendbezierpath
    appendBezierPath(path: NSBezierPath):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520749-appendbezierpathwithpoints
    appendBezierPathWithPoints_count(points: NSPointArray, count: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520718-appendbezierpathwithovalinrect
    appendBezierPathWithOvalInRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520737-appendbezierpathwitharcfrompoint
    appendBezierPathWithArcFromPoint_toPoint_radius(point1: NSPoint, point2: NSPoint, radius: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520680-appendbezierpathwitharcwithcente
    appendBezierPathWithArcWithCenter_radius_startAngle_endAngle(center: NSPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520659-appendbezierpathwitharcwithcente
    appendBezierPathWithArcWithCenter_radius_startAngle_endAngle_clockwise(center: NSPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520670-appendbezierpathwithrect
    appendBezierPathWithRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520705-appendbezierpathwithroundedrect
    appendBezierPathWithRoundedRect_xRadius_yRadius(rect: NSRect, xRadius: CGFloat, yRadius: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/2887184-appendbezierpathwithcgglyph
    appendBezierPathWithCGGlyph_inFont(glyph: CGGlyph, font: NSFont):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/2887165-appendbezierpathwithcgglyphs
    appendBezierPathWithCGGlyphs_count_inFont(glyphs: CGGlyph, count: NSInteger, font: NSFont):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520661-appendbezierpathwithglyph
    appendBezierPathWithGlyph_inFont(glyph: NSGlyph, font: NSFont):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520750-appendbezierpathwithglyphs
    appendBezierPathWithGlyphs_count_inFont(glyphs: NSGlyph, count: NSInteger, font: NSFont):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520682-appendbezierpathwithpackedglyphs
    appendBezierPathWithPackedGlyphs(packedGlyphs: string):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520657-windingrule
    windingRule(): NSWindingRule;
    setWindingRule(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520667-linecapstyle
    lineCapStyle(): NSLineCapStyle;
    setLineCapStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520726-linejoinstyle
    lineJoinStyle(): NSLineJoinStyle;
    setLineJoinStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520655-linewidth
    lineWidth(): CGFloat;
    setLineWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520740-miterlimit
    miterLimit(): CGFloat;
    setMiterLimit(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520676-flatness
    flatness(): CGFloat;
    setFlatness(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520636-getlinedash
    getLineDash_count_phase(pattern: CGFloat, count: NSInteger, phase: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520730-setlinedash
    setLineDash_count_phase(pattern: CGFloat, count: NSInteger, phase: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520632-defaultwindingrule
    defaultWindingRule(): NSWindingRule;
    setDefaultWindingRule(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520678-defaultlinecapstyle
    defaultLineCapStyle(): NSLineCapStyle;
    setDefaultLineCapStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520648-defaultlinejoinstyle
    defaultLineJoinStyle(): NSLineJoinStyle;
    setDefaultLineJoinStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520644-defaultlinewidth
    defaultLineWidth(): CGFloat;
    setDefaultLineWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520728-defaultmiterlimit
    defaultMiterLimit(): CGFloat;
    setDefaultMiterLimit(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520720-defaultflatness
    defaultFlatness(): CGFloat;
    setDefaultFlatness(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520739-stroke
    stroke():void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520700-fill
    fill():void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520747-fillrect
    fillRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520741-strokerect
    strokeRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520626-strokelinefrompoint
    strokeLineFromPoint_toPoint(point1: NSPoint, point2: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520630-drawpackedglyphs
    drawPackedGlyphs_atPoint(packedGlyphs: string, point: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520634-addclip
    addClip():void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520704-setclip
    setClip():void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520694-cliprect
    clipRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520716-containspoint
    containsPoint(point: NSPoint):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520722-bounds
    bounds(): NSRect;
    setBounds(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520654-controlpointbounds
    controlPointBounds(): NSRect;
    setControlPointBounds(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520698-currentpoint
    currentPoint(): NSPoint;
    setCurrentPoint(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520712-empty
    empty(): BOOL;
    setEmpty(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520635-transformusingaffinetransform
    transformUsingAffineTransform(transform: NSAffineTransform):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520645-elementcount
    elementCount(): NSInteger;
    setElementCount(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520751-elementatindex
    elementAtIndex(index: NSInteger):NSBezierPathElement;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520674-elementatindex
    elementAtIndex_associatedPoints(index: NSInteger, points: NSPointArray):NSBezierPathElement;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520668-removeallpoints
    removeAllPoints():void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520671-setassociatedpoints
    setAssociatedPoints_atIndex(points: NSPointArray, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520706-cachesbezierpath
    cachesBezierPath():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbezierpath/1520702-setcachesbezierpath
    setCachesBezierPath(flag: BOOL):void;
    //
    alloc():NSBezierPath;
    //
    init():NSBezierPath;
  }
}

declare const NSBezierPath: cocoascript.NSBezierPath;
declare namespace cocoascript {
  /**
   * An object that can draw gradient fill colors
   * doc://com.apple.documentation/documentation/appkit/nsgradient
   */
  interface NSGradient extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsgradient/1525448-initwithstartingcolor
    initWithStartingColor_endingColor(startingColor: NSColor, endingColor: NSColor):NSGradient;
    // doc://com.apple.documentation/documentation/appkit/nsgradient/1535315-initwithcolors
    initWithColors(colorArray: NSColor):NSGradient;
    // doc://com.apple.documentation/documentation/appkit/nsgradient/1555387-initwithcolorsandlocations
    initWithColorsAndLocations(...firstColor: Array<NSColor>):NSGradient;
    // doc://com.apple.documentation/documentation/appkit/nsgradient/1524459-initwithcolors
    initWithColors_atLocations_colorSpace(colorArray: NSColor, locations: CGFloat, colorSpace: NSColorSpace):NSGradient;
    // doc://com.apple.documentation/documentation/appkit/nsgradient/1644700-initwithcoder
    initWithCoder(coder: NSCoder):NSGradient;
    // doc://com.apple.documentation/documentation/appkit/nsgradient/1532511-drawfrompoint
    drawFromPoint_toPoint_options(startingPoint: NSPoint, endingPoint: NSPoint, options: NSGradientDrawingOptions):void;
    // doc://com.apple.documentation/documentation/appkit/nsgradient/1529086-drawinrect
    drawInRect_angle(rect: NSRect, angle: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsgradient/1534785-drawinbezierpath
    drawInBezierPath_angle(path: NSBezierPath, angle: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsgradient/1530677-drawfromcenter
    drawFromCenter_radius_toCenter_radius_options(startCenter: NSPoint, startRadius: CGFloat, endCenter: NSPoint, endRadius: CGFloat, options: NSGradientDrawingOptions):void;
    // doc://com.apple.documentation/documentation/appkit/nsgradient/1533703-drawinrect
    drawInRect_relativeCenterPosition(rect: NSRect, relativeCenterPosition: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsgradient/1530168-drawinbezierpath
    drawInBezierPath_relativeCenterPosition(path: NSBezierPath, relativeCenterPosition: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsgradient/1531310-colorspace
    colorSpace(): NSColorSpace;
    setColorSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgradient/1535846-numberofcolorstops
    numberOfColorStops(): NSInteger;
    setNumberOfColorStops(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgradient/1533505-getcolor
    getColor_location_atIndex(color: NSColor, location: CGFloat, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsgradient/1526409-interpolatedcoloratlocation
    interpolatedColorAtLocation(location: CGFloat):NSColor;
    //
    alloc():NSGradient;
    //
    init():NSGradient;
  }
}

declare const NSGradient: cocoascript.NSGradient;
declare namespace cocoascript {
  /**
   * An object that represents an OpenGL graphics context, into which all OpenGL calls are rendered.
   * doc://com.apple.documentation/documentation/appkit/nsopenglcontext
   */
  interface NSOpenGLContext extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436178-initwithformat
    initWithFormat_shareContext(format: NSOpenGLPixelFormat, share: NSOpenGLContext):NSOpenGLContext;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436180-initwithcglcontextobj
    initWithCGLContextObj(context: any):NSOpenGLContext;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436106-clearcurrentcontext
    clearCurrentContext():void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436137-currentcontext
    currentContext(): NSOpenGLContext;
    setCurrentContext(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436212-makecurrentcontext
    makeCurrentContext():void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436204-view
    setView(view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436221-setfullscreen
    setFullScreen():void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436113-setoffscreen
    setOffScreen_width_height_rowbytes(baseaddr: void, width: any, height: any, rowbytes: any):void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436114-cleardrawable
    clearDrawable():void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436135-update
    update():void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436211-flushbuffer
    flushBuffer():void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436166-copyattributesfromcontext
    copyAttributesFromContext_withMask(context: NSOpenGLContext, mask: any):void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436199-setvalues
    setValues_forParameter(vals: any, param: NSOpenGLContextParameter):void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436189-getvalues
    getValues_forParameter(vals: any, param: NSOpenGLContextParameter):void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436216-currentvirtualscreen
    currentVirtualScreen(): any;
    setCurrentVirtualScreen(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436141-createtexture
    createTexture_fromView_internalFormat(target: any, view: NSView, format: any):void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436158-cglcontextobj
    CGLContextObj(): any;
    setCGLContextObj(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436105-setpixelbuffer
    setPixelBuffer_cubeMapFace_mipMapLevel_currentVirtualScreen(pixelBuffer: NSOpenGLPixelBuffer, face: any, level: any, screen: any):void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436218-pixelbuffer
    pixelBuffer():NSOpenGLPixelBuffer;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436122-pixelbuffercubemapface
    pixelBufferCubeMapFace():any;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436173-pixelbuffermipmaplevel
    pixelBufferMipMapLevel():any;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436164-settextureimagetopixelbuffer
    setTextureImageToPixelBuffer_colorBuffer(pixelBuffer: NSOpenGLPixelBuffer, source: any):void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglcontext/1436140-pixelformat
    pixelFormat(): NSOpenGLPixelFormat;
    setPixelFormat(): void;
    //
    alloc():NSOpenGLContext;
    //
    init():NSOpenGLContext;
  }
}

declare const NSOpenGLContext: cocoascript.NSOpenGLContext;
declare namespace cocoascript {
  /**
   * A subclass of
   * doc://com.apple.documentation/documentation/appkit/nsopengllayer
   */
  interface NSOpenGLLayer extends CAOpenGLLayer {
    // doc://com.apple.documentation/documentation/appkit/nsopengllayer/1522566-candrawinopenglcontext
    canDrawInOpenGLContext_pixelFormat_forLayerTime_displayTime(context: NSOpenGLContext, pixelFormat: NSOpenGLPixelFormat, t: CFTimeInterval, ts: CVTimeStamp):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsopengllayer/1522572-drawinopenglcontext
    drawInOpenGLContext_pixelFormat_forLayerTime_displayTime(context: NSOpenGLContext, pixelFormat: NSOpenGLPixelFormat, t: CFTimeInterval, ts: CVTimeStamp):void;
    // doc://com.apple.documentation/documentation/appkit/nsopengllayer/1522568-openglpixelformat
    openGLPixelFormat(): NSOpenGLPixelFormat;
    setOpenGLPixelFormat(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopengllayer/1522574-openglpixelformatfordisplaymask
    openGLPixelFormatForDisplayMask(mask: number):NSOpenGLPixelFormat;
    // doc://com.apple.documentation/documentation/appkit/nsopengllayer/1522570-openglcontext
    openGLContext(): NSOpenGLContext;
    setOpenGLContext(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopengllayer/1522578-openglcontextforpixelformat
    openGLContextForPixelFormat(pixelFormat: NSOpenGLPixelFormat):NSOpenGLContext;
    // doc://com.apple.documentation/documentation/appkit/nsopengllayer/1522576-view
    view(): NSView;
    setView(): void;
    //
    alloc():NSOpenGLLayer;
    //
    init():NSOpenGLLayer;
  }
}

declare const NSOpenGLLayer: cocoascript.NSOpenGLLayer;
declare namespace cocoascript {
  /**
   * An object that provides access to accelerated offscreen rendering.
   * doc://com.apple.documentation/documentation/appkit/nsopenglpixelbuffer
   */
  interface NSOpenGLPixelBuffer extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsopenglpixelbuffer/1436115-initwithtexturetarget
    initWithTextureTarget_textureInternalFormat_textureMaxMipMapLevel_pixelsWide_pixelsHigh(target: any, format: any, maxLevel: any, pixelsWide: any, pixelsHigh: any):NSOpenGLPixelBuffer;
    // doc://com.apple.documentation/documentation/appkit/nsopenglpixelbuffer/1436176-initwithcglpbufferobj
    initWithCGLPBufferObj(pbuffer: any):NSOpenGLPixelBuffer;
    // doc://com.apple.documentation/documentation/appkit/nsopenglpixelbuffer/1436155-cglpbufferobj
    CGLPBufferObj(): any;
    setCGLPBufferObj(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglpixelbuffer/1436220-pixelshigh
    pixelsHigh(): any;
    setPixelsHigh(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglpixelbuffer/1436217-pixelswide
    pixelsWide(): any;
    setPixelsWide(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglpixelbuffer/1436215-textureinternalformat
    textureInternalFormat(): any;
    setTextureInternalFormat(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglpixelbuffer/1436120-texturemaxmipmaplevel
    textureMaxMipMapLevel(): any;
    setTextureMaxMipMapLevel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglpixelbuffer/1436187-texturetarget
    textureTarget(): any;
    setTextureTarget(): void;
    //
    alloc():NSOpenGLPixelBuffer;
    //
    init():NSOpenGLPixelBuffer;
  }
}

declare const NSOpenGLPixelBuffer: cocoascript.NSOpenGLPixelBuffer;
declare namespace cocoascript {
  /**
   * An object that specifies the types of buffers and other attributes of the OpenGL context.
   * doc://com.apple.documentation/documentation/appkit/nsopenglpixelformat
   */
  interface NSOpenGLPixelFormat extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsopenglpixelformat/1436129-initwithcglpixelformatobj
    initWithCGLPixelFormatObj(format: any):NSOpenGLPixelFormat;
    // doc://com.apple.documentation/documentation/appkit/nsopenglpixelformat/1436219-initwithattributes
    initWithAttributes(attribs: NSOpenGLPixelFormatAttribute):NSOpenGLPixelFormat;
    // doc://com.apple.documentation/documentation/appkit/nsopenglpixelformat/1436207-initwithdata
    initWithData(attribs: NSData):NSOpenGLPixelFormat;
    // doc://com.apple.documentation/documentation/appkit/nsopenglpixelformat/1436148-cglpixelformatobj
    CGLPixelFormatObj(): any;
    setCGLPixelFormatObj(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglpixelformat/1436109-getvalues
    getValues_forAttribute_forVirtualScreen(vals: any, attrib: NSOpenGLPixelFormatAttribute, screen: any):void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglpixelformat/1436144-numberofvirtualscreens
    numberOfVirtualScreens(): any;
    setNumberOfVirtualScreens(): void;
    // doc://com.apple.documentation/documentation/appkit/nsopenglpixelformat/1436127-attributes
    attributes():NSData;
    // doc://com.apple.documentation/documentation/appkit/nsopenglpixelformat/1436128-setattributes
    setAttributes(attribs: NSData):void;
    //
    alloc():NSOpenGLPixelFormat;
    //
    init():NSOpenGLPixelFormat;
  }
}

declare const NSOpenGLPixelFormat: cocoascript.NSOpenGLPixelFormat;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsopenglglobaloption
  type NSOpenGLGlobalOption = number;
}
declare namespace cocoascript {
  /**
   * An object that stores color data and sometimes opacity (alpha value).
   * doc://com.apple.documentation/documentation/appkit/nscolor
   */
  interface NSColor extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscolor/2998826-colorwithsystemeffect
    colorWithSystemEffect(systemEffect: NSColorSystemEffect):NSColor;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1527379-colorusingcolorspace
    colorUsingColorSpace(space: NSColorSpace):NSColor;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1524689-blendedcolorwithfraction
    blendedColorWithFraction_ofColor(fraction: CGFloat, color: NSColor):NSColor;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1526906-colorwithalphacomponent
    colorWithAlphaComponent(alpha: CGFloat):NSColor;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1533061-highlightwithlevel
    highlightWithLevel(val: CGFloat):NSColor;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1528523-shadowwithlevel
    shadowWithLevel(val: CGFloat):NSColor;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1534332-colorusingcolorspacename
    colorUsingColorSpaceName(name: NSColorSpaceName):NSColor;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1529417-colorusingcolorspacename
    colorUsingColorSpaceName_device(name: NSColorSpaceName, deviceDescription: NSColor):NSColor;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1533565-ignoresalpha
    ignoresAlpha(): BOOL;
    setIgnoresAlpha(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1535057-colorfrompasteboard
    colorFromPasteboard(pasteBoard: NSPasteboard):NSColor;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1532199-writetopasteboard
    writeToPasteboard(pasteBoard: NSPasteboard):void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1531348-getcyan
    getCyan_magenta_yellow_black_alpha(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1534060-gethue
    getHue_saturation_brightness_alpha(hue: CGFloat, saturation: CGFloat, brightness: CGFloat, alpha: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1527848-getred
    getRed_green_blue_alpha(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1532613-getwhite
    getWhite_alpha(white: CGFloat, alpha: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1531308-numberofcomponents
    numberOfComponents(): NSInteger;
    setNumberOfComponents(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1524600-getcomponents
    getComponents(components: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1532504-alphacomponent
    alphaComponent(): CGFloat;
    setAlphaComponent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1534051-whitecomponent
    whiteComponent(): CGFloat;
    setWhiteComponent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1530483-redcomponent
    redComponent(): CGFloat;
    setRedComponent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1525935-greencomponent
    greenComponent(): CGFloat;
    setGreenComponent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1534229-bluecomponent
    blueComponent(): CGFloat;
    setBlueComponent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1528234-cyancomponent
    cyanComponent(): CGFloat;
    setCyanComponent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1535560-magentacomponent
    magentaComponent(): CGFloat;
    setMagentaComponent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1531965-yellowcomponent
    yellowComponent(): CGFloat;
    setYellowComponent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1526883-blackcomponent
    blackComponent(): CGFloat;
    setBlackComponent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1531780-huecomponent
    hueComponent(): CGFloat;
    setHueComponent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1526326-saturationcomponent
    saturationComponent(): CGFloat;
    setSaturationComponent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1529355-brightnesscomponent
    brightnessComponent(): CGFloat;
    setBrightnessComponent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1535443-catalognamecomponent
    catalogNameComponent(): NSColorListName;
    setCatalogNameComponent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1535351-localizedcatalognamecomponent
    localizedCatalogNameComponent(): string | NSString;
    setLocalizedCatalogNameComponent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1528278-colornamecomponent
    colorNameComponent(): NSColorName;
    setColorNameComponent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1527286-localizedcolornamecomponent
    localizedColorNameComponent(): string | NSString;
    setLocalizedColorNameComponent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/2880315-type
    type(): NSColorType;
    setType(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/2880320-colorusingtype
    colorUsingType(type: NSColorType):NSColor;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1526733-colorspace
    colorSpace(): NSColorSpace;
    setColorSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1535228-colorspacename
    colorSpaceName(): NSColorSpaceName;
    setColorSpaceName(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1527738-cgcolor
    CGColor(): CGColorRef;
    setCGColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1531770-drawswatchinrect
    drawSwatchInRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1527089-set
    set():void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1524755-setfill
    setFill():void;
    // doc://com.apple.documentation/documentation/appkit/nscolor/1531019-setstroke
    setStroke():void;
    //
    alloc():NSColor;
    //
    init():NSColor;
  }
}

declare const NSColor: cocoascript.NSColor;
// doc://com.apple.documentation/documentation/appkit/nssystemcolorsdidchangenotification
declare const NSSystemColorsDidChangeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nscontroltintdidchangenotification
declare const NSControlTintDidChangeNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * An ordered list of color objects, identified by keys.
   * doc://com.apple.documentation/documentation/appkit/nscolorlist
   */
  interface NSColorList extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscolorlist/1522140-initwithname
    initWithName(name: NSColorListName):NSColorList;
    // doc://com.apple.documentation/documentation/appkit/nscolorlist/1522133-initwithname
    initWithName_fromFile(name: NSColorListName, path: string | NSString):NSColorList;
    // doc://com.apple.documentation/documentation/appkit/nscolorlist/1522127-availablecolorlists
    availableColorLists(): NSColorList;
    setAvailableColorLists(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorlist/1522126-colorlistnamed
    colorListNamed(name: NSColorListName):NSColorList;
    // doc://com.apple.documentation/documentation/appkit/nscolorlist/1522138-name
    name(): NSColorListName;
    setName(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorlist/1522125-editable
    editable(): BOOL;
    setEditable(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorlist/1522141-allkeys
    allKeys(): NSColorName;
    setAllKeys(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorlist/1522143-colorwithkey
    colorWithKey(key: NSColorName):NSColor;
    // doc://com.apple.documentation/documentation/appkit/nscolorlist/1522137-insertcolor
    insertColor_key_atIndex(color: NSColor, key: NSColorName, loc: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorlist/1522123-removecolorwithkey
    removeColorWithKey(key: NSColorName):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorlist/1522130-setcolor
    setColor_forKey(color: NSColor, key: NSColorName):void;
    // doc://com.apple.documentation/documentation/appkit/nscolorlist/2269695-writetourl
    writeToURL_error(url: NSURL, errPtr: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscolorlist/1522132-removefile
    removeFile():void;
    // doc://com.apple.documentation/documentation/appkit/nscolorlist/1522135-writetofile
    writeToFile(path: string | NSString):BOOL;
    //
    alloc():NSColorList;
    //
    init():NSColorList;
  }
}

declare const NSColorList: cocoascript.NSColorList;
// doc://com.apple.documentation/documentation/appkit/nscolorlistdidchangenotification
declare const NSColorListDidChangeNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * An object that represents a custom color space.
   * doc://com.apple.documentation/documentation/appkit/nscolorspace
   */
  interface NSColorSpace extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412066-devicergbcolorspace
    deviceRGBColorSpace(): NSColorSpace;
    setDeviceRGBColorSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412082-genericrgbcolorspace
    genericRGBColorSpace(): NSColorSpace;
    setGenericRGBColorSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412090-devicecmykcolorspace
    deviceCMYKColorSpace(): NSColorSpace;
    setDeviceCMYKColorSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412088-genericcmykcolorspace
    genericCMYKColorSpace(): NSColorSpace;
    setGenericCMYKColorSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412084-devicegraycolorspace
    deviceGrayColorSpace(): NSColorSpace;
    setDeviceGrayColorSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412060-genericgraycolorspace
    genericGrayColorSpace(): NSColorSpace;
    setGenericGrayColorSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412071-srgbcolorspace
    sRGBColorSpace(): NSColorSpace;
    setSRGBColorSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1644175-extendedsrgbcolorspace
    extendedSRGBColorSpace(): NSColorSpace;
    setExtendedSRGBColorSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1644170-displayp3colorspace
    displayP3ColorSpace(): NSColorSpace;
    setDisplayP3ColorSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412103-genericgamma22graycolorspace
    genericGamma22GrayColorSpace(): NSColorSpace;
    setGenericGamma22GrayColorSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1644177-extendedgenericgamma22graycolors
    extendedGenericGamma22GrayColorSpace(): NSColorSpace;
    setExtendedGenericGamma22GrayColorSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412064-adobergb1998colorspace
    adobeRGB1998ColorSpace(): NSColorSpace;
    setAdobeRGB1998ColorSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412086-availablecolorspaceswithmodel
    availableColorSpacesWithModel(model: NSColorSpaceModel):NSColorSpace;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412059-initwithcgcolorspace
    initWithCGColorSpace(cgColorSpace: CGColorSpaceRef):NSColorSpace;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412062-initwithcolorsyncprofile
    initWithColorSyncProfile(prof: void):NSColorSpace;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412094-initwithiccprofiledata
    initWithICCProfileData(iccData: NSData):NSColorSpace;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412073-cgcolorspace
    CGColorSpace(): CGColorSpaceRef;
    setCGColorSpace(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412095-colorspacemodel
    colorSpaceModel(): NSColorSpaceModel;
    setColorSpaceModel(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412076-colorsyncprofile
    colorSyncProfile(): void;
    setColorSyncProfile(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412078-iccprofiledata
    ICCProfileData(): NSData;
    setICCProfileData(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412072-localizedname
    localizedName(): string | NSString;
    setLocalizedName(): void;
    // doc://com.apple.documentation/documentation/appkit/nscolorspace/1412099-numberofcolorcomponents
    numberOfColorComponents(): NSInteger;
    setNumberOfColorComponents(): void;
    //
    alloc():NSColorSpace;
    //
    init():NSColorSpace;
  }
}

declare const NSColorSpace: cocoascript.NSColorSpace;
declare namespace cocoascript {
  /**
   * An object that displays the system's color-sampling interface and returns the selected color to your app.
   * doc://com.apple.documentation/documentation/appkit/nscolorsampler
   */
  interface NSColorSampler extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscolorsampler/3237187-showsamplerwithselectionhandler
    showSamplerWithSelectionHandler(selectionHandler: NSColor):void;
    //
    alloc():NSColorSampler;
    //
    init():NSColorSampler;
  }
}

declare const NSColorSampler: cocoascript.NSColorSampler;
declare namespace cocoascript {
  /**
   * The Print panel that queries the user for information about a print job.
   * doc://com.apple.documentation/documentation/appkit/nsprintpanel
   */
  interface NSPrintPanel extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1490531-printpanel
    printPanel():NSPrintPanel;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1490529-jobstylehint
    jobStyleHint(): NSPrintPanelJobStyleHint;
    setJobStyleHint(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1490542-options
    options(): NSPrintPanelOptions;
    setOptions(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1490548-defaultbuttontitle
    defaultButtonTitle():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1490525-setdefaultbuttontitle
    setDefaultButtonTitle(defaultButtonTitle: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1490537-helpanchor
    helpAnchor(): NSHelpAnchorName;
    setHelpAnchor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1490510-addaccessorycontroller
    addAccessoryController(accessoryController: NSPrintPanelAccessorizing):void;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1490527-removeaccessorycontroller
    removeAccessoryController(accessoryController: NSPrintPanelAccessorizing):void;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1490543-accessorycontrollers
    accessoryControllers(): NSViewController;
    setAccessoryControllers(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1490526-beginsheetwithprintinfo
    beginSheetWithPrintInfo_modalForWindow_delegate_didEndSelector_contextInfo(printInfo: NSPrintInfo, docWindow: NSWindow, delegate: NSPrintPanel, didEndSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1490523-runmodal
    runModal():NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1490539-runmodalwithprintinfo
    runModalWithPrintInfo(printInfo: NSPrintInfo):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1490513-printinfo
    printInfo(): NSPrintInfo;
    setPrintInfo(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1490517-accessoryview
    accessoryView():NSView;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1490520-setaccessoryview
    setAccessoryView(accessoryView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1490565-updatefromprintinfo
    updateFromPrintInfo():void;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1490540-finalwriteprintinfo
    finalWritePrintInfo():void;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1806837-pickedbutton
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1806840-pickedallpages
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsprintpanel/1806844-pickedlayoutlist
    ():void;
    //
    alloc():NSPrintPanel;
    //
    init():NSPrintPanel;
  }
}

declare const NSPrintPanel: cocoascript.NSPrintPanel;
declare namespace cocoascript {
  /**
   * A panel that queries the user for information such as paper type and orientation.
   * doc://com.apple.documentation/documentation/appkit/nspagelayout
   */
  interface NSPageLayout extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nspagelayout/1397806-pagelayout
    pageLayout():NSPageLayout;
    // doc://com.apple.documentation/documentation/appkit/nspagelayout/1397794-beginsheetwithprintinfo
    beginSheetWithPrintInfo_modalForWindow_delegate_didEndSelector_contextInfo(printInfo: NSPrintInfo, docWindow: NSWindow, delegate: NSPageLayout, didEndSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nspagelayout/1397798-runmodal
    runModal():NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nspagelayout/1397784-runmodalwithprintinfo
    runModalWithPrintInfo(printInfo: NSPrintInfo):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nspagelayout/1397790-addaccessorycontroller
    addAccessoryController(accessoryController: NSViewController):void;
    // doc://com.apple.documentation/documentation/appkit/nspagelayout/1397802-removeaccessorycontroller
    removeAccessoryController(accessoryController: NSViewController):void;
    // doc://com.apple.documentation/documentation/appkit/nspagelayout/1397788-accessorycontrollers
    accessoryControllers(): NSViewController;
    setAccessoryControllers(): void;
    // doc://com.apple.documentation/documentation/appkit/nspagelayout/1397804-printinfo
    printInfo(): NSPrintInfo;
    setPrintInfo(): void;
    // doc://com.apple.documentation/documentation/appkit/nspagelayout/1397800-accessoryview
    accessoryView():NSView;
    // doc://com.apple.documentation/documentation/appkit/nspagelayout/1397786-setaccessoryview
    setAccessoryView(accessoryView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nspagelayout/1397796-readprintinfo
    readPrintInfo():void;
    // doc://com.apple.documentation/documentation/appkit/nspagelayout/1397792-writeprintinfo
    writePrintInfo():void;
    //
    alloc():NSPageLayout;
    //
    init():NSPageLayout;
  }
}

declare const NSPageLayout: cocoascript.NSPageLayout;
declare namespace cocoascript {
  /**
   * An object that describes a printer’s capabilities.
   * doc://com.apple.documentation/documentation/appkit/nsprinter
   */
  interface NSPrinter extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525202-printerwithname
    printerWithName(name: string | NSString):NSPrinter;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525196-printerwithtype
    printerWithType(type: NSPrinterTypeName):NSPrinter;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525209-printernames
    printerNames(): string | NSString;
    setPrinterNames(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525216-printertypes
    printerTypes(): NSPrinterTypeName;
    setPrinterTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525189-name
    name(): string | NSString;
    setName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1524450-type
    type(): NSPrinterTypeName;
    setType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525222-pagesizeforpaper
    pageSizeForPaper(paperName: NSPrinterPaperName):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525215-languagelevel
    languageLevel(): NSInteger;
    setLanguageLevel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525201-devicedescription
    deviceDescription(): id;
    setDeviceDescription(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525200-iskey
    isKey_inTable(key: string | NSString, table: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525217-stringforkey
    stringForKey_inTable(key: string | NSString, table: string | NSString):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525219-stringlistforkey
    stringListForKey_inTable(key: string | NSString, table: string | NSString):NSArray;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525212-booleanforkey
    booleanForKey_inTable(key: string | NSString, table: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525195-floatforkey
    floatForKey_inTable(key: string | NSString, table: string | NSString):number;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525214-intforkey
    intForKey_inTable(key: string | NSString, table: string | NSString):number;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525198-rectforkey
    rectForKey_inTable(key: string | NSString, table: string | NSString):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525205-sizeforkey
    sizeForKey_inTable(key: string | NSString, table: string | NSString):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525218-statusfortable
    statusForTable(tableName: string | NSString):NSPrinterTableStatus;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525206-printerwithname
    printerWithName_domain_includeUnavailable(name: string | NSString, domain: string | NSString, flag: BOOL):NSPrinter;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525224-acceptsbinary
    acceptsBinary():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525197-domain
    domain():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525221-host
    host():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525199-imagerectforpaper
    imageRectForPaper(paperName: string | NSString):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525187-iscolor
    isColor():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525226-isfontavailable
    isFontAvailable(faceName: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525203-isoutputstackinreverseorder
    isOutputStackInReverseOrder():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsprinter/1525210-note
    note():string | NSString;
    //
    alloc():NSPrinter;
    //
    init():NSPrinter;
  }
}

declare const NSPrinter: cocoascript.NSPrinter;
declare namespace cocoascript {
  /**
   * An object that stores information that’s used to generate printed output.
   * doc://com.apple.documentation/documentation/appkit/nsprintinfo
   */
  interface NSPrintInfo extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1535610-sharedprintinfo
    sharedPrintInfo(): NSPrintInfo;
    setSharedPrintInfo(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1526768-initwithdictionary
    initWithDictionary(attributes: NSPrintInfo):NSPrintInfo;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1644252-init
    init():NSPrintInfo;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1644406-initwithcoder
    initWithCoder(coder: NSCoder):NSPrintInfo;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1534030-papersize
    paperSize(): NSSize;
    setPaperSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1529662-topmargin
    topMargin(): CGFloat;
    setTopMargin(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1528397-bottommargin
    bottomMargin(): CGFloat;
    setBottomMargin(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1533430-leftmargin
    leftMargin(): CGFloat;
    setLeftMargin(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1530882-rightmargin
    rightMargin(): CGFloat;
    setRightMargin(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1526570-imageablepagebounds
    imageablePageBounds(): NSRect;
    setImageablePageBounds(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1533755-orientation
    orientation(): NSPaperOrientation;
    setOrientation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1532124-papername
    paperName(): NSPrinterPaperName;
    setPaperName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1524573-localizedpapername
    localizedPaperName(): string | NSString;
    setLocalizedPaperName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1532693-horizontalpagination
    horizontalPagination(): NSPrintingPaginationMode;
    setHorizontalPagination(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1526743-verticalpagination
    verticalPagination(): NSPrintingPaginationMode;
    setVerticalPagination(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1534703-horizontallycentered
    horizontallyCentered(): BOOL;
    setHorizontallyCentered(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1530330-verticallycentered
    verticallyCentered(): BOOL;
    setVerticallyCentered(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1524495-printer
    printer(): NSPrinter;
    setPrinter(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1528717-jobdisposition
    jobDisposition(): NSPrintJobDispositionValue;
    setJobDisposition(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1529453-setupprintoperationdefaultvalues
    setUpPrintOperationDefaultValues():void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1524990-dictionary
    dictionary():NSPrintInfo;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1534094-selectiononly
    selectionOnly(): BOOL;
    setSelectionOnly(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1529753-scalingfactor
    scalingFactor(): CGFloat;
    setScalingFactor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1529413-printsettings
    printSettings(): id;
    setPrintSettings(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1534414-pmprintsession
    PMPrintSession():void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1528578-pmpageformat
    PMPageFormat():void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1533537-pmprintsettings
    PMPrintSettings():void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1534429-updatefrompmpageformat
    updateFromPMPageFormat():void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1525003-updatefrompmprintsettings
    updateFromPMPrintSettings():void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1530099-takesettingsfrompdfinfo
    takeSettingsFromPDFInfo(inPDFInfo: NSPDFInfo):void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1530521-defaultprinter
    defaultPrinter(): NSPrinter;
    setDefaultPrinter(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1541378-setdefaultprinter
    setDefaultPrinter(printer: NSPrinter):void;
    // doc://com.apple.documentation/documentation/appkit/nsprintinfo/1541372-sizeforpapername
    sizeForPaperName(name: NSPrinterPaperName):NSSize;
    //
    alloc():NSPrintInfo;
    //
    init():NSPrintInfo;
  }
}

declare const NSPrintInfo: cocoascript.NSPrintInfo;
declare namespace cocoascript {
  /**
   * An object that controls operations that generate Encapsulated PostScript (EPS) code, Portable Document Format (PDF) code, or print jobs.
   * doc://com.apple.documentation/documentation/appkit/nsprintoperation
   */
  interface NSPrintOperation extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1525273-epsoperationwithview
    EPSOperationWithView_insideRect_toData(view: NSView, rect: NSRect, data: NSMutableData):NSPrintOperation;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1524819-epsoperationwithview
    EPSOperationWithView_insideRect_toData_printInfo(view: NSView, rect: NSRect, data: NSMutableData, printInfo: NSPrintInfo):NSPrintOperation;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1530037-epsoperationwithview
    EPSOperationWithView_insideRect_toPath_printInfo(view: NSView, rect: NSRect, path: string | NSString, printInfo: NSPrintInfo):NSPrintOperation;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1529269-pdfoperationwithview
    PDFOperationWithView_insideRect_toData(view: NSView, rect: NSRect, data: NSMutableData):NSPrintOperation;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1531298-pdfoperationwithview
    PDFOperationWithView_insideRect_toData_printInfo(view: NSView, rect: NSRect, data: NSMutableData, printInfo: NSPrintInfo):NSPrintOperation;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1534130-pdfoperationwithview
    PDFOperationWithView_insideRect_toPath_printInfo(view: NSView, rect: NSRect, path: string | NSString, printInfo: NSPrintInfo):NSPrintOperation;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1535893-printoperationwithview
    printOperationWithView(view: NSView):NSPrintOperation;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1528557-printoperationwithview
    printOperationWithView_printInfo(view: NSView, printInfo: NSPrintInfo):NSPrintOperation;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1524255-currentoperation
    currentOperation(): NSPrintOperation;
    setCurrentOperation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1534206-copyingoperation
    copyingOperation(): BOOL;
    setCopyingOperation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1535187-printinfo
    printInfo(): NSPrintInfo;
    setPrintInfo(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1530311-view
    view(): NSView;
    setView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1529716-preferredrenderingquality
    preferredRenderingQuality(): NSPrintRenderingQuality;
    setPreferredRenderingQuality(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1532039-runoperation
    runOperation():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1532065-runoperationmodalforwindow
    runOperationModalForWindow_delegate_didRunSelector_contextInfo(docWindow: NSWindow, delegate: NSPrintOperation, didRunSelector: SEL, contextInfo: void):void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1534126-cleanupoperation
    cleanUpOperation():void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1530693-deliverresult
    deliverResult():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1530666-showsprintpanel
    showsPrintPanel(): BOOL;
    setShowsPrintPanel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1535665-showsprogresspanel
    showsProgressPanel(): BOOL;
    setShowsProgressPanel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1535322-jobtitle
    jobTitle(): string | NSString;
    setJobTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1529626-printpanel
    printPanel(): NSPrintPanel;
    setPrintPanel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1526838-pdfpanel
    PDFPanel(): NSPDFPanel;
    setPDFPanel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1534162-context
    context(): NSGraphicsContext;
    setContext(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1526832-createcontext
    createContext():NSGraphicsContext;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1529896-destroycontext
    destroyContext():void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1534881-currentpage
    currentPage(): NSInteger;
    setCurrentPage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1524601-pagerange
    pageRange(): NSRange;
    setPageRange(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1532990-pageorder
    pageOrder(): NSPrintingPageOrder;
    setPageOrder(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1532487-canspawnseparatethread
    canSpawnSeparateThread(): BOOL;
    setCanSpawnSeparateThread(): void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1579094-jobstylehint
    jobStyleHint():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1579097-setjobstylehint
    setJobStyleHint(hint: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1579098-accessoryview
    accessoryView():NSView;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1579096-setaccessoryview
    setAccessoryView(view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1579099-showpanels
    showPanels():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsprintoperation/1579095-setshowpanels
    setShowPanels(flag: BOOL):void;
    //
    alloc():NSPrintOperation;
    //
    init():NSPrintOperation;
  }
}

declare const NSPrintOperation: cocoascript.NSPrintOperation;
// doc://com.apple.documentation/documentation/appkit/nsprintoperationexistsexception
declare const NSPrintOperationExistsException: NSExceptionName;
declare namespace cocoascript {
  /**
   * An interface to the Cocoa spell-checking service.
   * doc://com.apple.documentation/documentation/appkit/nsspellchecker
   */
  interface NSSpellChecker extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1529639-sharedspellchecker
    sharedSpellChecker(): NSSpellChecker;
    setSharedSpellChecker(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1535301-sharedspellcheckerexists
    sharedSpellCheckerExists(): BOOL;
    setSharedSpellCheckerExists(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1530496-availablelanguages
    availableLanguages(): string | NSString;
    setAvailableLanguages(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1525173-userpreferredlanguages
    userPreferredLanguages(): string | NSString;
    setUserPreferredLanguages(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1534335-automaticallyidentifieslanguages
    automaticallyIdentifiesLanguages(): BOOL;
    setAutomaticallyIdentifiesLanguages(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1535648-language
    language():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1532988-setlanguage
    setLanguage(language: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1532806-spellingpanel
    spellingPanel(): NSPanel;
    setSpellingPanel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1534172-substitutionspanel
    substitutionsPanel(): NSPanel;
    setSubstitutionsPanel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1525300-updatespellingpanelwithgrammarst
    updateSpellingPanelWithGrammarString_detail(string: string | NSString, detail: NSSpellChecker):void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1531045-updatepanels
    updatePanels():void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1528160-accessoryview
    accessoryView(): NSView;
    setAccessoryView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1531645-substitutionspanelaccessoryviewc
    substitutionsPanelAccessoryViewController(): NSViewController;
    setSubstitutionsPanelAccessoryViewController(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1528008-countwordsinstring
    countWordsInString_language(stringToCount: string | NSString, language: string | NSString):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1532957-checkspellingofstring
    checkSpellingOfString_startingAt(stringToCheck: string | NSString, startingOffset: NSInteger):NSRange;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1533574-checkspellingofstring
    checkSpellingOfString_startingAt_language_wrap_inSpellDocumentWithTag_wordCount(stringToCheck: string | NSString, startingOffset: NSInteger, language: string | NSString, wrapFlag: BOOL, tag: NSInteger, wordCount: NSInteger):NSRange;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1557141-guessesforword
    guessesForWord(word: string | NSString):NSArray;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1528441-checkgrammarofstring
    checkGrammarOfString_startingAt_language_wrap_inSpellDocumentWithTag_details(stringToCheck: string | NSString, startingOffset: NSInteger, language: string | NSString, wrapFlag: BOOL, tag: NSInteger, details: NSSpellChecker):NSRange;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1535739-checkstring
    checkString_range_types_options_inSpellDocumentWithTag_orthography_wordCount(stringToCheck: string | NSString, range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSSpellChecker, tag: NSInteger, orthography: NSOrthography, wordCount: NSInteger):NSTextCheckingResult;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1526261-requestcheckingofstring
    requestCheckingOfString_range_types_options_inSpellDocumentWithTag_completionHandler(stringToCheck: string | NSString, range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSSpellChecker, tag: NSInteger, completionHandler: NSInteger):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1527419-guessesforwordrange
    guessesForWordRange_inString_language_inSpellDocumentWithTag(range: NSRange, string: string | NSString, language: string | NSString, tag: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1526192-uniquespelldocumenttag
    uniqueSpellDocumentTag():NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1534066-closespelldocumentwithtag
    closeSpellDocumentWithTag(tag: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1531220-ignoreword
    ignoreWord_inSpellDocumentWithTag(wordToIgnore: string | NSString, tag: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1531488-ignoredwordsinspelldocumentwitht
    ignoredWordsInSpellDocumentWithTag(tag: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1535879-setignoredwords
    setIgnoredWords_inSpellDocumentWithTag(words: string | NSString, tag: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1526688-setwordfieldstringvalue
    setWordFieldStringValue(string: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1524852-updatespellingpanelwithmisspelle
    updateSpellingPanelWithMisspelledWord(word: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1531406-completionsforpartialwordrange
    completionsForPartialWordRange_inString_language_inSpellDocumentWithTag(range: NSRange, string: string | NSString, language: string | NSString, tag: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1527525-haslearnedword
    hasLearnedWord(word: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1525147-unlearnword
    unlearnWord(word: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1557140-forgetword
    forgetWord(word: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1534837-learnword
    learnWord(word: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1532171-userquotesarrayforlanguage
    userQuotesArrayForLanguage(language: string | NSString):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1524925-userreplacementsdictionary
    userReplacementsDictionary(): string | NSString;
    setUserReplacementsDictionary(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1531603-menuforresult
    menuForResult_string_options_atLocation_inView(result: NSTextCheckingResult, checkedString: string | NSString, options: NSSpellChecker, location: NSPoint, view: NSView):NSMenu;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1531542-correctionforwordrange
    correctionForWordRange_inString_language_inSpellDocumentWithTag(range: NSRange, string: string | NSString, language: string | NSString, tag: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1524316-showcorrectionindicatoroftype
    showCorrectionIndicatorOfType_primaryString_alternativeStrings_forStringInRect_view_completionHandler(type: NSCorrectionIndicatorType, primaryString: string | NSString, alternativeStrings: string | NSString, rectOfTypedString: NSRect, view: NSView, completionBlock: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1535568-recordresponse
    recordResponse_toCorrection_forWord_language_inSpellDocumentWithTag(response: NSCorrectionResponse, correction: string | NSString, word: string | NSString, language: string | NSString, tag: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1535527-dismisscorrectionindicatorforvie
    dismissCorrectionIndicatorForView(view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/2869583-automaticcapitalizationenabled
    automaticCapitalizationEnabled(): BOOL;
    setAutomaticCapitalizationEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/2869577-automaticdashsubstitutionenabled
    automaticDashSubstitutionEnabled(): BOOL;
    setAutomaticDashSubstitutionEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/2869584-automaticperiodsubstitutionenabl
    automaticPeriodSubstitutionEnabled(): BOOL;
    setAutomaticPeriodSubstitutionEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/2869581-automaticquotesubstitutionenable
    automaticQuoteSubstitutionEnabled(): BOOL;
    setAutomaticQuoteSubstitutionEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/2869578-automaticspellingcorrectionenabl
    automaticSpellingCorrectionEnabled(): BOOL;
    setAutomaticSpellingCorrectionEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/2869580-automatictextcompletionenabled
    automaticTextCompletionEnabled(): BOOL;
    setAutomaticTextCompletionEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/2869579-automatictextreplacementenabled
    automaticTextReplacementEnabled(): BOOL;
    setAutomaticTextReplacementEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/2561001-deletesautospacebetweenstring
    deletesAutospaceBetweenString_andString_language(precedingString: string | NSString, followingString: string | NSString, language: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1530303-languageforwordrange
    languageForWordRange_inString_orthography(range: NSRange, string: string | NSString, orthography: NSOrthography):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/1792008-preventsautocorrectionbeforestri
    preventsAutocorrectionBeforeString_language(string: string | NSString, language: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsspellchecker/2560997-requestcandidatesforselectedrang
    requestCandidatesForSelectedRange_inString_types_options_inSpellDocumentWithTag_completionHandler(selectedRange: NSRange, stringToCheck: string | NSString, checkingTypes: NSTextCheckingTypes, options: NSSpellChecker, tag: NSInteger, completionHandler: NSTextCheckingResult):NSInteger;
    //
    alloc():NSSpellChecker;
    //
    init():NSSpellChecker;
  }
}

declare const NSSpellChecker: cocoascript.NSSpellChecker;
declare namespace cocoascript {
  /**
   * A protocol that enables the Ignore button in the Spelling panel to function properly.
   * doc://com.apple.documentation/documentation/appkit/nsignoremisspelledwords
   */
  interface NSIgnoreMisspelledWords {
    // doc://com.apple.documentation/documentation/appkit/nsignoremisspelledwords/1533150-ignorespelling
    ignoreSpelling(sender: NSIgnoreMisspelledWords):void;
  }
}
declare namespace cocoascript {
  /**
   * A protocol that responder objects can implement to correct a misspelled word.
   * doc://com.apple.documentation/documentation/appkit/nschangespelling
   */
  interface NSChangeSpelling {
    // doc://com.apple.documentation/documentation/appkit/nschangespelling/1526512-changespelling
    changeSpelling(sender: NSChangeSpelling):void;
  }
}
declare namespace cocoascript {
  /**
   * Text the user can select or edit to send an action message to a target when the user presses the Return key.
   * doc://com.apple.documentation/documentation/appkit/nstextfield
   */
  interface NSTextField extends NSControl {
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1644658-labelwithattributedstring
    labelWithAttributedString(attributedStringValue: NSAttributedString):NSTextField;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1644377-labelwithstring
    labelWithString(stringValue: string | NSString):NSTextField;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1644706-textfieldwithstring
    textFieldWithString(stringValue: string | NSString):NSTextField;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1644543-wrappinglabelwithstring
    wrappingLabelWithString(stringValue: string | NSString):NSTextField;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399422-selectable
    selectable(): BOOL;
    setSelectable(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399407-editable
    editable(): BOOL;
    setEditable(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399401-allowseditingtextattributes
    allowsEditingTextAttributes(): BOOL;
    setAllowsEditingTextAttributes(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399428-importsgraphics
    importsGraphics(): BOOL;
    setImportsGraphics(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399391-placeholderstring
    placeholderString(): string | NSString;
    setPlaceholderString(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399387-placeholderattributedstring
    placeholderAttributedString(): NSAttributedString;
    setPlaceholderAttributedString(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399405-allowsdefaulttighteningfortrunca
    allowsDefaultTighteningForTruncation(): BOOL;
    setAllowsDefaultTighteningForTruncation(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399424-maximumnumberoflines
    maximumNumberOfLines(): NSInteger;
    setMaximumNumberOfLines(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399395-preferredmaxlayoutwidth
    preferredMaxLayoutWidth(): CGFloat;
    setPreferredMaxLayoutWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399409-textcolor
    textColor(): NSColor;
    setTextColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399389-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399416-drawsbackground
    drawsBackground(): BOOL;
    setDrawsBackground(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399435-bezeled
    bezeled(): BOOL;
    setBezeled(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399418-bezelstyle
    bezelStyle(): NSTextFieldBezelStyle;
    setBezelStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399403-bordered
    bordered(): BOOL;
    setBordered(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399430-selecttext
    selectText(sender: NSTextField):void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399393-acceptsfirstresponder
    acceptsFirstResponder(): BOOL;
    setAcceptsFirstResponder(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/2539553-allowscharacterpickertouchbarite
    allowsCharacterPickerTouchBarItem(): BOOL;
    setAllowsCharacterPickerTouchBarItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399411-settitlewithmnemonic
    setTitleWithMnemonic(stringWithAmpersand: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/2539554-automatictextcompletionenabled
    automaticTextCompletionEnabled(): BOOL;
    setAutomaticTextCompletionEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399437-delegate
    delegate(): NSTextFieldDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399399-textshouldbeginediting
    textShouldBeginEditing(textObject: NSText):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399426-textdidbeginediting
    textDidBeginEditing(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399397-textdidchange
    textDidChange(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399434-textshouldendediting
    textShouldEndEditing(textObject: NSText):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextfield/1399420-textdidendediting
    textDidEndEditing(notification: NSNotification):void;
    //
    alloc():NSTextField;
    //
    init():NSTextField;
  }
}

declare const NSTextField: cocoascript.NSTextField;
declare namespace cocoascript {
  /**
   * An
   * doc://com.apple.documentation/documentation/appkit/nsform
   */
  interface NSForm extends NSMatrix {
    // doc://com.apple.documentation/documentation/appkit/nsform/1534075-addentry
    addEntry(title: string | NSString):NSFormCell;
    // doc://com.apple.documentation/documentation/appkit/nsform/1531754-insertentry
    insertEntry_atIndex(title: string | NSString, index: NSInteger):NSFormCell;
    // doc://com.apple.documentation/documentation/appkit/nsform/1526791-removeentryatindex
    removeEntryAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsform/1533560-setbezeled
    setBezeled(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsform/1528565-setbordered
    setBordered(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsform/1529751-setentrywidth
    setEntryWidth(width: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsform/1533815-setframesize
    setFrameSize(newSize: NSSize):void;
    // doc://com.apple.documentation/documentation/appkit/nsform/1532029-setinterlinespacing
    setInterlineSpacing(spacing: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsform/1535551-settitlealignment
    setTitleAlignment(mode: NSTextAlignment):void;
    // doc://com.apple.documentation/documentation/appkit/nsform/1527429-settitlebasewritingdirection
    setTitleBaseWritingDirection(writingDirection: NSWritingDirection):void;
    // doc://com.apple.documentation/documentation/appkit/nsform/1527095-settextalignment
    setTextAlignment(mode: NSTextAlignment):void;
    // doc://com.apple.documentation/documentation/appkit/nsform/1524441-settextbasewritingdirection
    setTextBaseWritingDirection(writingDirection: NSWritingDirection):void;
    // doc://com.apple.documentation/documentation/appkit/nsform/1535413-settitlefont
    setTitleFont(fontObj: NSFont):void;
    // doc://com.apple.documentation/documentation/appkit/nsform/1533476-settextfont
    setTextFont(fontObj: NSFont):void;
    // doc://com.apple.documentation/documentation/appkit/nsform/1524629-indexofcellwithtag
    indexOfCellWithTag(tag: NSInteger):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsform/1527869-indexofselecteditem
    indexOfSelectedItem():NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsform/1532662-cellatindex
    cellAtIndex(index: NSInteger):NSForm;
    // doc://com.apple.documentation/documentation/appkit/nsform/1526339-drawcellatindex
    drawCellAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsform/1530873-preferredtextfieldwidth
    preferredTextFieldWidth():CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsform/1526047-setpreferredtextfieldwidth
    setPreferredTextFieldWidth(preferredWidth: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsform/1535000-selecttextatindex
    selectTextAtIndex(index: NSInteger):void;
    //
    alloc():NSForm;
    //
    init():NSForm;
  }
}

declare const NSForm: cocoascript.NSForm;
declare namespace cocoascript {
  /**
   * A view that displays a portion of a document view and provides scroll bars that allow the user to move the document view within the scroll view.
   * doc://com.apple.documentation/documentation/appkit/nsscrollview
   */
  interface NSScrollView extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403545-framesizeforcontentsize
    frameSizeForContentSize_horizontalScrollerClass_verticalScrollerClass_borderType_controlSize_scrollerStyle(cSize: NSSize, horizontalScrollerClass: Class, verticalScrollerClass: Class, type: NSBorderType, controlSize: NSControlSize, scrollerStyle: NSScrollerStyle):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403471-contentsizeforframesize
    contentSizeForFrameSize_horizontalScrollerClass_verticalScrollerClass_borderType_controlSize_scrollerStyle(fSize: NSSize, horizontalScrollerClass: Class, verticalScrollerClass: Class, type: NSBorderType, controlSize: NSControlSize, scrollerStyle: NSScrollerStyle):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403458-contentsize
    contentSize(): NSSize;
    setContentSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403466-documentvisiblerect
    documentVisibleRect(): NSRect;
    setDocumentVisibleRect(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403473-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403474-drawsbackground
    drawsBackground(): BOOL;
    setDrawsBackground(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403528-bordertype
    borderType(): NSBorderType;
    setBorderType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403446-documentcursor
    documentCursor(): NSCursor;
    setDocumentCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403547-contentview
    contentView(): NSClipView;
    setContentView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403485-documentview
    documentView(): NSView;
    setDocumentView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403546-addfloatingsubview
    addFloatingSubview_forAxis(view: NSView, axis: NSEventGestureAxis):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403447-horizontalscroller
    horizontalScroller(): NSScroller;
    setHorizontalScroller(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403530-hashorizontalscroller
    hasHorizontalScroller(): BOOL;
    setHasHorizontalScroller(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403526-verticalscroller
    verticalScroller(): NSScroller;
    setVerticalScroller(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403491-hasverticalscroller
    hasVerticalScroller(): BOOL;
    setHasVerticalScroller(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403536-autohidesscrollers
    autohidesScrollers(): BOOL;
    setAutohidesScrollers(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403492-rulerviewclass
    rulerViewClass(): Class;
    setRulerViewClass(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403457-hashorizontalruler
    hasHorizontalRuler(): BOOL;
    setHasHorizontalRuler(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403498-horizontalrulerview
    horizontalRulerView(): NSRulerView;
    setHorizontalRulerView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403496-hasverticalruler
    hasVerticalRuler(): BOOL;
    setHasVerticalRuler(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403507-verticalrulerview
    verticalRulerView(): NSRulerView;
    setVerticalRulerView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403445-rulersvisible
    rulersVisible(): BOOL;
    setRulersVisible(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403502-automaticallyadjustscontentinset
    automaticallyAdjustsContentInsets(): BOOL;
    setAutomaticallyAdjustsContentInsets(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403461-contentinsets
    contentInsets(): NSEdgeInsets;
    setContentInsets(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403529-scrollerinsets
    scrollerInsets(): NSEdgeInsets;
    setScrollerInsets(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403544-scrollerknobstyle
    scrollerKnobStyle(): NSScrollerKnobStyle;
    setScrollerKnobStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403520-scrollerstyle
    scrollerStyle(): NSScrollerStyle;
    setScrollerStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403454-linescroll
    lineScroll(): CGFloat;
    setLineScroll(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403539-horizontallinescroll
    horizontalLineScroll(): CGFloat;
    setHorizontalLineScroll(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403490-verticallinescroll
    verticalLineScroll(): CGFloat;
    setVerticalLineScroll(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403449-pagescroll
    pageScroll(): CGFloat;
    setPageScroll(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403478-horizontalpagescroll
    horizontalPageScroll(): CGFloat;
    setHorizontalPageScroll(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403512-verticalpagescroll
    verticalPageScroll(): CGFloat;
    setVerticalPageScroll(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403519-scrollsdynamically
    scrollsDynamically(): BOOL;
    setScrollsDynamically(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403494-scrollwheel
    scrollWheel(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403534-reflectscrolledclipview
    reflectScrolledClipView(cView: NSClipView):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403509-tile
    tile():void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403501-findbarposition
    findBarPosition(): NSScrollViewFindBarPosition;
    setFindBarPosition(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403489-usespredominantaxisscrolling
    usesPredominantAxisScrolling(): BOOL;
    setUsesPredominantAxisScrolling(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403540-horizontalscrollelasticity
    horizontalScrollElasticity(): NSScrollElasticity;
    setHorizontalScrollElasticity(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403475-verticalscrollelasticity
    verticalScrollElasticity(): NSScrollElasticity;
    setVerticalScrollElasticity(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403460-flashscrollers
    flashScrollers():void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403531-allowsmagnification
    allowsMagnification(): BOOL;
    setAllowsMagnification(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403497-magnification
    magnification(): CGFloat;
    setMagnification(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403508-magnifytofitrect
    magnifyToFitRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403510-maxmagnification
    maxMagnification(): CGFloat;
    setMaxMagnification(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403524-minmagnification
    minMagnification(): CGFloat;
    setMinMagnification(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403459-setmagnification
    setMagnification_centeredAtPoint(magnification: CGFloat, point: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403469-framesizeforcontentsize
    frameSizeForContentSize_hasHorizontalScroller_hasVerticalScroller_borderType(cSize: NSSize, hFlag: BOOL, vFlag: BOOL, type: NSBorderType):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403481-contentsizeforframesize
    contentSizeForFrameSize_hasHorizontalScroller_hasVerticalScroller_borderType(fSize: NSSize, hFlag: BOOL, vFlag: BOOL, type: NSBorderType):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403527-initwithcoder
    initWithCoder(coder: NSCoder):NSScrollView;
    // doc://com.apple.documentation/documentation/appkit/nsscrollview/1403450-initwithframe
    initWithFrame(frameRect: NSRect):NSScrollView;
    //
    alloc():NSScrollView;
    //
    init():NSScrollView;
  }
}

declare const NSScrollView: cocoascript.NSScrollView;
declare namespace cocoascript {
  /**
   * The most general programmatic interface for objects that manage text.
   * doc://com.apple.documentation/documentation/appkit/nstext
   */
  interface NSText extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nstext/1535093-initwithcoder
    initWithCoder(coder: NSCoder):NSText;
    // doc://com.apple.documentation/documentation/appkit/nstext/1525191-initwithframe
    initWithFrame(frameRect: NSRect):NSText;
    // doc://com.apple.documentation/documentation/appkit/nstext/1528601-string
    string(): string | NSString;
    setString(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1535324-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1531772-drawsbackground
    drawsBackground(): BOOL;
    setDrawsBackground(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1529876-editable
    editable(): BOOL;
    setEditable(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1535368-selectable
    selectable(): BOOL;
    setSelectable(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1533080-fieldeditor
    fieldEditor(): BOOL;
    setFieldEditor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1531003-richtext
    richText(): BOOL;
    setRichText(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1531887-importsgraphics
    importsGraphics(): BOOL;
    setImportsGraphics(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1527431-usesfontpanel
    usesFontPanel(): BOOL;
    setUsesFontPanel(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1535773-toggleruler
    toggleRuler(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1533732-rulervisible
    rulerVisible(): BOOL;
    setRulerVisible(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1526227-selectedrange
    selectedRange(): NSRange;
    setSelectedRange(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1527249-replacecharactersinrange
    replaceCharactersInRange_withRTF(range: NSRange, rtfData: NSData):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1525846-replacecharactersinrange
    replaceCharactersInRange_withRTFD(range: NSRange, rtfdData: NSData):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1530589-replacecharactersinrange
    replaceCharactersInRange_withString(range: NSRange, string: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1527642-selectall
    selectAll(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1525497-copy
    copy(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1524858-cut
    cut(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1527209-paste
    paste(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1531255-copyfont
    copyFont(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1531099-pastefont
    pasteFont(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1533303-copyruler
    copyRuler(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1530420-pasteruler
    pasteRuler(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1524660-delete
    delete(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1531459-changefont
    changeFont(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1534646-font
    font(): NSFont;
    setFont(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1526283-setfont
    setFont_range(font: NSFont, range: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1534102-alignment
    alignment(): NSTextAlignment;
    setAlignment(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1535569-aligncenter
    alignCenter(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1535705-alignleft
    alignLeft(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1526477-alignright
    alignRight(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1534875-textcolor
    textColor(): NSColor;
    setTextColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1530110-settextcolor
    setTextColor_range(color: NSColor, range: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1526206-basewritingdirection
    baseWritingDirection(): NSWritingDirection;
    setBaseWritingDirection(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1525743-superscript
    superscript(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1535373-subscript
    subscript(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1527542-unscript
    unscript(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1534203-underline
    underline(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1532564-readrtfdfromfile
    readRTFDFromFile(path: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstext/1527085-writertfdtofile
    writeRTFDToFile_atomically(path: string | NSString, flag: BOOL):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstext/1528394-rtfdfromrange
    RTFDFromRange(range: NSRange):NSData;
    // doc://com.apple.documentation/documentation/appkit/nstext/1527004-rtffromrange
    RTFFromRange(range: NSRange):NSData;
    // doc://com.apple.documentation/documentation/appkit/nstext/1534926-checkspelling
    checkSpelling(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1533456-showguesspanel
    showGuessPanel(sender: NSText):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1535900-maxsize
    maxSize(): NSSize;
    setMaxSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1526222-minsize
    minSize(): NSSize;
    setMinSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1535082-verticallyresizable
    verticallyResizable(): BOOL;
    setVerticallyResizable(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1527489-horizontallyresizable
    horizontallyResizable(): BOOL;
    setHorizontallyResizable(): void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1533991-sizetofit
    sizeToFit():void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1529884-scrollrangetovisible
    scrollRangeToVisible(range: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstext/1529480-delegate
    delegate(): NSTextDelegate;
    setDelegate(): void;
    //
    alloc():NSText;
    //
    init():NSText;
  }
}

declare const NSText: cocoascript.NSText;
// doc://com.apple.documentation/documentation/appkit/nstextdidbegineditingnotification
declare const NSTextDidBeginEditingNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nstextdidchangenotification
declare const NSTextDidChangeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nstextdidendeditingnotification
declare const NSTextDidEndEditingNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nstextmovementuserinfokey
declare const NSTextMovementUserInfoKey: string | NSString;
declare namespace cocoascript {
  /**
   * A protocol that a text field delegate can use to control its field editor action menu.
   * doc://com.apple.documentation/documentation/appkit/nstextfielddelegate
   */
  interface NSTextFieldDelegate extends NSControlTextEditingDelegate {
    // doc://com.apple.documentation/documentation/appkit/nstextfielddelegate/2539556-textfield
    textField_textView_candidates_forSelectedRange(textField: NSTextField, textView: NSTextView, candidates: NSTextCheckingResult, selectedRange: NSRange):NSTextCheckingResult;
    // doc://com.apple.documentation/documentation/appkit/nstextfielddelegate/2539552-textfield
    textField_textView_candidatesForSelectedRange(textField: NSTextField, textView: NSTextView, selectedRange: NSRange):NSArray;
    // doc://com.apple.documentation/documentation/appkit/nstextfielddelegate/2539557-textfield
    textField_textView_shouldSelectCandidateAtIndex(textField: NSTextField, textView: NSTextView, index: NSUInteger):BOOL;
  }
}
declare namespace cocoascript {
  /**
   * A set of optional methods that text view delegates can use to manage selection, set text attributes, work with the spell checker, and more.
   * doc://com.apple.documentation/documentation/appkit/nstextviewdelegate
   */
  interface NSTextViewDelegate extends NSTextDelegate {
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449225-undomanagerfortextview
    undoManagerForTextView(view: NSTextView):NSUndoManager;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449411-textview
    textView_willDisplayToolTip_forCharacterAtIndex(textView: NSTextView, tooltip: string | NSString, characterIndex: NSUInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449194-textview
    textView_URLForContentsOfTextAttachment_atIndex(textView: NSTextView, textAttachment: NSTextAttachment, charIndex: NSUInteger):NSURL;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449227-textview
    textView_willChangeSelectionFromCharacterRange_toCharacterRange(textView: NSTextView, oldSelectedCharRange: NSRange, newSelectedCharRange: NSRange):NSRange;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449264-textview
    textView_willChangeSelectionFromCharacterRanges_toCharacterRanges(textView: NSTextView, oldSelectedCharRanges: NSValue, newSelectedCharRanges: NSValue):NSValue;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449363-textviewdidchangeselection
    textViewDidChangeSelection(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449485-textview
    textView_writablePasteboardTypesForCell_atIndex(view: NSTextView, cell: NSTextAttachmentCell, charIndex: NSUInteger):NSPasteboardType;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449294-textview
    textView_writeCell_atIndex_toPasteboard_type(view: NSTextView, cell: NSTextAttachmentCell, charIndex: NSUInteger, pboard: NSPasteboard, type: NSPasteboardType):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449325-textview
    textView_shouldChangeTextInRange_replacementString(textView: NSTextView, affectedCharRange: NSRange, replacementString: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449206-textview
    textView_shouldChangeTextInRanges_replacementStrings(textView: NSTextView, affectedRanges: NSValue, replacementStrings: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449376-textview
    textView_shouldChangeTypingAttributes_toAttributes(textView: NSTextView, oldTypingAttributes: NSTextViewDelegate, newTypingAttributes: NSTextViewDelegate):NSTextViewDelegate;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449303-textviewdidchangetypingattribute
    textViewDidChangeTypingAttributes(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449335-textview
    textView_clickedOnCell_inRect_atIndex(textView: NSTextView, cell: NSTextAttachmentCell, cellFrame: NSRect, charIndex: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449333-textview
    textView_doubleClickedOnCell_inRect_atIndex(textView: NSTextView, cell: NSTextAttachmentCell, cellFrame: NSRect, charIndex: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449527-textview
    textView_clickedOnLink_atIndex(textView: NSTextView, link: NSTextViewDelegate, charIndex: NSUInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449284-textview
    textView_shouldSetSpellingState_range(textView: NSTextView, value: NSInteger, affectedCharRange: NSRange):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449307-textview
    textView_willCheckTextInRange_options_types(view: NSTextView, range: NSRange, options: NSTextViewDelegate, checkingTypes: NSTextCheckingTypes):NSTextViewDelegate;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449317-textview
    textView_didCheckTextInRange_types_options_results_orthography_wordCount(view: NSTextView, range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSTextViewDelegate, results: NSTextCheckingResult, orthography: NSOrthography, wordCount: NSInteger):NSTextCheckingResult;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449154-textview
    textView_draggedCell_inRect_event_atIndex(view: NSTextView, cell: NSTextAttachmentCell, rect: NSRect, event: NSEvent, charIndex: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449260-textview
    textView_completions_forPartialWordRange_indexOfSelectedItem(textView: NSTextView, words: string | NSString, charRange: NSRange, index: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449339-textview
    textView_willShowSharingServicePicker_forItems(textView: NSTextView, servicePicker: NSSharingServicePicker, items: NSArray):NSSharingServicePicker;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449419-textview
    textView_doCommandBySelector(textView: NSTextView, commandSelector: SEL):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449341-textview
    textView_menu_forEvent_atIndex(view: NSTextView, menu: NSMenu, event: NSEvent, charIndex: NSUInteger):NSMenu;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449380-textview
    textView_clickedOnLink(textView: NSTextView, link: NSTextViewDelegate):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449185-textview
    textView_draggedCell_inRect_event(view: NSTextView, cell: NSTextAttachmentCell, rect: NSRect, event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449495-textview
    textView_clickedOnCell_inRect(textView: NSTextView, cell: NSTextAttachmentCell, cellFrame: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/1449374-textview
    textView_doubleClickedOnCell_inRect(textView: NSTextView, cell: NSTextAttachmentCell, cellFrame: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/2544692-textview
    textView_candidates_forSelectedRange(textView: NSTextView, candidates: NSTextCheckingResult, selectedRange: NSRange):NSTextCheckingResult;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/2544744-textview
    textView_candidatesForSelectedRange(textView: NSTextView, selectedRange: NSRange):NSArray;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/2544682-textview
    textView_shouldSelectCandidateAtIndex(textView: NSTextView, index: NSUInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextviewdelegate/2544799-textview
    textView_shouldUpdateTouchBarItemIdentifiers(textView: NSTextView, identifiers: NSTouchBarItemIdentifier):NSTouchBarItemIdentifier;
  }
}
declare namespace cocoascript {
  /**
   * A set of optional methods implemented by the delegate of an
   * doc://com.apple.documentation/documentation/appkit/nstextdelegate
   */
  interface NSTextDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstextdelegate/1526982-textdidchange
    textDidChange(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nstextdelegate/1533298-textshouldbeginediting
    textShouldBeginEditing(textObject: NSText):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextdelegate/1535575-textdidbeginediting
    textDidBeginEditing(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nstextdelegate/1525992-textshouldendediting
    textShouldEndEditing(textObject: NSText):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextdelegate/1529016-textdidendediting
    textDidEndEditing(notification: NSNotification):void;
  }
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller
   */
  interface NSTextCheckingController extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242753-initwithclient
    initWithClient(client: NSTextCheckingClient):NSTextCheckingController;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242748-client
    client(): NSTextCheckingClient;
    setClient(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242759-spellcheckerdocumenttag
    spellCheckerDocumentTag(): NSInteger;
    setSpellCheckerDocumentTag(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242743-changespelling
    changeSpelling(sender: NSTextCheckingController):void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242744-checkspelling
    checkSpelling(sender: NSTextCheckingController):void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242746-checktextinrange
    checkTextInRange_types_options(range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSTextCheckingController):void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242745-checktextindocument
    checkTextInDocument(sender: NSTextCheckingController):void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242747-checktextinselection
    checkTextInSelection(sender: NSTextCheckingController):void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242749-considertextcheckingforrange
    considerTextCheckingForRange(range: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242750-didchangeselectedrange
    didChangeSelectedRange():void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242751-didchangetextinrange
    didChangeTextInRange(range: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242752-ignorespelling
    ignoreSpelling(sender: NSTextCheckingController):void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242754-insertedtextinrange
    insertedTextInRange(range: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242755-invalidate
    invalidate():void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242756-menuatindex
    menuAtIndex_clickedOnSelection_effectiveRange(location: NSUInteger, clickedOnSelection: BOOL, effectiveRange: NSRangePointer):NSMenu;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242757-orderfrontsubstitutionspanel
    orderFrontSubstitutionsPanel(sender: NSTextCheckingController):void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242758-showguesspanel
    showGuessPanel(sender: NSTextCheckingController):void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242760-updatecandidates
    updateCandidates():void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingcontroller/3242761-validannotations
    validAnnotations():NSAttributedStringKey;
    //
    alloc():NSTextCheckingController;
    //
    init():NSTextCheckingController;
  }
}

declare const NSTextCheckingController: cocoascript.NSTextCheckingController;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nstextcheckingclient
   */
  interface NSTextCheckingClient extends NSTextInputClient {
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingclient/3242719-addannotations
    addAnnotations_range(annotations: string | NSString, range: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingclient/3242720-annotatedsubstringforproposedran
    annotatedSubstringForProposedRange_actualRange(range: NSRange, actualRange: NSRangePointer):NSAttributedString;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingclient/3242721-candidatelisttouchbaritem
    candidateListTouchBarItem():NSCandidateListTouchBarItem;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingclient/3242722-removeannotation
    removeAnnotation_range(annotationName: NSAttributedStringKey, range: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingclient/3242723-replacecharactersinrange
    replaceCharactersInRange_withAnnotatedString(range: NSRange, annotatedString: NSAttributedString):void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingclient/3242724-selectandshowrange
    selectAndShowRange(range: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingclient/3242725-setannotations
    setAnnotations_range(annotations: string | NSString, range: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstextcheckingclient/3242726-viewforrange
    viewForRange_firstRect_actualRange(range: NSRange, firstRect: NSRectPointer, actualRange: NSRangePointer):NSView;
  }
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nstextinputtraits
   */
  interface NSTextInputTraits {
    // doc://com.apple.documentation/documentation/appkit/nstextinputtraits/3242732-autocorrectiontype
    autocorrectionType(): NSTextInputTraitType;
    setAutocorrectionType(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputtraits/3242733-datadetectiontype
    dataDetectionType(): NSTextInputTraitType;
    setDataDetectionType(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputtraits/3242734-grammarcheckingtype
    grammarCheckingType(): NSTextInputTraitType;
    setGrammarCheckingType(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputtraits/3242735-linkdetectiontype
    linkDetectionType(): NSTextInputTraitType;
    setLinkDetectionType(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputtraits/3242736-smartdashestype
    smartDashesType(): NSTextInputTraitType;
    setSmartDashesType(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputtraits/3242737-smartinsertdeletetype
    smartInsertDeleteType(): NSTextInputTraitType;
    setSmartInsertDeleteType(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputtraits/3242738-smartquotestype
    smartQuotesType(): NSTextInputTraitType;
    setSmartQuotesType(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputtraits/3242739-spellcheckingtype
    spellCheckingType(): NSTextInputTraitType;
    setSpellCheckingType(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputtraits/3242740-textcompletiontype
    textCompletionType(): NSTextInputTraitType;
    setTextCompletionType(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputtraits/3242741-textreplacementtype
    textReplacementType(): NSTextInputTraitType;
    setTextReplacementType(): void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstextinputtraittype
  type NSTextInputTraitType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * An object that performs the initial, nominal glyph generation phase in the layout process.
   * doc://com.apple.documentation/documentation/appkit/nsglyphgenerator
   */
  interface NSGlyphGenerator extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsglyphgenerator/1425155-sharedglyphgenerator
    sharedGlyphGenerator(): NSGlyphGenerator;
    setSharedGlyphGenerator(): void;
    // doc://com.apple.documentation/documentation/appkit/nsglyphgenerator/1425139-generateglyphsforglyphstorage
    generateGlyphsForGlyphStorage_desiredNumberOfCharacters_glyphIndex_characterIndex(glyphStorage: NSGlyphStorage, nChars: NSUInteger, glyphIndex: NSUInteger, charIndex: NSUInteger):void;
    //
    alloc():NSGlyphGenerator;
    //
    init():NSGlyphGenerator;
  }
}

declare const NSGlyphGenerator: cocoascript.NSGlyphGenerator;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nslinesweepdirection
  type NSLineSweepDirection = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nslinemovementdirection
  type NSLineMovementDirection = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * A concrete typesetter object that places glyphs during the text layout process.
   * doc://com.apple.documentation/documentation/appkit/nsatstypesetter
   */
  interface NSATSTypesetter extends NSTypesetter {
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1530993-sharedtypesetter
    sharedTypesetter(): NSATSTypesetter;
    setSharedTypesetter(): void;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1535366-layoutmanager
    layoutManager(): NSLayoutManager;
    setLayoutManager(): void;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1533331-usesfontleading
    usesFontLeading(): BOOL;
    setUsesFontLeading(): void;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1533819-typesetterbehavior
    typesetterBehavior(): NSTypesetterBehavior;
    setTypesetterBehavior(): void;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1526758-hyphenationfactor
    hyphenationFactor(): number;
    setHyphenationFactor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1524295-bidiprocessingenabled
    bidiProcessingEnabled(): BOOL;
    setBidiProcessingEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1527830-currenttextcontainer
    currentTextContainer(): NSTextContainer;
    setCurrentTextContainer(): void;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1532628-linefragmentpadding
    lineFragmentPadding(): CGFloat;
    setLineFragmentPadding(): void;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1535433-substitutefontforfont
    substituteFontForFont(originalFont: NSFont):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1531288-texttabforglyphlocation
    textTabForGlyphLocation_writingDirection_maxLocation(glyphLocation: CGFloat, direction: NSWritingDirection, maxLocation: CGFloat):NSTextTab;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1530598-attributedstring
    attributedString(): NSAttributedString;
    setAttributedString(): void;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1534099-setparagraphglyphrange
    setParagraphGlyphRange_separatorGlyphRange(paragraphRange: NSRange, paragraphSeparatorRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1528373-paragraphglyphrange
    paragraphGlyphRange(): NSRange;
    setParagraphGlyphRange(): void;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1531108-paragraphseparatorglyphrange
    paragraphSeparatorGlyphRange(): NSRange;
    setParagraphSeparatorGlyphRange(): void;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1525179-layoutparagraphatpoint
    layoutParagraphAtPoint(lineFragmentOrigin: NSPoint):NSUInteger;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1533513-linespacingafterglyphatindex
    lineSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: NSUInteger, rect: NSRect):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1532075-paragraphspacingafterglyphatinde
    paragraphSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: NSUInteger, rect: NSRect):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1530080-paragraphspacingbeforeglyphatind
    paragraphSpacingBeforeGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: NSUInteger, rect: NSRect):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1535434-boundingboxforcontrolglyphatinde
    boundingBoxForControlGlyphAtIndex_forTextContainer_proposedLineFragment_glyphPosition_characterIndex(glyphIndex: NSUInteger, textContainer: NSTextContainer, proposedRect: NSRect, glyphPosition: NSPoint, charIndex: NSUInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1528343-getlinefragmentrect
    getLineFragmentRect_usedRect_forParagraphSeparatorGlyphRange_atProposedOrigin(lineFragmentRect: NSRect, lineFragmentUsedRect: NSRect, paragraphSeparatorGlyphRange: NSRange, lineOrigin: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1525948-hyphencharacterforglyphatindex
    hyphenCharacterForGlyphAtIndex(glyphIndex: NSUInteger):UTF32Char;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1533979-hyphenationfactorforglyphatindex
    hyphenationFactorForGlyphAtIndex(glyphIndex: NSUInteger):number;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1534510-shouldbreaklinebyhyphenatingbefo
    shouldBreakLineByHyphenatingBeforeCharacterAtIndex(charIndex: NSUInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1528327-shouldbreaklinebywordbeforechara
    shouldBreakLineByWordBeforeCharacterAtIndex(charIndex: NSUInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1526615-willsetlinefragmentrect
    willSetLineFragmentRect_forGlyphRange_usedRect_baselineOffset(lineRect: NSRect, glyphRange: NSRange, usedRect: NSRect, baselineOffset: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1526532-sethardinvalidation
    setHardInvalidation_forGlyphRange(flag: BOOL, glyphRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1527411-getglyphsinrange
    getGlyphsInRange_glyphs_characterIndexes_glyphInscriptions_elasticBits(glyphsRange: NSRange, glyphBuffer: NSGlyph, charIndexBuffer: NSUInteger, inscribeBuffer: NSGlyphInscription, elasticBuffer: BOOL):NSUInteger;
    // doc://com.apple.documentation/documentation/appkit/nsatstypesetter/1579672-linefragmentrectforproposedrect
    lineFragmentRectForProposedRect_remainingRect(proposedRect: NSRect, remainingRect: NSRectPointer):NSRect;
    //
    alloc():NSATSTypesetter;
    //
    init():NSATSTypesetter;
  }
}

declare const NSATSTypesetter: cocoascript.NSATSTypesetter;
declare namespace cocoascript {
  /**
   * An abstract class that performs various type layout tasks.
   * doc://com.apple.documentation/documentation/appkit/nstypesetter
   */
  interface NSTypesetter extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1534814-sharedsystemtypesetter
    sharedSystemTypesetter(): NSTypesetter;
    setSharedSystemTypesetter(): void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1530659-sharedsystemtypesetterforbehavio
    sharedSystemTypesetterForBehavior(behavior: NSTypesetterBehavior):NSTypesetter;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1534626-defaulttypesetterbehavior
    defaultTypesetterBehavior(): NSTypesetterBehavior;
    setDefaultTypesetterBehavior(): void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1530764-printingadjustmentinlayoutmanage
    printingAdjustmentInLayoutManager_forNominallySpacedGlyphRange_packedGlyphs_count(layoutMgr: NSLayoutManager, nominallySpacedGlyphsRange: NSRange, packedGlyphs: string, packedGlyphsCount: NSUInteger):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1535394-baselineoffsetinlayoutmanager
    baselineOffsetInLayoutManager_glyphIndex(layoutMgr: NSLayoutManager, glyphIndex: NSUInteger):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1533958-layoutmanager
    layoutManager(): NSLayoutManager;
    setLayoutManager(): void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1526716-usesfontleading
    usesFontLeading(): BOOL;
    setUsesFontLeading(): void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1528244-typesetterbehavior
    typesetterBehavior(): NSTypesetterBehavior;
    setTypesetterBehavior(): void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1535877-hyphenationfactor
    hyphenationFactor(): number;
    setHyphenationFactor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1534527-currenttextcontainer
    currentTextContainer(): NSTextContainer;
    setCurrentTextContainer(): void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1526310-textcontainers
    textContainers(): NSTextContainer;
    setTextContainers(): void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1531129-linefragmentpadding
    lineFragmentPadding(): CGFloat;
    setLineFragmentPadding(): void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1526766-substitutefontforfont
    substituteFontForFont(originalFont: NSFont):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1524483-texttabforglyphlocation
    textTabForGlyphLocation_writingDirection_maxLocation(glyphLocation: CGFloat, direction: NSWritingDirection, maxLocation: CGFloat):NSTextTab;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1533588-bidiprocessingenabled
    bidiProcessingEnabled(): BOOL;
    setBidiProcessingEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1528893-currentparagraphstyle
    currentParagraphStyle(): NSParagraphStyle;
    setCurrentParagraphStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1524704-attributedstring
    attributedString(): NSAttributedString;
    setAttributedString(): void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1530393-setparagraphglyphrange
    setParagraphGlyphRange_separatorGlyphRange(paragraphRange: NSRange, paragraphSeparatorRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1528301-paragraphglyphrange
    paragraphGlyphRange(): NSRange;
    setParagraphGlyphRange(): void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1534165-paragraphseparatorglyphrange
    paragraphSeparatorGlyphRange(): NSRange;
    setParagraphSeparatorGlyphRange(): void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1533422-paragraphcharacterrange
    paragraphCharacterRange(): NSRange;
    setParagraphCharacterRange(): void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1531746-paragraphseparatorcharacterrange
    paragraphSeparatorCharacterRange(): NSRange;
    setParagraphSeparatorCharacterRange(): void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1534922-attributesforextralinefragment
    attributesForExtraLineFragment(): id;
    setAttributesForExtraLineFragment(): void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1532355-linespacingafterglyphatindex
    lineSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: NSUInteger, rect: NSRect):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1534661-paragraphspacingafterglyphatinde
    paragraphSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: NSUInteger, rect: NSRect):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1525163-paragraphspacingbeforeglyphatind
    paragraphSpacingBeforeGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: NSUInteger, rect: NSRect):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1528231-layoutparagraphatpoint
    layoutParagraphAtPoint(lineFragmentOrigin: NSPointPointer):NSUInteger;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1526595-beginparagraph
    beginParagraph():void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1526802-endparagraph
    endParagraph():void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1534305-beginlinewithglyphatindex
    beginLineWithGlyphAtIndex(glyphIndex: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1525531-endlinewithglyphrange
    endLineWithGlyphRange(lineGlyphRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1535876-layoutcharactersinrange
    layoutCharactersInRange_forLayoutManager_maximumNumberOfLineFragments(characterRange: NSRange, layoutManager: NSLayoutManager, maxNumLines: NSUInteger):NSRange;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1534233-layoutglyphsinlayoutmanager
    layoutGlyphsInLayoutManager_startingAtGlyphIndex_maxNumberOfLineFragments_nextGlyphIndex(layoutManager: NSLayoutManager, startGlyphIndex: NSUInteger, maxNumLines: NSUInteger, nextGlyph: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1535355-boundingboxforcontrolglyphatinde
    boundingBoxForControlGlyphAtIndex_forTextContainer_proposedLineFragment_glyphPosition_characterIndex(glyphIndex: NSUInteger, textContainer: NSTextContainer, proposedRect: NSRect, glyphPosition: NSPoint, charIndex: NSUInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1533394-getlinefragmentrect
    getLineFragmentRect_usedRect_forParagraphSeparatorGlyphRange_atProposedOrigin(lineFragmentRect: NSRectPointer, lineFragmentUsedRect: NSRectPointer, paragraphSeparatorGlyphRange: NSRange, lineOrigin: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1535809-getlinefragmentrect
    getLineFragmentRect_usedRect_remainingRect_forStartingGlyphAtIndex_proposedRect_lineSpacing_paragraphSpacingBefore_paragraphSpacingAfter(lineFragmentRect: NSRectPointer, lineFragmentUsedRect: NSRectPointer, remainingRect: NSRectPointer, startingGlyphIndex: NSUInteger, proposedRect: NSRect, lineSpacing: CGFloat, paragraphSpacingBefore: CGFloat, paragraphSpacingAfter: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1531874-hyphencharacterforglyphatindex
    hyphenCharacterForGlyphAtIndex(glyphIndex: NSUInteger):UTF32Char;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1533345-hyphenationfactorforglyphatindex
    hyphenationFactorForGlyphAtIndex(glyphIndex: NSUInteger):number;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1534525-shouldbreaklinebyhyphenatingbefo
    shouldBreakLineByHyphenatingBeforeCharacterAtIndex(charIndex: NSUInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1532732-shouldbreaklinebywordbeforechara
    shouldBreakLineByWordBeforeCharacterAtIndex(charIndex: NSUInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1530261-willsetlinefragmentrect
    willSetLineFragmentRect_forGlyphRange_usedRect_baselineOffset(lineRect: NSRectPointer, glyphRange: NSRange, usedRect: NSRectPointer, baselineOffset: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1529806-sethardinvalidation
    setHardInvalidation_forGlyphRange(flag: BOOL, glyphRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1524391-characterrangeforglyphrange
    characterRangeForGlyphRange_actualGlyphRange(glyphRange: NSRange, actualGlyphRange: NSRangePointer):NSRange;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1531461-glyphrangeforcharacterrange
    glyphRangeForCharacterRange_actualCharacterRange(charRange: NSRange, actualCharRange: NSRangePointer):NSRange;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1532282-setattachmentsize
    setAttachmentSize_forGlyphRange(attachmentSize: NSSize, glyphRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1532079-setbidilevels
    setBidiLevels_forGlyphRange(levels: number, glyphRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1526312-setdrawsoutsidelinefragment
    setDrawsOutsideLineFragment_forGlyphRange(flag: BOOL, glyphRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1534015-setlinefragmentrect
    setLineFragmentRect_forGlyphRange_usedRect_baselineOffset(fragmentRect: NSRect, glyphRange: NSRange, usedRect: NSRect, baselineOffset: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1533806-setlocation
    setLocation_withAdvancements_forStartOfGlyphRange(location: NSPoint, advancements: CGFloat, glyphRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1530373-setnotshownattribute
    setNotShownAttribute_forGlyphRange(flag: BOOL, glyphRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1527684-actionforcontrolcharacteratindex
    actionForControlCharacterAtIndex(charIndex: NSUInteger):NSTypesetterControlCharacterAction;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1535048-deleteglyphsinrange
    deleteGlyphsInRange(glyphRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1529113-substituteglyphsinrange
    substituteGlyphsInRange_withGlyphs(glyphRange: NSRange, glyphs: NSGlyph):void;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1526102-getglyphsinrange
    getGlyphsInRange_glyphs_characterIndexes_glyphInscriptions_elasticBits_bidiLevels(glyphsRange: NSRange, glyphBuffer: NSGlyph, charIndexBuffer: NSUInteger, inscribeBuffer: NSGlyphInscription, elasticBuffer: BOOL, bidiLevelBuffer: string):NSUInteger;
    // doc://com.apple.documentation/documentation/appkit/nstypesetter/1528650-insertglyph
    insertGlyph_atGlyphIndex_characterIndex(glyph: NSGlyph, glyphIndex: NSUInteger, characterIndex: NSUInteger):void;
    //
    alloc():NSTypesetter;
    //
    init():NSTypesetter;
  }
}

declare const NSTypesetter: cocoascript.NSTypesetter;
declare namespace cocoascript {
  /**
   * A block of text laid out in a subregion of the text container.
   * doc://com.apple.documentation/documentation/appkit/nstextblock
   */
  interface NSTextBlock extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1528169-init
    init():NSTextBlock;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1533000-setvalue
    setValue_type_forDimension(val: CGFloat, type: NSTextBlockValueType, dimension: NSTextBlockDimension):void;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1526445-valuefordimension
    valueForDimension(dimension: NSTextBlockDimension):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1530561-valuetypefordimension
    valueTypeForDimension(dimension: NSTextBlockDimension):NSTextBlockValueType;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1528308-setcontentwidth
    setContentWidth_type(val: CGFloat, type: NSTextBlockValueType):void;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1532506-contentwidth
    contentWidth(): CGFloat;
    setContentWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1525975-contentwidthvaluetype
    contentWidthValueType(): NSTextBlockValueType;
    setContentWidthValueType(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1533792-setwidth
    setWidth_type_forLayer_edge(val: CGFloat, type: NSTextBlockValueType, layer: NSTextBlockLayer, edge: NSRectEdge):void;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1535325-setwidth
    setWidth_type_forLayer(val: CGFloat, type: NSTextBlockValueType, layer: NSTextBlockLayer):void;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1533532-widthforlayer
    widthForLayer_edge(layer: NSTextBlockLayer, edge: NSRectEdge):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1533551-widthvaluetypeforlayer
    widthValueTypeForLayer_edge(layer: NSTextBlockLayer, edge: NSRectEdge):NSTextBlockValueType;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1533097-verticalalignment
    verticalAlignment(): NSTextBlockVerticalAlignment;
    setVerticalAlignment(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1527300-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1529881-setbordercolor
    setBorderColor_forEdge(color: NSColor, edge: NSRectEdge):void;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1531850-setbordercolor
    setBorderColor(color: NSColor):void;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1534711-bordercolorforedge
    borderColorForEdge(edge: NSRectEdge):NSColor;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1527965-rectforlayoutatpoint
    rectForLayoutAtPoint_inRect_textContainer_characterRange(startingPoint: NSPoint, rect: NSRect, textContainer: NSTextContainer, charRange: NSRange):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1532041-boundsrectforcontentrect
    boundsRectForContentRect_inRect_textContainer_characterRange(contentRect: NSRect, rect: NSRect, textContainer: NSTextContainer, charRange: NSRange):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nstextblock/1531424-drawbackgroundwithframe
    drawBackgroundWithFrame_inView_characterRange_layoutManager(frameRect: NSRect, controlView: NSView, charRange: NSRange, layoutManager: NSLayoutManager):void;
    //
    alloc():NSTextBlock;
    //
    init():NSTextBlock;
  }
}

declare const NSTextBlock: cocoascript.NSTextBlock;
declare namespace cocoascript {
  /**
   * An object that represents a text table as a whole.
   * doc://com.apple.documentation/documentation/appkit/nstexttable
   */
  interface NSTextTable extends NSTextBlock {
    // doc://com.apple.documentation/documentation/appkit/nstexttable/1532413-numberofcolumns
    numberOfColumns(): NSUInteger;
    setNumberOfColumns(): void;
    // doc://com.apple.documentation/documentation/appkit/nstexttable/1531734-layoutalgorithm
    layoutAlgorithm(): NSTextTableLayoutAlgorithm;
    setLayoutAlgorithm(): void;
    // doc://com.apple.documentation/documentation/appkit/nstexttable/1534170-collapsesborders
    collapsesBorders(): BOOL;
    setCollapsesBorders(): void;
    // doc://com.apple.documentation/documentation/appkit/nstexttable/1526288-hidesemptycells
    hidesEmptyCells(): BOOL;
    setHidesEmptyCells(): void;
    // doc://com.apple.documentation/documentation/appkit/nstexttable/1534161-rectforblock
    rectForBlock_layoutAtPoint_inRect_textContainer_characterRange(block: NSTextTableBlock, startingPoint: NSPoint, rect: NSRect, textContainer: NSTextContainer, charRange: NSRange):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nstexttable/1525956-boundsrectforblock
    boundsRectForBlock_contentRect_inRect_textContainer_characterRange(block: NSTextTableBlock, contentRect: NSRect, rect: NSRect, textContainer: NSTextContainer, charRange: NSRange):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nstexttable/1534234-drawbackgroundforblock
    drawBackgroundForBlock_withFrame_inView_characterRange_layoutManager(block: NSTextTableBlock, frameRect: NSRect, controlView: NSView, charRange: NSRange, layoutManager: NSLayoutManager):void;
    //
    alloc():NSTextTable;
    //
    init():NSTextTable;
  }
}

declare const NSTextTable: cocoascript.NSTextTable;
declare namespace cocoascript {
  /**
   * A text block that appears as a cell in a text table.
   * doc://com.apple.documentation/documentation/appkit/nstexttableblock
   */
  interface NSTextTableBlock extends NSTextBlock {
    // doc://com.apple.documentation/documentation/appkit/nstexttableblock/1532894-initwithtable
    initWithTable_startingRow_rowSpan_startingColumn_columnSpan(table: NSTextTable, row: NSInteger, rowSpan: NSInteger, col: NSInteger, colSpan: NSInteger):NSTextTableBlock;
    // doc://com.apple.documentation/documentation/appkit/nstexttableblock/1525141-table
    table(): NSTextTable;
    setTable(): void;
    // doc://com.apple.documentation/documentation/appkit/nstexttableblock/1525803-startingrow
    startingRow(): NSInteger;
    setStartingRow(): void;
    // doc://com.apple.documentation/documentation/appkit/nstexttableblock/1528586-rowspan
    rowSpan(): NSInteger;
    setRowSpan(): void;
    // doc://com.apple.documentation/documentation/appkit/nstexttableblock/1525383-startingcolumn
    startingColumn(): NSInteger;
    setStartingColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nstexttableblock/1528568-columnspan
    columnSpan(): NSInteger;
    setColumnSpan(): void;
    //
    alloc():NSTextTableBlock;
    //
    init():NSTextTableBlock;
  }
}

declare const NSTextTableBlock: cocoascript.NSTextTableBlock;
declare namespace cocoascript {
  /**
   * A section of text that forms a single list.
   * doc://com.apple.documentation/documentation/appkit/nstextlist
   */
  interface NSTextList extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstextlist/1526123-initwithmarkerformat
    initWithMarkerFormat_options(format: NSTextListMarkerFormat, mask: NSUInteger):NSTextList;
    // doc://com.apple.documentation/documentation/appkit/nstextlist/1533865-markerformat
    markerFormat(): NSTextListMarkerFormat;
    setMarkerFormat(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextlist/1532739-markerforitemnumber
    markerForItemNumber(itemNum: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nstextlist/1533519-listoptions
    listOptions(): NSTextListOptions;
    setListOptions(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextlist/1528597-startingitemnumber
    startingItemNumber(): NSInteger;
    setStartingItemNumber(): void;
    //
    alloc():NSTextList;
    //
    init():NSTextList;
  }
}

declare const NSTextList: cocoascript.NSTextList;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nstextcontent
   */
  interface NSTextContent {
    // doc://com.apple.documentation/documentation/appkit/nstextcontent/3566859-contenttype
    contentType(): NSTextContentType;
    setContentType(): void;
  }
}
declare namespace cocoascript {
  /**
   * An object that implements the functionality of the text attachment cell protocol.
   * doc://com.apple.documentation/documentation/appkit/nstextattachmentcell
   */
  interface NSTextAttachmentCell extends NSCell {
    //
    alloc():NSTextAttachmentCell;
    //
    init():NSTextAttachmentCell;
  }
}

declare const NSTextAttachmentCell: cocoascript.NSTextAttachmentCell;
declare namespace cocoascript {
  /**
   * A set of methods that declares the interface for objects that draw text attachment icons and handle mouse events on their icons.
   * doc://com.apple.documentation/documentation/appkit/1508388-nstextattachmentcell
   */
  interface NSTextAttachmentCell extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/1508388-nstextattachmentcell/1508396-attachment
    attachment(): NSTextAttachment;
    setAttachment(): void;
    // doc://com.apple.documentation/documentation/appkit/1508388-nstextattachmentcell/1508392-drawwithframe
    drawWithFrame_inView(cellFrame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/1508388-nstextattachmentcell/1508412-drawwithframe
    drawWithFrame_inView_characterIndex(cellFrame: NSRect, controlView: NSView, charIndex: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/1508388-nstextattachmentcell/1508385-drawwithframe
    drawWithFrame_inView_characterIndex_layoutManager(cellFrame: NSRect, controlView: NSView, charIndex: NSUInteger, layoutManager: NSLayoutManager):void;
    // doc://com.apple.documentation/documentation/appkit/1508388-nstextattachmentcell/1508384-highlight
    highlight_withFrame_inView(flag: BOOL, cellFrame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/1508388-nstextattachmentcell/1508405-cellsize
    cellSize():NSSize;
    // doc://com.apple.documentation/documentation/appkit/1508388-nstextattachmentcell/1508420-cellbaselineoffset
    cellBaselineOffset():NSPoint;
    // doc://com.apple.documentation/documentation/appkit/1508388-nstextattachmentcell/1508402-cellframefortextcontainer
    cellFrameForTextContainer_proposedLineFragment_glyphPosition_characterIndex(textContainer: NSTextContainer, lineFrag: NSRect, position: NSPoint, charIndex: NSUInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/1508388-nstextattachmentcell/1508415-wantstotrackmouse
    wantsToTrackMouse():BOOL;
    // doc://com.apple.documentation/documentation/appkit/1508388-nstextattachmentcell/1508399-wantstotrackmouseforevent
    wantsToTrackMouseForEvent_inRect_ofView_atCharacterIndex(theEvent: NSEvent, cellFrame: NSRect, controlView: NSView, charIndex: NSUInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/1508388-nstextattachmentcell/1508418-trackmouse
    trackMouse_inRect_ofView_untilMouseUp(theEvent: NSEvent, cellFrame: NSRect, controlView: NSView, flag: BOOL):BOOL;
    // doc://com.apple.documentation/documentation/appkit/1508388-nstextattachmentcell/1508380-trackmouse
    trackMouse_inRect_ofView_atCharacterIndex_untilMouseUp(theEvent: NSEvent, cellFrame: NSRect, controlView: NSView, charIndex: NSUInteger, flag: BOOL):BOOL;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsglyph
  type NSGlyph = number;
}
declare namespace cocoascript {
  /**
   * A set of methods that a glyph storage object must implement to interact properly with
   * doc://com.apple.documentation/documentation/appkit/nsglyphstorage
   */
  interface NSGlyphStorage {
    // doc://com.apple.documentation/documentation/appkit/nsglyphstorage/1425147-attributedstring
    attributedString():NSAttributedString;
    // doc://com.apple.documentation/documentation/appkit/nsglyphstorage/1425149-layoutoptions
    layoutOptions():NSUInteger;
    // doc://com.apple.documentation/documentation/appkit/nsglyphstorage/1425153-insertglyphs
    insertGlyphs_length_forStartingGlyphAtIndex_characterIndex(glyphs: NSGlyph, length: NSUInteger, glyphIndex: NSUInteger, charIndex: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsglyphstorage/1425141-setintattribute
    setIntAttribute_value_forGlyphAtIndex(attributeTag: NSInteger, val: NSInteger, glyphIndex: NSUInteger):void;
  }
}
declare namespace cocoascript {
  /**
   * A glyph attribute in an attributed string.
   * doc://com.apple.documentation/documentation/appkit/nsglyphinfo
   */
  interface NSGlyphInfo extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsglyphinfo/2887154-glyphinfowithcgglyph
    glyphInfoWithCGGlyph_forFont_baseString(glyph: CGGlyph, font: NSFont, string: string | NSString):NSGlyphInfo;
    // doc://com.apple.documentation/documentation/appkit/nsglyphinfo/2887163-basestring
    baseString(): string | NSString;
    setBaseString(): void;
    // doc://com.apple.documentation/documentation/appkit/nsglyphinfo/2887152-glyphid
    glyphID(): CGGlyph;
    setGlyphID(): void;
    // doc://com.apple.documentation/documentation/appkit/nsglyphinfo/1447116-glyphinfowithcharacteridentifier
    glyphInfoWithCharacterIdentifier_collection_baseString(cid: NSUInteger, characterCollection: NSCharacterCollection, string: string | NSString):NSGlyphInfo;
    // doc://com.apple.documentation/documentation/appkit/nsglyphinfo/1447124-glyphinfowithglyph
    glyphInfoWithGlyph_forFont_baseString(glyph: NSGlyph, font: NSFont, string: string | NSString):NSGlyphInfo;
    // doc://com.apple.documentation/documentation/appkit/nsglyphinfo/1447118-glyphinfowithglyphname
    glyphInfoWithGlyphName_forFont_baseString(glyphName: string | NSString, font: NSFont, string: string | NSString):NSGlyphInfo;
    // doc://com.apple.documentation/documentation/appkit/nsglyphinfo/1447120-characteridentifier
    characterIdentifier(): NSUInteger;
    setCharacterIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nsglyphinfo/1447136-charactercollection
    characterCollection(): NSCharacterCollection;
    setCharacterCollection(): void;
    // doc://com.apple.documentation/documentation/appkit/nsglyphinfo/1447132-glyphname
    glyphName(): string | NSString;
    setGlyphName(): void;
    //
    alloc():NSGlyphInfo;
    //
    init():NSGlyphInfo;
  }
}

declare const NSGlyphInfo: cocoascript.NSGlyphInfo;
declare namespace cocoascript {
  /**
   * A set of methods that text views must implement to interact properly with the text input management system.
   * doc://com.apple.documentation/documentation/appkit/nstextinput
   */
  interface NSTextInput {
    // doc://com.apple.documentation/documentation/appkit/nstextinput/1412824-hasmarkedtext
    hasMarkedText():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextinput/1412831-markedrange
    markedRange():NSRange;
    // doc://com.apple.documentation/documentation/appkit/nstextinput/1412848-selectedrange
    selectedRange():NSRange;
    // doc://com.apple.documentation/documentation/appkit/nstextinput/1412851-setmarkedtext
    setMarkedText_selectedRange(string: NSTextInput, selRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstextinput/1412840-unmarktext
    unmarkText():void;
    // doc://com.apple.documentation/documentation/appkit/nstextinput/1412825-validattributesformarkedtext
    validAttributesForMarkedText():NSArray;
    // doc://com.apple.documentation/documentation/appkit/nstextinput/1412836-attributedsubstringfromrange
    attributedSubstringFromRange(range: NSRange):NSAttributedString;
    // doc://com.apple.documentation/documentation/appkit/nstextinput/1412816-inserttext
    insertText(string: NSTextInput):void;
    // doc://com.apple.documentation/documentation/appkit/nstextinput/1412847-characterindexforpoint
    characterIndexForPoint(point: NSPoint):NSUInteger;
    // doc://com.apple.documentation/documentation/appkit/nstextinput/1412838-firstrectforcharacterrange
    firstRectForCharacterRange(range: NSRange):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nstextinput/1412853-docommandbyselector
    doCommandBySelector(selector: SEL):void;
    // doc://com.apple.documentation/documentation/appkit/nstextinput/1412823-conversationidentifier
    conversationIdentifier():NSInteger;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that text views must implement to interact properly with the text input management system.
   * doc://com.apple.documentation/documentation/appkit/nstextinputclient
   */
  interface NSTextInputClient {
    // doc://com.apple.documentation/documentation/appkit/nstextinputclient/1438234-hasmarkedtext
    hasMarkedText():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextinputclient/1438250-markedrange
    markedRange():NSRange;
    // doc://com.apple.documentation/documentation/appkit/nstextinputclient/1438242-selectedrange
    selectedRange():NSRange;
    // doc://com.apple.documentation/documentation/appkit/nstextinputclient/1438246-setmarkedtext
    setMarkedText_selectedRange_replacementRange(string: NSTextInputClient, selectedRange: NSRange, replacementRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputclient/1438239-unmarktext
    unmarkText():void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputclient/1438228-validattributesformarkedtext
    validAttributesForMarkedText():NSAttributedStringKey;
    // doc://com.apple.documentation/documentation/appkit/nstextinputclient/1438238-attributedsubstringforproposedra
    attributedSubstringForProposedRange_actualRange(range: NSRange, actualRange: NSRangePointer):NSAttributedString;
    // doc://com.apple.documentation/documentation/appkit/nstextinputclient/1438258-inserttext
    insertText_replacementRange(string: NSTextInputClient, replacementRange: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputclient/1438244-characterindexforpoint
    characterIndexForPoint(point: NSPoint):NSUInteger;
    // doc://com.apple.documentation/documentation/appkit/nstextinputclient/1438240-firstrectforcharacterrange
    firstRectForCharacterRange_actualRange(range: NSRange, actualRange: NSRangePointer):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nstextinputclient/1438256-docommandbyselector
    doCommandBySelector(selector: SEL):void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputclient/1438232-attributedstring
    attributedString():NSAttributedString;
    // doc://com.apple.documentation/documentation/appkit/nstextinputclient/1438236-fractionofdistancethroughglyphfo
    fractionOfDistanceThroughGlyphForPoint(point: NSPoint):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nstextinputclient/1438254-baselinedeltaforcharacteratindex
    baselineDeltaForCharacterAtIndex(anIndex: NSUInteger):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nstextinputclient/1438248-windowlevel
    windowLevel():NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nstextinputclient/1438252-drawsverticallyforcharacteratind
    drawsVerticallyForCharacterAtIndex(charIndex: NSUInteger):BOOL;
  }
}
declare namespace cocoascript {
  /**
   * An object that represents the Cocoa text input system.
   * doc://com.apple.documentation/documentation/appkit/nstextinputcontext
   */
  interface NSTextInputContext extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstextinputcontext/1532777-initwithclient
    initWithClient(client: NSTextInputClient):NSTextInputContext;
    // doc://com.apple.documentation/documentation/appkit/nstextinputcontext/1527409-currentinputcontext
    currentInputContext(): NSTextInputContext;
    setCurrentInputContext(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputcontext/1533583-client
    client(): NSTextInputClient;
    setClient(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputcontext/1534420-acceptsglyphinfo
    acceptsGlyphInfo(): BOOL;
    setAcceptsGlyphInfo(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputcontext/1532284-allowedinputsourcelocales
    allowedInputSourceLocales(): string | NSString;
    setAllowedInputSourceLocales(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputcontext/1534378-activate
    activate():void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputcontext/1535505-deactivate
    deactivate():void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputcontext/1528602-handleevent
    handleEvent(event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextinputcontext/1528752-discardmarkedtext
    discardMarkedText():void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputcontext/1535165-invalidatecharactercoordinates
    invalidateCharacterCoordinates():void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputcontext/1529156-keyboardinputsources
    keyboardInputSources(): NSTextInputSourceIdentifier;
    setKeyboardInputSources(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputcontext/1533970-selectedkeyboardinputsource
    selectedKeyboardInputSource(): NSTextInputSourceIdentifier;
    setSelectedKeyboardInputSource(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextinputcontext/1526644-localizednameforinputsource
    localizedNameForInputSource(inputSourceIdentifier: NSTextInputSourceIdentifier):string | NSString;
    //
    alloc():NSTextInputContext;
    //
    init():NSTextInputContext;
  }
}

declare const NSTextInputContext: cocoascript.NSTextInputContext;
// doc://com.apple.documentation/documentation/appkit/nstextinputcontextkeyboardselectiondidchangenotification
declare const NSTextInputContextKeyboardSelectionDidChangeNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * A list of alternative strings for a piece of text.
   * doc://com.apple.documentation/documentation/appkit/nstextalternatives
   */
  interface NSTextAlternatives extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstextalternatives/1529445-initwithprimarystring
    initWithPrimaryString_alternativeStrings(primaryString: string | NSString, alternativeStrings: string | NSString):NSTextAlternatives;
    // doc://com.apple.documentation/documentation/appkit/nstextalternatives/1526166-primarystring
    primaryString(): string | NSString;
    setPrimaryString(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextalternatives/1527585-alternativestrings
    alternativeStrings(): string | NSString;
    setAlternativeStrings(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextalternatives/1525721-noteselectedalternativestring
    noteSelectedAlternativeString(alternativeString: string | NSString):void;
    //
    alloc():NSTextAlternatives;
    //
    init():NSTextAlternatives;
  }
}

declare const NSTextAlternatives: cocoascript.NSTextAlternatives;
// doc://com.apple.documentation/documentation/appkit/nstextalternativesselectedalternativestringnotification
declare const NSTextAlternativesSelectedAlternativeStringNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * The representation of a font in an app.
   * doc://com.apple.documentation/documentation/appkit/nsfont
   */
  interface NSFont extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsfont/1525977-fontwithname
    fontWithName_size(fontName: string | NSString, fontSize: CGFloat):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1525386-fontwithdescriptor
    fontWithDescriptor_size(fontDescriptor: NSFontDescriptor, fontSize: CGFloat):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1525775-fontwithdescriptor
    fontWithDescriptor_textTransform(fontDescriptor: NSFontDescriptor, textTransform: NSAffineTransform):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1530751-fontwithname
    fontWithName_matrix(fontName: string | NSString, fontMatrix: CGFloat):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1524559-userfontofsize
    userFontOfSize(fontSize: CGFloat):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1531381-userfixedpitchfontofsize
    userFixedPitchFontOfSize(fontSize: CGFloat):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/3553195-preferredfontfortextstyle
    preferredFontForTextStyle_options(style: NSFontTextStyle, options: NSFont):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1530094-systemfontofsize
    systemFontOfSize(fontSize: CGFloat):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1524930-systemfontofsize
    systemFontOfSize_weight(fontSize: CGFloat, weight: NSFontWeight):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1533549-boldsystemfontofsize
    boldSystemFontOfSize(fontSize: CGFloat):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/3042659-monospacedsystemfontofsize
    monospacedSystemFontOfSize_weight(fontSize: CGFloat, weight: NSFontWeight):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1528205-monospaceddigitsystemfontofsize
    monospacedDigitSystemFontOfSize_weight(fontSize: CGFloat, weight: NSFontWeight):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1531931-systemfontsize
    systemFontSize(): CGFloat;
    setSystemFontSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1535612-smallsystemfontsize
    smallSystemFontSize(): CGFloat;
    setSmallSystemFontSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1528213-labelfontofsize
    labelFontOfSize(fontSize: CGFloat):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1525777-messagefontofsize
    messageFontOfSize(fontSize: CGFloat):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1534194-menubarfontofsize
    menuBarFontOfSize(fontSize: CGFloat):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1533068-menufontofsize
    menuFontOfSize(fontSize: CGFloat):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1527070-controlcontentfontofsize
    controlContentFontOfSize(fontSize: CGFloat):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1530200-titlebarfontofsize
    titleBarFontOfSize(fontSize: CGFloat):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1535462-palettefontofsize
    paletteFontOfSize(fontSize: CGFloat):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1527704-tooltipsfontofsize
    toolTipsFontOfSize(fontSize: CGFloat):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1534629-labelfontsize
    labelFontSize(): CGFloat;
    setLabelFontSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1529747-systemfontsizeforcontrolsize
    systemFontSizeForControlSize(controlSize: NSControlSize):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1531373-set
    set():void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1534538-setincontext
    setInContext(graphicsContext: NSGraphicsContext):void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1524511-pointsize
    pointSize(): CGFloat;
    setPointSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1535912-coveredcharacterset
    coveredCharacterSet(): NSCharacterSet;
    setCoveredCharacterSet(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1530476-fontdescriptor
    fontDescriptor(): NSFontDescriptor;
    setFontDescriptor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1529210-fixedpitch
    fixedPitch(): BOOL;
    setFixedPitch(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1527635-mostcompatiblestringencoding
    mostCompatibleStringEncoding(): NSStringEncoding;
    setMostCompatibleStringEncoding(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1533968-numberofglyphs
    numberOfGlyphs(): NSUInteger;
    setNumberOfGlyphs(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1531660-displayname
    displayName(): string | NSString;
    setDisplayName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1529585-familyname
    familyName(): string | NSString;
    setFamilyName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1526183-fontname
    fontName(): string | NSString;
    setFontName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1526068-setuserfont
    setUserFont(font: NSFont):void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1529050-setuserfixedpitchfont
    setUserFixedPitchFont(font: NSFont):void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1534644-vertical
    vertical(): BOOL;
    setVertical(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/1535152-verticalfont
    verticalFont(): NSFont;
    setVerticalFont(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfont/3667454-fontwithsize
    fontWithSize(fontSize: CGFloat):NSFont;
    //
    alloc():NSFont;
    //
    init():NSFont;
  }
}

declare const NSFont: cocoascript.NSFont;
// doc://com.apple.documentation/documentation/appkit/nsantialiasthresholdchangednotification
declare const NSAntialiasThresholdChangedNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsfontsetchangednotification
declare const NSFontSetChangedNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * The center of activity for the font-conversion system.
   * doc://com.apple.documentation/documentation/appkit/nsfontmanager
   */
  interface NSFontManager extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462360-sharedfontmanager
    sharedFontManager(): NSFontManager;
    setSharedFontManager(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462402-setfontmanagerfactory
    setFontManagerFactory(factoryId: Class):void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462388-setfontpanelfactory
    setFontPanelFactory(factoryId: Class):void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462372-availablefonts
    availableFonts(): string | NSString;
    setAvailableFonts(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462323-availablefontfamilies
    availableFontFamilies(): string | NSString;
    setAvailableFontFamilies(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462329-availablefontnameswithtraits
    availableFontNamesWithTraits(someTraits: NSFontTraitMask):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462316-availablemembersoffontfamily
    availableMembersOfFontFamily(fam: string | NSString):NSArray;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462398-setselectedfont
    setSelectedFont_isMultiple(fontObj: NSFont, flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462268-selectedfont
    selectedFont(): NSFont;
    setSelectedFont(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462376-multiple
    multiple(): BOOL;
    setMultiple(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462386-sendaction
    sendAction():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462277-localizednameforfamily
    localizedNameForFamily_face(family: string | NSString, faceKey: string | NSString):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462320-addfonttrait
    addFontTrait(sender: NSFontManager):void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462276-removefonttrait
    removeFontTrait(sender: NSFontManager):void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462353-modifyfont
    modifyFont(sender: NSFontManager):void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462355-modifyfontviapanel
    modifyFontViaPanel(sender: NSFontManager):void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462392-orderfrontstylespanel
    orderFrontStylesPanel(sender: NSFontManager):void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462384-orderfrontfontpanel
    orderFrontFontPanel(sender: NSFontManager):void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462293-convertfont
    convertFont(fontObj: NSFont):NSFont;
    // doc://com.apple.documentation/documentation/objectivec/nsobject/1462311-changefont
    changeFont(sender: NSFontManager):void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462309-convertfont
    convertFont_toFace(fontObj: NSFont, typeface: string | NSString):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462318-convertfont
    convertFont_toFamily(fontObj: NSFont, family: string | NSString):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462345-convertfont
    convertFont_toHaveTrait(fontObj: NSFont, trait: NSFontTraitMask):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462364-convertfont
    convertFont_toNotHaveTrait(fontObj: NSFont, trait: NSFontTraitMask):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462378-convertfont
    convertFont_toSize(fontObj: NSFont, size: CGFloat):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462321-convertweight
    convertWeight_ofFont(upFlag: BOOL, fontObj: NSFont):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462362-currentfontaction
    currentFontAction(): NSFontAction;
    setCurrentFontAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462274-convertfonttraits
    convertFontTraits(traits: NSFontTraitMask):NSFontTraitMask;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462332-fontwithfamily
    fontWithFamily_traits_weight_size(family: string | NSString, traits: NSFontTraitMask, weight: NSInteger, size: CGFloat):NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462374-traitsoffont
    traitsOfFont(fontObj: NSFont):NSFontTraitMask;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462327-fontnamed
    fontNamed_hasTraits(fName: string | NSString, someTraits: NSFontTraitMask):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462351-weightoffont
    weightOfFont(fontObj: NSFont):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462341-enabled
    enabled(): BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462283-fontpanel
    fontPanel(create: BOOL):NSFontPanel;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462381-setfontmenu
    setFontMenu(newMenu: NSMenu):void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462337-fontmenu
    fontMenu(create: BOOL):NSMenu;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462349-action
    action(): SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462380-target
    target(): id;
    setTarget(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462270-setselectedattributes
    setSelectedAttributes_isMultiple(attributes: NSFontManager, flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsfontmanager/1462295-convertattributes
    convertAttributes(attributes: NSFontManager):NSFontManager;
    //
    alloc():NSFontManager;
    //
    init():NSFontManager;
  }
}

declare const NSFontManager: cocoascript.NSFontManager;
declare namespace cocoascript {
  /**
   * A dictionary of attributes that describe a font.
   * doc://com.apple.documentation/documentation/appkit/nsfontdescriptor
   */
  interface NSFontDescriptor extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/3553196-preferredfontdescriptorfortextst
    preferredFontDescriptorForTextStyle_options(style: NSFontTextStyle, options: NSFontDescriptor):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469856-fontdescriptorwithfontattributes
    fontDescriptorWithFontAttributes(attributes: NSFontDescriptor):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469942-fontdescriptorwithname
    fontDescriptorWithName_matrix(fontName: string | NSString, matrix: NSAffineTransform):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469912-fontdescriptorwithname
    fontDescriptorWithName_size(fontName: string | NSString, size: CGFloat):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469991-initwithfontattributes
    initWithFontAttributes(attributes: NSFontDescriptor):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469987-fontdescriptorbyaddingattributes
    fontDescriptorByAddingAttributes(attributes: NSFontDescriptor):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469928-fontdescriptorwithface
    fontDescriptorWithFace(newFace: string | NSString):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469866-fontdescriptorwithfamily
    fontDescriptorWithFamily(newFamily: string | NSString):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469983-fontdescriptorwithmatrix
    fontDescriptorWithMatrix(matrix: NSAffineTransform):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469835-fontdescriptorwithsize
    fontDescriptorWithSize(newPointSize: CGFloat):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469843-fontdescriptorwithsymbolictraits
    fontDescriptorWithSymbolicTraits(symbolicTraits: NSFontDescriptorSymbolicTraits):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/3152380-fontdescriptorwithdesign
    fontDescriptorWithDesign(design: NSFontDescriptorSystemDesign):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469985-matchingfontdescriptorswithmanda
    matchingFontDescriptorsWithMandatoryKeys(mandatoryKeys: NSFontDescriptorAttributeName):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469839-matchingfontdescriptorwithmandat
    matchingFontDescriptorWithMandatoryKeys(mandatoryKeys: NSFontDescriptorAttributeName):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469831-fontattributes
    fontAttributes(): id;
    setFontAttributes(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469837-objectforkey
    objectForKey(attribute: NSFontDescriptorAttributeName):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469950-matrix
    matrix(): NSAffineTransform;
    setMatrix(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469829-pointsize
    pointSize(): CGFloat;
    setPointSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469948-postscriptname
    postscriptName(): string | NSString;
    setPostscriptName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/1469858-symbolictraits
    symbolicTraits(): NSFontDescriptorSymbolicTraits;
    setSymbolicTraits(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontdescriptor/2890793-requiresfontassetrequest
    requiresFontAssetRequest(): BOOL;
    setRequiresFontAssetRequest(): void;
    //
    alloc():NSFontDescriptor;
    //
    init():NSFontDescriptor;
  }
}

declare const NSFontDescriptor: cocoascript.NSFontDescriptor;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfonttraitmask
  type NSFontTraitMask = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontfamilyclass
  type NSFontFamilyClass = number;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontdescriptorsymbolictraits
  type NSFontDescriptorSymbolicTraits = number;
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsfontassetrequest
   */
  interface NSFontAssetRequest extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsfontassetrequest/2890807-initwithfontdescriptors
    initWithFontDescriptors_options(fontDescriptors: NSFontDescriptor, options: NSFontAssetRequestOptions):NSFontAssetRequest;
    // doc://com.apple.documentation/documentation/appkit/nsfontassetrequest/2890808-downloadfontassetswithcompletion
    downloadFontAssetsWithCompletionHandler(completionHandler: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nsfontassetrequest/2890802-downloadedfontdescriptors
    downloadedFontDescriptors(): NSFontDescriptor;
    setDownloadedFontDescriptors(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontassetrequest/2890804-progress
    progress(): NSProgress;
    setProgress(): void;
    //
    alloc():NSFontAssetRequest;
    //
    init():NSFontAssetRequest;
  }
}

declare const NSFontAssetRequest: cocoascript.NSFontAssetRequest;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontsymbolictraits
  type NSFontSymbolicTraits = number;
}
declare namespace cocoascript {
  /**
   * A font collection, which is a group of font descriptors taken together as a single object.
   * doc://com.apple.documentation/documentation/appkit/nsfontcollection
   */
  interface NSFontCollection extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsfontcollection/1497467-fontcollectionwithdescriptors
    fontCollectionWithDescriptors(queryDescriptors: NSFontDescriptor):NSFontCollection;
    // doc://com.apple.documentation/documentation/appkit/nsfontcollection/1497481-fontcollectionwithlocale
    fontCollectionWithLocale(locale: NSLocale):NSFontCollection;
    // doc://com.apple.documentation/documentation/appkit/nsfontcollection/1497514-fontcollectionwithname
    fontCollectionWithName(name: NSFontCollectionName):NSFontCollection;
    // doc://com.apple.documentation/documentation/appkit/nsfontcollection/1497475-fontcollectionwithname
    fontCollectionWithName_visibility(name: NSFontCollectionName, visibility: NSFontCollectionVisibility):NSFontCollection;
    // doc://com.apple.documentation/documentation/appkit/nsfontcollection/1497473-fontcollectionwithallavailablede
    fontCollectionWithAllAvailableDescriptors(): NSFontCollection;
    setFontCollectionWithAllAvailableDescriptors(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontcollection/1497521-renamefontcollectionwithname
    renameFontCollectionWithName_visibility_toName_error(name: NSFontCollectionName, visibility: NSFontCollectionVisibility, name2: NSFontCollectionName, error: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsfontcollection/1497512-showfontcollection
    showFontCollection_withName_visibility_error(collection: NSFontCollection, name: NSFontCollectionName, visibility: NSFontCollectionVisibility, error: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsfontcollection/1497459-hidefontcollectionwithname
    hideFontCollectionWithName_visibility_error(name: NSFontCollectionName, visibility: NSFontCollectionVisibility, error: NSError):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsfontcollection/1497477-allfontcollectionnames
    allFontCollectionNames(): NSFontCollectionName;
    setAllFontCollectionNames(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontcollection/1497523-matchingdescriptors
    matchingDescriptors(): NSFontDescriptor;
    setMatchingDescriptors(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontcollection/1497496-matchingdescriptorsforfamily
    matchingDescriptorsForFamily(family: string | NSString):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontcollection/1497522-matchingdescriptorsforfamily
    matchingDescriptorsForFamily_options(family: string | NSString, options: NSNumber):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontcollection/1497510-matchingdescriptorswithoptions
    matchingDescriptorsWithOptions(options: NSNumber):NSFontDescriptor;
    // doc://com.apple.documentation/documentation/appkit/nsfontcollection/1497441-querydescriptors
    queryDescriptors(): NSFontDescriptor;
    setQueryDescriptors(): void;
    // doc://com.apple.documentation/documentation/appkit/nsfontcollection/1497456-exclusiondescriptors
    exclusionDescriptors(): NSFontDescriptor;
    setExclusionDescriptors(): void;
    //
    alloc():NSFontCollection;
    //
    init():NSFontCollection;
  }
}

declare const NSFontCollection: cocoascript.NSFontCollection;
declare namespace cocoascript {
  /**
   * A mutable collection of font descriptors taken together as a single object.
   * doc://com.apple.documentation/documentation/appkit/nsmutablefontcollection
   */
  interface NSMutableFontCollection extends NSFontCollection {
    // doc://com.apple.documentation/documentation/appkit/nsmutablefontcollection/1497450-fontcollectionwithdescriptors
    fontCollectionWithDescriptors(queryDescriptors: NSFontDescriptor):NSMutableFontCollection;
    // doc://com.apple.documentation/documentation/appkit/nsmutablefontcollection/1497479-fontcollectionwithlocale
    fontCollectionWithLocale(locale: NSLocale):NSMutableFontCollection;
    // doc://com.apple.documentation/documentation/appkit/nsmutablefontcollection/1497503-fontcollectionwithname
    fontCollectionWithName(name: NSFontCollectionName):NSMutableFontCollection;
    // doc://com.apple.documentation/documentation/appkit/nsmutablefontcollection/1497453-fontcollectionwithname
    fontCollectionWithName_visibility(name: NSFontCollectionName, visibility: NSFontCollectionVisibility):NSMutableFontCollection;
    // doc://com.apple.documentation/documentation/appkit/nsmutablefontcollection/1497506-fontcollectionwithallavailablede
    fontCollectionWithAllAvailableDescriptors(): NSMutableFontCollection;
    setFontCollectionWithAllAvailableDescriptors(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmutablefontcollection/1497457-querydescriptors
    queryDescriptors(): NSFontDescriptor;
    setQueryDescriptors(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmutablefontcollection/1497446-addqueryfordescriptors
    addQueryForDescriptors(descriptors: NSFontDescriptor):void;
    // doc://com.apple.documentation/documentation/appkit/nsmutablefontcollection/1497471-removequeryfordescriptors
    removeQueryForDescriptors(descriptors: NSFontDescriptor):void;
    // doc://com.apple.documentation/documentation/appkit/nsmutablefontcollection/1497442-exclusiondescriptors
    exclusionDescriptors(): NSFontDescriptor;
    setExclusionDescriptors(): void;
    //
    alloc():NSMutableFontCollection;
    //
    init():NSMutableFontCollection;
  }
}

declare const NSMutableFontCollection: cocoascript.NSMutableFontCollection;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontcollectionoptions
  type NSFontCollectionOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * The
   * doc://com.apple.documentation/documentation/appkit/nsformcell
   */
  interface NSFormCell extends NSActionCell {
    // doc://com.apple.documentation/documentation/appkit/nsformcell/1643347-initwithcoder
    initWithCoder(coder: NSCoder):NSFormCell;
    // doc://com.apple.documentation/documentation/appkit/nsformcell/1526669-inittextcell
    initTextCell(string: string | NSString):NSFormCell;
    // doc://com.apple.documentation/documentation/appkit/nsformcell/1529440-opaque
    opaque(): BOOL;
    setOpaque(): void;
    // doc://com.apple.documentation/documentation/appkit/nsformcell/1527410-attributedtitle
    attributedTitle(): NSAttributedString;
    setAttributedTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsformcell/1526646-title
    title(): string | NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsformcell/1525716-titlealignment
    titleAlignment(): NSTextAlignment;
    setTitleAlignment(): void;
    // doc://com.apple.documentation/documentation/appkit/nsformcell/1526419-titlebasewritingdirection
    titleBaseWritingDirection(): NSWritingDirection;
    setTitleBaseWritingDirection(): void;
    // doc://com.apple.documentation/documentation/appkit/nsformcell/1525255-titlefont
    titleFont(): NSFont;
    setTitleFont(): void;
    // doc://com.apple.documentation/documentation/appkit/nsformcell/1535464-titlewidth
    titleWidth(): CGFloat;
    setTitleWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nsformcell/1560758-settitlewithmnemonic
    setTitleWithMnemonic(stringWithAmpersand: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsformcell/1535914-placeholderattributedstring
    placeholderAttributedString(): NSAttributedString;
    setPlaceholderAttributedString(): void;
    // doc://com.apple.documentation/documentation/appkit/nsformcell/1534043-placeholderstring
    placeholderString(): string | NSString;
    setPlaceholderString(): void;
    // doc://com.apple.documentation/documentation/appkit/nsformcell/1527483-preferredtextfieldwidth
    preferredTextFieldWidth(): CGFloat;
    setPreferredTextFieldWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nsformcell/1526921-titlewidth
    titleWidth(size: NSSize):CGFloat;
    //
    alloc():NSFormCell;
    //
    init():NSFormCell;
  }
}

declare const NSFormCell: cocoascript.NSFormCell;
// doc://com.apple.documentation/documentation/appkit/nsprintsavejob
declare const NSPrintSaveJob: NSPrintJobDispositionValue;
declare namespace cocoascript {
  /**
   * A user interface element that contains and displays text, scroll, and browser views, in addition to other view subclasses.
   * doc://com.apple.documentation/documentation/appkit/nsdrawer
   */
  interface NSDrawer extends NSResponder {
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438262-initwithcontentsize
    initWithContentSize_preferredEdge(contentSize: NSSize, edge: NSRectEdge):NSDrawer;
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438304-delegate
    delegate(): NSDrawerDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438283-close
    close():void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438299-close
    close(sender: NSDrawer):void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438279-open
    open():void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438275-open
    open(sender: NSDrawer):void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438308-openonedge
    openOnEdge(edge: NSRectEdge):void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438264-toggle
    toggle(sender: NSDrawer):void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438287-state
    state(): NSInteger;
    setState(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438302-contentsize
    contentSize(): NSSize;
    setContentSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438306-leadingoffset
    leadingOffset(): CGFloat;
    setLeadingOffset(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438266-maxcontentsize
    maxContentSize(): NSSize;
    setMaxContentSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438291-mincontentsize
    minContentSize(): NSSize;
    setMinContentSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438277-trailingoffset
    trailingOffset(): CGFloat;
    setTrailingOffset(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438320-edge
    edge(): NSRectEdge;
    setEdge(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438272-preferrededge
    preferredEdge(): NSRectEdge;
    setPreferredEdge(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438260-contentview
    contentView(): NSView;
    setContentView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawer/1438312-parentwindow
    parentWindow(): NSWindow;
    setParentWindow(): void;
    //
    alloc():NSDrawer;
    //
    init():NSDrawer;
  }
}

declare const NSDrawer: cocoascript.NSDrawer;
// doc://com.apple.documentation/documentation/appkit/nsdrawerdidclosenotification
declare const NSDrawerDidCloseNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsdrawerdidopennotification
declare const NSDrawerDidOpenNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsdrawerwillclosenotification
declare const NSDrawerWillCloseNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsdrawerwillopennotification
declare const NSDrawerWillOpenNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * An object that handles the measurement and display of a single menu item in its encompassing frame.
   * doc://com.apple.documentation/documentation/appkit/nsmenuitemcell
   */
  interface NSMenuItemCell extends NSButtonCell {
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1641971-initwithcoder
    initWithCoder(coder: NSCoder):NSMenuItemCell;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1641970-inittextcell
    initTextCell(string: string | NSString):NSMenuItemCell;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498871-menuitem
    menuItem(): NSMenuItem;
    setMenuItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498862-calcsize
    calcSize():void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498869-needssizing
    needsSizing(): BOOL;
    setNeedsSizing(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498877-imagewidth
    imageWidth(): CGFloat;
    setImageWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498865-titlewidth
    titleWidth(): CGFloat;
    setTitleWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498874-keyequivalentwidth
    keyEquivalentWidth(): CGFloat;
    setKeyEquivalentWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498879-stateimagewidth
    stateImageWidth(): CGFloat;
    setStateImageWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498859-keyequivalentrectforbounds
    keyEquivalentRectForBounds(cellFrame: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498855-stateimagerectforbounds
    stateImageRectForBounds(cellFrame: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498867-titlerectforbounds
    titleRectForBounds(cellFrame: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498863-drawborderandbackgroundwithframe
    drawBorderAndBackgroundWithFrame_inView(cellFrame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498857-drawimagewithframe
    drawImageWithFrame_inView(cellFrame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498851-drawkeyequivalentwithframe
    drawKeyEquivalentWithFrame_inView(cellFrame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498876-drawseparatoritemwithframe
    drawSeparatorItemWithFrame_inView(cellFrame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498854-drawstateimagewithframe
    drawStateImageWithFrame_inView(cellFrame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498853-drawtitlewithframe
    drawTitleWithFrame_inView(cellFrame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498861-needsdisplay
    needsDisplay(): BOOL;
    setNeedsDisplay(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenuitemcell/1498882-tag
    tag(): NSInteger;
    setTag(): void;
    //
    alloc():NSMenuItemCell;
    //
    init():NSMenuItemCell;
  }
}

declare const NSMenuItemCell: cocoascript.NSMenuItemCell;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsinputmanager
   */
  interface NSInputManager extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsinputmanager/1412828-handlemouseevent
    handleMouseEvent(mouseEvent: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsinputmanager/1412849-image
    image():NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsinputmanager/1412829-initwithname
    initWithName_host(inputServerName: string | NSString, hostName: string | NSString):NSInputManager;
    // doc://com.apple.documentation/documentation/appkit/nsinputmanager/1412835-language
    language():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsinputmanager/1412819-localizedinputmanagername
    localizedInputManagerName():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsinputmanager/1412817-markedtextabandoned
    markedTextAbandoned(cli: NSInputManager):void;
    // doc://com.apple.documentation/documentation/appkit/nsinputmanager/1412846-markedtextselectionchanged
    markedTextSelectionChanged_client(newSel: NSRange, cli: NSInputManager):void;
    // doc://com.apple.documentation/documentation/appkit/nsinputmanager/1412844-server
    server():NSInputServer;
    // doc://com.apple.documentation/documentation/appkit/nsinputmanager/1412818-wantstodelaytextchangenotificati
    wantsToDelayTextChangeNotifications():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsinputmanager/1412815-wantstohandlemouseevents
    wantsToHandleMouseEvents():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsinputmanager/1412833-wantstointerpretallkeystrokes
    wantsToInterpretAllKeystrokes():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsinputmanager/1412820-currentinputmanager
    currentInputManager():NSInputManager;
    // doc://com.apple.documentation/documentation/appkit/nsinputmanager/1412827-cycletonextinputlanguage
    cycleToNextInputLanguage(sender: NSInputManager):void;
    // doc://com.apple.documentation/documentation/appkit/nsinputmanager/1412826-cycletonextinputserverinlanguage
    cycleToNextInputServerInLanguage(sender: NSInputManager):void;
    //
    alloc():NSInputManager;
    //
    init():NSInputManager;
  }
}

declare const NSInputManager: cocoascript.NSInputManager;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsinputserver
   */
  interface NSInputServer extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsinputserver/1538553-initwithdelegate
    initWithDelegate_name(delegate: NSInputServer, name: string | NSString):NSInputServer;
    //
    alloc():NSInputServer;
    //
    init():NSInputServer;
  }
}

declare const NSInputServer: cocoascript.NSInputServer;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsinputserviceprovider
   */
  interface NSInputServiceProvider {
    // doc://com.apple.documentation/documentation/appkit/nsinputserviceprovider/1538522-activeconversationchanged
    activeConversationChanged_toNewConversation(sender: NSInputServiceProvider, newConversation: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsinputserviceprovider/1538558-activeconversationwillchange
    activeConversationWillChange_fromOldConversation(sender: NSInputServiceProvider, oldConversation: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsinputserviceprovider/1538534-canbedisabled
    canBeDisabled():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsinputserviceprovider/1538533-docommandbyselector
    doCommandBySelector_client(selector: SEL, sender: NSInputServiceProvider):void;
    // doc://com.apple.documentation/documentation/appkit/nsinputserviceprovider/1538525-inputclientbecomeactive
    inputClientBecomeActive(sender: NSInputServiceProvider):void;
    // doc://com.apple.documentation/documentation/appkit/nsinputserviceprovider/1538526-inputclientdisabled
    inputClientDisabled(sender: NSInputServiceProvider):void;
    // doc://com.apple.documentation/documentation/appkit/nsinputserviceprovider/1538523-inputclientenabled
    inputClientEnabled(sender: NSInputServiceProvider):void;
    // doc://com.apple.documentation/documentation/appkit/nsinputserviceprovider/1538550-inputclientresignactive
    inputClientResignActive(sender: NSInputServiceProvider):void;
    // doc://com.apple.documentation/documentation/appkit/nsinputserviceprovider/1538536-inserttext
    insertText_client(string: NSInputServiceProvider, sender: NSInputServiceProvider):void;
    // doc://com.apple.documentation/documentation/appkit/nsinputserviceprovider/1538531-markedtextabandoned
    markedTextAbandoned(sender: NSInputServiceProvider):void;
    // doc://com.apple.documentation/documentation/appkit/nsinputserviceprovider/1538548-markedtextselectionchanged
    markedTextSelectionChanged_client(newSel: NSRange, sender: NSInputServiceProvider):void;
    // doc://com.apple.documentation/documentation/appkit/nsinputserviceprovider/1538551-terminate
    terminate(sender: NSInputServiceProvider):void;
    // doc://com.apple.documentation/documentation/appkit/nsinputserviceprovider/1538560-wantstodelaytextchangenotificati
    wantsToDelayTextChangeNotifications():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsinputserviceprovider/1538538-wantstohandlemouseevents
    wantsToHandleMouseEvents():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsinputserviceprovider/1538546-wantstointerpretallkeystrokes
    wantsToInterpretAllKeystrokes():BOOL;
  }
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsinputservermousetracker
   */
  interface NSInputServerMouseTracker {
    // doc://com.apple.documentation/documentation/appkit/nsinputservermousetracker/1538528-mousedownoncharacterindex
    mouseDownOnCharacterIndex_atCoordinate_withModifier_client(index: NSUInteger, point: NSPoint, flags: NSUInteger, sender: NSInputServerMouseTracker):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsinputservermousetracker/1538554-mousedraggedoncharacterindex
    mouseDraggedOnCharacterIndex_atCoordinate_withModifier_client(index: NSUInteger, point: NSPoint, flags: NSUInteger, sender: NSInputServerMouseTracker):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsinputservermousetracker/1538539-mouseuponcharacterindex
    mouseUpOnCharacterIndex_atCoordinate_withModifier_client(index: NSUInteger, point: NSPoint, flags: NSUInteger, sender: NSInputServerMouseTracker):void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that drawer delegates implement to open, close, and resize the drawer.
   * doc://com.apple.documentation/documentation/appkit/nsdrawerdelegate
   */
  interface NSDrawerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsdrawerdelegate/1438318-drawershouldopen
    drawerShouldOpen(sender: NSDrawer):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdrawerdelegate/1438325-drawerwillopen
    drawerWillOpen(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawerdelegate/1438285-drawerdidopen
    drawerDidOpen(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawerdelegate/1438289-drawershouldclose
    drawerShouldClose(sender: NSDrawer):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsdrawerdelegate/1438314-drawerwillclose
    drawerWillClose(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawerdelegate/1438273-drawerdidclose
    drawerDidClose(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsdrawerdelegate/1438293-drawerwillresizecontents
    drawerWillResizeContents_toSize(sender: NSDrawer, contentSize: NSSize):NSSize;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsinterfacestyle
  type NSInterfaceStyle = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * An item in a window’s toolbar.
   * doc://com.apple.documentation/documentation/appkit/nstoolbaritem
   */
  interface NSToolbarItem extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1534084-initwithitemidentifier
    initWithItemIdentifier(itemIdentifier: NSToolbarItemIdentifier):NSToolbarItem;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/3375792-itemwithitemidentifier
    itemWithItemIdentifier_barButtonItem(itemIdentifier: NSToolbarItemIdentifier, barButtonItem: UIBarButtonItem):NSToolbarItem;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1524394-itemidentifier
    itemIdentifier(): NSToolbarItemIdentifier;
    setItemIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1532976-toolbar
    toolbar(): NSToolbar;
    setToolbar(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1535127-label
    label(): string | NSString;
    setLabel(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1525421-palettelabel
    paletteLabel(): string | NSString;
    setPaletteLabel(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1524627-tooltip
    toolTip(): string | NSString;
    setToolTip(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/3237225-title
    title(): string | NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1532562-menuformrepresentation
    menuFormRepresentation(): NSMenuItem;
    setMenuFormRepresentation(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/3375793-itemmenuformrepresentation
    itemMenuFormRepresentation(): UIMenuElement;
    setItemMenuFormRepresentation(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1524618-tag
    tag(): NSInteger;
    setTag(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1525982-target
    target(): id;
    setTarget(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1525723-action
    action(): SEL;
    setAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/3237224-bordered
    bordered(): BOOL;
    setBordered(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/3622481-navigational
    navigational(): BOOL;
    setNavigational(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1524277-enabled
    enabled(): BOOL;
    setEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1527749-image
    image(): NSImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1534039-view
    view(): NSView;
    setView(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1531777-minsize
    minSize(): NSSize;
    setMinSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1526451-maxsize
    maxSize(): NSSize;
    setMaxSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1527947-visibilitypriority
    visibilityPriority(): NSToolbarItemVisibilityPriority;
    setVisibilityPriority(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1525295-validate
    validate():void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1524463-autovalidates
    autovalidates(): BOOL;
    setAutovalidates(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritem/1530116-allowsduplicatesintoolbar
    allowsDuplicatesInToolbar(): BOOL;
    setAllowsDuplicatesInToolbar(): void;
    //
    alloc():NSToolbarItem;
    //
    init():NSToolbarItem;
  }
}

declare const NSToolbarItem: cocoascript.NSToolbarItem;
declare namespace cocoascript {
  /**
   * A set of optional methods implemented by toolbar delegates to configure the toolbar and respond to changes.
   * doc://com.apple.documentation/documentation/appkit/nstoolbardelegate
   */
  interface NSToolbarDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstoolbardelegate/1516985-toolbar
    toolbar_itemForItemIdentifier_willBeInsertedIntoToolbar(toolbar: NSToolbar, itemIdentifier: NSToolbarItemIdentifier, flag: BOOL):NSToolbarItem;
    // doc://com.apple.documentation/documentation/appkit/nstoolbardelegate/1516995-toolbaralloweditemidentifiers
    toolbarAllowedItemIdentifiers(toolbar: NSToolbar):NSToolbarItemIdentifier;
    // doc://com.apple.documentation/documentation/appkit/nstoolbardelegate/1516944-toolbardefaultitemidentifiers
    toolbarDefaultItemIdentifiers(toolbar: NSToolbar):NSToolbarItemIdentifier;
    // doc://com.apple.documentation/documentation/appkit/nstoolbardelegate/1516981-toolbarselectableitemidentifiers
    toolbarSelectableItemIdentifiers(toolbar: NSToolbar):NSToolbarItemIdentifier;
    // doc://com.apple.documentation/documentation/appkit/nstoolbardelegate/1516964-toolbarwilladditem
    toolbarWillAddItem(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbardelegate/1516970-toolbardidremoveitem
    toolbarDidRemoveItem(notification: NSNotification):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstoolbaridentifier
  type NSToolbarIdentifier = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstoolbardisplaymode
  type NSToolbarDisplayMode = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstoolbarsizemode
  type NSToolbarSizeMode = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * Validation of a toolbar item.
   * doc://com.apple.documentation/documentation/appkit/nstoolbaritemvalidation
   */
  interface NSToolbarItemValidation extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritemvalidation/3005292-validatetoolbaritem
    validateToolbarItem(item: NSToolbarItem):BOOL;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstouchbaritemidentifier
  type NSTouchBarItemIdentifier = cocoascript.NSString;
}
// doc://com.apple.documentation/documentation/appkit/nstouchbaritemidentifierotheritemsproxy
declare const NSTouchBarItemIdentifierOtherItemsProxy: NSTouchBarItemIdentifier;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstouchtypemask
  type NSTouchTypeMask = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstouchtype
  type NSTouchType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * A display of a bar representing a continuous range of numerical values and a knob representing the currently selected value.
   * doc://com.apple.documentation/documentation/appkit/nsslider
   */
  interface NSSlider extends NSControl {
    // doc://com.apple.documentation/documentation/appkit/nsslider/1644494-sliderwithtarget
    sliderWithTarget_action(target: NSSlider, action: SEL):NSSlider;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1644495-sliderwithvalue
    sliderWithValue_minValue_maxValue_target_action(value: number, minValue: number, maxValue: number, target: NSSlider, action: SEL):NSSlider;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1532924-slidertype
    sliderType(): NSSliderType;
    setSliderType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1532901-altincrementvalue
    altIncrementValue(): number;
    setAltIncrementValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1532909-knobthickness
    knobThickness(): CGFloat;
    setKnobThickness(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1532899-setknobthickness
    setKnobThickness(thickness: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1527901-vertical
    vertical(): BOOL;
    setVertical(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslider/2560999-trackfillcolor
    trackFillColor(): NSColor;
    setTrackFillColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1532919-maxvalue
    maxValue(): number;
    setMaxValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1524665-minvalue
    minValue(): number;
    setMinValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1530290-acceptsfirstmouse
    acceptsFirstMouse(event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1526898-allowstickmarkvaluesonly
    allowsTickMarkValuesOnly(): BOOL;
    setAllowsTickMarkValuesOnly(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1530237-closesttickmarkvaluetovalue
    closestTickMarkValueToValue(value: number):number;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1526763-indexoftickmarkatpoint
    indexOfTickMarkAtPoint(point: NSPoint):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1524268-numberoftickmarks
    numberOfTickMarks(): NSInteger;
    setNumberOfTickMarks(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1532922-rectoftickmarkatindex
    rectOfTickMarkAtIndex(index: NSInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1529657-tickmarkposition
    tickMarkPosition(): NSTickMarkPosition;
    setTickMarkPosition(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1527230-tickmarkvalueatindex
    tickMarkValueAtIndex(index: NSInteger):number;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1532926-setimage
    setImage(backgroundImage: NSImage):void;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1532906-image
    image():NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1532913-title
    title():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1532902-titlecell
    titleCell():NSSlider;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1532896-titlecolor
    titleColor():NSColor;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1532907-titlefont
    titleFont():NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1532915-settitle
    setTitle(string: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1532904-settitlecell
    setTitleCell(cell: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1532911-settitlecolor
    setTitleColor(newColor: NSColor):void;
    // doc://com.apple.documentation/documentation/appkit/nsslider/1532927-settitlefont
    setTitleFont(fontObj: NSFont):void;
    //
    alloc():NSSlider;
    //
    init():NSSlider;
  }
}

declare const NSSlider: cocoascript.NSSlider;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbaraddtemplate
declare const NSImageNameTouchBarAddTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarcomposetemplate
declare const NSImageNameTouchBarComposeTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbargobacktemplate
declare const NSImageNameTouchBarGoBackTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbargoforwardtemplate
declare const NSImageNameTouchBarGoForwardTemplate: NSImageName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstouchbarcustomizationidentifier
  type NSTouchBarCustomizationIdentifier = cocoascript.NSString;
}
declare namespace cocoascript {
  /**
   * A group of subitems in a toolbar item.
   * doc://com.apple.documentation/documentation/appkit/nstoolbaritemgroup
   */
  interface NSToolbarItemGroup extends NSToolbarItem {
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritemgroup/1529923-subitems
    subitems(): NSToolbarItem;
    setSubitems(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritemgroup/3242763-groupwithitemidentifier
    groupWithItemIdentifier_images_selectionMode_labels_target_action(itemIdentifier: NSToolbarItemIdentifier, images: NSImage, selectionMode: NSToolbarItemGroupSelectionMode, labels: string | NSString, target: NSToolbarItemGroup, action: SEL):NSToolbarItemGroup;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritemgroup/3242764-groupwithitemidentifier
    groupWithItemIdentifier_titles_selectionMode_labels_target_action(itemIdentifier: NSToolbarItemIdentifier, titles: string | NSString, selectionMode: NSToolbarItemGroupSelectionMode, labels: string | NSString, target: NSToolbarItemGroup, action: SEL):NSToolbarItemGroup;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritemgroup/3242762-controlrepresentation
    controlRepresentation(): NSToolbarItemGroupControlRepresentation;
    setControlRepresentation(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritemgroup/3242766-selectedindex
    selectedIndex(): NSInteger;
    setSelectedIndex(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritemgroup/3242767-selectionmode
    selectionMode(): NSToolbarItemGroupSelectionMode;
    setSelectionMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritemgroup/3242765-isselectedatindex
    isSelectedAtIndex(index: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstoolbaritemgroup/3242768-setselected
    setSelected_atIndex(selected: BOOL, index: NSInteger):void;
    //
    alloc():NSToolbarItemGroup;
    //
    init():NSToolbarItemGroup;
  }
}

declare const NSToolbarItemGroup: cocoascript.NSToolbarItemGroup;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstoolbaritemgroupcontrolrepresentation
  type NSToolbarItemGroupControlRepresentation = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstoolbaritemgroupselectionmode
  type NSToolbarItemGroupSelectionMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsmenutoolbaritem
   */
  interface NSMenuToolbarItem extends NSToolbarItem {
    // doc://com.apple.documentation/documentation/appkit/nsmenutoolbaritem/3375789-itemmenu
    itemMenu(): UIMenu;
    setItemMenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenutoolbaritem/3237191-menu
    menu(): NSMenu;
    setMenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nsmenutoolbaritem/3237192-showsindicator
    showsIndicator(): BOOL;
    setShowsIndicator(): void;
    //
    alloc():NSMenuToolbarItem;
    //
    init():NSMenuToolbarItem;
  }
}

declare const NSMenuToolbarItem: cocoascript.NSMenuToolbarItem;
declare namespace cocoascript {
  /**
   * A toolbar item that contains a text field optimized for performing text-based searches.
   * doc://com.apple.documentation/documentation/appkit/nssearchtoolbaritem
   */
  interface NSSearchToolbarItem extends NSToolbarItem {
    // doc://com.apple.documentation/documentation/appkit/nssearchtoolbaritem/3634329-resignsfirstresponderwithcancel
    resignsFirstResponderWithCancel(): BOOL;
    setResignsFirstResponderWithCancel(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchtoolbaritem/3634330-searchfield
    searchField(): NSSearchField;
    setSearchField(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchtoolbaritem/3674528-preferredwidthforsearchfield
    preferredWidthForSearchField(): CGFloat;
    setPreferredWidthForSearchField(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchtoolbaritem/3674526-beginsearchinteraction
    beginSearchInteraction():void;
    // doc://com.apple.documentation/documentation/appkit/nssearchtoolbaritem/3674527-endsearchinteraction
    endSearchInteraction():void;
    //
    alloc():NSSearchToolbarItem;
    //
    init():NSSearchToolbarItem;
  }
}

declare const NSSearchToolbarItem: cocoascript.NSSearchToolbarItem;
declare namespace cocoascript {
  /**
   * A toolbar separator that aligns with the vertical split view in the same window.
   * doc://com.apple.documentation/documentation/appkit/nstrackingseparatortoolbaritem
   */
  interface NSTrackingSeparatorToolbarItem extends NSToolbarItem {
    // doc://com.apple.documentation/documentation/appkit/nstrackingseparatortoolbaritem/3626828-trackingseparatortoolbaritemwith
    trackingSeparatorToolbarItemWithIdentifier_splitView_dividerIndex(identifier: NSToolbarItemIdentifier, splitView: NSSplitView, dividerIndex: NSInteger):NSTrackingSeparatorToolbarItem;
    // doc://com.apple.documentation/documentation/appkit/nstrackingseparatortoolbaritem/3626826-dividerindex
    dividerIndex(): NSInteger;
    setDividerIndex(): void;
    // doc://com.apple.documentation/documentation/appkit/nstrackingseparatortoolbaritem/3626827-splitview
    splitView(): NSSplitView;
    setSplitView(): void;
    //
    alloc():NSTrackingSeparatorToolbarItem;
    //
    init():NSTrackingSeparatorToolbarItem;
  }
}

declare const NSTrackingSeparatorToolbarItem: cocoascript.NSTrackingSeparatorToolbarItem;
declare namespace cocoascript {
  /**
   * A protocol that a Cloud-sharing toolbar item uses to get validation of an item.
   * doc://com.apple.documentation/documentation/appkit/nscloudsharingvalidation
   */
  interface NSCloudSharingValidation extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscloudsharingvalidation/2315049-cloudshareforuserinterfaceitem
    cloudShareForUserInterfaceItem(item: NSValidatedUserInterfaceItem):CKShare;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsremotenotificationtype
  type NSRemoteNotificationType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsapplicationpresentationoptions
  type NSApplicationPresentationOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsuserinterfacelayoutdirection
  type NSUserInterfaceLayoutDirection = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsrequestuserattentiontype
  type NSRequestUserAttentionType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsapplicationdelegatereply
  type NSApplicationDelegateReply = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsapplicationactivationpolicy
  type NSApplicationActivationPolicy = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsapplicationdidfinishrestoringwindowsnotification
declare const NSApplicationDidFinishRestoringWindowsNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsapplicationdidchangeocclusionstatenotification
declare const NSApplicationDidChangeOcclusionStateNotification: NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsapplicationactivationoptions
  type NSApplicationActivationOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsapplicationterminatereply
  type NSApplicationTerminateReply = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsapplicationprintreply
  type NSApplicationPrintReply = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsworkspaceiconcreationoptions
  type NSWorkspaceIconCreationOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsworkspacedesktopimageoptionkey
  type NSWorkspaceDesktopImageOptionKey = cocoascript.NSString;
}
declare namespace cocoascript {
  /**
   * The authorization granted to the app by the user.
   * doc://com.apple.documentation/documentation/appkit/nsworkspaceauthorization
   */
  interface NSWorkspaceAuthorization extends NSObject {
    //
    alloc():NSWorkspaceAuthorization;
    //
    init():NSWorkspaceAuthorization;
  }
}

declare const NSWorkspaceAuthorization: cocoascript.NSWorkspaceAuthorization;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsworkspaceauthorizationtype
  type NSWorkspaceAuthorizationType = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsworkspacedidhideapplicationnotification
declare const NSWorkspaceDidHideApplicationNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacedidunhideapplicationnotification
declare const NSWorkspaceDidUnhideApplicationNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacedidactivateapplicationnotification
declare const NSWorkspaceDidActivateApplicationNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacediddeactivateapplicationnotification
declare const NSWorkspaceDidDeactivateApplicationNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacedidrenamevolumenotification
declare const NSWorkspaceDidRenameVolumeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacedidchangefilelabelsnotification
declare const NSWorkspaceDidChangeFileLabelsNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspaceactivespacedidchangenotification
declare const NSWorkspaceActiveSpaceDidChangeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacewillpoweroffnotification
declare const NSWorkspaceWillPowerOffNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacescreensdidsleepnotification
declare const NSWorkspaceScreensDidSleepNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspacescreensdidwakenotification
declare const NSWorkspaceScreensDidWakeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsworkspaceaccessibilitydisplayoptionsdidchangenotification
declare const NSWorkspaceAccessibilityDisplayOptionsDidChangeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumberwithcolumnresizingbrowser
declare const NSAppKitVersionNumberWithColumnResizingBrowser: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumberwithcontinuousscrollingbrowser
declare const NSAppKitVersionNumberWithContinuousScrollingBrowser: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumberwithcursorsizesupport
declare const NSAppKitVersionNumberWithCursorSizeSupport: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumberwithcustomsheetposition
declare const NSAppKitVersionNumberWithCustomSheetPosition: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumberwithdeferredwindowdisplaysupport
declare const NSAppKitVersionNumberWithDeferredWindowDisplaySupport: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumberwithdirectionaltabs
declare const NSAppKitVersionNumberWithDirectionalTabs: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumberwithdocktilepluginsupport
declare const NSAppKitVersionNumberWithDockTilePlugInSupport: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumberwithpatterncolorleakfix
declare const NSAppKitVersionNumberWithPatternColorLeakFix: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber
declare const NSAppKitVersionNumber: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_0
declare const NSAppKitVersionNumber10_0: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_1
declare const NSAppKitVersionNumber10_1: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_10
declare const NSAppKitVersionNumber10_10: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_10_2
declare const NSAppKitVersionNumber10_10_2: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_10_3
declare const NSAppKitVersionNumber10_10_3: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_10_4
declare const NSAppKitVersionNumber10_10_4: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_10_5
declare const NSAppKitVersionNumber10_10_5: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_10_max
declare const NSAppKitVersionNumber10_10_Max: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_11
declare const NSAppKitVersionNumber10_11: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_11_1
declare const NSAppKitVersionNumber10_11_1: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_11_2
declare const NSAppKitVersionNumber10_11_2: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_11_3
declare const NSAppKitVersionNumber10_11_3: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_12
declare const NSAppKitVersionNumber10_12: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_12_1
declare const NSAppKitVersionNumber10_12_1: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_12_2
declare const NSAppKitVersionNumber10_12_2: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_2
declare const NSAppKitVersionNumber10_2: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_2_3
declare const NSAppKitVersionNumber10_2_3: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_3
declare const NSAppKitVersionNumber10_3: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_3_2
declare const NSAppKitVersionNumber10_3_2: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_3_3
declare const NSAppKitVersionNumber10_3_3: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_3_5
declare const NSAppKitVersionNumber10_3_5: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_3_7
declare const NSAppKitVersionNumber10_3_7: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_3_9
declare const NSAppKitVersionNumber10_3_9: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_4
declare const NSAppKitVersionNumber10_4: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_4_1
declare const NSAppKitVersionNumber10_4_1: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_4_3
declare const NSAppKitVersionNumber10_4_3: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_4_4
declare const NSAppKitVersionNumber10_4_4: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_4_7
declare const NSAppKitVersionNumber10_4_7: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_5
declare const NSAppKitVersionNumber10_5: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_5_2
declare const NSAppKitVersionNumber10_5_2: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_5_3
declare const NSAppKitVersionNumber10_5_3: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_6
declare const NSAppKitVersionNumber10_6: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_7
declare const NSAppKitVersionNumber10_7: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_7_2
declare const NSAppKitVersionNumber10_7_2: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_7_3
declare const NSAppKitVersionNumber10_7_3: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_7_4
declare const NSAppKitVersionNumber10_7_4: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_8
declare const NSAppKitVersionNumber10_8: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_9
declare const NSAppKitVersionNumber10_9: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_13
declare const NSAppKitVersionNumber10_13: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_13_1
declare const NSAppKitVersionNumber10_13_1: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_13_2
declare const NSAppKitVersionNumber10_13_2: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_13_4
declare const NSAppKitVersionNumber10_13_4: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_14
declare const NSAppKitVersionNumber10_14: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_14_1
declare const NSAppKitVersionNumber10_14_1: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_14_2
declare const NSAppKitVersionNumber10_14_2: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_14_3
declare const NSAppKitVersionNumber10_14_3: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_14_4
declare const NSAppKitVersionNumber10_14_4: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_14_5
declare const NSAppKitVersionNumber10_14_5: NSAppKitVersion;
// doc://com.apple.documentation/documentation/appkit/nsappkitversionnumber10_15
declare const NSAppKitVersionNumber10_15: NSAppKitVersion;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nssharingservicename
  type NSSharingServiceName = cocoascript.NSString;
}
declare namespace cocoascript {
  /**
   * A set of methods that you use to customize the position and animation of a share sheet, and to be notified whether the item is successfully shared.
   * doc://com.apple.documentation/documentation/appkit/nssharingservicedelegate
   */
  interface NSSharingServiceDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nssharingservicedelegate/1402642-sharingservice
    sharingService_willShareItems(sharingService: NSSharingService, items: NSArray):void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservicedelegate/1402638-sharingservice
    sharingService_didShareItems(sharingService: NSSharingService, items: NSArray):void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservicedelegate/1402710-sharingservice
    sharingService_didFailToShareItems_error(sharingService: NSSharingService, items: NSArray, error: NSError):void;
    // doc://com.apple.documentation/documentation/appkit/nssharingservicedelegate/1402695-sharingservice
    sharingService_sourceFrameOnScreenForShareItem(sharingService: NSSharingService, item: NSSharingServiceDelegate):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nssharingservicedelegate/1402622-sharingservice
    sharingService_transitionImageForShareItem_contentRect(sharingService: NSSharingService, item: NSSharingServiceDelegate, contentRect: NSRect):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nssharingservicedelegate/1402679-sharingservice
    sharingService_sourceWindowForShareItems_sharingContentScope(sharingService: NSSharingService, items: NSArray, sharingContentScope: NSSharingContentScope):NSWindow;
    // doc://com.apple.documentation/documentation/appkit/nssharingservicedelegate/1644711-anchoringviewforsharingservice
    anchoringViewForSharingService_showRelativeToRect_preferredEdge(sharingService: NSSharingService, positioningRect: NSRect, preferredEdge: NSRectEdge):NSView;
  }
}
declare namespace cocoascript {
  /**
   * A protocol that a sharing service picker item delegate uses to provide a list of items eligible for sharing.
   * doc://com.apple.documentation/documentation/appkit/nssharingservicepickertouchbaritemdelegate
   */
  interface NSSharingServicePickerTouchBarItemDelegate extends NSSharingServicePickerDelegate {
    // doc://com.apple.documentation/documentation/appkit/nssharingservicepickertouchbaritemdelegate/2646997-itemsforsharingservicepickertouc
    itemsForSharingServicePickerTouchBarItem(pickerTouchBarItem: NSSharingServicePickerTouchBarItem):NSArray;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscloudkitsharingserviceoptions
  type NSCloudKitSharingServiceOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsserviceprovidername
  type NSServiceProviderName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nshelpanchorname
  type NSHelpAnchorName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nshelpbookname
  type NSHelpBookName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nshelpmanagercontexthelpkey
  type NSHelpManagerContextHelpKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nssaveoperationtype
  type NSSaveOperationType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsdocumentchangetype
  type NSDocumentChangeType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspasteboardname
  type NSPasteboardName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspasteboardtype
  type NSPasteboardType = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspasteboardreadingoptionkey
  type NSPasteboardReadingOptionKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspasteboardreadingoptions
  type NSPasteboardReadingOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspasteboardwritingoptions
  type NSPasteboardWritingOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * A set of methods that a table view uses to provide data to a table view and to allow the editing of the table view's data source object.
   * doc://com.apple.documentation/documentation/appkit/nstableviewdatasource
   */
  interface NSTableViewDataSource extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstableviewdatasource/1524583-numberofrowsintableview
    numberOfRowsInTableView(tableView: NSTableView):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdatasource/1533674-tableview
    tableView_objectValueForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn, row: NSInteger):NSTableViewDataSource;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdatasource/1526317-tableview
    tableView_setObjectValue_forTableColumn_row(tableView: NSTableView, object: NSTableViewDataSource, tableColumn: NSTableColumn, row: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdatasource/1535294-tableview
    tableView_pasteboardWriterForRow(tableView: NSTableView, row: NSInteger):NSPasteboardWriting;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdatasource/1527733-tableview
    tableView_acceptDrop_row_dropOperation(tableView: NSTableView, info: NSDraggingInfo, row: NSInteger, dropOperation: NSTableViewDropOperation):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdatasource/1530316-tableview
    tableView_namesOfPromisedFilesDroppedAtDestination_forDraggedRowsWithIndexes(tableView: NSTableView, dropDestination: NSURL, indexSet: NSIndexSet):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdatasource/1532052-tableview
    tableView_validateDrop_proposedRow_proposedDropOperation(tableView: NSTableView, info: NSDraggingInfo, row: NSInteger, dropOperation: NSTableViewDropOperation):NSDragOperation;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdatasource/1525370-tableview
    tableView_writeRowsWithIndexes_toPasteboard(tableView: NSTableView, rowIndexes: NSIndexSet, pboard: NSPasteboard):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdatasource/1528890-tableview
    tableView_draggingSession_willBeginAtPoint_forRowIndexes(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, rowIndexes: NSIndexSet):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdatasource/1535273-tableview
    tableView_updateDraggingItemsForDrag(tableView: NSTableView, draggingInfo: NSDraggingInfo):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdatasource/1534355-tableview
    tableView_draggingSession_endedAtPoint_operation(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdatasource/1532935-tableview
    tableView_sortDescriptorsDidChange(tableView: NSTableView, oldDescriptors: NSSortDescriptor):void;
  }
}
declare namespace cocoascript {
  /**
   * A set of related records, displayed in rows that represent individual records and columns that represent the attributes of those records.
   * doc://com.apple.documentation/documentation/appkit/nstableview
   */
  interface NSTableView extends NSControl {
    // doc://com.apple.documentation/documentation/appkit/nstableview/1528481-initwithcoder
    initWithCoder(coder: NSCoder):NSTableView;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1525511-initwithframe
    initWithFrame(frameRect: NSRect):NSTableView;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1531866-datasource
    dataSource(): NSTableViewDataSource;
    setDataSource(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1533450-usesstaticcontents
    usesStaticContents(): BOOL;
    setUsesStaticContents(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1528382-reloaddata
    reloadData():void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1527621-reloaddataforrowindexes
    reloadDataForRowIndexes_columnIndexes(rowIndexes: NSIndexSet, columnIndexes: NSIndexSet):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1535482-makeviewwithidentifier
    makeViewWithIdentifier_owner(identifier: NSUserInterfaceItemIdentifier, owner: NSTableView):NSView;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1525162-rowviewatrow
    rowViewAtRow_makeIfNecessary(row: NSInteger, makeIfNecessary: BOOL):NSTableRowView;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1528831-viewatcolumn
    viewAtColumn_row_makeIfNecessary(column: NSInteger, row: NSInteger, makeIfNecessary: BOOL):NSView;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1527288-beginupdates
    beginUpdates():void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1526267-endupdates
    endUpdates():void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1535835-moverowatindex
    moveRowAtIndex_toIndex(oldIndex: NSInteger, newIndex: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1532406-insertrowsatindexes
    insertRowsAtIndexes_withAnimation(indexes: NSIndexSet, animationOptions: NSTableViewAnimationOptions):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1524655-removerowsatindexes
    removeRowsAtIndexes_withAnimation(indexes: NSIndexSet, animationOptions: NSTableViewAnimationOptions):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1526732-rowforview
    rowForView(view: NSView):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1529415-columnforview
    columnForView(view: NSView):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1524297-registernib
    registerNib_forIdentifier(nib: NSNib, identifier: NSUserInterfaceItemIdentifier):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1530663-registerednibsbyidentifier
    registeredNibsByIdentifier(): NSNib;
    setRegisteredNibsByIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1526992-doubleaction
    doubleAction(): SEL;
    setDoubleAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1529205-clickedcolumn
    clickedColumn(): NSInteger;
    setClickedColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1527357-clickedrow
    clickedRow(): NSInteger;
    setClickedRow(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1530207-allowscolumnreordering
    allowsColumnReordering(): BOOL;
    setAllowsColumnReordering(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1527826-allowscolumnresizing
    allowsColumnResizing(): BOOL;
    setAllowsColumnResizing(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1532523-allowsmultipleselection
    allowsMultipleSelection(): BOOL;
    setAllowsMultipleSelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1535902-allowsemptyselection
    allowsEmptySelection(): BOOL;
    setAllowsEmptySelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1525276-allowscolumnselection
    allowsColumnSelection(): BOOL;
    setAllowsColumnSelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/2870126-usesautomaticrowheights
    usesAutomaticRowHeights(): BOOL;
    setUsesAutomaticRowHeights(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1524258-intercellspacing
    intercellSpacing(): NSSize;
    setIntercellSpacing(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1529148-rowheight
    rowHeight(): CGFloat;
    setRowHeight(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1527806-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1533967-usesalternatingrowbackgroundcolo
    usesAlternatingRowBackgroundColors(): BOOL;
    setUsesAlternatingRowBackgroundColors(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/3622475-style
    style(): NSTableViewStyle;
    setStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/3622474-effectivestyle
    effectiveStyle(): NSTableViewStyle;
    setEffectiveStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1526311-selectionhighlightstyle
    selectionHighlightStyle(): NSTableViewSelectionHighlightStyle;
    setSelectionHighlightStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1524620-gridcolor
    gridColor(): NSColor;
    setGridColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1528689-gridstylemask
    gridStyleMask(): NSTableViewGridLineStyle;
    setGridStyleMask(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1524846-indicatorimageintablecolumn
    indicatorImageInTableColumn(tableColumn: NSTableColumn):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1534381-setindicatorimage
    setIndicatorImage_inTableColumn(image: NSImage, tableColumn: NSTableColumn):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1531825-effectiverowsizestyle
    effectiveRowSizeStyle(): NSTableViewRowSizeStyle;
    setEffectiveRowSizeStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1534438-rowsizestyle
    rowSizeStyle(): NSTableViewRowSizeStyle;
    setRowSizeStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1534098-addtablecolumn
    addTableColumn(tableColumn: NSTableColumn):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1535381-removetablecolumn
    removeTableColumn(tableColumn: NSTableColumn):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1530719-movecolumn
    moveColumn_toColumn(oldIndex: NSInteger, newIndex: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1528735-tablecolumns
    tableColumns(): NSTableColumn;
    setTableColumns(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1526734-columnwithidentifier
    columnWithIdentifier(identifier: NSUserInterfaceItemIdentifier):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1531134-tablecolumnwithidentifier
    tableColumnWithIdentifier(identifier: NSUserInterfaceItemIdentifier):NSTableColumn;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1524416-selectcolumnindexes
    selectColumnIndexes_byExtendingSelection(indexes: NSIndexSet, extend: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1532974-selectedcolumn
    selectedColumn(): NSInteger;
    setSelectedColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1524283-selectedcolumnindexes
    selectedColumnIndexes(): NSIndexSet;
    setSelectedColumnIndexes(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1525334-deselectcolumn
    deselectColumn(column: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1524361-numberofselectedcolumns
    numberOfSelectedColumns(): NSInteger;
    setNumberOfSelectedColumns(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1524306-iscolumnselected
    isColumnSelected(column: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1529688-selectrowindexes
    selectRowIndexes_byExtendingSelection(indexes: NSIndexSet, extend: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1535010-selectedrow
    selectedRow(): NSInteger;
    setSelectedRow(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1533844-selectedrowindexes
    selectedRowIndexes(): NSIndexSet;
    setSelectedRowIndexes(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1532722-deselectrow
    deselectRow(row: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1527463-numberofselectedrows
    numberOfSelectedRows(): NSInteger;
    setNumberOfSelectedRows(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1525882-isrowselected
    isRowSelected(row: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1534002-selectall
    selectAll(sender: NSTableView):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1533302-deselectall
    deselectAll(sender: NSTableView):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1532750-enumerateavailablerowviewsusingb
    enumerateAvailableRowViewsUsingBlock(handler: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1526084-allowstypeselect
    allowsTypeSelect(): BOOL;
    setAllowsTypeSelect(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1528902-numberofcolumns
    numberOfColumns(): NSInteger;
    setNumberOfColumns(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1527941-numberofrows
    numberOfRows(): NSInteger;
    setNumberOfRows(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1528624-floatsgrouprows
    floatsGroupRows(): BOOL;
    setFloatsGroupRows(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1526295-editcolumn
    editColumn_row_withEvent_select(column: NSInteger, row: NSInteger, event: NSEvent, select: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1532307-editedcolumn
    editedColumn(): NSInteger;
    setEditedColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1534282-editedrow
    editedRow(): NSInteger;
    setEditedRow(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1534008-didaddrowview
    didAddRowView_forRow(rowView: NSTableRowView, row: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1532903-didremoverowview
    didRemoveRowView_forRow(rowView: NSTableRowView, row: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1535880-headerview
    headerView(): NSTableHeaderView;
    setHeaderView(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1535831-cornerview
    cornerView(): NSView;
    setCornerView(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1644591-userinterfacelayoutdirection
    userInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection;
    setUserInterfaceLayoutDirection(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1531546-rectofcolumn
    rectOfColumn(column: NSInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1532948-rectofrow
    rectOfRow(row: NSInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1525344-rowsinrect
    rowsInRect(rect: NSRect):NSRange;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1526013-columnindexesinrect
    columnIndexesInRect(rect: NSRect):NSIndexSet;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1527504-columnatpoint
    columnAtPoint(point: NSPoint):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1530884-rowatpoint
    rowAtPoint(point: NSPoint):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1524517-frameofcellatcolumn
    frameOfCellAtColumn_row(column: NSInteger, row: NSInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1530784-columnautoresizingstyle
    columnAutoresizingStyle(): NSTableViewColumnAutoresizingStyle;
    setColumnAutoresizingStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1525859-sizelastcolumntofit
    sizeLastColumnToFit():void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1534147-notenumberofrowschanged
    noteNumberOfRowsChanged():void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1528077-tile
    tile():void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1530680-sizetofit
    sizeToFit():void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1532126-noteheightofrowswithindexeschang
    noteHeightOfRowsWithIndexesChanged(indexSet: NSIndexSet):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1533711-drawrow
    drawRow_clipRect(row: NSInteger, clipRect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1527006-drawgridincliprect
    drawGridInClipRect(clipRect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1530758-highlightselectionincliprect
    highlightSelectionInClipRect(clipRect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1528866-drawbackgroundincliprect
    drawBackgroundInClipRect(clipRect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1529902-scrollrowtovisible
    scrollRowToVisible(row: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1535570-scrollcolumntovisible
    scrollColumnToVisible(column: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1525596-autosavetablecolumns
    autosaveTableColumns(): BOOL;
    setAutosaveTableColumns(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1534409-autosavename
    autosaveName(): NSTableViewAutosaveName;
    setAutosaveName(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1534325-delegate
    delegate(): NSTableViewDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1524980-highlightedtablecolumn
    highlightedTableColumn(): NSTableColumn;
    setHighlightedTableColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1526541-dragimageforrowswithindexes
    dragImageForRowsWithIndexes_tableColumns_event_offset(dragRows: NSIndexSet, tableColumns: NSTableColumn, dragEvent: NSEvent, dragImageOffset: NSPointPointer):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1524273-candragrowswithindexes
    canDragRowsWithIndexes_atPoint(rowIndexes: NSIndexSet, mouseDownPoint: NSPoint):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1527199-setdraggingsourceoperationmask
    setDraggingSourceOperationMask_forLocal(mask: NSDragOperation, isLocal: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1534585-verticalmotioncanbegindrag
    verticalMotionCanBeginDrag(): BOOL;
    setVerticalMotionCanBeginDrag(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1527570-draggingdestinationfeedbackstyle
    draggingDestinationFeedbackStyle(): NSTableViewDraggingDestinationFeedbackStyle;
    setDraggingDestinationFeedbackStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1535123-setdroprow
    setDropRow_dropOperation(row: NSInteger, dropOperation: NSTableViewDropOperation):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1534198-sortdescriptors
    sortDescriptors(): NSSortDescriptor;
    setSortDescriptors(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1533198-rowactionsvisible
    rowActionsVisible(): BOOL;
    setRowActionsVisible(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1534141-hiderowsatindexes
    hideRowsAtIndexes_withAnimation(indexes: NSIndexSet, rowAnimation: NSTableViewAnimationOptions):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1527447-unhiderowsatindexes
    unhideRowsAtIndexes_withAnimation(indexes: NSIndexSet, rowAnimation: NSTableViewAnimationOptions):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1534914-hiddenrowindexes
    hiddenRowIndexes(): NSIndexSet;
    setHiddenRowIndexes(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1539436-dragimageforrows
    dragImageForRows_event_dragImageOffset(dragRows: NSArray, dragEvent: NSEvent, dragImageOffset: NSPointPointer):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1539494-setautoresizesallcolumnstofit
    setAutoresizesAllColumnsToFit(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1539541-autoresizesallcolumnstofit
    autoresizesAllColumnsToFit():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1539563-selectcolumn
    selectColumn_byExtendingSelection(column: NSInteger, extend: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1539465-selectrow
    selectRow_byExtendingSelection(row: NSInteger, extend: BOOL):void;
    // doc://com.apple.documentation/documentation/objectivec/nsobject/1539424-tableview
    tableView_writeRows_toPasteboard(tableView: NSTableView, rows: NSArray, pboard: NSPasteboard):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1539529-setdrawsgrid
    setDrawsGrid(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1539576-drawsgrid
    drawsGrid():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1539418-selectedcolumnenumerator
    selectedColumnEnumerator():NSEnumerator;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1539483-selectedrowenumerator
    selectedRowEnumerator():NSEnumerator;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1533870-focusedcolumn
    focusedColumn():NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1534977-setfocusedcolumn
    setFocusedColumn(focusedColumn: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1531629-shouldfocuscell
    shouldFocusCell_atColumn_row(cell: NSCell, column: NSInteger, row: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1527932-performclickoncellatcolumn
    performClickOnCellAtColumn_row(column: NSInteger, row: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1534640-preparedcellatcolumn
    preparedCellAtColumn_row(column: NSInteger, row: NSInteger):NSCell;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1539450-columnsinrect
    columnsInRect(rect: NSRect):NSRange;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1529201-textshouldbeginediting
    textShouldBeginEditing(textObject: NSText):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1535888-textdidbeginediting
    textDidBeginEditing(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1529764-textdidchange
    textDidChange(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1531760-textshouldendediting
    textShouldEndEditing(textObject: NSText):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableview/1532159-textdidendediting
    textDidEndEditing(notification: NSNotification):void;
    //
    alloc():NSTableView;
    //
    init():NSTableView;
  }
}

declare const NSTableView: cocoascript.NSTableView;
// doc://com.apple.documentation/documentation/appkit/nstableviewcolumndidmovenotification
declare const NSTableViewColumnDidMoveNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nstableviewcolumndidresizenotification
declare const NSTableViewColumnDidResizeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nstableviewselectiondidchangenotification
declare const NSTableViewSelectionDidChangeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nstableviewselectionischangingnotification
declare const NSTableViewSelectionIsChangingNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * A set of methods that you use to manage the behavior of a collection view.
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate
   */
  interface NSCollectionViewDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1528280-collectionview
    collectionView_shouldSelectItemsAtIndexPaths(collectionView: NSCollectionView, indexPaths: NSIndexPath):NSIndexPath;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1528236-collectionview
    collectionView_didSelectItemsAtIndexPaths(collectionView: NSCollectionView, indexPaths: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1525582-collectionview
    collectionView_shouldDeselectItemsAtIndexPaths(collectionView: NSCollectionView, indexPaths: NSIndexPath):NSIndexPath;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1528279-collectionview
    collectionView_didDeselectItemsAtIndexPaths(collectionView: NSCollectionView, indexPaths: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1528178-collectionview
    collectionView_shouldChangeItemsAtIndexPaths_toHighlightState(collectionView: NSCollectionView, indexPaths: NSIndexPath, highlightState: NSCollectionViewItemHighlightState):NSIndexPath;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1526015-collectionview
    collectionView_didChangeItemsAtIndexPaths_toHighlightState(collectionView: NSCollectionView, indexPaths: NSIndexPath, highlightState: NSCollectionViewItemHighlightState):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1524266-collectionview
    collectionView_willDisplayItem_forRepresentedObjectAtIndexPath(collectionView: NSCollectionView, item: NSCollectionViewItem, indexPath: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1528183-collectionview
    collectionView_didEndDisplayingItem_forRepresentedObjectAtIndexPath(collectionView: NSCollectionView, item: NSCollectionViewItem, indexPath: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1525963-collectionview
    collectionView_willDisplaySupplementaryView_forElementKind_atIndexPath(collectionView: NSCollectionView, view: NSView, elementKind: NSCollectionViewSupplementaryElementKind, indexPath: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1528192-collectionview
    collectionView_didEndDisplayingSupplementaryView_forElementOfKind_atIndexPath(collectionView: NSCollectionView, view: NSView, elementKind: NSCollectionViewSupplementaryElementKind, indexPath: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1528228-collectionview
    collectionView_transitionLayoutForOldLayout_newLayout(collectionView: NSCollectionView, fromLayout: NSCollectionViewLayout, toLayout: NSCollectionViewLayout):NSCollectionViewTransitionLayout;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1525969-collectionview
    collectionView_canDragItemsAtIndexPaths_withEvent(collectionView: NSCollectionView, indexPaths: NSIndexPath, event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1527290-collectionview
    collectionView_pasteboardWriterForItemAtIndexPath(collectionView: NSCollectionView, indexPath: NSIndexPath):NSPasteboardWriting;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1528182-collectionview
    collectionView_writeItemsAtIndexPaths_toPasteboard(collectionView: NSCollectionView, indexPaths: NSIndexPath, pasteboard: NSPasteboard):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1528253-collectionview
    collectionView_namesOfPromisedFilesDroppedAtDestination_forDraggedItemsAtIndexPaths(collectionView: NSCollectionView, dropURL: NSURL, indexPaths: NSIndexPath):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1528175-collectionview
    collectionView_draggingImageForItemsAtIndexPaths_withEvent_offset(collectionView: NSCollectionView, indexPaths: NSIndexPath, event: NSEvent, dragImageOffset: NSPointPointer):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1527718-collectionview
    collectionView_draggingSession_willBeginAtPoint_forItemsAtIndexPaths(collectionView: NSCollectionView, session: NSDraggingSession, screenPoint: NSPoint, indexPaths: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1528224-collectionview
    collectionView_draggingSession_endedAtPoint_dragOperation(collectionView: NSCollectionView, session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1526881-collectionview
    collectionView_updateDraggingItemsForDrag(collectionView: NSCollectionView, draggingInfo: NSDraggingInfo):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1525471-collectionview
    collectionView_validateDrop_proposedIndexPath_dropOperation(collectionView: NSCollectionView, draggingInfo: NSDraggingInfo, proposedDropIndexPath: NSIndexPath, proposedDropOperation: NSCollectionViewDropOperation):NSDragOperation;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1525045-collectionview
    collectionView_acceptDrop_indexPath_dropOperation(collectionView: NSCollectionView, draggingInfo: NSDraggingInfo, indexPath: NSIndexPath, dropOperation: NSCollectionViewDropOperation):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1528212-collectionview
    collectionView_canDragItemsAtIndexes_withEvent(collectionView: NSCollectionView, indexes: NSIndexSet, event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1528257-collectionview
    collectionView_pasteboardWriterForItemAtIndex(collectionView: NSCollectionView, index: NSUInteger):NSPasteboardWriting;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1524770-collectionview
    collectionView_writeItemsAtIndexes_toPasteboard(collectionView: NSCollectionView, indexes: NSIndexSet, pasteboard: NSPasteboard):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1528189-collectionview
    collectionView_namesOfPromisedFilesDroppedAtDestination_forDraggedItemsAtIndexes(collectionView: NSCollectionView, dropURL: NSURL, indexes: NSIndexSet):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1528138-collectionview
    collectionView_draggingImageForItemsAtIndexes_withEvent_offset(collectionView: NSCollectionView, indexes: NSIndexSet, event: NSEvent, dragImageOffset: NSPointPointer):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1524615-collectionview
    collectionView_draggingSession_willBeginAtPoint_forItemsAtIndexes(collectionView: NSCollectionView, session: NSDraggingSession, screenPoint: NSPoint, indexes: NSIndexSet):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1528283-collectionview
    collectionView_validateDrop_proposedIndex_dropOperation(collectionView: NSCollectionView, draggingInfo: NSDraggingInfo, proposedDropIndex: NSInteger, proposedDropOperation: NSCollectionViewDropOperation):NSDragOperation;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegate/1528242-collectionview
    collectionView_acceptDrop_index_dropOperation(collectionView: NSCollectionView, draggingInfo: NSDraggingInfo, index: NSInteger, dropOperation: NSCollectionViewDropOperation):BOOL;
  }
}
declare namespace cocoascript {
  /**
   * An ordered collection of data items displayed in a customizable layout.
   * doc://com.apple.documentation/documentation/appkit/nscollectionview
   */
  interface NSCollectionView extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528222-datasource
    dataSource(): NSCollectionViewDataSource;
    setDataSource(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528246-delegate
    delegate(): NSCollectionViewDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528207-content
    content(): id;
    setContent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528250-backgroundview
    backgroundView(): NSView;
    setBackgroundView(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528220-backgroundcolors
    backgroundColors(): NSColor;
    setBackgroundColors(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1644533-backgroundviewscrollswithcontent
    backgroundViewScrollsWithContent(): BOOL;
    setBackgroundViewScrollsWithContent(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528240-makeitemwithidentifier
    makeItemWithIdentifier_forIndexPath(identifier: NSUserInterfaceItemIdentifier, indexPath: NSIndexPath):NSCollectionViewItem;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528268-registerclass
    registerClass_forItemWithIdentifier(itemClass: Class, identifier: NSUserInterfaceItemIdentifier):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528174-registernib
    registerNib_forItemWithIdentifier(nib: NSNib, identifier: NSUserInterfaceItemIdentifier):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528302-makesupplementaryviewofkind
    makeSupplementaryViewOfKind_withIdentifier_forIndexPath(elementKind: NSCollectionViewSupplementaryElementKind, identifier: NSUserInterfaceItemIdentifier, indexPath: NSIndexPath):NSView;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528233-registerclass
    registerClass_forSupplementaryViewOfKind_withIdentifier(viewClass: Class, kind: NSCollectionViewSupplementaryElementKind, identifier: NSUserInterfaceItemIdentifier):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1527005-registernib
    registerNib_forSupplementaryViewOfKind_withIdentifier(nib: NSNib, kind: NSCollectionViewSupplementaryElementKind, identifier: NSUserInterfaceItemIdentifier):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528271-collectionviewlayout
    collectionViewLayout(): NSCollectionViewLayout;
    setCollectionViewLayout(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528264-reloaddata
    reloadData():void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528306-reloadsections
    reloadSections(sections: NSIndexSet):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528166-reloaditemsatindexpaths
    reloadItemsAtIndexPaths(indexPaths: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/2879292-prefetchdatasource
    prefetchDataSource(): NSCollectionViewPrefetching;
    setPrefetchDataSource(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528238-numberofsections
    numberOfSections(): NSInteger;
    setNumberOfSections(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528291-numberofitemsinsection
    numberOfItemsInSection(section: NSInteger):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528267-insertitemsatindexpaths
    insertItemsAtIndexPaths(indexPaths: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528159-moveitematindexpath
    moveItemAtIndexPath_toIndexPath(indexPath: NSIndexPath, newIndexPath: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528128-deleteitemsatindexpaths
    deleteItemsAtIndexPaths(indexPaths: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1526126-insertsections
    insertSections(sections: NSIndexSet):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1524485-movesection
    moveSection_toSection(section: NSInteger, newSection: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1527083-deletesections
    deleteSections(sections: NSIndexSet):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1644691-togglesectioncollapse
    toggleSectionCollapse(sender: NSCollectionView):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528300-selectable
    selectable(): BOOL;
    setSelectable(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1524276-allowsmultipleselection
    allowsMultipleSelection(): BOOL;
    setAllowsMultipleSelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528180-allowsemptyselection
    allowsEmptySelection(): BOOL;
    setAllowsEmptySelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528275-selectionindexpaths
    selectionIndexPaths(): NSIndexPath;
    setSelectionIndexPaths(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528156-selectall
    selectAll(sender: NSCollectionView):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528251-deselectall
    deselectAll(sender: NSCollectionView):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1525656-selectitemsatindexpaths
    selectItemsAtIndexPaths_scrollPosition(indexPaths: NSIndexPath, scrollPosition: NSCollectionViewScrollPosition):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528172-deselectitemsatindexpaths
    deselectItemsAtIndexPaths(indexPaths: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528194-visibleitems
    visibleItems():NSCollectionViewItem;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528223-indexpathsforvisibleitems
    indexPathsForVisibleItems():NSIndexPath;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528203-visiblesupplementaryviewsofkind
    visibleSupplementaryViewsOfKind(elementKind: NSCollectionViewSupplementaryElementKind):NSCollectionViewElement;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528287-indexpathsforvisiblesupplementar
    indexPathsForVisibleSupplementaryElementsOfKind(elementKind: NSCollectionViewSupplementaryElementKind):NSIndexPath;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528277-indexpathforitem
    indexPathForItem(item: NSCollectionViewItem):NSIndexPath;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1524499-indexpathforitematpoint
    indexPathForItemAtPoint(point: NSPoint):NSIndexPath;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528184-itematindexpath
    itemAtIndexPath(indexPath: NSIndexPath):NSCollectionViewItem;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1524880-supplementaryviewforelementkind
    supplementaryViewForElementKind_atIndexPath(elementKind: NSCollectionViewSupplementaryElementKind, indexPath: NSIndexPath):NSCollectionViewElement;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528227-scrolltoitemsatindexpaths
    scrollToItemsAtIndexPaths_scrollPosition(indexPaths: NSIndexPath, scrollPosition: NSCollectionViewScrollPosition):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528243-layoutattributesforitematindexpa
    layoutAttributesForItemAtIndexPath(indexPath: NSIndexPath):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1526721-layoutattributesforsupplementary
    layoutAttributesForSupplementaryElementOfKind_atIndexPath(kind: NSCollectionViewSupplementaryElementKind, indexPath: NSIndexPath):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1525876-performbatchupdates
    performBatchUpdates_completionHandler(updates: void, completionHandler: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528199-firstresponder
    firstResponder(): BOOL;
    setFirstResponder(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528191-draggingimageforitemsatindexpath
    draggingImageForItemsAtIndexPaths_withEvent_offset(indexPaths: NSIndexPath, event: NSEvent, dragImageOffset: NSPointPointer):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528285-itemprototype
    itemPrototype(): NSCollectionViewItem;
    setItemPrototype(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528305-newitemforrepresentedobject
    newItemForRepresentedObject(object: NSCollectionView):NSCollectionViewItem;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1525505-selectionindexes
    selectionIndexes(): NSIndexSet;
    setSelectionIndexes(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1524757-maxnumberofrows
    maxNumberOfRows(): NSUInteger;
    setMaxNumberOfRows(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528281-maxnumberofcolumns
    maxNumberOfColumns(): NSUInteger;
    setMaxNumberOfColumns(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1526293-minitemsize
    minItemSize(): NSSize;
    setMinItemSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1526761-maxitemsize
    maxItemSize(): NSSize;
    setMaxItemSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1526399-itematindex
    itemAtIndex(index: NSUInteger):NSCollectionViewItem;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1524639-frameforitematindex
    frameForItemAtIndex(index: NSUInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528209-frameforitematindex
    frameForItemAtIndex_withNumberOfItems(index: NSUInteger, numberOfItems: NSUInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528249-draggingimageforitemsatindexes
    draggingImageForItemsAtIndexes_withEvent_offset(indexes: NSIndexSet, event: NSEvent, dragImageOffset: NSPointPointer):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nscollectionview/1528229-setdraggingsourceoperationmask
    setDraggingSourceOperationMask_forLocal(dragOperationMask: NSDragOperation, localDestination: BOOL):void;
    //
    alloc():NSCollectionView;
    //
    init():NSCollectionView;
  }
}

declare const NSCollectionView: cocoascript.NSCollectionView;
declare namespace cocoascript {
  /**
   * A view that uses a row-and-column format to display hierarchical data like directories and files that can be expanded and collapsed.
   * doc://com.apple.documentation/documentation/appkit/nsoutlineview
   */
  interface NSOutlineView extends NSTableView {
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1531054-datasource
    dataSource(): NSOutlineViewDataSource;
    setDataSource(): void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1644626-stronglyreferencesitems
    stronglyReferencesItems(): BOOL;
    setStronglyReferencesItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1533676-isexpandable
    isExpandable(item: NSOutlineView):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1525355-isitemexpanded
    isItemExpanded(item: NSOutlineView):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1535323-expanditem
    expandItem(item: NSOutlineView):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1532826-expanditem
    expandItem_expandChildren(item: NSOutlineView, expandChildren: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1532295-collapseitem
    collapseItem(item: NSOutlineView):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1531436-collapseitem
    collapseItem_collapseChildren(item: NSOutlineView, collapseChildren: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1531263-reloaditem
    reloadItem(item: NSOutlineView):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1531176-reloaditem
    reloadItem_reloadChildren(item: NSOutlineView, reloadChildren: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1534846-itematrow
    itemAtRow(row: NSInteger):NSOutlineView;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1533885-rowforitem
    rowForItem(item: NSOutlineView):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1533581-outlinetablecolumn
    outlineTableColumn(): NSTableColumn;
    setOutlineTableColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1532304-autoresizesoutlinecolumn
    autoresizesOutlineColumn(): BOOL;
    setAutoresizesOutlineColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1535891-levelforitem
    levelForItem(item: NSOutlineView):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1531449-levelforrow
    levelForRow(row: NSInteger):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1535181-indentationperlevel
    indentationPerLevel(): CGFloat;
    setIndentationPerLevel(): void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1531707-indentationmarkerfollowscell
    indentationMarkerFollowsCell(): BOOL;
    setIndentationMarkerFollowsCell(): void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1530638-autosaveexpandeditems
    autosaveExpandedItems(): BOOL;
    setAutosaveExpandedItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1525351-setdropitem
    setDropItem_dropChildIndex(item: NSOutlineView, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1535362-shouldcollapseautoexpandeditemsf
    shouldCollapseAutoExpandedItemsForDeposited(deposited: BOOL):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1535031-parentforitem
    parentForItem(item: NSOutlineView):NSOutlineView;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1529954-childindexforitem
    childIndexForItem(item: NSOutlineView):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1527501-child
    child_ofItem(index: NSInteger, item: NSOutlineView):NSOutlineView;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1534304-numberofchildrenofitem
    numberOfChildrenOfItem(item: NSOutlineView):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1532314-frameofoutlinecellatrow
    frameOfOutlineCellAtRow(row: NSInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1534011-delegate
    delegate(): NSOutlineViewDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1528656-insertitemsatindexes
    insertItemsAtIndexes_inParent_withAnimation(indexes: NSIndexSet, parent: NSOutlineView, animationOptions: NSTableViewAnimationOptions):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1530467-moveitematindex
    moveItemAtIndex_inParent_toIndex_inParent(fromIndex: NSInteger, oldParent: NSOutlineView, toIndex: NSInteger, newParent: NSOutlineView):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1527168-removeitemsatindexes
    removeItemsAtIndexes_inParent_withAnimation(indexes: NSIndexSet, parent: NSOutlineView, animationOptions: NSTableViewAnimationOptions):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineview/1524564-userinterfacelayoutdirection
    userInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection;
    setUserInterfaceLayoutDirection(): void;
    //
    alloc():NSOutlineView;
    //
    init():NSOutlineView;
  }
}

declare const NSOutlineView: cocoascript.NSOutlineView;
// doc://com.apple.documentation/documentation/appkit/nsoutlineviewcolumndidmovenotification
declare const NSOutlineViewColumnDidMoveNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsoutlineviewcolumndidresizenotification
declare const NSOutlineViewColumnDidResizeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsoutlineviewitemdidcollapsenotification
declare const NSOutlineViewItemDidCollapseNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsoutlineviewitemdidexpandnotification
declare const NSOutlineViewItemDidExpandNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsoutlineviewitemwillcollapsenotification
declare const NSOutlineViewItemWillCollapseNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsoutlineviewitemwillexpandnotification
declare const NSOutlineViewItemWillExpandNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsoutlineviewselectiondidchangenotification
declare const NSOutlineViewSelectionDidChangeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsoutlineviewselectionischangingnotification
declare const NSOutlineViewSelectionIsChangingNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * An interface that displays a hierarchically organized list of data items that can be navigated and selected.
   * doc://com.apple.documentation/documentation/appkit/nsbrowser
   */
  interface NSBrowser extends NSControl {
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407792-reusescolumns
    reusesColumns(): BOOL;
    setReusesColumns(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407749-maxvisiblecolumns
    maxVisibleColumns(): NSInteger;
    setMaxVisibleColumns(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407696-autohidesscroller
    autohidesScroller(): BOOL;
    setAutohidesScroller(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407520-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407513-mincolumnwidth
    minColumnWidth(): CGFloat;
    setMinColumnWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407653-separatescolumns
    separatesColumns(): BOOL;
    setSeparatesColumns(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407564-takestitlefrompreviouscolumn
    takesTitleFromPreviousColumn(): BOOL;
    setTakesTitleFromPreviousColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407788-tile
    tile():void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407686-delegate
    delegate(): NSBrowserDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1807032-isopaque
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407505-cellclass
    cellClass(): Class;
    setCellClass(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407811-setcellclass
    setCellClass(factoryId: Class):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407662-cellprototype
    cellPrototype(): id;
    setCellPrototype(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407796-allowsbranchselection
    allowsBranchSelection(): BOOL;
    setAllowsBranchSelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407585-allowsemptyselection
    allowsEmptySelection(): BOOL;
    setAllowsEmptySelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407509-allowsmultipleselection
    allowsMultipleSelection(): BOOL;
    setAllowsMultipleSelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407807-selectedrowindexesincolumn
    selectedRowIndexesInColumn(column: NSInteger):NSIndexSet;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407618-selectrowindexes
    selectRowIndexes_inColumn(indexes: NSIndexSet, column: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407682-allowstypeselect
    allowsTypeSelect(): BOOL;
    setAllowsTypeSelect(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407730-selectedcell
    selectedCell(): id;
    setSelectedCell(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407592-selectedcellincolumn
    selectedCellInColumn(column: NSInteger):NSBrowser;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407588-selectedcells
    selectedCells(): NSCell;
    setSelectedCells(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407717-selectall
    selectAll(sender: NSBrowser):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407528-selectedrowincolumn
    selectedRowInColumn(column: NSInteger):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407560-selectrow
    selectRow_inColumn(row: NSInteger, column: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407507-selectionindexpath
    selectionIndexPath(): NSIndexPath;
    setSelectionIndexPath(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407536-selectionindexpaths
    selectionIndexPaths(): NSIndexPath;
    setSelectionIndexPaths(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407581-loadedcellatrow
    loadedCellAtRow_column(row: NSInteger, col: NSInteger):NSBrowser;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407558-edititematindexpath
    editItemAtIndexPath_withEvent_select(indexPath: NSIndexPath, event: NSEvent, select: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407673-itematindexpath
    itemAtIndexPath(indexPath: NSIndexPath):NSBrowser;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407701-itematrow
    itemAtRow_inColumn(row: NSInteger, column: NSInteger):NSBrowser;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407739-indexpathforcolumn
    indexPathForColumn(column: NSInteger):NSIndexPath;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407713-isleafitem
    isLeafItem(item: NSBrowser):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407570-parentforitemsincolumn
    parentForItemsInColumn(column: NSInteger):NSBrowser;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407731-path
    path():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407751-setpath
    setPath(path: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407727-pathtocolumn
    pathToColumn(column: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407688-pathseparator
    pathSeparator(): string | NSString;
    setPathSeparator(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407723-addcolumn
    addColumn():void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407568-selectedcolumn
    selectedColumn(): NSInteger;
    setSelectedColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407715-lastcolumn
    lastColumn(): NSInteger;
    setLastColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407703-firstvisiblecolumn
    firstVisibleColumn(): NSInteger;
    setFirstVisibleColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407700-numberofvisiblecolumns
    numberOfVisibleColumns(): NSInteger;
    setNumberOfVisibleColumns(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407610-lastvisiblecolumn
    lastVisibleColumn(): NSInteger;
    setLastVisibleColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407725-validatevisiblecolumns
    validateVisibleColumns():void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407758-loaded
    loaded(): BOOL;
    setLoaded(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407745-loadcolumnzero
    loadColumnZero():void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407764-reloadcolumn
    reloadColumn(column: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407794-titleofcolumn
    titleOfColumn(column: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407575-settitle
    setTitle_ofColumn(string: string | NSString, column: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407735-titled
    titled(): BOOL;
    setTitled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407809-drawtitleofcolumn
    drawTitleOfColumn_inRect(column: NSInteger, rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407709-titleheight
    titleHeight(): CGFloat;
    setTitleHeight(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407544-titleframeofcolumn
    titleFrameOfColumn(column: NSInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407608-noteheightofrowswithindexeschang
    noteHeightOfRowsWithIndexesChanged_inColumn(indexSet: NSIndexSet, columnIndex: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407805-reloaddataforrowindexes
    reloadDataForRowIndexes_inColumn(rowIndexes: NSIndexSet, column: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407551-hashorizontalscroller
    hasHorizontalScroller(): BOOL;
    setHasHorizontalScroller(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407516-scrollcolumntovisible
    scrollColumnToVisible(column: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407747-scrollcolumnsleftby
    scrollColumnsLeftBy(shiftAmount: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407684-scrollcolumnsrightby
    scrollColumnsRightBy(shiftAmount: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407719-scrollrowtovisible
    scrollRowToVisible_inColumn(row: NSInteger, column: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1807150-draggingsourceoperationmaskforlo
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407559-setdraggingsourceoperationmask
    setDraggingSourceOperationMask_forLocal(mask: NSDragOperation, isLocal: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407632-candragrowswithindexes
    canDragRowsWithIndexes_inColumn_withEvent(rowIndexes: NSIndexSet, column: NSInteger, event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407532-draggingimageforrowswithindexes
    draggingImageForRowsWithIndexes_inColumn_withEvent_offset(rowIndexes: NSIndexSet, column: NSInteger, event: NSEvent, dragImageOffset: NSPointPointer):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1807158-namesofpromisedfilesdroppedatdes
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407620-frameofcolumn
    frameOfColumn(column: NSInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407617-frameofinsideofcolumn
    frameOfInsideOfColumn(column: NSInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407622-frameofrow
    frameOfRow_inColumn(row: NSInteger, column: NSInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407606-getrow
    getRow_column_forPoint(row: NSInteger, column: NSInteger, point: NSPoint):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407698-doubleaction
    doubleAction(): SEL;
    setDoubleAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407614-sendsactiononarrowkeys
    sendsActionOnArrowKeys(): BOOL;
    setSendsActionOnArrowKeys(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407675-sendaction
    sendAction():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407600-doclick
    doClick(sender: NSBrowser):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407800-dodoubleclick
    doDoubleClick(sender: NSBrowser):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407590-clickedcolumn
    clickedColumn(): NSInteger;
    setClickedColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407671-clickedrow
    clickedRow(): NSInteger;
    setClickedRow(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407668-removesavedcolumnswithautosavena
    removeSavedColumnsWithAutosaveName(name: NSBrowserColumnsAutosaveName):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407650-columnsautosavename
    columnsAutosaveName(): NSBrowserColumnsAutosaveName;
    setColumnsAutosaveName(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407522-columncontentwidthforcolumnwidth
    columnContentWidthForColumnWidth(columnWidth: CGFloat):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407648-columnwidthforcolumncontentwidth
    columnWidthForColumnContentWidth(columnContentWidth: CGFloat):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407694-columnresizingtype
    columnResizingType(): NSBrowserColumnResizingType;
    setColumnResizingType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407690-prefersallcolumnuserresizing
    prefersAllColumnUserResizing(): BOOL;
    setPrefersAllColumnUserResizing(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407778-widthofcolumn
    widthOfColumn(column: NSInteger):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407679-setwidth
    setWidth_ofColumn(columnWidth: CGFloat, columnIndex: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407615-defaultcolumnwidth
    defaultColumnWidth():CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407651-setdefaultcolumnwidth
    setDefaultColumnWidth(columnWidth: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407642-rowheight
    rowHeight(): CGFloat;
    setRowHeight(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407743-updatescroller
    updateScroller():void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407655-scrollviascroller
    scrollViaScroller(sender: NSScroller):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407753-displayallcolumns
    displayAllColumns():void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407760-displaycolumn
    displayColumn(column: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407640-columnofmatrix
    columnOfMatrix(matrix: NSMatrix):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407573-matrixincolumn
    matrixInColumn(column: NSInteger):NSMatrix;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407790-matrixclass
    matrixClass():Class;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407711-setmatrixclass
    setMatrixClass(factoryId: Class):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407546-acceptsarrowkeys
    acceptsArrowKeys():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbrowser/1407680-setacceptsarrowkeys
    setAcceptsArrowKeys(flag: BOOL):void;
    //
    alloc():NSBrowser;
    //
    init():NSBrowser;
  }
}

declare const NSBrowser: cocoascript.NSBrowser;
// doc://com.apple.documentation/documentation/appkit/nsbrowsercolumnconfigurationdidchangenotification
declare const NSBrowserColumnConfigurationDidChangeNotification: NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsbindinginfokey
  type NSBindingInfoKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsbindingname
  type NSBindingName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsbindingoption
  type NSBindingOption = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsstoryboardname
  type NSStoryboardName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsstoryboardcontrollercreator
  type NSStoryboardControllerCreator = cocoascript.NSCoder;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsstoryboardsceneidentifier
  type NSStoryboardSceneIdentifier = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsstoryboardsegueidentifier
  type NSStoryboardSegueIdentifier = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsnibname
  type NSNibName = cocoascript.NSString;
}
declare namespace cocoascript {
  /**
   * An object that clips a document view to a scroll view's frame.
   * doc://com.apple.documentation/documentation/appkit/nsclipview
   */
  interface NSClipView extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nsclipview/1524587-documentview
    documentView(): NSView;
    setDocumentView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsclipview/1528826-scrolltopoint
    scrollToPoint(newOrigin: NSPoint):void;
    // doc://com.apple.documentation/documentation/appkit/nsclipview/1528953-autoscroll
    autoscroll(event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsclipview/1526678-constrainscrollpoint
    constrainScrollPoint(newOrigin: NSPoint):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nsclipview/1534160-constrainboundsrect
    constrainBoundsRect(proposedBounds: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsclipview/1532142-copiesonscroll
    copiesOnScroll(): BOOL;
    setCopiesOnScroll(): void;
    // doc://com.apple.documentation/documentation/appkit/nsclipview/1524329-contentinsets
    contentInsets(): NSEdgeInsets;
    setContentInsets(): void;
    // doc://com.apple.documentation/documentation/appkit/nsclipview/1527540-automaticallyadjustscontentinset
    automaticallyAdjustsContentInsets(): BOOL;
    setAutomaticallyAdjustsContentInsets(): void;
    // doc://com.apple.documentation/documentation/appkit/nsclipview/1533338-documentrect
    documentRect(): NSRect;
    setDocumentRect(): void;
    // doc://com.apple.documentation/documentation/appkit/nsclipview/1527958-documentvisiblerect
    documentVisibleRect(): NSRect;
    setDocumentVisibleRect(): void;
    // doc://com.apple.documentation/documentation/appkit/nsclipview/1535377-documentcursor
    documentCursor(): NSCursor;
    setDocumentCursor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsclipview/1534684-drawsbackground
    drawsBackground(): BOOL;
    setDrawsBackground(): void;
    // doc://com.apple.documentation/documentation/appkit/nsclipview/1525469-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsclipview/1531354-viewboundschanged
    viewBoundsChanged(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsclipview/1526364-viewframechanged
    viewFrameChanged(notification: NSNotification):void;
    //
    alloc():NSClipView;
    //
    init():NSClipView;
  }
}

declare const NSClipView: cocoascript.NSClipView;
declare namespace cocoascript {
  /**
   * An optional layer delegate method for handling resolution changes.
   * doc://com.apple.documentation/documentation/appkit/nsviewlayercontentscaledelegate
   */
  interface NSViewLayerContentScaleDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsviewlayercontentscaledelegate/3005294-layer
    layer_shouldInheritContentsScale_fromWindow(layer: CALayer, newScale: CGFloat, window: NSWindow):BOOL;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsviewfullscreenmodeoptionkey
  type NSViewFullScreenModeOptionKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsdefinitionoptionkey
  type NSDefinitionOptionKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsdefinitionpresentationtype
  type NSDefinitionPresentationType = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsbordertype
  type NSBorderType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsautoresizingmaskoptions
  type NSAutoresizingMaskOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstooltiptag
  type NSToolTipTag = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstrackingrecttag
  type NSTrackingRectTag = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsviewlayercontentsredrawpolicy
  type NSViewLayerContentsRedrawPolicy = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsviewlayercontentsplacement
  type NSViewLayerContentsPlacement = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsimagename
  type NSImageName = cocoascript.NSString;
}
declare namespace cocoascript {
  /**
   * A configuration you use to create a symbol image.
   * doc://com.apple.documentation/documentation/appkit/nsimagesymbolconfiguration
   */
  interface NSImageSymbolConfiguration extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsimagesymbolconfiguration/3656510-configurationwithpointsize
    configurationWithPointSize_weight(pointSize: CGFloat, weight: NSFontWeight):NSImageSymbolConfiguration;
    // doc://com.apple.documentation/documentation/appkit/nsimagesymbolconfiguration/3656511-configurationwithpointsize
    configurationWithPointSize_weight_scale(pointSize: CGFloat, weight: NSFontWeight, scale: NSImageSymbolScale):NSImageSymbolConfiguration;
    // doc://com.apple.documentation/documentation/appkit/nsimagesymbolconfiguration/3656512-configurationwithtextstyle
    configurationWithTextStyle(style: NSFontTextStyle):NSImageSymbolConfiguration;
    // doc://com.apple.documentation/documentation/appkit/nsimagesymbolconfiguration/3656513-configurationwithtextstyle
    configurationWithTextStyle_scale(style: NSFontTextStyle, scale: NSImageSymbolScale):NSImageSymbolConfiguration;
    // doc://com.apple.documentation/documentation/appkit/nsimagesymbolconfiguration/3667455-configurationwithscale
    configurationWithScale(scale: NSImageSymbolScale):NSImageSymbolConfiguration;
    //
    alloc():NSImageSymbolConfiguration;
    //
    init():NSImageSymbolConfiguration;
  }
}

declare const NSImageSymbolConfiguration: cocoascript.NSImageSymbolConfiguration;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsimagehintkey
  type NSImageHintKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsimagelayoutdirection
  type NSImageLayoutDirection = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscompositingoperation
  type NSCompositingOperation = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsimageresizingmode
  type NSImageResizingMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsimagecachemode
  type NSImageCacheMode = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * A set of optional methods implemented by delegates of
   * doc://com.apple.documentation/documentation/appkit/nscontroltexteditingdelegate
   */
  interface NSControlTextEditingDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscontroltexteditingdelegate/1428873-control
    control_isValidObject(control: NSControl, obj: NSControlTextEditingDelegate):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscontroltexteditingdelegate/1428941-control
    control_didFailToValidatePartialString_errorDescription(control: NSControl, string: string | NSString, error: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nscontroltexteditingdelegate/1428883-control
    control_didFailToFormatString_errorDescription(control: NSControl, string: string | NSString, error: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscontroltexteditingdelegate/1428865-control
    control_textShouldBeginEditing(control: NSControl, fieldEditor: NSText):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscontroltexteditingdelegate/1428984-control
    control_textShouldEndEditing(control: NSControl, fieldEditor: NSText):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscontroltexteditingdelegate/1428925-control
    control_textView_completions_forPartialWordRange_indexOfSelectedItem(control: NSControl, textView: NSTextView, words: string | NSString, charRange: NSRange, index: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nscontroltexteditingdelegate/1428898-control
    control_textView_doCommandBySelector(control: NSControl, textView: NSTextView, commandSelector: SEL):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscontroltexteditingdelegate/3005176-controltextdidbeginediting
    controlTextDidBeginEditing(obj: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nscontroltexteditingdelegate/3005177-controltextdidchange
    controlTextDidChange(obj: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nscontroltexteditingdelegate/3005178-controltextdidendediting
    controlTextDidEndEditing(obj: NSNotification):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscontrolsize
  type NSControlSize = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsbackgroundstyle
  type NSBackgroundStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscontrolstatevalue
  type NSControlStateValue = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscelltype
  type NSCellType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscellattribute
  type NSCellAttribute = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscellimageposition
  type NSCellImagePosition = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsimagescaling
  type NSImageScaling = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscellstatevalue
  type NSCellStateValue = cocoascript.NSControlStateValue;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscellstylemask
  type NSCellStyleMask = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscontroltint
  type NSControlTint = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscellhitresult
  type NSCellHitResult = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * A container that aligns views in a flexible grid of rows and columns.
   * doc://com.apple.documentation/documentation/appkit/nsgridview
   */
  interface NSGridView extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639714-gridviewwithnumberofcolumns
    gridViewWithNumberOfColumns_rows(columnCount: NSInteger, rowCount: NSInteger):NSGridView;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639782-gridviewwithviews
    gridViewWithViews(rows: NSView):NSGridView;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639692-initwithframe
    initWithFrame(frameRect: NSRect):NSGridView;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639780-initwithcoder
    initWithCoder(coder: NSCoder):NSGridView;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639705-numberofrows
    numberOfRows(): NSInteger;
    setNumberOfRows(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639698-numberofcolumns
    numberOfColumns(): NSInteger;
    setNumberOfColumns(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639667-indexofcolumn
    indexOfColumn(column: NSGridColumn):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639761-rowatindex
    rowAtIndex(index: NSInteger):NSGridRow;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639674-columnatindex
    columnAtIndex(index: NSInteger):NSGridColumn;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639661-indexofrow
    indexOfRow(row: NSGridRow):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639690-addrowwithviews
    addRowWithViews(views: NSView):NSGridRow;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639787-insertrowatindex
    insertRowAtIndex_withViews(index: NSInteger, views: NSView):NSGridRow;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639771-removerowatindex
    removeRowAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639687-moverowatindex
    moveRowAtIndex_toIndex(fromIndex: NSInteger, toIndex: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639783-addcolumnwithviews
    addColumnWithViews(views: NSView):NSGridColumn;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639700-insertcolumnatindex
    insertColumnAtIndex_withViews(index: NSInteger, views: NSView):NSGridColumn;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639759-removecolumnatindex
    removeColumnAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639659-movecolumnatindex
    moveColumnAtIndex_toIndex(fromIndex: NSInteger, toIndex: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639776-columnspacing
    columnSpacing(): CGFloat;
    setColumnSpacing(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639730-rowspacing
    rowSpacing(): CGFloat;
    setRowSpacing(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1823691-rowalignment
    rowAlignment(): NSGridRowAlignment;
    setRowAlignment(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639732-xplacement
    xPlacement(): NSGridCellPlacement;
    setXPlacement(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639767-yplacement
    yPlacement(): NSGridCellPlacement;
    setYPlacement(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639778-cellatcolumnindex
    cellAtColumnIndex_rowIndex(columnIndex: NSInteger, rowIndex: NSInteger):NSGridCell;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639703-cellforview
    cellForView(view: NSView):NSGridCell;
    // doc://com.apple.documentation/documentation/appkit/nsgridview/1639749-mergecellsinhorizontalrange
    mergeCellsInHorizontalRange_verticalRange(hRange: NSRange, vRange: NSRange):void;
    //
    alloc():NSGridView;
    //
    init():NSGridView;
  }
}

declare const NSGridView: cocoascript.NSGridView;
declare namespace cocoascript {
  /**
   * An individual content area within a grid view, typically at the intersection of a row and a column.
   * doc://com.apple.documentation/documentation/appkit/nsgridcell
   */
  interface NSGridCell extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsgridcell/1639747-column
    column(): NSGridColumn;
    setColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridcell/1639763-row
    row(): NSGridRow;
    setRow(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridcell/1639721-contentview
    contentView(): NSView;
    setContentView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridcell/1639681-emptycontentview
    emptyContentView(): NSView;
    setEmptyContentView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridcell/1639717-customplacementconstraints
    customPlacementConstraints(): NSLayoutConstraint;
    setCustomPlacementConstraints(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridcell/1823686-rowalignment
    rowAlignment(): NSGridRowAlignment;
    setRowAlignment(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridcell/1639710-xplacement
    xPlacement(): NSGridCellPlacement;
    setXPlacement(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridcell/1639737-yplacement
    yPlacement(): NSGridCellPlacement;
    setYPlacement(): void;
    //
    alloc():NSGridCell;
    //
    init():NSGridCell;
  }
}

declare const NSGridCell: cocoascript.NSGridCell;
declare namespace cocoascript {
  /**
   * A column within a grid view.
   * doc://com.apple.documentation/documentation/appkit/nsgridcolumn
   */
  interface NSGridColumn extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsgridcolumn/1639675-gridview
    gridView(): NSGridView;
    setGridView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridcolumn/1639742-hidden
    hidden(): BOOL;
    setHidden(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridcolumn/1639769-leadingpadding
    leadingPadding(): CGFloat;
    setLeadingPadding(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridcolumn/1639719-numberofcells
    numberOfCells(): NSInteger;
    setNumberOfCells(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridcolumn/1639670-trailingpadding
    trailingPadding(): CGFloat;
    setTrailingPadding(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridcolumn/1639679-width
    width(): CGFloat;
    setWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridcolumn/1639663-xplacement
    xPlacement(): NSGridCellPlacement;
    setXPlacement(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridcolumn/1639683-cellatindex
    cellAtIndex(index: NSInteger):NSGridCell;
    // doc://com.apple.documentation/documentation/appkit/nsgridcolumn/1639752-mergecellsinrange
    mergeCellsInRange(range: NSRange):void;
    //
    alloc():NSGridColumn;
    //
    init():NSGridColumn;
  }
}

declare const NSGridColumn: cocoascript.NSGridColumn;
declare namespace cocoascript {
  /**
   * A row within a grid view.
   * doc://com.apple.documentation/documentation/appkit/nsgridrow
   */
  interface NSGridRow extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsgridrow/1639685-numberofcells
    numberOfCells(): NSInteger;
    setNumberOfCells(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridrow/1639723-hidden
    hidden(): BOOL;
    setHidden(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridrow/1639785-toppadding
    topPadding(): CGFloat;
    setTopPadding(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridrow/1639739-bottompadding
    bottomPadding(): CGFloat;
    setBottomPadding(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridrow/1639728-height
    height(): CGFloat;
    setHeight(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridrow/1823690-rowalignment
    rowAlignment(): NSGridRowAlignment;
    setRowAlignment(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridrow/1639665-yplacement
    yPlacement(): NSGridCellPlacement;
    setYPlacement(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridrow/1639773-gridview
    gridView(): NSGridView;
    setGridView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsgridrow/1639712-cellatindex
    cellAtIndex(index: NSInteger):NSGridCell;
    // doc://com.apple.documentation/documentation/appkit/nsgridrow/1639726-mergecellsinrange
    mergeCellsInRange(range: NSRange):void;
    //
    alloc():NSGridRow;
    //
    init():NSGridRow;
  }
}

declare const NSGridRow: cocoascript.NSGridRow;
declare namespace cocoascript {
  /**
   * A set of optional methods that a delegate of a split view implements.
   * doc://com.apple.documentation/documentation/appkit/nssplitviewdelegate
   */
  interface NSSplitViewDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nssplitviewdelegate/1455289-splitviewwillresizesubviews
    splitViewWillResizeSubviews(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewdelegate/1455314-splitviewdidresizesubviews
    splitViewDidResizeSubviews(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewdelegate/1455304-splitview
    splitView_canCollapseSubview(splitView: NSSplitView, subview: NSView):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewdelegate/1455263-splitview
    splitView_shouldCollapseSubview_forDoubleClickOnDividerAtIndex(splitView: NSSplitView, subview: NSView, dividerIndex: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewdelegate/1455288-splitview
    splitView_effectiveRect_forDrawnRect_ofDividerAtIndex(splitView: NSSplitView, proposedEffectiveRect: NSRect, drawnRect: NSRect, dividerIndex: NSInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewdelegate/1455280-splitview
    splitView_shouldHideDividerAtIndex(splitView: NSSplitView, dividerIndex: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewdelegate/1455292-splitview
    splitView_additionalEffectiveRectOfDividerAtIndex(splitView: NSSplitView, dividerIndex: NSInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewdelegate/1455312-splitview
    splitView_constrainSplitPosition_ofSubviewAt(splitView: NSSplitView, proposedPosition: CGFloat, dividerIndex: NSInteger):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewdelegate/1455302-splitview
    splitView_constrainMinCoordinate_ofSubviewAt(splitView: NSSplitView, proposedMinimumPosition: CGFloat, dividerIndex: NSInteger):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewdelegate/1455300-splitview
    splitView_constrainMaxCoordinate_ofSubviewAt(splitView: NSSplitView, proposedMaximumPosition: CGFloat, dividerIndex: NSInteger):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewdelegate/1455273-splitview
    splitView_resizeSubviewsWithOldSize(splitView: NSSplitView, oldSize: NSSize):void;
    // doc://com.apple.documentation/documentation/appkit/nssplitviewdelegate/1455269-splitview
    splitView_shouldAdjustSizeOfSubview(splitView: NSSplitView, view: NSView):BOOL;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nssplitviewdividerstyle
  type NSSplitViewDividerStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nssplitviewautosavename
  type NSSplitViewAutosaveName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsuserinterfacelayoutorientation
  type NSUserInterfaceLayoutOrientation = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nslayoutpriorityrequired
declare const NSLayoutPriorityRequired: NSLayoutPriority;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsstackviewvisibilitypriority
  type NSStackViewVisibilityPriority = number;
}
declare namespace cocoascript {
  /**
   * A set of methods you use to respond to a stack view detaching and reattaching views.
   * doc://com.apple.documentation/documentation/appkit/nsstackviewdelegate
   */
  interface NSStackViewDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsstackviewdelegate/1488921-stackview
    stackView_didReattachViews(stackView: NSStackView, views: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsstackviewdelegate/1488953-stackview
    stackView_willDetachViews(stackView: NSStackView, views: NSView):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsstackviewgravity
  type NSStackViewGravity = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsstackviewspacingusedefault
declare const NSStackViewSpacingUseDefault: CGFloat;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsstackviewdistribution
  type NSStackViewDistribution = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * The
   * doc://com.apple.documentation/documentation/appkit/nstabviewdelegate
   */
  interface NSTabViewDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstabviewdelegate/1391657-tabviewdidchangenumberoftabviewi
    tabViewDidChangeNumberOfTabViewItems(tabView: NSTabView):void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewdelegate/1391651-tabview
    tabView_shouldSelectTabViewItem(tabView: NSTabView, tabViewItem: NSTabViewItem):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstabviewdelegate/1391611-tabview
    tabView_willSelectTabViewItem(tabView: NSTabView, tabViewItem: NSTabViewItem):void;
    // doc://com.apple.documentation/documentation/appkit/nstabviewdelegate/1391582-tabview
    tabView_didSelectTabViewItem(tabView: NSTabView, tabViewItem: NSTabViewItem):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstabviewtype
  type NSTabViewType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstabposition
  type NSTabPosition = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstabviewbordertype
  type NSTabViewBorderType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * An object that controls scrolling of a document view within a scroll view or other type of container view.
   * doc://com.apple.documentation/documentation/appkit/nsscroller
   */
  interface NSScroller extends NSControl {
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523603-scrollerwidthforcontrolsize
    scrollerWidthForControlSize_scrollerStyle(controlSize: NSControlSize, scrollerStyle: NSScrollerStyle):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523613-scrollerwidth
    scrollerWidth():CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523615-scrollerwidthforcontrolsize
    scrollerWidthForControlSize(controlSize: NSControlSize):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523659-controlsize
    controlSize(): NSControlSize;
    setControlSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523676-arrowsposition
    arrowsPosition(): NSScrollArrowPosition;
    setArrowsPosition(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523664-setfloatvalue
    setFloatValue_knobProportion(value: number, proportion: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523626-setknobproportion
    setKnobProportion(proportion: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523647-rectforpart
    rectForPart(partCode: NSScrollerPart):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523645-testpart
    testPart(point: NSPoint):NSScrollerPart;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523625-checkspaceforparts
    checkSpaceForParts():void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523648-usableparts
    usableParts(): NSUsableScrollerParts;
    setUsableParts(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523599-drawarrow
    drawArrow_highlight(whichArrow: NSScrollerArrow, flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523622-drawknobslotinrect
    drawKnobSlotInRect_highlight(slotRect: NSRect, flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523663-drawknob
    drawKnob():void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523674-drawparts
    drawParts():void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523657-highlight
    highlight(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523596-hitpart
    hitPart(): NSScrollerPart;
    setHitPart(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523594-trackknob
    trackKnob(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523643-trackscrollbuttons
    trackScrollButtons(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523672-controltint
    controlTint(): NSControlTint;
    setControlTint(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523620-preferredscrollerstyle
    preferredScrollerStyle(): NSScrollerStyle;
    setPreferredScrollerStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523591-scrollerstyle
    scrollerStyle(): NSScrollerStyle;
    setScrollerStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523666-knobstyle
    knobStyle(): NSScrollerKnobStyle;
    setKnobStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/1523593-knobproportion
    knobProportion(): CGFloat;
    setKnobProportion(): void;
    // doc://com.apple.documentation/documentation/appkit/nsscroller/2870071-compatiblewithoverlayscrollers
    compatibleWithOverlayScrollers(): BOOL;
    setCompatibleWithOverlayScrollers(): void;
    //
    alloc():NSScroller;
    //
    init():NSScroller;
  }
}

declare const NSScroller: cocoascript.NSScroller;
declare namespace cocoascript {
  /**
   * A ruler and the markers above or to the side of a scroll view’s document view.
   * doc://com.apple.documentation/documentation/appkit/nsrulerview
   */
  interface NSRulerView extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1535316-initwithscrollview
    initWithScrollView_orientation(scrollView: NSScrollView, orientation: NSRulerOrientation):NSRulerView;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1644122-initwithcoder
    initWithCoder(coder: NSCoder):NSRulerView;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1534137-registerunitwithname
    registerUnitWithName_abbreviation_unitToPointsConversionFactor_stepUpCycle_stepDownCycle(unitName: NSRulerViewUnitName, abbreviation: string | NSString, conversionFactor: CGFloat, stepUpCycle: NSNumber, stepDownCycle: NSNumber):void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1531493-measurementunits
    measurementUnits(): NSRulerViewUnitName;
    setMeasurementUnits(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1533483-clientview
    clientView(): NSView;
    setClientView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1532804-accessoryview
    accessoryView(): NSView;
    setAccessoryView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1535432-originoffset
    originOffset(): CGFloat;
    setOriginOffset(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1535213-markers
    markers(): NSRulerMarker;
    setMarkers(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1524916-addmarker
    addMarker(marker: NSRulerMarker):void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1528230-removemarker
    removeMarker(marker: NSRulerMarker):void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1535375-trackmarker
    trackMarker_withMouseEvent(marker: NSRulerMarker, event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1527414-moverulerlinefromlocation
    moveRulerlineFromLocation_toLocation(oldLocation: CGFloat, newLocation: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1529177-drawhashmarksandlabelsinrect
    drawHashMarksAndLabelsInRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1525997-drawmarkersinrect
    drawMarkersInRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1530838-invalidatehashmarks
    invalidateHashMarks():void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1533741-scrollview
    scrollView(): NSScrollView;
    setScrollView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1530596-orientation
    orientation(): NSRulerOrientation;
    setOrientation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1530160-reservedthicknessforaccessoryvie
    reservedThicknessForAccessoryView(): CGFloat;
    setReservedThicknessForAccessoryView(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1535112-reservedthicknessformarkers
    reservedThicknessForMarkers(): CGFloat;
    setReservedThicknessForMarkers(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1527872-rulethickness
    ruleThickness(): CGFloat;
    setRuleThickness(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1526479-requiredthickness
    requiredThickness(): CGFloat;
    setRequiredThickness(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1534886-baselinelocation
    baselineLocation(): CGFloat;
    setBaselineLocation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulerview/1526302-flipped
    flipped(): BOOL;
    setFlipped(): void;
    //
    alloc():NSRulerView;
    //
    init():NSRulerView;
  }
}

declare const NSRulerView: cocoascript.NSRulerView;
declare namespace cocoascript {
  /**
   * A symbol on a ruler view, indicating a location for the graphics element it represents in the client of the ruler view.
   * doc://com.apple.documentation/documentation/appkit/nsrulermarker
   */
  interface NSRulerMarker extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsrulermarker/1496240-initwithrulerview
    initWithRulerView_markerLocation_image_imageOrigin(ruler: NSRulerView, location: CGFloat, image: NSImage, imageOrigin: NSPoint):NSRulerMarker;
    // doc://com.apple.documentation/documentation/appkit/nsrulermarker/1496239-ruler
    ruler(): NSRulerView;
    setRuler(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulermarker/1496251-image
    image(): NSImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulermarker/1496236-imageorigin
    imageOrigin(): NSPoint;
    setImageOrigin(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulermarker/1496249-imagerectinruler
    imageRectInRuler(): NSRect;
    setImageRectInRuler(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulermarker/1496245-thicknessrequiredinruler
    thicknessRequiredInRuler(): CGFloat;
    setThicknessRequiredInRuler(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulermarker/1496247-movable
    movable(): BOOL;
    setMovable(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulermarker/1496238-removable
    removable(): BOOL;
    setRemovable(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulermarker/1496255-markerlocation
    markerLocation(): CGFloat;
    setMarkerLocation(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulermarker/1496244-representedobject
    representedObject(): NSCopying;
    setRepresentedObject(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulermarker/1496234-drawrect
    drawRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsrulermarker/1496253-dragging
    dragging(): BOOL;
    setDragging(): void;
    // doc://com.apple.documentation/documentation/appkit/nsrulermarker/1496248-trackmouse
    trackMouse_adding(mouseDownEvent: NSEvent, isAdding: BOOL):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsrulermarker/1642136-initwithcoder
    initWithCoder(coder: NSCoder):NSRulerMarker;
    //
    alloc():NSRulerMarker;
    //
    init():NSRulerMarker;
  }
}

declare const NSRulerMarker: cocoascript.NSRulerMarker;
declare namespace cocoascript {
  /**
   * A set of methods that a browser delegate implements to manage selection, scrolling, sizing, and other behavior.
   * doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate
   */
  interface NSBrowserDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407540-browser
    browser_isColumnValid(sender: NSBrowser, column: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407583-browser
    browser_numberOfRowsInColumn(sender: NSBrowser, column: NSInteger):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407755-browser
    browser_numberOfChildrenOfItem(browser: NSBrowser, item: NSBrowserDelegate):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407677-browser
    browser_titleOfColumn(sender: NSBrowser, column: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407804-browser
    browser_shouldTypeSelectForEvent_withCurrentSearchString(browser: NSBrowser, event: NSEvent, searchString: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407762-browser
    browser_typeSelectStringForRow_inColumn(browser: NSBrowser, row: NSInteger, column: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407553-browser
    browser_nextTypeSelectMatchFromRow_toRow_inColumn_forString(browser: NSBrowser, startRow: NSInteger, endRow: NSInteger, column: NSInteger, searchString: string | NSString):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407548-browser
    browser_selectCellWithString_inColumn(sender: NSBrowser, title: string | NSString, column: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407802-browser
    browser_selectRow_inColumn(sender: NSBrowser, row: NSInteger, column: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407660-browser
    browser_selectionIndexesForProposedSelection_inColumn(browser: NSBrowser, proposedSelectionIndexes: NSIndexSet, column: NSInteger):NSIndexSet;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407572-browser
    browser_child_ofItem(browser: NSBrowser, index: NSInteger, item: NSBrowserDelegate):NSBrowserDelegate;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407786-browser
    browser_isLeafItem(browser: NSBrowser, item: NSBrowserDelegate):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407634-browser
    browser_shouldEditItem(browser: NSBrowser, item: NSBrowserDelegate):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407594-browser
    browser_objectValueForItem(browser: NSBrowser, item: NSBrowserDelegate):NSBrowserDelegate;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407756-browser
    browser_setObjectValue_forItem(browser: NSBrowser, object: NSBrowserDelegate, item: NSBrowserDelegate):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407526-rootitemforbrowser
    rootItemForBrowser(browser: NSBrowser):NSBrowserDelegate;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407772-browser
    browser_previewViewControllerForLeafItem(browser: NSBrowser, item: NSBrowserDelegate):NSViewController;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407782-browser
    browser_headerViewControllerForItem(browser: NSBrowser, item: NSBrowserDelegate):NSViewController;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407666-browser
    browser_createRowsForColumn_inMatrix(sender: NSBrowser, column: NSInteger, matrix: NSMatrix):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407705-browser
    browser_willDisplayCell_atRow_column(sender: NSBrowser, cell: NSBrowserDelegate, row: NSInteger, column: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407612-browser
    browser_didChangeLastColumn_toColumn(browser: NSBrowser, oldLastColumn: NSInteger, column: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407721-browserwillscroll
    browserWillScroll(sender: NSBrowser):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407566-browserdidscroll
    browserDidScroll(sender: NSBrowser):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407768-browser
    browser_canDragRowsWithIndexes_inColumn_withEvent(browser: NSBrowser, rowIndexes: NSIndexSet, column: NSInteger, event: NSEvent):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407598-browser
    browser_draggingImageForRowsWithIndexes_inColumn_withEvent_offset(browser: NSBrowser, rowIndexes: NSIndexSet, column: NSInteger, event: NSEvent, dragImageOffset: NSPointPointer):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407766-browser
    browser_validateDrop_proposedRow_column_dropOperation(browser: NSBrowser, info: NSDraggingInfo, row: NSInteger, column: NSInteger, dropOperation: NSBrowserDropOperation):NSDragOperation;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407737-browser
    browser_acceptDrop_atRow_column_dropOperation(browser: NSBrowser, info: NSDraggingInfo, row: NSInteger, column: NSInteger, dropOperation: NSBrowserDropOperation):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407657-browser
    browser_writeRowsWithIndexes_inColumn_toPasteboard(browser: NSBrowser, rowIndexes: NSIndexSet, column: NSInteger, pasteboard: NSPasteboard):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407624-browser
    browser_namesOfPromisedFilesDroppedAtDestination_forDraggedRowsWithIndexes_inColumn(browser: NSBrowser, dropDestination: NSURL, rowIndexes: NSIndexSet, column: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407557-browser
    browser_shouldSizeColumn_forUserResize_toWidth(browser: NSBrowser, columnIndex: NSInteger, forUserResize: BOOL, suggestedWidth: CGFloat):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407524-browser
    browser_sizeToFitWidthOfColumn(browser: NSBrowser, columnIndex: NSInteger):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407542-browsercolumnconfigurationdidcha
    browserColumnConfigurationDidChange(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407646-browser
    browser_heightOfRow_inColumn(browser: NSBrowser, row: NSInteger, columnIndex: NSInteger):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsbrowserdelegate/1407602-browser
    browser_shouldShowCellExpansionForRow_column(browser: NSBrowser, row: NSInteger, column: NSInteger):BOOL;
  }
}
declare namespace cocoascript {
  /**
   * The user interface of a browser.
   * doc://com.apple.documentation/documentation/appkit/nsbrowsercell
   */
  interface NSBrowserCell extends NSCell {
    // doc://com.apple.documentation/documentation/appkit/nsbrowsercell/1435775-branchimage
    branchImage(): NSImage;
    setBranchImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowsercell/1435769-highlightedbranchimage
    highlightedBranchImage(): NSImage;
    setHighlightedBranchImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowsercell/1435766-image
    image(): NSImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowsercell/1435768-alternateimage
    alternateImage(): NSImage;
    setAlternateImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowsercell/1435773-reset
    reset():void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowsercell/1435770-set
    set():void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowsercell/1435771-leaf
    leaf(): BOOL;
    setLeaf(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowsercell/1435772-loaded
    loaded(): BOOL;
    setLoaded(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbrowsercell/1435767-highlightcolorinview
    highlightColorInView(controlView: NSView):NSColor;
    // doc://com.apple.documentation/documentation/appkit/nsbrowsercell/1644667-initwithcoder
    initWithCoder(coder: NSCoder):NSBrowserCell;
    // doc://com.apple.documentation/documentation/appkit/nsbrowsercell/1644593-initimagecell
    initImageCell(image: NSImage):NSBrowserCell;
    // doc://com.apple.documentation/documentation/appkit/nsbrowsercell/1644701-inittextcell
    initTextCell(string: string | NSString):NSBrowserCell;
    //
    alloc():NSBrowserCell;
    //
    init():NSBrowserCell;
  }
}

declare const NSBrowserCell: cocoascript.NSBrowserCell;
declare namespace cocoascript {
  /**
   * A protocol that defines a button to control the collapse of a collection view’s section.
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewsectionheaderview
   */
  interface NSCollectionViewSectionHeaderView extends NSCollectionViewElement {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewsectionheaderview/1644266-sectioncollapsebutton
    sectionCollapseButton(): NSButton;
    setSectionCollapseButton(): void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods that a data source object implements to provide the information and view objects that a collection view requires to present content.
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewdatasource
   */
  interface NSCollectionViewDataSource extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdatasource/1525901-numberofsectionsincollectionview
    numberOfSectionsInCollectionView(collectionView: NSCollectionView):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdatasource/1525594-collectionview
    collectionView_numberOfItemsInSection(collectionView: NSCollectionView, section: NSInteger):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdatasource/1524271-collectionview
    collectionView_itemForRepresentedObjectAtIndexPath(collectionView: NSCollectionView, indexPath: NSIndexPath):NSCollectionViewItem;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdatasource/1528286-collectionview
    collectionView_viewForSupplementaryElementOfKind_atIndexPath(collectionView: NSCollectionView, kind: NSCollectionViewSupplementaryElementKind, indexPath: NSIndexPath):NSView;
  }
}
declare namespace cocoascript {
  /**
   * The object you use to manage data and provide items for a collection view.
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewdiffabledatasource
   */
  interface NSCollectionViewDiffableDataSource extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdiffabledatasource/3281818-initwithcollectionview
    initWithCollectionView_itemProvider(collectionView: NSCollectionView, itemProvider: NSCollectionViewDiffableDataSourceItemProvider):NSCollectionViewDiffableDataSource;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdiffabledatasource/3281821-supplementaryviewprovider
    supplementaryViewProvider(): NSCollectionViewDiffableDataSourceSupplementaryViewProvider;
    setSupplementaryViewProvider(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdiffabledatasource/3281819-itemidentifierforindexpath
    itemIdentifierForIndexPath(indexPath: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdiffabledatasource/3281817-indexpathforitemidentifier
    indexPathForItemIdentifier(identifier: any):NSIndexPath;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdiffabledatasource/3281820-snapshot
    snapshot():NSDiffableDataSourceSnapshot;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdiffabledatasource/3281816-applysnapshot
    applySnapshot_animatingDifferences(snapshot: any, animatingDifferences: BOOL):void;
    //
    alloc():NSCollectionViewDiffableDataSource;
    //
    init():NSCollectionViewDiffableDataSource;
  }
}

declare const NSCollectionViewDiffableDataSource: cocoascript.NSCollectionViewDiffableDataSource;
declare namespace cocoascript {
  /**
   * The visual representation for a single data element in a collection view.
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewitem
   */
  interface NSCollectionViewItem extends NSViewController {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewitem/1525366-imageview
    imageView(): NSImageView;
    setImageView(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewitem/1527126-textfield
    textField(): NSTextField;
    setTextField(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewitem/1528214-selected
    selected(): BOOL;
    setSelected(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewitem/1527689-highlightstate
    highlightState(): NSCollectionViewItemHighlightState;
    setHighlightState(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewitem/1528221-collectionview
    collectionView(): NSCollectionView;
    setCollectionView(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewitem/1528303-draggingimagecomponents
    draggingImageComponents(): NSDraggingImageComponent;
    setDraggingImageComponents(): void;
    //
    alloc():NSCollectionViewItem;
    //
    init():NSCollectionViewItem;
  }
}

declare const NSCollectionViewItem: cocoascript.NSCollectionViewItem;
declare namespace cocoascript {
  /**
   * A set of methods that you use to manage the content in a collection view.
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewelement
   */
  interface NSCollectionViewElement extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewelement/1528248-prepareforreuse
    prepareForReuse():void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewelement/1528259-preferredlayoutattributesfitting
    preferredLayoutAttributesFittingAttributes(layoutAttributes: NSCollectionViewLayoutAttributes):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewelement/1528294-applylayoutattributes
    applyLayoutAttributes(layoutAttributes: NSCollectionViewLayoutAttributes):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewelement/1528165-willtransitionfromlayout
    willTransitionFromLayout_toLayout(oldLayout: NSCollectionViewLayout, newLayout: NSCollectionViewLayout):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewelement/1525851-didtransitionfromlayout
    didTransitionFromLayout_toLayout(oldLayout: NSCollectionViewLayout, newLayout: NSCollectionViewLayout):void;
  }
}
declare namespace cocoascript {
  /**
   * A layout that organizes items into a flexible and configurable arrangement.
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewflowlayout
   */
  interface NSCollectionViewFlowLayout extends NSCollectionViewLayout {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewflowlayout/1402869-scrolldirection
    scrollDirection(): NSCollectionViewScrollDirection;
    setScrollDirection(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewflowlayout/1402898-minimumlinespacing
    minimumLineSpacing(): CGFloat;
    setMinimumLineSpacing(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewflowlayout/1402872-minimuminteritemspacing
    minimumInteritemSpacing(): CGFloat;
    setMinimumInteritemSpacing(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewflowlayout/1402896-estimateditemsize
    estimatedItemSize(): NSSize;
    setEstimatedItemSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewflowlayout/1402863-itemsize
    itemSize(): NSSize;
    setItemSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewflowlayout/1402862-sectioninset
    sectionInset(): NSEdgeInsets;
    setSectionInset(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewflowlayout/1402893-headerreferencesize
    headerReferenceSize(): NSSize;
    setHeaderReferenceSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewflowlayout/1402892-footerreferencesize
    footerReferenceSize(): NSSize;
    setFooterReferenceSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewflowlayout/1644671-sectionfooterspintovisiblebounds
    sectionFootersPinToVisibleBounds(): BOOL;
    setSectionFootersPinToVisibleBounds(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewflowlayout/1644640-sectionheaderspintovisiblebounds
    sectionHeadersPinToVisibleBounds(): BOOL;
    setSectionHeadersPinToVisibleBounds(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewflowlayout/1644723-collapsesectionatindex
    collapseSectionAtIndex(sectionIndex: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewflowlayout/1644651-expandsectionatindex
    expandSectionAtIndex(sectionIndex: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewflowlayout/1644596-sectionatindexiscollapsed
    sectionAtIndexIsCollapsed(sectionIndex: NSUInteger):BOOL;
    //
    alloc():NSCollectionViewFlowLayout;
    //
    init():NSCollectionViewFlowLayout;
  }
}

declare const NSCollectionViewFlowLayout: cocoascript.NSCollectionViewFlowLayout;
declare namespace cocoascript {
  /**
   * A set of methods that a delegate implements to provide layout information to a flow layout object in a collection view.
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegateflowlayout
   */
  interface NSCollectionViewDelegateFlowLayout extends NSCollectionViewDelegate {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegateflowlayout/1402900-collectionview
    collectionView_layout_sizeForItemAtIndexPath(collectionView: NSCollectionView, collectionViewLayout: NSCollectionViewLayout, indexPath: NSIndexPath):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegateflowlayout/1402874-collectionview
    collectionView_layout_insetForSectionAtIndex(collectionView: NSCollectionView, collectionViewLayout: NSCollectionViewLayout, section: NSInteger):NSEdgeInsets;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegateflowlayout/1402887-collectionview
    collectionView_layout_minimumLineSpacingForSectionAtIndex(collectionView: NSCollectionView, collectionViewLayout: NSCollectionViewLayout, section: NSInteger):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegateflowlayout/1402879-collectionview
    collectionView_layout_minimumInteritemSpacingForSectionAtIndex(collectionView: NSCollectionView, collectionViewLayout: NSCollectionViewLayout, section: NSInteger):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegateflowlayout/1402876-collectionview
    collectionView_layout_referenceSizeForHeaderInSection(collectionView: NSCollectionView, collectionViewLayout: NSCollectionViewLayout, section: NSInteger):NSSize;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewdelegateflowlayout/1402883-collectionview
    collectionView_layout_referenceSizeForFooterInSection(collectionView: NSCollectionView, collectionViewLayout: NSCollectionViewLayout, section: NSInteger):NSSize;
  }
}
declare namespace cocoascript {
  /**
   * A layout that displays a single section of items in a row and column grid.
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewgridlayout
   */
  interface NSCollectionViewGridLayout extends NSCollectionViewLayout {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewgridlayout/1524389-maximumnumberofrows
    maximumNumberOfRows(): NSUInteger;
    setMaximumNumberOfRows(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewgridlayout/1533264-maximumnumberofcolumns
    maximumNumberOfColumns(): NSUInteger;
    setMaximumNumberOfColumns(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewgridlayout/1534425-minimumitemsize
    minimumItemSize(): NSSize;
    setMinimumItemSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewgridlayout/1530923-maximumitemsize
    maximumItemSize(): NSSize;
    setMaximumItemSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewgridlayout/1525116-minimuminteritemspacing
    minimumInteritemSpacing(): CGFloat;
    setMinimumInteritemSpacing(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewgridlayout/1535114-minimumlinespacing
    minimumLineSpacing(): CGFloat;
    setMinimumLineSpacing(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewgridlayout/1527362-margins
    margins(): NSEdgeInsets;
    setMargins(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewgridlayout/1530955-backgroundcolors
    backgroundColors(): NSColor;
    setBackgroundColors(): void;
    //
    alloc():NSCollectionViewGridLayout;
    //
    init():NSCollectionViewGridLayout;
  }
}

declare const NSCollectionViewGridLayout: cocoascript.NSCollectionViewGridLayout;
declare namespace cocoascript {
  /**
   * An object that implements custom behaviors when changing from one layout to another in a collection view.
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewtransitionlayout
   */
  interface NSCollectionViewTransitionLayout extends NSCollectionViewLayout {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewtransitionlayout/1524431-initwithcurrentlayout
    initWithCurrentLayout_nextLayout(currentLayout: NSCollectionViewLayout, newLayout: NSCollectionViewLayout):NSCollectionViewTransitionLayout;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewtransitionlayout/1524424-transitionprogress
    transitionProgress(): CGFloat;
    setTransitionProgress(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewtransitionlayout/1524303-updatevalue
    updateValue_forAnimatedKey(value: CGFloat, key: NSCollectionViewTransitionLayoutAnimatedKey):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewtransitionlayout/1524429-valueforanimatedkey
    valueForAnimatedKey(key: NSCollectionViewTransitionLayoutAnimatedKey):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewtransitionlayout/1524425-currentlayout
    currentLayout(): NSCollectionViewLayout;
    setCurrentLayout(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewtransitionlayout/1524426-nextlayout
    nextLayout(): NSCollectionViewLayout;
    setNextLayout(): void;
    //
    alloc():NSCollectionViewTransitionLayout;
    //
    init():NSCollectionViewTransitionLayout;
  }
}

declare const NSCollectionViewTransitionLayout: cocoascript.NSCollectionViewTransitionLayout;
declare namespace cocoascript {
  /**
   * An object that contains layout-related attributes for an element in a collection view.
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutattributes
   */
  interface NSCollectionViewLayoutAttributes extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutattributes/1529886-layoutattributesforitemwithindex
    layoutAttributesForItemWithIndexPath(indexPath: NSIndexPath):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutattributes/1529406-layoutattributesforsupplementary
    layoutAttributesForSupplementaryViewOfKind_withIndexPath(elementKind: NSCollectionViewSupplementaryElementKind, indexPath: NSIndexPath):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutattributes/1535736-layoutattributesfordecorationvie
    layoutAttributesForDecorationViewOfKind_withIndexPath(decorationViewKind: NSCollectionViewDecorationElementKind, indexPath: NSIndexPath):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutattributes/1534062-layoutattributesforinteritemgapb
    layoutAttributesForInterItemGapBeforeIndexPath(indexPath: NSIndexPath):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutattributes/1529026-representedelementcategory
    representedElementCategory(): NSCollectionElementCategory;
    setRepresentedElementCategory(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutattributes/1531306-indexpath
    indexPath(): NSIndexPath;
    setIndexPath(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutattributes/1533826-representedelementkind
    representedElementKind(): string | NSString;
    setRepresentedElementKind(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutattributes/1532636-frame
    frame(): NSRect;
    setFrame(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutattributes/1528769-size
    size(): NSSize;
    setSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutattributes/1525453-alpha
    alpha(): CGFloat;
    setAlpha(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutattributes/1535336-hidden
    hidden(): BOOL;
    setHidden(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutattributes/1531553-zindex
    zIndex(): NSInteger;
    setZIndex(): void;
    //
    alloc():NSCollectionViewLayoutAttributes;
    //
    init():NSCollectionViewLayoutAttributes;
  }
}

declare const NSCollectionViewLayoutAttributes: cocoascript.NSCollectionViewLayoutAttributes;
declare namespace cocoascript {
  /**
   * An abstract base class that you subclass and use to generate layout information for a collection view.
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout
   */
  interface NSCollectionViewLayout extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1533540-collectionview
    collectionView(): NSCollectionView;
    setCollectionView(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1527555-layoutattributesclass
    layoutAttributesClass(): Class;
    setLayoutAttributesClass(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1530434-preparelayout
    prepareLayout():void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1532618-collectionviewcontentsize
    collectionViewContentSize(): NSSize;
    setCollectionViewContentSize(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1524636-layoutattributesforelementsinrec
    layoutAttributesForElementsInRect(rect: NSRect):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1534298-layoutattributesforitematindexpa
    layoutAttributesForItemAtIndexPath(indexPath: NSIndexPath):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1534287-layoutattributesforsupplementary
    layoutAttributesForSupplementaryViewOfKind_atIndexPath(elementKind: NSCollectionViewSupplementaryElementKind, indexPath: NSIndexPath):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1527929-layoutattributesfordecorationvie
    layoutAttributesForDecorationViewOfKind_atIndexPath(elementKind: NSCollectionViewDecorationElementKind, indexPath: NSIndexPath):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1535931-layoutattributesfordroptargetatp
    layoutAttributesForDropTargetAtPoint(pointInCollectionView: NSPoint):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1528296-layoutattributesforinteritemgapb
    layoutAttributesForInterItemGapBeforeIndexPath(indexPath: NSIndexPath):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1535608-targetcontentoffsetforproposedco
    targetContentOffsetForProposedContentOffset(proposedContentOffset: NSPoint):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1525755-targetcontentoffsetforproposedco
    targetContentOffsetForProposedContentOffset_withScrollingVelocity(proposedContentOffset: NSPoint, velocity: NSPoint):NSPoint;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1533485-prepareforcollectionviewupdates
    prepareForCollectionViewUpdates(updateItems: NSCollectionViewUpdateItem):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1534473-finalizecollectionviewupdates
    finalizeCollectionViewUpdates():void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1534044-indexpathstoinsertforsupplementa
    indexPathsToInsertForSupplementaryViewOfKind(elementKind: NSCollectionViewSupplementaryElementKind):NSIndexPath;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1528098-indexpathstoinsertfordecorationv
    indexPathsToInsertForDecorationViewOfKind(elementKind: NSCollectionViewDecorationElementKind):NSIndexPath;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1533598-initiallayoutattributesforappear
    initialLayoutAttributesForAppearingItemAtIndexPath(itemIndexPath: NSIndexPath):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1535331-initiallayoutattributesforappear
    initialLayoutAttributesForAppearingSupplementaryElementOfKind_atIndexPath(elementKind: NSCollectionViewSupplementaryElementKind, elementIndexPath: NSIndexPath):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1535003-initiallayoutattributesforappear
    initialLayoutAttributesForAppearingDecorationElementOfKind_atIndexPath(elementKind: NSCollectionViewDecorationElementKind, decorationIndexPath: NSIndexPath):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1529622-indexpathstodeleteforsupplementa
    indexPathsToDeleteForSupplementaryViewOfKind(elementKind: NSCollectionViewSupplementaryElementKind):NSIndexPath;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1529635-indexpathstodeletefordecorationv
    indexPathsToDeleteForDecorationViewOfKind(elementKind: NSCollectionViewDecorationElementKind):NSIndexPath;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1533317-finallayoutattributesfordisappea
    finalLayoutAttributesForDisappearingItemAtIndexPath(itemIndexPath: NSIndexPath):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1535919-finallayoutattributesfordisappea
    finalLayoutAttributesForDisappearingSupplementaryElementOfKind_atIndexPath(elementKind: NSCollectionViewSupplementaryElementKind, elementIndexPath: NSIndexPath):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1535917-finallayoutattributesfordisappea
    finalLayoutAttributesForDisappearingDecorationElementOfKind_atIndexPath(elementKind: NSCollectionViewDecorationElementKind, decorationIndexPath: NSIndexPath):NSCollectionViewLayoutAttributes;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1534293-invalidatelayout
    invalidateLayout():void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1533282-invalidatelayoutwithcontext
    invalidateLayoutWithContext(context: NSCollectionViewLayoutInvalidationContext):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1535858-invalidationcontextclass
    invalidationContextClass(): Class;
    setInvalidationContextClass(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1531047-shouldinvalidatelayoutforboundsc
    shouldInvalidateLayoutForBoundsChange(newBounds: NSRect):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1535536-shouldinvalidatelayoutforpreferr
    shouldInvalidateLayoutForPreferredLayoutAttributes_withOriginalAttributes(preferredAttributes: NSCollectionViewLayoutAttributes, originalAttributes: NSCollectionViewLayoutAttributes):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1534058-invalidationcontextforboundschan
    invalidationContextForBoundsChange(newBounds: NSRect):NSCollectionViewLayoutInvalidationContext;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1535343-invalidationcontextforpreferredl
    invalidationContextForPreferredLayoutAttributes_withOriginalAttributes(preferredAttributes: NSCollectionViewLayoutAttributes, originalAttributes: NSCollectionViewLayoutAttributes):NSCollectionViewLayoutInvalidationContext;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1533678-prepareforanimatedboundschange
    prepareForAnimatedBoundsChange(oldBounds: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1533163-finalizeanimatedboundschange
    finalizeAnimatedBoundsChange():void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1533837-registerclass
    registerClass_forDecorationViewOfKind(viewClass: Class, elementKind: NSCollectionViewDecorationElementKind):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1535405-registernib
    registerNib_forDecorationViewOfKind(nib: NSNib, elementKind: NSCollectionViewDecorationElementKind):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1533383-preparefortransitionfromlayout
    prepareForTransitionFromLayout(oldLayout: NSCollectionViewLayout):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1533945-preparefortransitiontolayout
    prepareForTransitionToLayout(newLayout: NSCollectionViewLayout):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayout/1534138-finalizelayouttransition
    finalizeLayoutTransition():void;
    //
    alloc():NSCollectionViewLayout;
    //
    init():NSCollectionViewLayout;
  }
}

declare const NSCollectionViewLayout: cocoascript.NSCollectionViewLayout;
declare namespace cocoascript {
  /**
   * A layout object that lets you combine items in highly adaptive and flexible visual arrangements.
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewcompositionallayout
   */
  interface NSCollectionViewCompositionalLayout extends NSCollectionViewLayout {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewcompositionallayout/3281806-initwithsection
    initWithSection(section: NSCollectionLayoutSection):NSCollectionViewCompositionalLayout;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewcompositionallayout/3281807-initwithsection
    initWithSection_configuration(section: NSCollectionLayoutSection, configuration: NSCollectionViewCompositionalLayoutConfiguration):NSCollectionViewCompositionalLayout;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewcompositionallayout/3281808-initwithsectionprovider
    initWithSectionProvider(sectionProvider: NSCollectionViewCompositionalLayoutSectionProvider):NSCollectionViewCompositionalLayout;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewcompositionallayout/3281809-initwithsectionprovider
    initWithSectionProvider_configuration(sectionProvider: NSCollectionViewCompositionalLayoutSectionProvider, configuration: NSCollectionViewCompositionalLayoutConfiguration):NSCollectionViewCompositionalLayout;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewcompositionallayout/3281805-configuration
    configuration(): NSCollectionViewCompositionalLayoutConfiguration;
    setConfiguration(): void;
    //
    alloc():NSCollectionViewCompositionalLayout;
    //
    init():NSCollectionViewCompositionalLayout;
  }
}

declare const NSCollectionViewCompositionalLayout: cocoascript.NSCollectionViewCompositionalLayout;
declare namespace cocoascript {
  /**
   * An object that defines scroll direction, section spacing, and headers or footers for the layout.
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewcompositionallayoutconfiguration
   */
  interface NSCollectionViewCompositionalLayoutConfiguration extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewcompositionallayoutconfiguration/3281813-scrolldirection
    scrollDirection(): NSCollectionViewScrollDirection;
    setScrollDirection(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewcompositionallayoutconfiguration/3281812-intersectionspacing
    interSectionSpacing(): CGFloat;
    setInterSectionSpacing(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewcompositionallayoutconfiguration/3281811-boundarysupplementaryitems
    boundarySupplementaryItems(): NSCollectionLayoutBoundarySupplementaryItem;
    setBoundarySupplementaryItems(): void;
    //
    alloc():NSCollectionViewCompositionalLayoutConfiguration;
    //
    init():NSCollectionViewCompositionalLayoutConfiguration;
  }
}

declare const NSCollectionViewCompositionalLayoutConfiguration: cocoascript.NSCollectionViewCompositionalLayoutConfiguration;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscollectionviewcompositionallayoutsectionprovider
  type NSCollectionViewCompositionalLayoutSectionProvider = cocoascript.NSCollectionLayoutEnvironment;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscollectionlayoutsectionorthogonalscrollingbehavior
  type NSCollectionLayoutSectionOrthogonalScrollingBehavior = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * A description of a single change to make to an item in a collection view.
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewupdateitem
   */
  interface NSCollectionViewUpdateItem extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewupdateitem/1534798-indexpathbeforeupdate
    indexPathBeforeUpdate(): NSIndexPath;
    setIndexPathBeforeUpdate(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewupdateitem/1530431-indexpathafterupdate
    indexPathAfterUpdate(): NSIndexPath;
    setIndexPathAfterUpdate(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewupdateitem/1534857-updateaction
    updateAction(): NSCollectionUpdateAction;
    setUpdateAction(): void;
    //
    alloc():NSCollectionViewUpdateItem;
    //
    init():NSCollectionViewUpdateItem;
  }
}

declare const NSCollectionViewUpdateItem: cocoascript.NSCollectionViewUpdateItem;
declare namespace cocoascript {
  /**
   * An object that identifies the portions of your layout that need to be updated.
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutinvalidationcontext
   */
  interface NSCollectionViewLayoutInvalidationContext extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutinvalidationcontext/1525613-invalidateeverything
    invalidateEverything(): BOOL;
    setInvalidateEverything(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutinvalidationcontext/1526189-invalidatedatasourcecounts
    invalidateDataSourceCounts(): BOOL;
    setInvalidateDataSourceCounts(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutinvalidationcontext/1533465-contentoffsetadjustment
    contentOffsetAdjustment(): NSPoint;
    setContentOffsetAdjustment(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutinvalidationcontext/1527883-contentsizeadjustment
    contentSizeAdjustment(): NSSize;
    setContentSizeAdjustment(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutinvalidationcontext/1526592-invalidateitemsatindexpaths
    invalidateItemsAtIndexPaths(indexPaths: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutinvalidationcontext/1533990-invalidatesupplementaryelementso
    invalidateSupplementaryElementsOfKind_atIndexPaths(elementKind: NSCollectionViewSupplementaryElementKind, indexPaths: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutinvalidationcontext/1535363-invalidatedecorationelementsofki
    invalidateDecorationElementsOfKind_atIndexPaths(elementKind: NSCollectionViewDecorationElementKind, indexPaths: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutinvalidationcontext/1525361-invalidateditemindexpaths
    invalidatedItemIndexPaths(): NSIndexPath;
    setInvalidatedItemIndexPaths(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutinvalidationcontext/1531052-invalidatedsupplementaryindexpat
    invalidatedSupplementaryIndexPaths(): NSIndexPath;
    setInvalidatedSupplementaryIndexPaths(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewlayoutinvalidationcontext/1530481-invalidateddecorationindexpaths
    invalidatedDecorationIndexPaths(): NSIndexPath;
    setInvalidatedDecorationIndexPaths(): void;
    //
    alloc():NSCollectionViewLayoutInvalidationContext;
    //
    init():NSCollectionViewLayoutInvalidationContext;
  }
}

declare const NSCollectionViewLayoutInvalidationContext: cocoascript.NSCollectionViewLayoutInvalidationContext;
declare namespace cocoascript {
  /**
   * An object that identifies the portions of a flow layout object that need to be updated.
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewflowlayoutinvalidationcontext
   */
  interface NSCollectionViewFlowLayoutInvalidationContext extends NSCollectionViewLayoutInvalidationContext {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewflowlayoutinvalidationcontext/1402870-invalidateflowlayoutattributes
    invalidateFlowLayoutAttributes(): BOOL;
    setInvalidateFlowLayoutAttributes(): void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewflowlayoutinvalidationcontext/1402902-invalidateflowlayoutdelegatemetr
    invalidateFlowLayoutDelegateMetrics(): BOOL;
    setInvalidateFlowLayoutDelegateMetrics(): void;
    //
    alloc():NSCollectionViewFlowLayoutInvalidationContext;
    //
    init():NSCollectionViewFlowLayoutInvalidationContext;
  }
}

declare const NSCollectionViewFlowLayoutInvalidationContext: cocoascript.NSCollectionViewFlowLayoutInvalidationContext;
declare namespace cocoascript {
  /**
   * A set of methods that an outline view calls to retrieve data and information about it from the data source delegate, and—optionally—to update data values.
   * doc://com.apple.documentation/documentation/appkit/nsoutlineviewdatasource
   */
  interface NSOutlineViewDataSource extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdatasource/1529572-outlineview
    outlineView_acceptDrop_item_childIndex(outlineView: NSOutlineView, info: NSDraggingInfo, item: NSOutlineViewDataSource, index: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdatasource/1528977-outlineview
    outlineView_child_ofItem(outlineView: NSOutlineView, index: NSInteger, item: NSOutlineViewDataSource):NSOutlineViewDataSource;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdatasource/1532073-outlineview
    outlineView_draggingSession_endedAtPoint_operation(outlineView: NSOutlineView, session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdatasource/1535142-outlineview
    outlineView_draggingSession_willBeginAtPoint_forItems(outlineView: NSOutlineView, session: NSDraggingSession, screenPoint: NSPoint, draggedItems: NSArray):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdatasource/1535198-outlineview
    outlineView_isItemExpandable(outlineView: NSOutlineView, item: NSOutlineViewDataSource):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdatasource/1533602-outlineview
    outlineView_itemForPersistentObject(outlineView: NSOutlineView, object: NSOutlineViewDataSource):NSOutlineViewDataSource;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdatasource/1533948-outlineview
    outlineView_namesOfPromisedFilesDroppedAtDestination_forDraggedItems(outlineView: NSOutlineView, dropDestination: NSURL, items: NSArray):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdatasource/1535549-outlineview
    outlineView_numberOfChildrenOfItem(outlineView: NSOutlineView, item: NSOutlineViewDataSource):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdatasource/1531606-outlineview
    outlineView_objectValueForTableColumn_byItem(outlineView: NSOutlineView, tableColumn: NSTableColumn, item: NSOutlineViewDataSource):NSOutlineViewDataSource;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdatasource/1525837-outlineview
    outlineView_pasteboardWriterForItem(outlineView: NSOutlineView, item: NSOutlineViewDataSource):NSPasteboardWriting;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdatasource/1532545-outlineview
    outlineView_persistentObjectForItem(outlineView: NSOutlineView, item: NSOutlineViewDataSource):NSOutlineViewDataSource;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdatasource/1534817-outlineview
    outlineView_setObjectValue_forTableColumn_byItem(outlineView: NSOutlineView, object: NSOutlineViewDataSource, tableColumn: NSTableColumn, item: NSOutlineViewDataSource):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdatasource/1535892-outlineview
    outlineView_sortDescriptorsDidChange(outlineView: NSOutlineView, oldDescriptors: NSSortDescriptor):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdatasource/1534424-outlineview
    outlineView_updateDraggingItemsForDrag(outlineView: NSOutlineView, draggingInfo: NSDraggingInfo):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdatasource/1533597-outlineview
    outlineView_validateDrop_proposedItem_proposedChildIndex(outlineView: NSOutlineView, info: NSDraggingInfo, item: NSOutlineViewDataSource, index: NSInteger):NSDragOperation;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdatasource/1532910-outlineview
    outlineView_writeItems_toPasteboard(outlineView: NSOutlineView, items: NSArray, pasteboard: NSPasteboard):BOOL;
  }
}
declare namespace cocoascript {
  /**
   * A set of optional methods implemented by delegates of
   * doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate
   */
  interface NSOutlineViewDelegate extends NSControlTextEditingDelegate {
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1531199-outlineview
    outlineView_shouldExpandItem(outlineView: NSOutlineView, item: NSOutlineViewDelegate):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1529825-outlineview
    outlineView_shouldCollapseItem(outlineView: NSOutlineView, item: NSOutlineViewDelegate):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1526847-outlineview
    outlineView_typeSelectStringForTableColumn_item(outlineView: NSOutlineView, tableColumn: NSTableColumn, item: NSOutlineViewDelegate):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1533321-outlineview
    outlineView_nextTypeSelectMatchFromItem_toItem_forString(outlineView: NSOutlineView, startItem: NSOutlineViewDelegate, endItem: NSOutlineViewDelegate, searchString: string | NSString):NSOutlineViewDelegate;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1532941-outlineview
    outlineView_shouldTypeSelectForEvent_withCurrentSearchString(outlineView: NSOutlineView, event: NSEvent, searchString: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1527695-outlineview
    outlineView_toolTipForCell_rect_tableColumn_item_mouseLocation(outlineView: NSOutlineView, cell: NSCell, rect: NSRectPointer, tableColumn: NSTableColumn, item: NSOutlineViewDelegate, mouseLocation: NSPoint):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1535118-outlineview
    outlineView_shouldSelectTableColumn(outlineView: NSOutlineView, tableColumn: NSTableColumn):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1531075-outlineview
    outlineView_shouldSelectItem(outlineView: NSOutlineView, item: NSOutlineViewDelegate):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1527575-outlineview
    outlineView_selectionIndexesForProposedSelection(outlineView: NSOutlineView, proposedSelectionIndexes: NSIndexSet):NSIndexSet;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1530734-selectionshouldchangeinoutlinevi
    selectionShouldChangeInOutlineView(outlineView: NSOutlineView):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1532481-outlineviewselectionischanging
    outlineViewSelectionIsChanging(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1526913-outlineviewselectiondidchange
    outlineViewSelectionDidChange(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1529359-outlineview
    outlineView_willDisplayCell_forTableColumn_item(outlineView: NSOutlineView, cell: NSOutlineViewDelegate, tableColumn: NSTableColumn, item: NSOutlineViewDelegate):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1535808-outlineview
    outlineView_willDisplayOutlineCell_forTableColumn_item(outlineView: NSOutlineView, cell: NSOutlineViewDelegate, tableColumn: NSTableColumn, item: NSOutlineViewDelegate):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1525161-outlineview
    outlineView_dataCellForTableColumn_item(outlineView: NSOutlineView, tableColumn: NSTableColumn, item: NSOutlineViewDelegate):NSCell;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1534006-outlineview
    outlineView_shouldShowOutlineCellForItem(outlineView: NSOutlineView, item: NSOutlineViewDelegate):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1534411-outlineview
    outlineView_shouldShowCellExpansionForTableColumn_item(outlineView: NSOutlineView, tableColumn: NSTableColumn, item: NSOutlineViewDelegate):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1530792-outlineview
    outlineView_shouldReorderColumn_toColumn(outlineView: NSOutlineView, columnIndex: NSInteger, newColumnIndex: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1525297-outlineviewcolumndidmove
    outlineViewColumnDidMove(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1533372-outlineviewcolumndidresize
    outlineViewColumnDidResize(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1535847-outlineviewitemwillexpand
    outlineViewItemWillExpand(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1530869-outlineviewitemdidexpand
    outlineViewItemDidExpand(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1526896-outlineviewitemwillcollapse
    outlineViewItemWillCollapse(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1535557-outlineviewitemdidcollapse
    outlineViewItemDidCollapse(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1535450-outlineview
    outlineView_shouldEditTableColumn_item(outlineView: NSOutlineView, tableColumn: NSTableColumn, item: NSOutlineViewDelegate):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1531835-outlineview
    outlineView_mouseDownInHeaderOfTableColumn(outlineView: NSOutlineView, tableColumn: NSTableColumn):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1534040-outlineview
    outlineView_didClickTableColumn(outlineView: NSOutlineView, tableColumn: NSTableColumn):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1526632-outlineview
    outlineView_didDragTableColumn(outlineView: NSOutlineView, tableColumn: NSTableColumn):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1531870-outlineview
    outlineView_heightOfRowByItem(outlineView: NSOutlineView, item: NSOutlineViewDelegate):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1530479-outlineview
    outlineView_sizeToFitWidthOfColumn(outlineView: NSOutlineView, column: NSInteger):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/3626816-outlineview
    outlineView_tintConfigurationForItem(outlineView: NSOutlineView, item: NSOutlineViewDelegate):NSTintConfiguration;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1534295-outlineview
    outlineView_shouldTrackCell_forTableColumn_item(outlineView: NSOutlineView, cell: NSCell, tableColumn: NSTableColumn, item: NSOutlineViewDelegate):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1528482-outlineview
    outlineView_isGroupItem(outlineView: NSOutlineView, item: NSOutlineViewDelegate):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1528320-outlineview
    outlineView_didAddRowView_forRow(outlineView: NSOutlineView, rowView: NSTableRowView, row: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1530612-outlineview
    outlineView_didRemoveRowView_forRow(outlineView: NSOutlineView, rowView: NSTableRowView, row: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1532140-outlineview
    outlineView_rowViewForItem(outlineView: NSOutlineView, item: NSOutlineViewDelegate):NSTableRowView;
    // doc://com.apple.documentation/documentation/appkit/nsoutlineviewdelegate/1535566-outlineview
    outlineView_viewForTableColumn_item(outlineView: NSOutlineView, tableColumn: NSTableColumn, item: NSOutlineViewDelegate):NSView;
  }
}
declare namespace cocoascript {
  /**
   * A reusable container view shown for a particular cell in a table view that uses rows for content.
   * doc://com.apple.documentation/documentation/appkit/nstablecellview
   */
  interface NSTableCellView extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nstablecellview/1483204-objectvalue
    objectValue(): id;
    setObjectValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecellview/1483213-imageview
    imageView(): NSImageView;
    setImageView(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecellview/1483202-textfield
    textField(): NSTextField;
    setTextField(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecellview/1483206-backgroundstyle
    backgroundStyle(): NSBackgroundStyle;
    setBackgroundStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecellview/1483211-rowsizestyle
    rowSizeStyle(): NSTableViewRowSizeStyle;
    setRowSizeStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecellview/1483199-draggingimagecomponents
    draggingImageComponents(): NSDraggingImageComponent;
    setDraggingImageComponents(): void;
    //
    alloc():NSTableCellView;
    //
    init():NSTableCellView;
  }
}

declare const NSTableCellView: cocoascript.NSTableCellView;
declare namespace cocoascript {
  /**
   * A set of optional methods you implement in a table view delegate to customize the behavior of the table view.
   * doc://com.apple.documentation/documentation/appkit/nstableviewdelegate
   */
  interface NSTableViewDelegate extends NSControlTextEditingDelegate {
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1527449-tableview
    tableView_viewForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn, row: NSInteger):NSView;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1532417-tableview
    tableView_rowViewForRow(tableView: NSTableView, row: NSInteger):NSTableRowView;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1527434-tableview
    tableView_didAddRowView_forRow(tableView: NSTableView, rowView: NSTableRowView, row: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1528674-tableview
    tableView_didRemoveRowView_forRow(tableView: NSTableView, rowView: NSTableRowView, row: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1526676-tableview
    tableView_isGroupRow(tableView: NSTableView, row: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1533829-tableview
    tableView_willDisplayCell_forTableColumn_row(tableView: NSTableView, cell: NSTableViewDelegate, tableColumn: NSTableColumn, row: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1529321-tableview
    tableView_dataCellForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn, row: NSInteger):NSCell;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1535567-tableview
    tableView_shouldShowCellExpansionForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn, row: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1526097-tableview
    tableView_toolTipForCell_rect_tableColumn_row_mouseLocation(tableView: NSTableView, cell: NSCell, rect: NSRectPointer, tableColumn: NSTableColumn, row: NSInteger, mouseLocation: NSPoint):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1527305-tableview
    tableView_shouldEditTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn, row: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1529684-tableview
    tableView_heightOfRow(tableView: NSTableView, row: NSInteger):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1526429-tableview
    tableView_sizeToFitWidthOfColumn(tableView: NSTableView, column: NSInteger):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1533949-selectionshouldchangeintableview
    selectionShouldChangeInTableView(tableView: NSTableView):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1526916-tableview
    tableView_shouldSelectRow(tableView: NSTableView, row: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1532829-tableview
    tableView_selectionIndexesForProposedSelection(tableView: NSTableView, proposedSelectionIndexes: NSIndexSet):NSIndexSet;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1527204-tableview
    tableView_shouldSelectTableColumn(tableView: NSTableView, tableColumn: NSTableColumn):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1530812-tableviewselectionischanging
    tableViewSelectionIsChanging(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1528567-tableviewselectiondidchange
    tableViewSelectionDidChange(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1526347-tableview
    tableView_shouldTypeSelectForEvent_withCurrentSearchString(tableView: NSTableView, event: NSEvent, searchString: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1530001-tableview
    tableView_typeSelectStringForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn, row: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1534757-tableview
    tableView_nextTypeSelectMatchFromRow_toRow_forString(tableView: NSTableView, startRow: NSInteger, endRow: NSInteger, searchString: string | NSString):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1534434-tableview
    tableView_shouldReorderColumn_toColumn(tableView: NSTableView, columnIndex: NSInteger, newColumnIndex: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1535732-tableview
    tableView_didDragTableColumn(tableView: NSTableView, tableColumn: NSTableColumn):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1534237-tableviewcolumndidmove
    tableViewColumnDidMove(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1535901-tableviewcolumndidresize
    tableViewColumnDidResize(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1533923-tableview
    tableView_didClickTableColumn(tableView: NSTableView, tableColumn: NSTableColumn):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1531711-tableview
    tableView_mouseDownInHeaderOfTableColumn(tableView: NSTableView, tableColumn: NSTableColumn):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1533564-tableview
    tableView_shouldTrackCell_forTableColumn_row(tableView: NSTableView, cell: NSCell, tableColumn: NSTableColumn, row: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdelegate/1532060-tableview
    tableView_rowActionsForRow_edge(tableView: NSTableView, row: NSInteger, edge: NSTableRowActionEdge):NSTableViewRowAction;
  }
}
declare namespace cocoascript {
  /**
   * The object you use to manage data and provide items for a table view.
   * doc://com.apple.documentation/documentation/appkit/nstableviewdiffabledatasource
   */
  interface NSTableViewDiffableDataSource extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstableviewdiffabledatasource/3553215-initwithtableview
    initWithTableView_cellProvider(tableView: NSTableView, cellProvider: NSTableViewDiffableDataSourceCellProvider):NSTableViewDiffableDataSource;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdiffabledatasource/3553219-rowviewprovider
    rowViewProvider(): NSTableViewDiffableDataSourceRowProvider;
    setRowViewProvider(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdiffabledatasource/3553220-sectionheaderviewprovider
    sectionHeaderViewProvider(): NSTableViewDiffableDataSourceSectionHeaderViewProvider;
    setSectionHeaderViewProvider(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdiffabledatasource/3553216-itemidentifierforrow
    itemIdentifierForRow(row: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdiffabledatasource/3553217-rowforitemidentifier
    rowForItemIdentifier(identifier: any):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdiffabledatasource/3553221-sectionidentifierforrow
    sectionIdentifierForRow(row: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdiffabledatasource/3553218-rowforsectionidentifier
    rowForSectionIdentifier(identifier: any):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdiffabledatasource/3553222-snapshot
    snapshot():NSDiffableDataSourceSnapshot;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdiffabledatasource/3553212-applysnapshot
    applySnapshot_animatingDifferences(snapshot: any, animatingDifferences: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdiffabledatasource/3553213-applysnapshot
    applySnapshot_animatingDifferences_completion(snapshot: any, animatingDifferences: BOOL, completion: void):void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewdiffabledatasource/3553214-defaultrowanimation
    defaultRowAnimation(): NSTableViewAnimationOptions;
    setDefaultRowAnimation(): void;
    //
    alloc():NSTableViewDiffableDataSource;
    //
    init():NSTableViewDiffableDataSource;
  }
}

declare const NSTableViewDiffableDataSource: cocoascript.NSTableViewDiffableDataSource;
declare namespace cocoascript {
  /**
   * An object that draws headers over a table view's columns and handles mouse events in those headers.
   * doc://com.apple.documentation/documentation/appkit/nstableheaderview
   */
  interface NSTableHeaderView extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nstableheaderview/1535730-tableview
    tableView(): NSTableView;
    setTableView(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableheaderview/1534458-draggedcolumn
    draggedColumn(): NSInteger;
    setDraggedColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableheaderview/1527836-draggeddistance
    draggedDistance(): CGFloat;
    setDraggedDistance(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableheaderview/1528247-resizedcolumn
    resizedColumn(): NSInteger;
    setResizedColumn(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableheaderview/1529216-columnatpoint
    columnAtPoint(point: NSPoint):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nstableheaderview/1531883-headerrectofcolumn
    headerRectOfColumn(column: NSInteger):NSRect;
    //
    alloc():NSTableHeaderView;
    //
    init():NSTableHeaderView;
  }
}

declare const NSTableHeaderView: cocoascript.NSTableHeaderView;
declare namespace cocoascript {
  /**
   * An object that a table header view uses to draw the content of the column headers.
   * doc://com.apple.documentation/documentation/appkit/nstableheadercell
   */
  interface NSTableHeaderCell extends NSTextFieldCell {
    // doc://com.apple.documentation/documentation/appkit/nstableheadercell/1526553-drawsortindicatorwithframe
    drawSortIndicatorWithFrame_inView_ascending_priority(cellFrame: NSRect, controlView: NSView, ascending: BOOL, priority: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nstableheadercell/1525964-sortindicatorrectforbounds
    sortIndicatorRectForBounds(rect: NSRect):NSRect;
    //
    alloc():NSTableHeaderCell;
    //
    init():NSTableHeaderCell;
  }
}

declare const NSTableHeaderCell: cocoascript.NSTableHeaderCell;
declare namespace cocoascript {
  /**
   * The view shown for a row in a table view.
   * doc://com.apple.documentation/documentation/appkit/nstablerowview
   */
  interface NSTableRowView extends NSView {
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1526258-emphasized
    emphasized(): BOOL;
    setEmphasized(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1535905-interiorbackgroundstyle
    interiorBackgroundStyle(): NSBackgroundStyle;
    setInteriorBackgroundStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1534291-floating
    floating(): BOOL;
    setFloating(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1529508-selected
    selected(): BOOL;
    setSelected(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1531083-selectionhighlightstyle
    selectionHighlightStyle(): NSTableViewSelectionHighlightStyle;
    setSelectionHighlightStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1525012-draggingdestinationfeedbackstyle
    draggingDestinationFeedbackStyle(): NSTableViewDraggingDestinationFeedbackStyle;
    setDraggingDestinationFeedbackStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1535836-indentationfordropoperation
    indentationForDropOperation(): CGFloat;
    setIndentationForDropOperation(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1533914-targetfordropoperation
    targetForDropOperation(): BOOL;
    setTargetForDropOperation(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1530499-grouprowstyle
    groupRowStyle(): BOOL;
    setGroupRowStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1525610-numberofcolumns
    numberOfColumns(): NSInteger;
    setNumberOfColumns(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1534057-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1531936-drawbackgroundinrect
    drawBackgroundInRect(dirtyRect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1528434-drawdraggingdestinationfeedbacki
    drawDraggingDestinationFeedbackInRect(dirtyRect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1526425-drawselectioninrect
    drawSelectionInRect(dirtyRect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1525167-drawseparatorinrect
    drawSeparatorInRect(dirtyRect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1534440-viewatcolumn
    viewAtColumn(column: NSInteger):NSTableRowView;
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1529083-nextrowselected
    nextRowSelected(): BOOL;
    setNextRowSelected(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablerowview/1535313-previousrowselected
    previousRowSelected(): BOOL;
    setPreviousRowSelected(): void;
    //
    alloc():NSTableRowView;
    //
    init():NSTableRowView;
  }
}

declare const NSTableRowView: cocoascript.NSTableRowView;
declare namespace cocoascript {
  /**
   * The display characteristics and identifier for a column in a table view.
   * doc://com.apple.documentation/documentation/appkit/nstablecolumn
   */
  interface NSTableColumn extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1526749-initwithidentifier
    initWithIdentifier(identifier: NSUserInterfaceItemIdentifier):NSTableColumn;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1535908-tableview
    tableView(): NSTableView;
    setTableView(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1528774-width
    width(): CGFloat;
    setWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1525126-minwidth
    minWidth(): CGFloat;
    setMinWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1526342-maxwidth
    maxWidth(): CGFloat;
    setMaxWidth(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1529591-resizingmask
    resizingMask(): NSTableColumnResizingOptions;
    setResizingMask(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1532997-sizetofit
    sizeToFit():void;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1526875-title
    title(): string | NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1525137-headercell
    headerCell(): NSTableHeaderCell;
    setHeaderCell(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1531113-identifier
    identifier(): NSUserInterfaceItemIdentifier;
    setIdentifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1528412-editable
    editable(): BOOL;
    setEditable(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1534663-sortdescriptorprototype
    sortDescriptorPrototype(): NSSortDescriptor;
    setSortDescriptorPrototype(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1524681-hidden
    hidden(): BOOL;
    setHidden(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1524685-headertooltip
    headerToolTip(): string | NSString;
    setHeaderToolTip(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1579360-isresizable
    isResizable():BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1579359-setresizable
    setResizable(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1534251-datacell
    dataCell(): id;
    setDataCell(): void;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1532459-datacellforrow
    dataCellForRow(row: NSInteger):NSTableColumn;
    // doc://com.apple.documentation/documentation/appkit/nstablecolumn/1644121-initwithcoder
    initWithCoder(coder: NSCoder):NSTableColumn;
    //
    alloc():NSTableColumn;
    //
    init():NSTableColumn;
  }
}

declare const NSTableColumn: cocoascript.NSTableColumn;
declare namespace cocoascript {
  /**
   * A single action to present when the user swipes horizontally on a table row.
   * doc://com.apple.documentation/documentation/appkit/nstableviewrowaction
   */
  interface NSTableViewRowAction extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstableviewrowaction/1401994-rowactionwithstyle
    rowActionWithStyle_title_handler(style: NSTableViewRowActionStyle, title: string | NSString, handler: NSInteger):NSTableViewRowAction;
    // doc://com.apple.documentation/documentation/appkit/nstableviewrowaction/1401982-style
    style(): NSTableViewRowActionStyle;
    setStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewrowaction/1401992-title
    title(): string | NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewrowaction/1401984-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstableviewrowaction/2177311-image
    image(): NSImage;
    setImage(): void;
    //
    alloc():NSTableViewRowAction;
    //
    init():NSTableViewRowAction;
  }
}

declare const NSTableViewRowAction: cocoascript.NSTableViewRowAction;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstablecolumnresizingoptions
  type NSTableColumnResizingOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nscolorchanging
   */
  interface NSColorChanging extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscolorchanging/3005175-changecolor
    changeColor(sender: NSColorPanel):void;
  }
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding
   */
  interface NSStandardKeyBindingResponding extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005196-canceloperation
    cancelOperation(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005197-capitalizeword
    capitalizeWord(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005198-centerselectioninvisiblearea
    centerSelectionInVisibleArea(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005199-changecaseofletter
    changeCaseOfLetter(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005200-complete
    complete(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005201-deletebackward
    deleteBackward(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005202-deletebackwardbydecomposingprevi
    deleteBackwardByDecomposingPreviousCharacter(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005203-deleteforward
    deleteForward(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005204-deletetobeginningofline
    deleteToBeginningOfLine(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005205-deletetobeginningofparagraph
    deleteToBeginningOfParagraph(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005206-deletetoendofline
    deleteToEndOfLine(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005207-deletetoendofparagraph
    deleteToEndOfParagraph(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005208-deletetomark
    deleteToMark(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005209-deletewordbackward
    deleteWordBackward(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005210-deletewordforward
    deleteWordForward(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005211-docommandbyselector
    doCommandBySelector(selector: SEL):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005212-indent
    indent(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005213-insertbacktab
    insertBacktab(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005214-insertcontainerbreak
    insertContainerBreak(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005215-insertdoublequoteignoringsubstit
    insertDoubleQuoteIgnoringSubstitution(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005216-insertlinebreak
    insertLineBreak(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005217-insertnewline
    insertNewline(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005218-insertnewlineignoringfieldeditor
    insertNewlineIgnoringFieldEditor(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005219-insertparagraphseparator
    insertParagraphSeparator(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005220-insertsinglequoteignoringsubstit
    insertSingleQuoteIgnoringSubstitution(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005221-inserttab
    insertTab(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005222-inserttabignoringfieldeditor
    insertTabIgnoringFieldEditor(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005223-inserttext
    insertText(insertString: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005224-lowercaseword
    lowercaseWord(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005225-makebasewritingdirectionlefttori
    makeBaseWritingDirectionLeftToRight(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005226-makebasewritingdirectionnatural
    makeBaseWritingDirectionNatural(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005227-makebasewritingdirectionrighttol
    makeBaseWritingDirectionRightToLeft(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005228-maketextwritingdirectionlefttori
    makeTextWritingDirectionLeftToRight(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005229-maketextwritingdirectionnatural
    makeTextWritingDirectionNatural(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005230-maketextwritingdirectionrighttol
    makeTextWritingDirectionRightToLeft(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005231-movebackward
    moveBackward(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005232-movebackwardandmodifyselection
    moveBackwardAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005233-movedown
    moveDown(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005234-movedownandmodifyselection
    moveDownAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005235-moveforward
    moveForward(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005236-moveforwardandmodifyselection
    moveForwardAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005237-moveleft
    moveLeft(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005238-moveleftandmodifyselection
    moveLeftAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005239-moveparagraphbackwardandmodifyse
    moveParagraphBackwardAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005240-moveparagraphforwardandmodifysel
    moveParagraphForwardAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005241-moveright
    moveRight(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005242-moverightandmodifyselection
    moveRightAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005243-movetobeginningofdocument
    moveToBeginningOfDocument(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005244-movetobeginningofdocumentandmodi
    moveToBeginningOfDocumentAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005245-movetobeginningofline
    moveToBeginningOfLine(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005246-movetobeginningoflineandmodifyse
    moveToBeginningOfLineAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005247-movetobeginningofparagraph
    moveToBeginningOfParagraph(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005248-movetobeginningofparagraphandmod
    moveToBeginningOfParagraphAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005249-movetoendofdocument
    moveToEndOfDocument(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005250-movetoendofdocumentandmodifysele
    moveToEndOfDocumentAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005251-movetoendofline
    moveToEndOfLine(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005252-movetoendoflineandmodifyselectio
    moveToEndOfLineAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005253-movetoendofparagraph
    moveToEndOfParagraph(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005254-movetoendofparagraphandmodifysel
    moveToEndOfParagraphAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005255-movetoleftendofline
    moveToLeftEndOfLine(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005256-movetoleftendoflineandmodifysele
    moveToLeftEndOfLineAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005257-movetorightendofline
    moveToRightEndOfLine(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005258-movetorightendoflineandmodifysel
    moveToRightEndOfLineAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005259-moveup
    moveUp(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005260-moveupandmodifyselection
    moveUpAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005261-movewordbackward
    moveWordBackward(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005262-movewordbackwardandmodifyselecti
    moveWordBackwardAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005263-movewordforward
    moveWordForward(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005264-movewordforwardandmodifyselectio
    moveWordForwardAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005265-movewordleft
    moveWordLeft(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005266-movewordleftandmodifyselection
    moveWordLeftAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005267-movewordright
    moveWordRight(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005268-movewordrightandmodifyselection
    moveWordRightAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005269-pagedown
    pageDown(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005270-pagedownandmodifyselection
    pageDownAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005271-pageup
    pageUp(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005272-pageupandmodifyselection
    pageUpAndModifySelection(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005273-quicklookpreviewitems
    quickLookPreviewItems(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005274-scrolllinedown
    scrollLineDown(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005275-scrolllineup
    scrollLineUp(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005276-scrollpagedown
    scrollPageDown(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005277-scrollpageup
    scrollPageUp(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005278-scrolltobeginningofdocument
    scrollToBeginningOfDocument(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005279-scrolltoendofdocument
    scrollToEndOfDocument(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005280-selectall
    selectAll(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005281-selectline
    selectLine(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005282-selectparagraph
    selectParagraph(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005283-selecttomark
    selectToMark(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005284-selectword
    selectWord(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005285-setmark
    setMark(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005286-swapwithmark
    swapWithMark(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005287-transpose
    transpose(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005288-transposewords
    transposeWords(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005289-uppercaseword
    uppercaseWord(sender: NSStandardKeyBindingResponding):void;
    // doc://com.apple.documentation/documentation/appkit/nsstandardkeybindingresponding/3005290-yank
    yank(sender: NSStandardKeyBindingResponding):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsselectiongranularity
  type NSSelectionGranularity = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsselectionaffinity
  type NSSelectionAffinity = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfindpanelaction
  type NSFindPanelAction = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfindpanelsubstringmatchtype
  type NSFindPanelSubstringMatchType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * An object that defines the user interface of a button or other clickable region of a view.
   * doc://com.apple.documentation/documentation/appkit/nsbuttoncell
   */
  interface NSButtonCell extends NSActionCell {
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1589270-alternatemnemonic
    alternateMnemonic():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1589282-alternatemnemoniclocation
    alternateMnemonicLocation():NSUInteger;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1535382-alternatetitle
    alternateTitle(): string | NSString;
    setAlternateTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1526922-attributedalternatetitle
    attributedAlternateTitle(): NSAttributedString;
    setAttributedAlternateTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1529303-attributedtitle
    attributedTitle(): NSAttributedString;
    setAttributedTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1589288-setalternatemnemoniclocation
    setAlternateMnemonicLocation(location: NSUInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1589291-setalternatetitlewithmnemonic
    setAlternateTitleWithMnemonic(stringWithAmpersand: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1806988-setfont
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1589263-settitlewithmnemonic
    setTitleWithMnemonic(stringWithAmpersand: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1535916-title
    title(): string | NSString;
    setTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1527064-alternateimage
    alternateImage(): NSImage;
    setAlternateImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1529593-imageposition
    imagePosition(): NSCellImagePosition;
    setImagePosition(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1535104-imagescaling
    imageScaling(): NSImageScaling;
    setImageScaling(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1535444-getperiodicdelay
    getPeriodicDelay_interval(delay: number, interval: number):void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1525725-setperiodicdelay
    setPeriodicDelay_interval(delay: number, interval: number):void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1529476-keyequivalent
    keyEquivalent(): string | NSString;
    setKeyEquivalent(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1531184-keyequivalentfont
    keyEquivalentFont(): NSFont;
    setKeyEquivalentFont(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1528315-keyequivalentmodifiermask
    keyEquivalentModifierMask(): NSEventModifierFlags;
    setKeyEquivalentModifierMask(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1530713-setkeyequivalentfont
    setKeyEquivalentFont_size(fontName: string | NSString, fontSize: CGFloat):void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1529743-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1528696-bezelstyle
    bezelStyle(): NSBezelStyle;
    setBezelStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1532259-gradienttype
    gradientType(): NSGradientType;
    setGradientType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1534152-imagedimswhendisabled
    imageDimsWhenDisabled(): BOOL;
    setImageDimsWhenDisabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1533667-opaque
    opaque(): BOOL;
    setOpaque(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1530887-transparent
    transparent(): BOOL;
    setTransparent(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1527903-showsborderonlywhilemouseinside
    showsBorderOnlyWhileMouseInside(): BOOL;
    setShowsBorderOnlyWhileMouseInside(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1528459-highlightsby
    highlightsBy(): NSCellStyleMask;
    setHighlightsBy(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1527474-setbuttontype
    setButtonType(type: NSButtonType):void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1533225-showsstateby
    showsStateBy(): NSCellStyleMask;
    setShowsStateBy(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1525955-sound
    sound(): NSSound;
    setSound(): void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1524997-mouseentered
    mouseEntered(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1530776-mouseexited
    mouseExited(event: NSEvent):void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1526086-performclick
    performClick(sender: NSButtonCell):void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1524939-drawbezelwithframe
    drawBezelWithFrame_inView(frame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1531792-drawimage
    drawImage_withFrame_inView(image: NSImage, frame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1528861-drawtitle
    drawTitle_withFrame_inView(title: NSAttributedString, frame: NSRect, controlView: NSView):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1639159-initwithcoder
    initWithCoder(coder: NSCoder):NSButtonCell;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1639152-initimagecell
    initImageCell(image: NSImage):NSButtonCell;
    // doc://com.apple.documentation/documentation/appkit/nsbuttoncell/1639134-inittextcell
    initTextCell(string: string | NSString):NSButtonCell;
    //
    alloc():NSButtonCell;
    //
    init():NSButtonCell;
  }
}

declare const NSButtonCell: cocoascript.NSButtonCell;
// doc://com.apple.documentation/documentation/appkit/nsmultilevelacceleratorbutton
declare const NSMultiLevelAcceleratorButton: NSButtonType;
declare namespace cocoascript {
  /**
   * An object that controls the behavior of a date picker, or of a single date picker cell in a matrix.
   * doc://com.apple.documentation/documentation/appkit/nsdatepickercell
   */
  interface NSDatePickerCell extends NSActionCell {
    // doc://com.apple.documentation/documentation/appkit/nsdatepickercell/1459629-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepickercell/1459591-drawsbackground
    drawsBackground(): BOOL;
    setDrawsBackground(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepickercell/1459644-textcolor
    textColor(): NSColor;
    setTextColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepickercell/1459635-datepickerstyle
    datePickerStyle(): NSDatePickerStyle;
    setDatePickerStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepickercell/1459639-datepickerelements
    datePickerElements(): NSDatePickerElementFlags;
    setDatePickerElements(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepickercell/1459602-datepickermode
    datePickerMode(): NSDatePickerMode;
    setDatePickerMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepickercell/1459594-datevalue
    dateValue(): NSDate;
    setDateValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepickercell/1459589-timeinterval
    timeInterval(): NSTimeInterval;
    setTimeInterval(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepickercell/1459609-calendar
    calendar(): NSCalendar;
    setCalendar(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepickercell/1459625-locale
    locale(): NSLocale;
    setLocale(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepickercell/1459633-timezone
    timeZone(): NSTimeZone;
    setTimeZone(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepickercell/1459619-mindate
    minDate(): NSDate;
    setMinDate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepickercell/1459640-maxdate
    maxDate(): NSDate;
    setMaxDate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepickercell/1459615-delegate
    delegate(): NSDatePickerCellDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepickercell/1643567-initwithcoder
    initWithCoder(coder: NSCoder):NSDatePickerCell;
    // doc://com.apple.documentation/documentation/appkit/nsdatepickercell/1643566-inittextcell
    initTextCell(string: string | NSString):NSDatePickerCell;
    //
    alloc():NSDatePickerCell;
    //
    init():NSDatePickerCell;
  }
}

declare const NSDatePickerCell: cocoascript.NSDatePickerCell;
declare namespace cocoascript {
  /**
   * A display of a calendar date with controls for editing the date value.
   * doc://com.apple.documentation/documentation/appkit/nsdatepicker
   */
  interface NSDatePicker extends NSControl {
    // doc://com.apple.documentation/documentation/appkit/nsdatepicker/1533534-bezeled
    bezeled(): BOOL;
    setBezeled(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepicker/1534176-bordered
    bordered(): BOOL;
    setBordered(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepicker/1527710-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepicker/1528266-drawsbackground
    drawsBackground(): BOOL;
    setDrawsBackground(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepicker/1534294-textcolor
    textColor(): NSColor;
    setTextColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepicker/1528570-datepickerstyle
    datePickerStyle(): NSDatePickerStyle;
    setDatePickerStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepicker/3521157-presentscalendaroverlay
    presentsCalendarOverlay(): BOOL;
    setPresentsCalendarOverlay(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepicker/1533878-delegate
    delegate(): NSDatePickerCellDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepicker/1533480-datepickerelements
    datePickerElements(): NSDatePickerElementFlags;
    setDatePickerElements(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepicker/1533591-calendar
    calendar(): NSCalendar;
    setCalendar(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepicker/1525940-locale
    locale(): NSLocale;
    setLocale(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepicker/1527214-datepickermode
    datePickerMode(): NSDatePickerMode;
    setDatePickerMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepicker/1535451-timezone
    timeZone(): NSTimeZone;
    setTimeZone(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepicker/1527606-datevalue
    dateValue(): NSDate;
    setDateValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepicker/1526681-timeinterval
    timeInterval(): NSTimeInterval;
    setTimeInterval(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepicker/1526893-mindate
    minDate(): NSDate;
    setMinDate(): void;
    // doc://com.apple.documentation/documentation/appkit/nsdatepicker/1535887-maxdate
    maxDate(): NSDate;
    setMaxDate(): void;
    //
    alloc():NSDatePicker;
    //
    init():NSDatePicker;
  }
}

declare const NSDatePicker: cocoascript.NSDatePicker;
declare namespace cocoascript {
  /**
   * A set of optional methods implemented by delegates of
   * doc://com.apple.documentation/documentation/appkit/nsdatepickercelldelegate
   */
  interface NSDatePickerCellDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsdatepickercelldelegate/1459631-datepickercell
    datePickerCell_validateProposedDateValue_timeInterval(datePickerCell: NSDatePickerCell, proposedDateValue: NSDate, proposedTimeInterval: NSTimeInterval):void;
  }
}
declare namespace cocoascript {
  /**
   * An
   * doc://com.apple.documentation/documentation/appkit/nsimagecell
   */
  interface NSImageCell extends NSCell {
    // doc://com.apple.documentation/documentation/appkit/nsimagecell/1524421-imagealignment
    imageAlignment(): NSImageAlignment;
    setImageAlignment(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimagecell/1532559-imagescaling
    imageScaling(): NSImageScaling;
    setImageScaling(): void;
    // doc://com.apple.documentation/documentation/appkit/nsimagecell/1526164-imageframestyle
    imageFrameStyle(): NSImageFrameStyle;
    setImageFrameStyle(): void;
    //
    alloc():NSImageCell;
    //
    init():NSImageCell;
  }
}

declare const NSImageCell: cocoascript.NSImageCell;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nslevelindicatorcell
   */
  interface NSLevelIndicatorCell extends NSActionCell {
    // doc://com.apple.documentation/documentation/appkit/nslevelindicatorcell/1527498-initwithlevelindicatorstyle
    initWithLevelIndicatorStyle(levelIndicatorStyle: NSLevelIndicatorStyle):NSLevelIndicatorCell;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicatorcell/1534472-minvalue
    minValue(): number;
    setMinValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicatorcell/1528309-maxvalue
    maxValue(): number;
    setMaxValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicatorcell/1531954-levelindicatorstyle
    levelIndicatorStyle(): NSLevelIndicatorStyle;
    setLevelIndicatorStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicatorcell/1528974-warningvalue
    warningValue(): number;
    setWarningValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicatorcell/1525337-criticalvalue
    criticalValue(): number;
    setCriticalValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicatorcell/1532399-tickmarkposition
    tickMarkPosition(): NSTickMarkPosition;
    setTickMarkPosition(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicatorcell/1534680-numberoftickmarks
    numberOfTickMarks(): NSInteger;
    setNumberOfTickMarks(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicatorcell/1528987-numberofmajortickmarks
    numberOfMajorTickMarks(): NSInteger;
    setNumberOfMajorTickMarks(): void;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicatorcell/1535863-tickmarkvalueatindex
    tickMarkValueAtIndex(index: NSInteger):number;
    // doc://com.apple.documentation/documentation/appkit/nslevelindicatorcell/1534530-rectoftickmarkatindex
    rectOfTickMarkAtIndex(index: NSInteger):NSRect;
    //
    alloc():NSLevelIndicatorCell;
    //
    init():NSLevelIndicatorCell;
  }
}

declare const NSLevelIndicatorCell: cocoascript.NSLevelIndicatorCell;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nslevelindicatorstyle
  type NSLevelIndicatorStyle = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nslevelindicatorplaceholdervisibility
  type NSLevelIndicatorPlaceholderVisibility = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * A display of a file system path or virtual path information.
   * doc://com.apple.documentation/documentation/appkit/nspathcontrol
   */
  interface NSPathControl extends NSControl {
    // doc://com.apple.documentation/documentation/appkit/nspathcontrol/1532330-pathstyle
    pathStyle(): NSPathStyle;
    setPathStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrol/1534164-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrol/1533929-clickedpathcomponentcell
    clickedPathComponentCell():NSPathComponentCell;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrol/1526652-pathcomponentcells
    pathComponentCells():NSPathComponentCell;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrol/1524663-setpathcomponentcells
    setPathComponentCells(cells: NSPathComponentCell):void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrol/1534088-doubleaction
    doubleAction(): SEL;
    setDoubleAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrol/1527205-url
    URL(): NSURL;
    setURL(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrol/1526753-delegate
    delegate(): NSPathControlDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrol/1526909-setdraggingsourceoperationmask
    setDraggingSourceOperationMask_forLocal(mask: NSDragOperation, isLocal: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrol/1535867-menu
    menu(): NSMenu;
    setMenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrol/1527415-allowedtypes
    allowedTypes(): string | NSString;
    setAllowedTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrol/1535047-clickedpathitem
    clickedPathItem(): NSPathControlItem;
    setClickedPathItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrol/1535833-editable
    editable(): BOOL;
    setEditable(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrol/1528208-pathitems
    pathItems(): NSPathControlItem;
    setPathItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrol/1531486-placeholderattributedstring
    placeholderAttributedString(): NSAttributedString;
    setPlaceholderAttributedString(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrol/1531787-placeholderstring
    placeholderString(): string | NSString;
    setPlaceholderString(): void;
    //
    alloc():NSPathControl;
    //
    init():NSPathControl;
  }
}

declare const NSPathControl: cocoascript.NSPathControl;
declare namespace cocoascript {
  /**
   * A set of methods that can be implemented by the delegate of a path control object to support dragging to and from the control.
   * doc://com.apple.documentation/documentation/appkit/nspathcontroldelegate
   */
  interface NSPathControlDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nspathcontroldelegate/1533453-pathcontrol
    pathControl_shouldDragPathComponentCell_withPasteboard(pathControl: NSPathControl, pathComponentCell: NSPathComponentCell, pasteboard: NSPasteboard):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspathcontroldelegate/1528554-pathcontrol
    pathControl_validateDrop(pathControl: NSPathControl, info: NSDraggingInfo):NSDragOperation;
    // doc://com.apple.documentation/documentation/appkit/nspathcontroldelegate/1528517-pathcontrol
    pathControl_acceptDrop(pathControl: NSPathControl, info: NSDraggingInfo):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspathcontroldelegate/1530012-pathcontrol
    pathControl_willDisplayOpenPanel(pathControl: NSPathControl, openPanel: NSOpenPanel):void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontroldelegate/1531724-pathcontrol
    pathControl_willPopUpMenu(pathControl: NSPathControl, menu: NSMenu):void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontroldelegate/1526752-pathcontrol
    pathControl_shouldDragItem_withPasteboard(pathControl: NSPathControl, pathItem: NSPathControlItem, pasteboard: NSPasteboard):BOOL;
  }
}
declare namespace cocoascript {
  /**
   * The user interface of a path control object.
   * doc://com.apple.documentation/documentation/appkit/nspathcell
   */
  interface NSPathCell extends NSActionCell {
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1526407-mouseentered
    mouseEntered_withFrame_inView(event: NSEvent, frame: NSRect, view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1525878-mouseexited
    mouseExited_withFrame_inView(event: NSEvent, frame: NSRect, view: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1524305-allowedtypes
    allowedTypes(): string | NSString;
    setAllowedTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1524249-pathstyle
    pathStyle(): NSPathStyle;
    setPathStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1808573-setcontrolsize
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1529347-setobjectvalue
    setObjectValue(obj: NSCopying):void;
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1524552-placeholderattributedstring
    placeholderAttributedString(): NSAttributedString;
    setPlaceholderAttributedString(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1531136-placeholderstring
    placeholderString(): string | NSString;
    setPlaceholderString(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1527481-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1535369-pathcomponentcellclass
    pathComponentCellClass(): Class;
    setPathComponentCellClass(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1534143-rectofpathcomponentcell
    rectOfPathComponentCell_withFrame_inView(cell: NSPathComponentCell, frame: NSRect, view: NSView):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1528185-pathcomponentcellatpoint
    pathComponentCellAtPoint_withFrame_inView(point: NSPoint, frame: NSRect, view: NSView):NSPathComponentCell;
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1524894-clickedpathcomponentcell
    clickedPathComponentCell(): NSPathComponentCell;
    setClickedPathComponentCell(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1529433-pathcomponentcells
    pathComponentCells(): NSPathComponentCell;
    setPathComponentCells(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1532554-doubleaction
    doubleAction(): SEL;
    setDoubleAction(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1525034-url
    URL(): NSURL;
    setURL(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1524894-clickedpathcomponentcell
    clickedPathComponentCell(): NSPathComponentCell;
    setClickedPathComponentCell(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcell/1532834-delegate
    delegate(): NSPathCellDelegate;
    setDelegate(): void;
    //
    alloc():NSPathCell;
    //
    init():NSPathCell;
  }
}

declare const NSPathCell: cocoascript.NSPathCell;
declare namespace cocoascript {
  /**
   * A set of methods that enable the delegate of a path cell object to customize the Open panel or pop-up menu of a path whose style is set to
   * doc://com.apple.documentation/documentation/appkit/nspathcelldelegate
   */
  interface NSPathCellDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nspathcelldelegate/1526099-pathcell
    pathCell_willDisplayOpenPanel(pathCell: NSPathCell, openPanel: NSOpenPanel):void;
    // doc://com.apple.documentation/documentation/appkit/nspathcelldelegate/1525005-pathcell
    pathCell_willPopUpMenu(pathCell: NSPathCell, menu: NSMenu):void;
  }
}
declare namespace cocoascript {
  /**
   * A component of a path.
   * doc://com.apple.documentation/documentation/appkit/nspathcomponentcell
   */
  interface NSPathComponentCell extends NSTextFieldCell {
    // doc://com.apple.documentation/documentation/appkit/nspathcomponentcell/1527550-image
    image(): NSImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcomponentcell/1534779-url
    URL(): NSURL;
    setURL(): void;
    //
    alloc():NSPathComponentCell;
    //
    init():NSPathComponentCell;
  }
}

declare const NSPathComponentCell: cocoascript.NSPathComponentCell;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nspathcontrolitem
   */
  interface NSPathControlItem extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nspathcontrolitem/1388289-url
    URL(): NSURL;
    setURL(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrolitem/1388287-attributedtitle
    attributedTitle(): NSAttributedString;
    setAttributedTitle(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrolitem/1388295-image
    image(): NSImage;
    setImage(): void;
    // doc://com.apple.documentation/documentation/appkit/nspathcontrolitem/1388293-title
    title(): string | NSString;
    setTitle(): void;
    //
    alloc():NSPathControlItem;
    //
    init():NSPathControlItem;
  }
}

declare const NSPathControlItem: cocoascript.NSPathControlItem;
declare namespace cocoascript {
  /**
   * The
   * doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell
   */
  interface NSPopUpButtonCell extends NSMenuItemCell {
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1528591-inittextcell
    initTextCell_pullsDown(stringValue: string | NSString, pullDown: BOOL):NSPopUpButtonCell;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1529059-menu
    menu(): NSMenu;
    setMenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1529949-pullsdown
    pullsDown(): BOOL;
    setPullsDown(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1530889-autoenablesitems
    autoenablesItems(): BOOL;
    setAutoenablesItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1535408-preferrededge
    preferredEdge(): NSRectEdge;
    setPreferredEdge(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1534951-usesitemfrommenu
    usesItemFromMenu(): BOOL;
    setUsesItemFromMenu(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1528446-altersstateofselecteditem
    altersStateOfSelectedItem(): BOOL;
    setAltersStateOfSelectedItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1534598-arrowposition
    arrowPosition(): NSPopUpArrowPosition;
    setArrowPosition(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1526296-additemwithtitle
    addItemWithTitle(title: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1530154-additemswithtitles
    addItemsWithTitles(itemTitles: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1531000-insertitemwithtitle
    insertItemWithTitle_atIndex(title: string | NSString, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1530732-removeitemwithtitle
    removeItemWithTitle(title: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1528201-removeitematindex
    removeItemAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1534852-removeallitems
    removeAllItems():void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1533757-itemarray
    itemArray(): NSMenuItem;
    setItemArray(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1533633-numberofitems
    numberOfItems(): NSInteger;
    setNumberOfItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1532397-indexofitem
    indexOfItem(item: NSMenuItem):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1532244-indexofitemwithtitle
    indexOfItemWithTitle(title: string | NSString):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1527486-indexofitemwithtag
    indexOfItemWithTag(tag: NSInteger):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1525489-indexofitemwithrepresentedobject
    indexOfItemWithRepresentedObject(obj: NSPopUpButtonCell):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1534909-indexofitemwithtarget
    indexOfItemWithTarget_andAction(target: NSPopUpButtonCell, actionSelector: SEL):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1525784-itematindex
    itemAtIndex(index: NSInteger):NSMenuItem;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1534638-itemwithtitle
    itemWithTitle(title: string | NSString):NSMenuItem;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1535415-lastitem
    lastItem(): NSMenuItem;
    setLastItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1807208-setobjectvalue
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1807211-objectvalue
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1525225-selectitem
    selectItem(item: NSMenuItem):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1534855-selectitematindex
    selectItemAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1534888-selectitemwithtag
    selectItemWithTag(tag: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1534289-selectitemwithtitle
    selectItemWithTitle(title: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1528475-settitle
    setTitle(string: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1533239-selecteditem
    selectedItem(): NSMenuItem;
    setSelectedItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1534937-indexofselecteditem
    indexOfSelectedItem(): NSInteger;
    setIndexOfSelectedItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1535190-synchronizetitleandselecteditem
    synchronizeTitleAndSelectedItem():void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1534248-itemtitleatindex
    itemTitleAtIndex(index: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1532067-itemtitles
    itemTitles(): string | NSString;
    setItemTitles(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1529952-titleofselecteditem
    titleOfSelectedItem(): string | NSString;
    setTitleOfSelectedItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1807220-setimage
    ():void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1531648-attachpopupwithframe
    attachPopUpWithFrame_inView(cellFrame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1535041-dismisspopup
    dismissPopUp():void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1530205-performclickwithframe
    performClickWithFrame_inView(frame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nspopupbuttoncell/1644676-initwithcoder
    initWithCoder(coder: NSCoder):NSPopUpButtonCell;
    //
    alloc():NSPopUpButtonCell;
    //
    init():NSPopUpButtonCell;
  }
}

declare const NSPopUpButtonCell: cocoascript.NSPopUpButtonCell;
// doc://com.apple.documentation/documentation/appkit/nspopupbuttoncellwillpopupnotification
declare const NSPopUpButtonCellWillPopUpNotification: NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsprogressindicatorthickness
  type NSProgressIndicatorThickness = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsprogressindicatorstyle
  type NSProgressIndicatorStyle = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * The
   * doc://com.apple.documentation/documentation/appkit/nsruleeditordelegate
   */
  interface NSRuleEditorDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsruleeditordelegate/1527259-ruleeditor
    ruleEditor_child_forCriterion_withRowType(editor: NSRuleEditor, index: NSInteger, criterion: NSRuleEditorDelegate, rowType: NSRuleEditorRowType):NSRuleEditorDelegate;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditordelegate/1534788-ruleeditor
    ruleEditor_displayValueForCriterion_inRow(editor: NSRuleEditor, criterion: NSRuleEditorDelegate, row: NSInteger):NSRuleEditorDelegate;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditordelegate/1535329-ruleeditor
    ruleEditor_numberOfChildrenForCriterion_withRowType(editor: NSRuleEditor, criterion: NSRuleEditorDelegate, rowType: NSRuleEditorRowType):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditordelegate/1526667-ruleeditor
    ruleEditor_predicatePartsForCriterion_withDisplayValue_inRow(editor: NSRuleEditor, criterion: NSRuleEditorDelegate, value: NSRuleEditorDelegate, row: NSInteger):NSRuleEditorDelegate;
    // doc://com.apple.documentation/documentation/appkit/nsruleeditordelegate/1533292-ruleeditorrowsdidchange
    ruleEditorRowsDidChange(notification: NSNotification):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsruleeditornestingmode
  type NSRuleEditorNestingMode = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsruleeditorrowtype
  type NSRuleEditorRowType = cocoascript.NSUInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsruleeditorrowsdidchangenotification
declare const NSRuleEditorRowsDidChangeNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * A template that describes available predicates and how to display them.
   * doc://com.apple.documentation/documentation/appkit/nspredicateeditorrowtemplate
   */
  interface NSPredicateEditorRowTemplate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nspredicateeditorrowtemplate/1401175-initwithleftexpressions
    initWithLeftExpressions_rightExpressions_modifier_operators_options(leftExpressions: NSExpression, rightExpressions: NSExpression, modifier: NSComparisonPredicateModifier, operators: NSNumber, options: NSUInteger):NSPredicateEditorRowTemplate;
    // doc://com.apple.documentation/documentation/appkit/nspredicateeditorrowtemplate/1401181-initwithleftexpressions
    initWithLeftExpressions_rightExpressionAttributeType_modifier_operators_options(leftExpressions: NSExpression, attributeType: NSAttributeType, modifier: NSComparisonPredicateModifier, operators: NSNumber, options: NSUInteger):NSPredicateEditorRowTemplate;
    // doc://com.apple.documentation/documentation/appkit/nspredicateeditorrowtemplate/1401177-initwithcompoundtypes
    initWithCompoundTypes(compoundTypes: NSNumber):NSPredicateEditorRowTemplate;
    // doc://com.apple.documentation/documentation/appkit/nspredicateeditorrowtemplate/1401187-templateswithattributekeypaths
    templatesWithAttributeKeyPaths_inEntityDescription(keyPaths: string | NSString, entityDescription: NSEntityDescription):NSPredicateEditorRowTemplate;
    // doc://com.apple.documentation/documentation/appkit/nspredicateeditorrowtemplate/1401185-matchforpredicate
    matchForPredicate(predicate: NSPredicate):number;
    // doc://com.apple.documentation/documentation/appkit/nspredicateeditorrowtemplate/1401193-templateviews
    templateViews(): NSView;
    setTemplateViews(): void;
    // doc://com.apple.documentation/documentation/appkit/nspredicateeditorrowtemplate/1401189-setpredicate
    setPredicate(predicate: NSPredicate):void;
    // doc://com.apple.documentation/documentation/appkit/nspredicateeditorrowtemplate/1401183-displayablesubpredicatesofpredic
    displayableSubpredicatesOfPredicate(predicate: NSPredicate):NSPredicate;
    // doc://com.apple.documentation/documentation/appkit/nspredicateeditorrowtemplate/1401179-predicatewithsubpredicates
    predicateWithSubpredicates(subpredicates: NSPredicate):NSPredicate;
    // doc://com.apple.documentation/documentation/appkit/nspredicateeditorrowtemplate/1401191-leftexpressions
    leftExpressions(): NSExpression;
    setLeftExpressions(): void;
    // doc://com.apple.documentation/documentation/appkit/nspredicateeditorrowtemplate/1401173-rightexpressions
    rightExpressions(): NSExpression;
    setRightExpressions(): void;
    // doc://com.apple.documentation/documentation/appkit/nspredicateeditorrowtemplate/1401202-compoundtypes
    compoundTypes(): NSNumber;
    setCompoundTypes(): void;
    // doc://com.apple.documentation/documentation/appkit/nspredicateeditorrowtemplate/1401204-modifier
    modifier(): NSComparisonPredicateModifier;
    setModifier(): void;
    // doc://com.apple.documentation/documentation/appkit/nspredicateeditorrowtemplate/1401195-operators
    operators(): NSNumber;
    setOperators(): void;
    // doc://com.apple.documentation/documentation/appkit/nspredicateeditorrowtemplate/1401197-options
    options(): NSUInteger;
    setOptions(): void;
    // doc://com.apple.documentation/documentation/appkit/nspredicateeditorrowtemplate/1401206-rightexpressionattributetype
    rightExpressionAttributeType(): NSAttributeType;
    setRightExpressionAttributeType(): void;
    //
    alloc():NSPredicateEditorRowTemplate;
    //
    init():NSPredicateEditorRowTemplate;
  }
}

declare const NSPredicateEditorRowTemplate: cocoascript.NSPredicateEditorRowTemplate;
declare namespace cocoascript {
  /**
   * An optional search-and-replace find interface inside a view, usually a scroll view.
   * doc://com.apple.documentation/documentation/appkit/nstextfinder
   */
  interface NSTextFinder extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstextfinder/1535019-init
    init():NSTextFinder;
    // doc://com.apple.documentation/documentation/appkit/nstextfinder/1526414-performaction
    performAction(op: NSTextFinderAction):void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinder/1527203-validateaction
    validateAction(op: NSTextFinderAction):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextfinder/1525467-cancelfindindicator
    cancelFindIndicator():void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinder/1526748-findbarcontainer
    findBarContainer(): NSTextFinderBarContainer;
    setFindBarContainer(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinder/1533813-client
    client(): NSTextFinderClient;
    setClient(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinder/1534184-noteclientstringwillchange
    noteClientStringWillChange():void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinder/1534431-findindicatorneedsupdate
    findIndicatorNeedsUpdate(): BOOL;
    setFindIndicatorNeedsUpdate(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinder/1526120-drawincrementalmatchhighlightinr
    drawIncrementalMatchHighlightInRect(rect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinder/1528304-incrementalmatchranges
    incrementalMatchRanges(): NSValue;
    setIncrementalMatchRanges(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinder/1535849-incrementalsearchingenabled
    incrementalSearchingEnabled(): BOOL;
    setIncrementalSearchingEnabled(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinder/1528196-incrementalsearchingshoulddimcon
    incrementalSearchingShouldDimContentView(): BOOL;
    setIncrementalSearchingShouldDimContentView(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinder/1644638-initwithcoder
    initWithCoder(coder: NSCoder):NSTextFinder;
    //
    alloc():NSTextFinder;
    //
    init():NSTextFinder;
  }
}

declare const NSTextFinder: cocoascript.NSTextFinder;
declare namespace cocoascript {
  /**
   * A text field optimized for performing text-based searches.
   * doc://com.apple.documentation/documentation/appkit/nssearchfield
   */
  interface NSSearchField extends NSTextField {
    // doc://com.apple.documentation/documentation/appkit/nssearchfield/1528425-delegate
    delegate(): NSSearchFieldDelegate;
    setDelegate(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfield/1529467-searchmenutemplate
    searchMenuTemplate(): NSMenu;
    setSearchMenuTemplate(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfield/1529081-sendssearchstringimmediately
    sendsSearchStringImmediately(): BOOL;
    setSendsSearchStringImmediately(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfield/1533976-sendswholesearchstring
    sendsWholeSearchString(): BOOL;
    setSendsWholeSearchString(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfield/1531413-recentsearches
    recentSearches(): string | NSString;
    setRecentSearches(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfield/1533938-maximumrecents
    maximumRecents(): NSInteger;
    setMaximumRecents(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfield/1530035-recentsautosavename
    recentsAutosaveName(): NSSearchFieldRecentsAutosaveName;
    setRecentsAutosaveName(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfield/3634323-cancelbuttonbounds
    cancelButtonBounds(): NSRect;
    setCancelButtonBounds(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfield/3634324-searchbuttonbounds
    searchButtonBounds(): NSRect;
    setSearchButtonBounds(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfield/3634325-searchtextbounds
    searchTextBounds(): NSRect;
    setSearchTextBounds(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfield/1530644-centersplaceholder
    centersPlaceholder(): BOOL;
    setCentersPlaceholder(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfield/1533921-rectforcancelbuttonwhencentered
    rectForCancelButtonWhenCentered(isCentered: BOOL):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nssearchfield/1534482-rectforsearchbuttonwhencentered
    rectForSearchButtonWhenCentered(isCentered: BOOL):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nssearchfield/1529211-rectforsearchtextwhencentered
    rectForSearchTextWhenCentered(isCentered: BOOL):NSRect;
    //
    alloc():NSSearchField;
    //
    init():NSSearchField;
  }
}

declare const NSSearchField: cocoascript.NSSearchField;
declare namespace cocoascript {
  /**
   * The programmatic interface for text fields that are used for text-based searches.
   * doc://com.apple.documentation/documentation/appkit/nssearchfieldcell
   */
  interface NSSearchFieldCell extends NSTextFieldCell {
    // doc://com.apple.documentation/documentation/appkit/nssearchfieldcell/1399457-searchbuttoncell
    searchButtonCell(): NSButtonCell;
    setSearchButtonCell(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfieldcell/1399461-resetsearchbuttoncell
    resetSearchButtonCell():void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfieldcell/1399440-cancelbuttoncell
    cancelButtonCell(): NSButtonCell;
    setCancelButtonCell(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfieldcell/1399442-resetcancelbuttoncell
    resetCancelButtonCell():void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfieldcell/1399455-searchtextrectforbounds
    searchTextRectForBounds(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nssearchfieldcell/1399450-searchbuttonrectforbounds
    searchButtonRectForBounds(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nssearchfieldcell/1399472-cancelbuttonrectforbounds
    cancelButtonRectForBounds(rect: NSRect):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nssearchfieldcell/1399452-searchmenutemplate
    searchMenuTemplate(): NSMenu;
    setSearchMenuTemplate(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfieldcell/1399453-sendswholesearchstring
    sendsWholeSearchString(): BOOL;
    setSendsWholeSearchString(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfieldcell/1399444-sendssearchstringimmediately
    sendsSearchStringImmediately(): BOOL;
    setSendsSearchStringImmediately(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfieldcell/1399468-maximumrecents
    maximumRecents(): NSInteger;
    setMaximumRecents(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfieldcell/1399446-recentsearches
    recentSearches(): string | NSString;
    setRecentSearches(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfieldcell/1399463-recentsautosavename
    recentsAutosaveName(): NSSearchFieldRecentsAutosaveName;
    setRecentsAutosaveName(): void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfieldcell/1643723-initwithcoder
    initWithCoder(coder: NSCoder):NSSearchFieldCell;
    // doc://com.apple.documentation/documentation/appkit/nssearchfieldcell/1643722-inittextcell
    initTextCell(string: string | NSString):NSSearchFieldCell;
    //
    alloc():NSSearchFieldCell;
    //
    init():NSSearchFieldCell;
  }
}

declare const NSSearchFieldCell: cocoascript.NSSearchFieldCell;
declare namespace cocoascript {
  /**
   * A protocol that provides a container in which the find bar is displayed.
   * doc://com.apple.documentation/documentation/appkit/nstextfinderbarcontainer
   */
  interface NSTextFinderBarContainer extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstextfinderbarcontainer/1531692-findbarview
    findBarView(): NSView;
    setFindBarView(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderbarcontainer/1532766-contentview
    contentView():NSView;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderbarcontainer/1528587-findbarvisible
    findBarVisible(): BOOL;
    setFindBarVisible(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderbarcontainer/1529109-findbarviewdidchangeheight
    findBarViewDidChangeHeight():void;
  }
}
declare namespace cocoascript {
  /**
   * A set of methods implemented by objects that support searching using the
   * doc://com.apple.documentation/documentation/appkit/nstextfinderclient
   */
  interface NSTextFinderClient extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstextfinderclient/1529462-string
    string(): string | NSString;
    setString(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderclient/1529466-stringatindex
    stringAtIndex_effectiveRange_endsWithSearchBoundary(characterIndex: NSUInteger, outRange: NSRangePointer, outFlag: BOOL):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderclient/1534333-stringlength
    stringLength():NSUInteger;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderclient/1529811-shouldreplacecharactersinranges
    shouldReplaceCharactersInRanges_withStrings(ranges: NSValue, strings: string | NSString):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderclient/1527702-replacecharactersinrange
    replaceCharactersInRange_withString(range: NSRange, string: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderclient/1534301-didreplacecharacters
    didReplaceCharacters():void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderclient/1533766-selectable
    selectable(): BOOL;
    setSelectable(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderclient/1530815-allowsmultipleselection
    allowsMultipleSelection(): BOOL;
    setAllowsMultipleSelection(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderclient/1526936-firstselectedrange
    firstSelectedRange(): NSRange;
    setFirstSelectedRange(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderclient/1524696-selectedranges
    selectedRanges(): NSValue;
    setSelectedRanges(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderclient/1528515-editable
    editable(): BOOL;
    setEditable(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderclient/1524830-contentviewatindex
    contentViewAtIndex_effectiveCharacterRange(index: NSUInteger, outRange: NSRangePointer):NSView;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderclient/1529980-rectsforcharacterrange
    rectsForCharacterRange(range: NSRange):NSValue;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderclient/1526989-scrollrangetovisible
    scrollRangeToVisible(range: NSRange):void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderclient/1524834-visiblecharacterranges
    visibleCharacterRanges(): NSValue;
    setVisibleCharacterRanges(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfinderclient/1533760-drawcharactersinrange
    drawCharactersInRange_forContentView(range: NSRange, view: NSView):void;
  }
}
declare namespace cocoascript {
  /**
   * An
   * doc://com.apple.documentation/documentation/appkit/nssegmentedcell
   */
  interface NSSegmentedCell extends NSActionCell {
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500185-segmentcount
    segmentCount(): NSInteger;
    setSegmentCount(): void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500188-setselected
    setSelected_forSegment(selected: BOOL, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500196-selectsegmentwithtag
    selectSegmentWithTag(tag: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500190-makenextsegmentkey
    makeNextSegmentKey():void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500170-makeprevioussegmentkey
    makePreviousSegmentKey():void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500193-selectedsegment
    selectedSegment(): NSInteger;
    setSelectedSegment(): void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500177-isselectedforsegment
    isSelectedForSegment(segment: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500200-trackingmode
    trackingMode(): NSSegmentSwitchTracking;
    setTrackingMode(): void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500213-setlabel
    setLabel_forSegment(label: string | NSString, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500215-labelforsegment
    labelForSegment(segment: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500174-setimage
    setImage_forSegment(image: NSImage, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500204-imageforsegment
    imageForSegment(segment: NSInteger):NSImage;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500209-setimagescaling
    setImageScaling_forSegment(scaling: NSImageScaling, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500217-imagescalingforsegment
    imageScalingForSegment(segment: NSInteger):NSImageScaling;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500202-setwidth
    setWidth_forSegment(width: CGFloat, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500211-widthforsegment
    widthForSegment(segment: NSInteger):CGFloat;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500219-setenabled
    setEnabled_forSegment(enabled: BOOL, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500206-isenabledforsegment
    isEnabledForSegment(segment: NSInteger):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500194-setmenu
    setMenu_forSegment(menu: NSMenu, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500175-menuforsegment
    menuForSegment(segment: NSInteger):NSMenu;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500186-settooltip
    setToolTip_forSegment(toolTip: string | NSString, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500183-tooltipforsegment
    toolTipForSegment(segment: NSInteger):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500181-settag
    setTag_forSegment(tag: NSInteger, segment: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500207-tagforsegment
    tagForSegment(segment: NSInteger):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500191-drawsegment
    drawSegment_inFrame_withView(segment: NSInteger, frame: NSRect, controlView: NSView):void;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500198-interiorbackgroundstyleforsegmen
    interiorBackgroundStyleForSegment(segment: NSInteger):NSBackgroundStyle;
    // doc://com.apple.documentation/documentation/appkit/nssegmentedcell/1500172-segmentstyle
    segmentStyle(): NSSegmentStyle;
    setSegmentStyle(): void;
    //
    alloc():NSSegmentedCell;
    //
    init():NSSegmentedCell;
  }
}

declare const NSSegmentedCell: cocoascript.NSSegmentedCell;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nssegmentswitchtracking
  type NSSegmentSwitchTracking = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nssegmentstyle
  type NSSegmentStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nssegmentdistribution
  type NSSegmentDistribution = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * The appearance and behavior of an
   * doc://com.apple.documentation/documentation/appkit/nsslidercell
   */
  interface NSSliderCell extends NSActionCell {
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444596-altincrementvalue
    altIncrementValue(): number;
    setAltIncrementValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444579-preferstrackinguntilmouseup
    prefersTrackingUntilMouseUp(): BOOL;
    setPrefersTrackingUntilMouseUp(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444583-trackrect
    trackRect(): NSRect;
    setTrackRect(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444598-slidertype
    sliderType(): NSSliderType;
    setSliderType(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444629-barrectflipped
    barRectFlipped(flipped: BOOL):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444633-drawtickmarks
    drawTickMarks():void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444647-knobrectflipped
    knobRectFlipped(flipped: BOOL):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444587-drawbarinside
    drawBarInside_flipped(rect: NSRect, flipped: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444606-drawknob
    drawKnob():void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444600-drawknob
    drawKnob(knobRect: NSRect):void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444593-knobthickness
    knobThickness(): CGFloat;
    setKnobThickness(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444602-vertical
    vertical(): BOOL;
    setVertical(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444610-title
    title():string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444631-settitle
    setTitle(string: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444639-titlecell
    titleCell():NSSliderCell;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444619-settitlecell
    setTitleCell(cell: NSCell):void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444591-titlefont
    titleFont():NSFont;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444577-titlecolor
    titleColor():NSColor;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444623-settitlefont
    setTitleFont(fontObj: NSFont):void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444637-settitlecolor
    setTitleColor(newColor: NSColor):void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444589-maxvalue
    maxValue(): number;
    setMaxValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444641-minvalue
    minValue(): number;
    setMinValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444604-allowstickmarkvaluesonly
    allowsTickMarkValuesOnly(): BOOL;
    setAllowsTickMarkValuesOnly(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444627-closesttickmarkvaluetovalue
    closestTickMarkValueToValue(value: number):number;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444614-indexoftickmarkatpoint
    indexOfTickMarkAtPoint(point: NSPoint):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444621-numberoftickmarks
    numberOfTickMarks(): NSInteger;
    setNumberOfTickMarks(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444645-rectoftickmarkatindex
    rectOfTickMarkAtIndex(index: NSInteger):NSRect;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444616-tickmarkposition
    tickMarkPosition(): NSTickMarkPosition;
    setTickMarkPosition(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444635-tickmarkvalueatindex
    tickMarkValueAtIndex(index: NSInteger):number;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/2967175-image
    image():NSImage;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/2967176-setimage
    setImage(backgroundImage: NSImage):void;
    // doc://com.apple.documentation/documentation/appkit/nsslidercell/1444612-setknobthickness
    setKnobThickness(thickness: CGFloat):void;
    //
    alloc():NSSliderCell;
    //
    init():NSSliderCell;
  }
}

declare const NSSliderCell: cocoascript.NSSliderCell;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsslideraccessory
   */
  interface NSSliderAccessory extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsslideraccessory/2544660-accessorywithimage
    accessoryWithImage(image: NSImage):NSSliderAccessory;
    // doc://com.apple.documentation/documentation/appkit/nsslideraccessory/2544656-behavior
    behavior(): NSSliderAccessoryBehavior;
    setBehavior(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslideraccessory/2544779-enabled
    enabled(): BOOL;
    setEnabled(): void;
    //
    alloc():NSSliderAccessory;
    //
    init():NSSliderAccessory;
  }
}

declare const NSSliderAccessory: cocoascript.NSSliderAccessory;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nsslideraccessorybehavior
   */
  interface NSSliderAccessoryBehavior extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsslideraccessorybehavior/2544778-behaviorwithhandler
    behaviorWithHandler(handler: NSSliderAccessory):NSSliderAccessoryBehavior;
    // doc://com.apple.documentation/documentation/appkit/nsslideraccessorybehavior/2544777-behaviorwithtarget
    behaviorWithTarget_action(target: NSSliderAccessoryBehavior, action: SEL):NSSliderAccessoryBehavior;
    // doc://com.apple.documentation/documentation/appkit/nsslideraccessorybehavior/2544780-automaticbehavior
    automaticBehavior(): NSSliderAccessoryBehavior;
    setAutomaticBehavior(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslideraccessorybehavior/2544659-valueresetbehavior
    valueResetBehavior(): NSSliderAccessoryBehavior;
    setValueResetBehavior(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslideraccessorybehavior/2544771-valuestepbehavior
    valueStepBehavior(): NSSliderAccessoryBehavior;
    setValueStepBehavior(): void;
    // doc://com.apple.documentation/documentation/appkit/nsslideraccessorybehavior/2544759-handleaction
    handleAction(sender: NSSliderAccessory):void;
    //
    alloc():NSSliderAccessoryBehavior;
    //
    init():NSSliderAccessoryBehavior;
  }
}

declare const NSSliderAccessoryBehavior: cocoascript.NSSliderAccessoryBehavior;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsslideraccessorywidth
  type NSSliderAccessoryWidth = cocoascript.CGFloat;
}
declare namespace cocoascript {
  /**
   * An
   * doc://com.apple.documentation/documentation/appkit/nssteppercell
   */
  interface NSStepperCell extends NSActionCell {
    // doc://com.apple.documentation/documentation/appkit/nssteppercell/1392321-maxvalue
    maxValue(): number;
    setMaxValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nssteppercell/1392327-minvalue
    minValue(): number;
    setMinValue(): void;
    // doc://com.apple.documentation/documentation/appkit/nssteppercell/1392331-increment
    increment(): number;
    setIncrement(): void;
    // doc://com.apple.documentation/documentation/appkit/nssteppercell/1392323-autorepeat
    autorepeat(): BOOL;
    setAutorepeat(): void;
    // doc://com.apple.documentation/documentation/appkit/nssteppercell/1392325-valuewraps
    valueWraps(): BOOL;
    setValueWraps(): void;
    //
    alloc():NSStepperCell;
    //
    init():NSStepperCell;
  }
}

declare const NSStepperCell: cocoascript.NSStepperCell;
declare namespace cocoascript {
  /**
   * A text field that hides the typed text.
   * doc://com.apple.documentation/documentation/appkit/nssecuretextfield
   */
  interface NSSecureTextField extends NSTextField {
    //
    alloc():NSSecureTextField;
    //
    init():NSSecureTextField;
  }
}

declare const NSSecureTextField: cocoascript.NSSecureTextField;
declare namespace cocoascript {
  /**
   * An object that enhances the text display capabilities of a cell.
   * doc://com.apple.documentation/documentation/appkit/nstextfieldcell
   */
  interface NSTextFieldCell extends NSActionCell {
    // doc://com.apple.documentation/documentation/appkit/nstextfieldcell/1447151-textcolor
    textColor(): NSColor;
    setTextColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfieldcell/1447161-bezelstyle
    bezelStyle(): NSTextFieldBezelStyle;
    setBezelStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfieldcell/1447159-backgroundcolor
    backgroundColor(): NSColor;
    setBackgroundColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfieldcell/1447155-drawsbackground
    drawsBackground(): BOOL;
    setDrawsBackground(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfieldcell/1447157-setupfieldeditorattributes
    setUpFieldEditorAttributes(textObj: NSText):NSText;
    // doc://com.apple.documentation/documentation/appkit/nstextfieldcell/1447147-setwantsnotificationformarkedtex
    setWantsNotificationForMarkedText(flag: BOOL):void;
    // doc://com.apple.documentation/documentation/appkit/nstextfieldcell/1447165-placeholderstring
    placeholderString(): string | NSString;
    setPlaceholderString(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfieldcell/1447153-placeholderattributedstring
    placeholderAttributedString(): NSAttributedString;
    setPlaceholderAttributedString(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfieldcell/1447163-allowedinputsourcelocales
    allowedInputSourceLocales(): string | NSString;
    setAllowedInputSourceLocales(): void;
    // doc://com.apple.documentation/documentation/appkit/nstextfieldcell/1642277-initwithcoder
    initWithCoder(coder: NSCoder):NSTextFieldCell;
    // doc://com.apple.documentation/documentation/appkit/nstextfieldcell/1642278-inittextcell
    initTextCell(string: string | NSString):NSTextFieldCell;
    //
    alloc():NSTextFieldCell;
    //
    init():NSTextFieldCell;
  }
}

declare const NSTextFieldCell: cocoascript.NSTextFieldCell;
declare namespace cocoascript {
  /**
   * A text field whose value is hidden from the user.
   * doc://com.apple.documentation/documentation/appkit/nssecuretextfieldcell
   */
  interface NSSecureTextFieldCell extends NSTextFieldCell {
    // doc://com.apple.documentation/documentation/appkit/nssecuretextfieldcell/1395984-echosbullets
    echosBullets(): BOOL;
    setEchosBullets(): void;
    //
    alloc():NSSecureTextFieldCell;
    //
    init():NSSecureTextFieldCell;
  }
}

declare const NSSecureTextFieldCell: cocoascript.NSSecureTextFieldCell;
declare namespace cocoascript {
  /**
   * A text field that converts text into visually distinct tokens.
   * doc://com.apple.documentation/documentation/appkit/nstokenfield
   */
  interface NSTokenField extends NSTextField {
    // doc://com.apple.documentation/documentation/appkit/nstokenfield/1534077-tokenstyle
    tokenStyle(): NSTokenStyle;
    setTokenStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstokenfield/1534230-tokenizingcharacterset
    tokenizingCharacterSet(): NSCharacterSet;
    setTokenizingCharacterSet(): void;
    // doc://com.apple.documentation/documentation/appkit/nstokenfield/1530131-defaulttokenizingcharacterset
    defaultTokenizingCharacterSet(): NSCharacterSet;
    setDefaultTokenizingCharacterSet(): void;
    // doc://com.apple.documentation/documentation/appkit/nstokenfield/1535823-completiondelay
    completionDelay(): NSTimeInterval;
    setCompletionDelay(): void;
    // doc://com.apple.documentation/documentation/appkit/nstokenfield/1529243-defaultcompletiondelay
    defaultCompletionDelay(): NSTimeInterval;
    setDefaultCompletionDelay(): void;
    // doc://com.apple.documentation/documentation/appkit/nstokenfield/1528157-delegate
    delegate(): NSTokenFieldDelegate;
    setDelegate(): void;
    //
    alloc():NSTokenField;
    //
    init():NSTokenField;
  }
}

declare const NSTokenField: cocoascript.NSTokenField;
declare namespace cocoascript {
  /**
   * A text field cell subclass that enables tokenized editing of an array of objects.
   * doc://com.apple.documentation/documentation/appkit/nstokenfieldcell
   */
  interface NSTokenFieldCell extends NSTextFieldCell {
    // doc://com.apple.documentation/documentation/appkit/nstokenfieldcell/1523827-tokenstyle
    tokenStyle(): NSTokenStyle;
    setTokenStyle(): void;
    // doc://com.apple.documentation/documentation/appkit/nstokenfieldcell/1523808-defaulttokenizingcharacterset
    defaultTokenizingCharacterSet(): NSCharacterSet;
    setDefaultTokenizingCharacterSet(): void;
    // doc://com.apple.documentation/documentation/appkit/nstokenfieldcell/1523822-tokenizingcharacterset
    tokenizingCharacterSet(): NSCharacterSet;
    setTokenizingCharacterSet(): void;
    // doc://com.apple.documentation/documentation/appkit/nstokenfieldcell/1523806-completiondelay
    completionDelay(): NSTimeInterval;
    setCompletionDelay(): void;
    // doc://com.apple.documentation/documentation/appkit/nstokenfieldcell/1523817-defaultcompletiondelay
    defaultCompletionDelay(): NSTimeInterval;
    setDefaultCompletionDelay(): void;
    // doc://com.apple.documentation/documentation/appkit/nstokenfieldcell/1523813-delegate
    delegate(): NSTokenFieldCellDelegate;
    setDelegate(): void;
    //
    alloc():NSTokenFieldCell;
    //
    init():NSTokenFieldCell;
  }
}

declare const NSTokenFieldCell: cocoascript.NSTokenFieldCell;
declare namespace cocoascript {
  /**
   * A set of optional methods implemented by delegates of
   * doc://com.apple.documentation/documentation/appkit/nstokenfielddelegate
   */
  interface NSTokenFieldDelegate extends NSTextFieldDelegate {
    // doc://com.apple.documentation/documentation/appkit/nstokenfielddelegate/1526020-tokenfield
    tokenField_displayStringForRepresentedObject(tokenField: NSTokenField, representedObject: NSTokenFieldDelegate):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nstokenfielddelegate/1530203-tokenfield
    tokenField_styleForRepresentedObject(tokenField: NSTokenField, representedObject: NSTokenFieldDelegate):NSTokenStyle;
    // doc://com.apple.documentation/documentation/appkit/nstokenfielddelegate/1532474-tokenfield
    tokenField_completionsForSubstring_indexOfToken_indexOfSelectedItem(tokenField: NSTokenField, substring: string | NSString, tokenIndex: NSInteger, selectedIndex: NSInteger):NSArray;
    // doc://com.apple.documentation/documentation/appkit/nstokenfielddelegate/1524432-tokenfield
    tokenField_editingStringForRepresentedObject(tokenField: NSTokenField, representedObject: NSTokenFieldDelegate):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nstokenfielddelegate/1527909-tokenfield
    tokenField_representedObjectForEditingString(tokenField: NSTokenField, editingString: string | NSString):NSTokenFieldDelegate;
    // doc://com.apple.documentation/documentation/appkit/nstokenfielddelegate/1524376-tokenfield
    tokenField_shouldAddObjects_atIndex(tokenField: NSTokenField, tokens: NSArray, index: NSUInteger):NSArray;
    // doc://com.apple.documentation/documentation/appkit/nstokenfielddelegate/1529534-tokenfield
    tokenField_readFromPasteboard(tokenField: NSTokenField, pboard: NSPasteboard):NSArray;
    // doc://com.apple.documentation/documentation/appkit/nstokenfielddelegate/1528190-tokenfield
    tokenField_writeRepresentedObjects_toPasteboard(tokenField: NSTokenField, objects: NSArray, pboard: NSPasteboard):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstokenfielddelegate/1533494-tokenfield
    tokenField_hasMenuForRepresentedObject(tokenField: NSTokenField, representedObject: NSTokenFieldDelegate):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstokenfielddelegate/1528750-tokenfield
    tokenField_menuForRepresentedObject(tokenField: NSTokenField, representedObject: NSTokenFieldDelegate):NSMenu;
  }
}
declare namespace cocoascript {
  /**
   * A set of optional methods implemented by delegates of
   * doc://com.apple.documentation/documentation/appkit/nstokenfieldcelldelegate
   */
  interface NSTokenFieldCellDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstokenfieldcelldelegate/1523804-tokenfieldcell
    tokenFieldCell_displayStringForRepresentedObject(tokenFieldCell: NSTokenFieldCell, representedObject: NSTokenFieldCellDelegate):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nstokenfieldcelldelegate/1523829-tokenfieldcell
    tokenFieldCell_styleForRepresentedObject(tokenFieldCell: NSTokenFieldCell, representedObject: NSTokenFieldCellDelegate):NSTokenStyle;
    // doc://com.apple.documentation/documentation/appkit/nstokenfieldcelldelegate/1523818-tokenfieldcell
    tokenFieldCell_completionsForSubstring_indexOfToken_indexOfSelectedItem(tokenFieldCell: NSTokenFieldCell, substring: string | NSString, tokenIndex: NSInteger, selectedIndex: NSInteger):NSArray;
    // doc://com.apple.documentation/documentation/appkit/nstokenfieldcelldelegate/1523824-tokenfieldcell
    tokenFieldCell_editingStringForRepresentedObject(tokenFieldCell: NSTokenFieldCell, representedObject: NSTokenFieldCellDelegate):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nstokenfieldcelldelegate/1523795-tokenfieldcell
    tokenFieldCell_representedObjectForEditingString(tokenFieldCell: NSTokenFieldCell, editingString: string | NSString):NSTokenFieldCellDelegate;
    // doc://com.apple.documentation/documentation/appkit/nstokenfieldcelldelegate/1523823-tokenfieldcell
    tokenFieldCell_shouldAddObjects_atIndex(tokenFieldCell: NSTokenFieldCell, tokens: NSArray, index: NSUInteger):NSArray;
    // doc://com.apple.documentation/documentation/appkit/nstokenfieldcelldelegate/1523807-tokenfieldcell
    tokenFieldCell_readFromPasteboard(tokenFieldCell: NSTokenFieldCell, pboard: NSPasteboard):NSArray;
    // doc://com.apple.documentation/documentation/appkit/nstokenfieldcelldelegate/1523803-tokenfieldcell
    tokenFieldCell_writeRepresentedObjects_toPasteboard(tokenFieldCell: NSTokenFieldCell, objects: NSArray, pboard: NSPasteboard):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstokenfieldcelldelegate/1523826-tokenfieldcell
    tokenFieldCell_hasMenuForRepresentedObject(tokenFieldCell: NSTokenFieldCell, representedObject: NSTokenFieldCellDelegate):BOOL;
    // doc://com.apple.documentation/documentation/appkit/nstokenfieldcelldelegate/1523796-tokenfieldcell
    tokenFieldCell_menuForRepresentedObject(tokenFieldCell: NSTokenFieldCell, representedObject: NSTokenFieldCellDelegate):NSMenu;
  }
}
declare namespace cocoascript {
  /**
   * A view that displays a list of values in a pop-up menu where the user selects a value or types in a custom value.
   * doc://com.apple.documentation/documentation/appkit/nscombobox
   */
  interface NSComboBox extends NSTextField {
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436705-hasverticalscroller
    hasVerticalScroller(): BOOL;
    setHasVerticalScroller(): void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436771-intercellspacing
    intercellSpacing(): NSSize;
    setIntercellSpacing(): void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436711-buttonbordered
    buttonBordered(): BOOL;
    setButtonBordered(): void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436767-itemheight
    itemHeight(): CGFloat;
    setItemHeight(): void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436741-numberofvisibleitems
    numberOfVisibleItems(): NSInteger;
    setNumberOfVisibleItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436729-datasource
    dataSource(): NSComboBoxDataSource;
    setDataSource(): void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436727-usesdatasource
    usesDataSource(): BOOL;
    setUsesDataSource(): void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436751-additemswithobjectvalues
    addItemsWithObjectValues(objects: NSArray):void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436739-additemwithobjectvalue
    addItemWithObjectValue(object: NSComboBox):void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436703-insertitemwithobjectvalue
    insertItemWithObjectValue_atIndex(object: NSComboBox, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436709-objectvalues
    objectValues(): NSArray;
    setObjectValues(): void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436721-removeallitems
    removeAllItems():void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436761-removeitematindex
    removeItemAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436759-removeitemwithobjectvalue
    removeItemWithObjectValue(object: NSComboBox):void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436747-numberofitems
    numberOfItems(): NSInteger;
    setNumberOfItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436707-indexofitemwithobjectvalue
    indexOfItemWithObjectValue(object: NSComboBox):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436731-itemobjectvalueatindex
    itemObjectValueAtIndex(index: NSInteger):NSComboBox;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436723-notenumberofitemschanged
    noteNumberOfItemsChanged():void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436717-reloaddata
    reloadData():void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436778-scrollitematindextotop
    scrollItemAtIndexToTop(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436776-scrollitematindextovisible
    scrollItemAtIndexToVisible(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436699-deselectitematindex
    deselectItemAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436701-indexofselecteditem
    indexOfSelectedItem(): NSInteger;
    setIndexOfSelectedItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436743-objectvalueofselecteditem
    objectValueOfSelectedItem(): id;
    setObjectValueOfSelectedItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436735-selectitematindex
    selectItemAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436737-selectitemwithobjectvalue
    selectItemWithObjectValue(object: NSComboBox):void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436749-completes
    completes(): BOOL;
    setCompletes(): void;
    // doc://com.apple.documentation/documentation/appkit/nscombobox/1436697-delegate
    delegate(): NSComboBoxDelegate;
    setDelegate(): void;
    //
    alloc():NSComboBox;
    //
    init():NSComboBox;
  }
}

declare const NSComboBox: cocoascript.NSComboBox;
// doc://com.apple.documentation/documentation/appkit/nscomboboxselectiondidchangenotification
declare const NSComboBoxSelectionDidChangeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nscomboboxselectionischangingnotification
declare const NSComboBoxSelectionIsChangingNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nscomboboxwilldismissnotification
declare const NSComboBoxWillDismissNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nscomboboxwillpopupnotification
declare const NSComboBoxWillPopUpNotification: NSNotificationName;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nscomboboxdatasource
   */
  interface NSComboBoxDataSource extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscomboboxdatasource/1436733-combobox
    comboBox_completedString(comboBox: NSComboBox, string: string | NSString):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxdatasource/1436713-combobox
    comboBox_indexOfItemWithStringValue(comboBox: NSComboBox, string: string | NSString):NSUInteger;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxdatasource/1436753-combobox
    comboBox_objectValueForItemAtIndex(comboBox: NSComboBox, index: NSInteger):NSComboBoxDataSource;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxdatasource/1436780-numberofitemsincombobox
    numberOfItemsInComboBox(comboBox: NSComboBox):NSInteger;
  }
}
declare namespace cocoascript {
  /**
   * A set of optional methods implemented by delegates of combo box objects.
   * doc://com.apple.documentation/documentation/appkit/nscomboboxdelegate
   */
  interface NSComboBoxDelegate extends NSTextFieldDelegate {
    // doc://com.apple.documentation/documentation/appkit/nscomboboxdelegate/1436769-comboboxselectiondidchange
    comboBoxSelectionDidChange(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxdelegate/1436715-comboboxselectionischanging
    comboBoxSelectionIsChanging(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxdelegate/1436763-comboboxwilldismiss
    comboBoxWillDismiss(notification: NSNotification):void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxdelegate/1436784-comboboxwillpopup
    comboBoxWillPopUp(notification: NSNotification):void;
  }
}
declare namespace cocoascript {
  /**
   * The user interface of a combo box.
   * doc://com.apple.documentation/documentation/appkit/nscomboboxcell
   */
  interface NSComboBoxCell extends NSTextFieldCell {
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410252-hasverticalscroller
    hasVerticalScroller(): BOOL;
    setHasVerticalScroller(): void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410246-buttonbordered
    buttonBordered(): BOOL;
    setButtonBordered(): void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410270-intercellspacing
    intercellSpacing(): NSSize;
    setIntercellSpacing(): void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410306-itemheight
    itemHeight(): CGFloat;
    setItemHeight(): void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410298-numberofvisibleitems
    numberOfVisibleItems(): NSInteger;
    setNumberOfVisibleItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410266-datasource
    dataSource(): NSComboBoxCellDataSource;
    setDataSource(): void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410254-usesdatasource
    usesDataSource(): BOOL;
    setUsesDataSource(): void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410300-additemswithobjectvalues
    addItemsWithObjectValues(objects: NSArray):void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410286-additemwithobjectvalue
    addItemWithObjectValue(object: NSComboBoxCell):void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410297-insertitemwithobjectvalue
    insertItemWithObjectValue_atIndex(object: NSComboBoxCell, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410304-objectvalues
    objectValues(): NSArray;
    setObjectValues(): void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410290-removeallitems
    removeAllItems():void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410276-removeitematindex
    removeItemAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410295-removeitemwithobjectvalue
    removeItemWithObjectValue(object: NSComboBoxCell):void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410260-numberofitems
    numberOfItems(): NSInteger;
    setNumberOfItems(): void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410283-indexofitemwithobjectvalue
    indexOfItemWithObjectValue(object: NSComboBoxCell):NSInteger;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410255-itemobjectvalueatindex
    itemObjectValueAtIndex(index: NSInteger):NSComboBoxCell;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410268-notenumberofitemschanged
    noteNumberOfItemsChanged():void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410248-reloaddata
    reloadData():void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410288-scrollitematindextotop
    scrollItemAtIndexToTop(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410272-scrollitematindextovisible
    scrollItemAtIndexToVisible(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410282-deselectitematindex
    deselectItemAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410274-indexofselecteditem
    indexOfSelectedItem(): NSInteger;
    setIndexOfSelectedItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410278-objectvalueofselecteditem
    objectValueOfSelectedItem(): id;
    setObjectValueOfSelectedItem(): void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410292-selectitematindex
    selectItemAtIndex(index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410280-selectitemwithobjectvalue
    selectItemWithObjectValue(object: NSComboBoxCell):void;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410264-completedstring
    completedString(string: string | NSString):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcell/1410262-completes
    completes(): BOOL;
    setCompletes(): void;
    //
    alloc():NSComboBoxCell;
    //
    init():NSComboBoxCell;
  }
}

declare const NSComboBoxCell: cocoascript.NSComboBoxCell;
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nscomboboxcelldatasource
   */
  interface NSComboBoxCellDataSource extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcelldatasource/1410250-comboboxcell
    comboBoxCell_completedString(comboBoxCell: NSComboBoxCell, uncompletedString: string | NSString):string | NSString;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcelldatasource/1410285-comboboxcell
    comboBoxCell_indexOfItemWithStringValue(comboBoxCell: NSComboBoxCell, string: string | NSString):NSUInteger;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcelldatasource/1410258-comboboxcell
    comboBoxCell_objectValueForItemAtIndex(comboBoxCell: NSComboBoxCell, index: NSInteger):NSComboBoxCellDataSource;
    // doc://com.apple.documentation/documentation/appkit/nscomboboxcelldatasource/1410302-numberofitemsincomboboxcell
    numberOfItemsInComboBoxCell(comboBoxCell: NSComboBoxCell):NSInteger;
  }
}
declare namespace cocoascript {
  /**
   * The
   * doc://com.apple.documentation/documentation/appkit/nsmatrixdelegate
   */
  interface NSMatrixDelegate extends NSControlTextEditingDelegate {
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsmatrixmode
  type NSMatrixMode = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsvisualeffectmaterial
  type NSVisualEffectMaterial = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsvisualeffectblendingmode
  type NSVisualEffectBlendingMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsvisualeffectstate
  type NSVisualEffectState = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstitleposition
  type NSTitlePosition = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsboxtype
  type NSBoxType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsviewcontrollertransitionoptions
  type NSViewControllerTransitionOptions = cocoascript.NSUInteger;
}
// doc://com.apple.documentation/documentation/appkit/nssplitviewcontrollerautomaticdimension
declare const NSSplitViewControllerAutomaticDimension: CGFloat;
// doc://com.apple.documentation/documentation/appkit/nssplitviewitemunspecifieddimension
declare const NSSplitViewItemUnspecifiedDimension: CGFloat;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nssplitviewitembehavior
  type NSSplitViewItemBehavior = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nssplitviewitemcollapsebehavior
  type NSSplitViewItemCollapseBehavior = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstitlebarseparatorstyle
  type NSTitlebarSeparatorStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstabviewcontrollertabstyle
  type NSTabViewControllerTabStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstabstate
  type NSTabState = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * The
   * doc://com.apple.documentation/documentation/appkit/nspagecontrollerdelegate
   */
  interface NSPageControllerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nspagecontrollerdelegate/1435009-pagecontrollerwillstartlivetrans
    pageControllerWillStartLiveTransition(pageController: NSPageController):void;
    // doc://com.apple.documentation/documentation/appkit/nspagecontrollerdelegate/1434985-pagecontrollerdidendlivetransiti
    pageControllerDidEndLiveTransition(pageController: NSPageController):void;
    // doc://com.apple.documentation/documentation/appkit/nspagecontrollerdelegate/1435021-pagecontroller
    pageController_didTransitionToObject(pageController: NSPageController, object: NSPageControllerDelegate):void;
    // doc://com.apple.documentation/documentation/appkit/nspagecontrollerdelegate/1435007-pagecontroller
    pageController_identifierForObject(pageController: NSPageController, object: NSPageControllerDelegate):NSPageControllerObjectIdentifier;
    // doc://com.apple.documentation/documentation/appkit/nspagecontrollerdelegate/1435015-pagecontroller
    pageController_viewControllerForIdentifier(pageController: NSPageController, identifier: NSPageControllerObjectIdentifier):NSViewController;
    // doc://com.apple.documentation/documentation/appkit/nspagecontrollerdelegate/1434983-pagecontroller
    pageController_prepareViewController_withObject(pageController: NSPageController, viewController: NSViewController, object: NSPageControllerDelegate):void;
    // doc://com.apple.documentation/documentation/appkit/nspagecontrollerdelegate/1434992-pagecontroller
    pageController_frameForObject(pageController: NSPageController, object: NSPageControllerDelegate):NSRect;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspagecontrollertransitionstyle
  type NSPageControllerTransitionStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsmedialibrary
  type NSMediaLibrary = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nslayoutpriority
  type NSLayoutPriority = number;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nslayoutconstraintorientation
  type NSLayoutConstraintOrientation = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsappearancename
  type NSAppearanceName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsanimationcurve
  type NSAnimationCurve = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsanimationblockingmode
  type NSAnimationBlockingMode = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsviewanimationkey
  type NSViewAnimationKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsviewanimationeffectname
  type NSViewAnimationEffectName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsanimatablepropertykey
  type NSAnimatablePropertyKey = cocoascript.NSString;
}
// doc://com.apple.documentation/documentation/appkit/nswindowdidchangebackingpropertiesnotification
declare const NSWindowDidChangeBackingPropertiesNotification: NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsdevicedescriptionkey
  type NSDeviceDescriptionKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindowlevel
  type NSWindowLevel = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindowframeautosavename
  type NSWindowFrameAutosaveName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindowpersistableframedescriptor
  type NSWindowPersistableFrameDescriptor = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindowtoolbarstyle
  type NSWindowToolbarStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindowtabbingidentifier
  type NSWindowTabbingIdentifier = cocoascript.NSString;
}
// doc://com.apple.documentation/documentation/appkit/nseventdurationforever
declare const NSEventDurationForever: NSTimeInterval;
// doc://com.apple.documentation/documentation/appkit/1473618-nsavailablewindowdepths
declare const NSAvailableWindowDepths: void;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindowstylemask
  type NSWindowStyleMask = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsselectiondirection
  type NSSelectionDirection = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindowbutton
  type NSWindowButton = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindowdepth
  type NSWindowDepth = number;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsbackingstoretype
  type NSBackingStoreType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindoworderingmode
  type NSWindowOrderingMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindowsharingtype
  type NSWindowSharingType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindownumberlistoptions
  type NSWindowNumberListOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindowanimationbehavior
  type NSWindowAnimationBehavior = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindowcollectionbehavior
  type NSWindowCollectionBehavior = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindowocclusionstate
  type NSWindowOcclusionState = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindowtitlevisibility
  type NSWindowTitleVisibility = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindowusertabbingpreference
  type NSWindowUserTabbingPreference = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindowtabbingmode
  type NSWindowTabbingMode = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nswindowdidendliveresizenotification
declare const NSWindowDidEndLiveResizeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowwillstartliveresizenotification
declare const NSWindowWillStartLiveResizeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowwillenterfullscreennotification
declare const NSWindowWillEnterFullScreenNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowdidenterfullscreennotification
declare const NSWindowDidEnterFullScreenNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowwillexitfullscreennotification
declare const NSWindowWillExitFullScreenNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowdidexitfullscreennotification
declare const NSWindowDidExitFullScreenNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowwillenterversionbrowsernotification
declare const NSWindowWillEnterVersionBrowserNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowdidenterversionbrowsernotification
declare const NSWindowDidEnterVersionBrowserNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowwillexitversionbrowsernotification
declare const NSWindowWillExitVersionBrowserNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowdidexitversionbrowsernotification
declare const NSWindowDidExitVersionBrowserNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nswindowdidchangeocclusionstatenotification
declare const NSWindowDidChangeOcclusionStateNotification: NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsalertstyle
  type NSAlertStyle = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsmodalresponse
  type NSModalResponse = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsuserinterfaceitemidentifier
  type NSUserInterfaceItemIdentifier = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsdisplaygamut
  type NSDisplayGamut = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsscreencolorspacedidchangenotification
declare const NSScreenColorSpaceDidChangeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nspopoverwillclosenotification
declare const NSPopoverWillCloseNotification: NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspopoverbehavior
  type NSPopoverBehavior = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspopoverclosereasonvalue
  type NSPopoverCloseReasonValue = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspopoverappearance
  type NSPopoverAppearance = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nspopoverwillshownotification
declare const NSPopoverWillShowNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nspopoverdidshownotification
declare const NSPopoverDidShowNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nspopoverdidclosenotification
declare const NSPopoverDidCloseNotification: NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspdfpaneloptions
  type NSPDFPanelOptions = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsprintpanelaccessorysummarykey
  type NSPrintPanelAccessorySummaryKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscolorpanelmode
  type NSColorPanelMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscolorpaneloptions
  type NSColorPanelOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  /**
   * A set of optional methods implemented by delegates of
   * doc://com.apple.documentation/documentation/appkit/nssounddelegate
   */
  interface NSSoundDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nssounddelegate/1477298-sound
    sound_didFinishPlaying(sound: NSSound, flag: BOOL):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nssoundname
  type NSSoundName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nssoundplaybackdeviceidentifier
  type NSSoundPlaybackDeviceIdentifier = cocoascript.NSString;
}
declare namespace cocoascript {
  /**
   * A set of optional methods implemented by delegates of
   * doc://com.apple.documentation/documentation/appkit/nsspeechrecognizerdelegate
   */
  interface NSSpeechRecognizerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsspeechrecognizerdelegate/1534211-speechrecognizer
    speechRecognizer_didRecognizeCommand(sender: NSSpeechRecognizer, command: string | NSString):void;
  }
}
// doc://com.apple.documentation/documentation/appkit/nsvoicegender
declare const NSVoiceGender: NSVoiceAttributeKey;
declare namespace cocoascript {
  /**
   * A set of optional methods implemented by delegates of
   * doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizerdelegate
   */
  interface NSSpeechSynthesizerDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizerdelegate/1448480-speechsynthesizer
    speechSynthesizer_willSpeakWord_ofString(sender: NSSpeechSynthesizer, characterRange: NSRange, string: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizerdelegate/1448442-speechsynthesizer
    speechSynthesizer_willSpeakPhoneme(sender: NSSpeechSynthesizer, phonemeOpcode: number):void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizerdelegate/1448407-speechsynthesizer
    speechSynthesizer_didEncounterErrorAtIndex_ofString_message(sender: NSSpeechSynthesizer, characterIndex: NSUInteger, string: string | NSString, message: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizerdelegate/1448540-speechsynthesizer
    speechSynthesizer_didEncounterSyncMessage(sender: NSSpeechSynthesizer, message: string | NSString):void;
    // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizerdelegate/1448538-speechsynthesizer
    speechSynthesizer_didFinishSpeaking(sender: NSSpeechSynthesizer, finishedSpeaking: BOOL):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsspeechdictionarykey
  type NSSpeechDictionaryKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsspeechpropertykey
  type NSSpeechPropertyKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsspeechcommanddelimiterkey
  type NSSpeechCommandDelimiterKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsspeecherrorkey
  type NSSpeechErrorKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsspeechmode
  type NSSpeechMode = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsspeechphonemeinfokey
  type NSSpeechPhonemeInfoKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsspeechstatuskey
  type NSSpeechStatusKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizerinfokey
  type NSSpeechSynthesizerInfoKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsvoicegendername
  type NSVoiceGenderName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizervoicename
  type NSSpeechSynthesizerVoiceName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsvoiceattributekey
  type NSVoiceAttributeKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsspeechboundary
  type NSSpeechBoundary = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nshapticfeedbackpattern
  type NSHapticFeedbackPattern = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nshapticfeedbackperformancetime
  type NSHapticFeedbackPerformanceTime = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nseventgestureaxis
  type NSEventGestureAxis = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nstabletproximityeventsubtype
declare const NSTabletProximityEventSubtype: NSEventSubtype;
// doc://com.apple.documentation/documentation/appkit/nstabletpointeventsubtype
declare const NSTabletPointEventSubtype: NSEventSubtype;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nseventtype
  type NSEventType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nseventsubtype
  type NSEventSubtype = number;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspressurebehavior
  type NSPressureBehavior = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspointingdevicetype
  type NSPointingDeviceType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstouchphase
  type NSTouchPhase = cocoascript.NSUInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsleftmousedownmask
declare const NSLeftMouseDownMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nsleftmouseupmask
declare const NSLeftMouseUpMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nsrightmousedownmask
declare const NSRightMouseDownMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nsrightmouseupmask
declare const NSRightMouseUpMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nsothermousedownmask
declare const NSOtherMouseDownMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nsothermouseupmask
declare const NSOtherMouseUpMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nsmousemovedmask
declare const NSMouseMovedMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nsleftmousedraggedmask
declare const NSLeftMouseDraggedMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nsrightmousedraggedmask
declare const NSRightMouseDraggedMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nsothermousedraggedmask
declare const NSOtherMouseDraggedMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nsmouseenteredmask
declare const NSMouseEnteredMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nsmouseexitedmask
declare const NSMouseExitedMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nscursorupdatemask
declare const NSCursorUpdateMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nskeydownmask
declare const NSKeyDownMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nskeyupmask
declare const NSKeyUpMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nsflagschangedmask
declare const NSFlagsChangedMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nsappkitdefinedmask
declare const NSAppKitDefinedMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nssystemdefinedmask
declare const NSSystemDefinedMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nsapplicationdefinedmask
declare const NSApplicationDefinedMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nsperiodicmask
declare const NSPeriodicMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nsscrollwheelmask
declare const NSScrollWheelMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nstabletpointmask
declare const NSTabletPointMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nstabletproximitymask
declare const NSTabletProximityMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nsanyeventmask
declare const NSAnyEventMask: NSEventMask;
// doc://com.apple.documentation/documentation/appkit/nspenlowersidemask
declare const NSPenLowerSideMask: NSEventButtonMask;
// doc://com.apple.documentation/documentation/appkit/nspentipmask
declare const NSPenTipMask: NSEventButtonMask;
// doc://com.apple.documentation/documentation/appkit/nspenuppersidemask
declare const NSPenUpperSideMask: NSEventButtonMask;
// doc://com.apple.documentation/documentation/appkit/nsalphashiftkeymask
declare const NSAlphaShiftKeyMask: NSEventModifierFlags;
// doc://com.apple.documentation/documentation/appkit/nsshiftkeymask
declare const NSShiftKeyMask: NSEventModifierFlags;
// doc://com.apple.documentation/documentation/appkit/nscontrolkeymask
declare const NSControlKeyMask: NSEventModifierFlags;
// doc://com.apple.documentation/documentation/appkit/nsalternatekeymask
declare const NSAlternateKeyMask: NSEventModifierFlags;
// doc://com.apple.documentation/documentation/appkit/nscommandkeymask
declare const NSCommandKeyMask: NSEventModifierFlags;
// doc://com.apple.documentation/documentation/appkit/nsnumericpadkeymask
declare const NSNumericPadKeyMask: NSEventModifierFlags;
// doc://com.apple.documentation/documentation/appkit/nshelpkeymask
declare const NSHelpKeyMask: NSEventModifierFlags;
// doc://com.apple.documentation/documentation/appkit/nsfunctionkeymask
declare const NSFunctionKeyMask: NSEventModifierFlags;
// doc://com.apple.documentation/documentation/appkit/nsdeviceindependentmodifierflagsmask
declare const NSDeviceIndependentModifierFlagsMask: NSEventModifierFlags;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsmenuproperties
  type NSMenuProperties = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsstatusitembehavior
  type NSStatusItemBehavior = cocoascript.NSUInteger;
}
// doc://com.apple.documentation/documentation/appkit/nssquarestatusitemlength
declare const NSSquareStatusItemLength: CGFloat;
// doc://com.apple.documentation/documentation/appkit/nsvariablestatusitemlength
declare const NSVariableStatusItemLength: CGFloat;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsstatusitemautosavename
  type NSStatusItemAutosaveName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstrackingareaoptions
  type NSTrackingAreaOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsgesturerecognizerstate
  type NSGestureRecognizerState = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsscrubberalignment
  type NSScrubberAlignment = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsscrubbermode
  type NSScrubberMode = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstoolbaritemidentifier
  type NSToolbarItemIdentifier = cocoascript.NSString;
}
// doc://com.apple.documentation/documentation/appkit/nstouchbaritemidentifierfixedspacesmall
declare const NSTouchBarItemIdentifierFixedSpaceSmall: NSTouchBarItemIdentifier;
// doc://com.apple.documentation/documentation/appkit/nstouchbaritemidentifierfixedspacelarge
declare const NSTouchBarItemIdentifierFixedSpaceLarge: NSTouchBarItemIdentifier;
// doc://com.apple.documentation/documentation/appkit/nstouchbaritemidentifierflexiblespace
declare const NSTouchBarItemIdentifierFlexibleSpace: NSTouchBarItemIdentifier;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstouchbaritempriority
  type NSTouchBarItemPriority = number;
}
// doc://com.apple.documentation/documentation/appkit/nstouchbaritemprioritylow
declare const NSTouchBarItemPriorityLow: NSTouchBarItemPriority;
// doc://com.apple.documentation/documentation/appkit/nstouchbaritempriorityhigh
declare const NSTouchBarItemPriorityHigh: NSTouchBarItemPriority;
// doc://com.apple.documentation/documentation/appkit/nstouchbaritemprioritynormal
declare const NSTouchBarItemPriorityNormal: NSTouchBarItemPriority;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbaradddetailtemplate
declare const NSImageNameTouchBarAddDetailTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbaralarmtemplate
declare const NSImageNameTouchBarAlarmTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbaraudioinputmutetemplate
declare const NSImageNameTouchBarAudioInputMuteTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbaraudioinputtemplate
declare const NSImageNameTouchBarAudioInputTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbaraudiooutputmutetemplate
declare const NSImageNameTouchBarAudioOutputMuteTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbaraudiooutputvolumehightemplate
declare const NSImageNameTouchBarAudioOutputVolumeHighTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbaraudiooutputvolumelowtemplate
declare const NSImageNameTouchBarAudioOutputVolumeLowTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbaraudiooutputvolumemediumtemplate
declare const NSImageNameTouchBarAudioOutputVolumeMediumTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbaraudiooutputvolumeofftemplate
declare const NSImageNameTouchBarAudioOutputVolumeOffTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarbookmarkstemplate
declare const NSImageNameTouchBarBookmarksTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarcolorpickerfill
declare const NSImageNameTouchBarColorPickerFill: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarcolorpickerfont
declare const NSImageNameTouchBarColorPickerFont: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarcolorpickerstroke
declare const NSImageNameTouchBarColorPickerStroke: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarcommunicationaudiotemplate
declare const NSImageNameTouchBarCommunicationAudioTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarcommunicationvideotemplate
declare const NSImageNameTouchBarCommunicationVideoTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbardeletetemplate
declare const NSImageNameTouchBarDeleteTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbardownloadtemplate
declare const NSImageNameTouchBarDownloadTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarenterfullscreentemplate
declare const NSImageNameTouchBarEnterFullScreenTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarexitfullscreentemplate
declare const NSImageNameTouchBarExitFullScreenTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarfastforwardtemplate
declare const NSImageNameTouchBarFastForwardTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarfoldertemplate
declare const NSImageNameTouchBarFolderTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarfoldercopytotemplate
declare const NSImageNameTouchBarFolderCopyToTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarfoldermovetotemplate
declare const NSImageNameTouchBarFolderMoveToTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbargetinfotemplate
declare const NSImageNameTouchBarGetInfoTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbargodowntemplate
declare const NSImageNameTouchBarGoDownTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbargouptemplate
declare const NSImageNameTouchBarGoUpTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarhistorytemplate
declare const NSImageNameTouchBarHistoryTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbariconviewtemplate
declare const NSImageNameTouchBarIconViewTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarlistviewtemplate
declare const NSImageNameTouchBarListViewTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarmailtemplate
declare const NSImageNameTouchBarMailTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarnewfoldertemplate
declare const NSImageNameTouchBarNewFolderTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarnewmessagetemplate
declare const NSImageNameTouchBarNewMessageTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbaropeninbrowsertemplate
declare const NSImageNameTouchBarOpenInBrowserTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarpausetemplate
declare const NSImageNameTouchBarPauseTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarplaytemplate
declare const NSImageNameTouchBarPlayTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarplaypausetemplate
declare const NSImageNameTouchBarPlayPauseTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarplayheadtemplate
declare const NSImageNameTouchBarPlayheadTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarquicklooktemplate
declare const NSImageNameTouchBarQuickLookTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarrecordstarttemplate
declare const NSImageNameTouchBarRecordStartTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarrecordstoptemplate
declare const NSImageNameTouchBarRecordStopTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarrefreshtemplate
declare const NSImageNameTouchBarRefreshTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarrewindtemplate
declare const NSImageNameTouchBarRewindTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarrotatelefttemplate
declare const NSImageNameTouchBarRotateLeftTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarrotaterighttemplate
declare const NSImageNameTouchBarRotateRightTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarsearchtemplate
declare const NSImageNameTouchBarSearchTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarsharetemplate
declare const NSImageNameTouchBarShareTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarsidebartemplate
declare const NSImageNameTouchBarSidebarTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarskipbacktemplate
declare const NSImageNameTouchBarSkipBackTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarskiptostarttemplate
declare const NSImageNameTouchBarSkipToStartTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarskipback30secondstemplate
declare const NSImageNameTouchBarSkipBack30SecondsTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarskipback15secondstemplate
declare const NSImageNameTouchBarSkipBack15SecondsTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarskipahead15secondstemplate
declare const NSImageNameTouchBarSkipAhead15SecondsTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarskipahead30secondstemplate
declare const NSImageNameTouchBarSkipAhead30SecondsTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarskiptoendtemplate
declare const NSImageNameTouchBarSkipToEndTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarskipaheadtemplate
declare const NSImageNameTouchBarSkipAheadTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarslideshowtemplate
declare const NSImageNameTouchBarSlideshowTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbartagicontemplate
declare const NSImageNameTouchBarTagIconTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbartextboxtemplate
declare const NSImageNameTouchBarTextBoxTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbartextlisttemplate
declare const NSImageNameTouchBarTextListTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbartextboldtemplate
declare const NSImageNameTouchBarTextBoldTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbartextitalictemplate
declare const NSImageNameTouchBarTextItalicTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbartextunderlinetemplate
declare const NSImageNameTouchBarTextUnderlineTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbartextstrikethroughtemplate
declare const NSImageNameTouchBarTextStrikethroughTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbartextjustifiedaligntemplate
declare const NSImageNameTouchBarTextJustifiedAlignTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbartextleftaligntemplate
declare const NSImageNameTouchBarTextLeftAlignTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbartextcenteraligntemplate
declare const NSImageNameTouchBarTextCenterAlignTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbartextrightaligntemplate
declare const NSImageNameTouchBarTextRightAlignTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarusertemplate
declare const NSImageNameTouchBarUserTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbaruseraddtemplate
declare const NSImageNameTouchBarUserAddTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarusergrouptemplate
declare const NSImageNameTouchBarUserGroupTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarvolumeuptemplate
declare const NSImageNameTouchBarVolumeUpTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarvolumedowntemplate
declare const NSImageNameTouchBarVolumeDownTemplate: NSImageName;
declare namespace cocoascript {
  /**
   * A set of methods that a candidate list item delegate uses to enable selection state and list visibility.
   * doc://com.apple.documentation/documentation/appkit/nscandidatelisttouchbaritemdelegate
   */
  interface NSCandidateListTouchBarItemDelegate extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscandidatelisttouchbaritemdelegate/2544747-candidatelisttouchbaritem
    candidateListTouchBarItem_beginSelectingCandidateAtIndex(anItem: NSCandidateListTouchBarItem, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscandidatelisttouchbaritemdelegate/2544677-candidatelisttouchbaritem
    candidateListTouchBarItem_changeSelectionFromCandidateAtIndex_toIndex(anItem: NSCandidateListTouchBarItem, previousIndex: NSInteger, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscandidatelisttouchbaritemdelegate/2544704-candidatelisttouchbaritem
    candidateListTouchBarItem_endSelectingCandidateAtIndex(anItem: NSCandidateListTouchBarItem, index: NSInteger):void;
    // doc://com.apple.documentation/documentation/appkit/nscandidatelisttouchbaritemdelegate/2544878-candidatelisttouchbaritem
    candidateListTouchBarItem_changedCandidateListVisibility(anItem: NSCandidateListTouchBarItem, isVisible: BOOL):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsdraggingimagecomponentkey
  type NSDraggingImageComponentKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsdragoperation
  type NSDragOperation = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsdraggingitemenumerationoptions
  type NSDraggingItemEnumerationOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsspringloadinghighlight
  type NSSpringLoadingHighlight = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsdraggingformation
  type NSDraggingFormation = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsdraggingcontext
  type NSDraggingContext = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsspringloadingoptions
  type NSSpringLoadingOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilitysortdirection
  type NSAccessibilitySortDirection = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilityrulermarkertype
  type NSAccessibilityRulerMarkerType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilityunits
  type NSAccessibilityUnits = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityuielementskey
declare const NSAccessibilityUIElementsKey: NSAccessibilityNotificationUserInfoKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityannouncementkey
declare const NSAccessibilityAnnouncementKey: NSAccessibilityNotificationUserInfoKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityprioritykey
declare const NSAccessibilityPriorityKey: NSAccessibilityNotificationUserInfoKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilitynotificationname
  type NSAccessibilityNotificationName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilitynotificationuserinfokey
  type NSAccessibilityNotificationUserInfoKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilityprioritylevel
  type NSAccessibilityPriorityLevel = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilityorientation
  type NSAccessibilityOrientation = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityannotationelement
declare const NSAccessibilityAnnotationElement: NSAccessibilityAnnotationAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityannotationlabel
declare const NSAccessibilityAnnotationLabel: NSAccessibilityAnnotationAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityannotationlocation
declare const NSAccessibilityAnnotationLocation: NSAccessibilityAnnotationAttributeKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaccessibilityactionname
  type NSAccessibilityActionName = cocoascript.NSString;
}
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityhorizontalorientationvalue
declare const NSAccessibilityHorizontalOrientationValue: NSAccessibilityOrientationValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityverticalorientationvalue
declare const NSAccessibilityVerticalOrientationValue: NSAccessibilityOrientationValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityactivationpointattribute
declare const NSAccessibilityActivationPointAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityallowedvaluesattribute
declare const NSAccessibilityAllowedValuesAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityalternateuivisibleattribute
declare const NSAccessibilityAlternateUIVisibleAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycancelbuttonattribute
declare const NSAccessibilityCancelButtonAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitychildrenattribute
declare const NSAccessibilityChildrenAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityclearbuttonattribute
declare const NSAccessibilityClearButtonAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityclosebuttonattribute
declare const NSAccessibilityCloseButtonAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycolumncountattribute
declare const NSAccessibilityColumnCountAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycolumnheaderuielementsattribute
declare const NSAccessibilityColumnHeaderUIElementsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycolumnindexrangeattribute
declare const NSAccessibilityColumnIndexRangeAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycolumntitlesattribute
declare const NSAccessibilityColumnTitlesAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycolumnsattribute
declare const NSAccessibilityColumnsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycontainsprotectedcontentattribute
declare const NSAccessibilityContainsProtectedContentAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycontentsattribute
declare const NSAccessibilityContentsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycriticalvalueattribute
declare const NSAccessibilityCriticalValueAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydecrementbuttonattribute
declare const NSAccessibilityDecrementButtonAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydefaultbuttonattribute
declare const NSAccessibilityDefaultButtonAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydescriptionattribute
declare const NSAccessibilityDescriptionAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydisclosedbyrowattribute
declare const NSAccessibilityDisclosedByRowAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydisclosedrowsattribute
declare const NSAccessibilityDisclosedRowsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydisclosingattribute
declare const NSAccessibilityDisclosingAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydisclosurelevelattribute
declare const NSAccessibilityDisclosureLevelAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydocumentattribute
declare const NSAccessibilityDocumentAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityeditedattribute
declare const NSAccessibilityEditedAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityenabledattribute
declare const NSAccessibilityEnabledAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityexpandedattribute
declare const NSAccessibilityExpandedAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityextrasmenubarattribute
declare const NSAccessibilityExtrasMenuBarAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityfilenameattribute
declare const NSAccessibilityFilenameAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityfocusedattribute
declare const NSAccessibilityFocusedAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityfocuseduielementattribute
declare const NSAccessibilityFocusedUIElementAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityfocusedwindowattribute
declare const NSAccessibilityFocusedWindowAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityfrontmostattribute
declare const NSAccessibilityFrontmostAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityfullscreenbuttonattribute
declare const NSAccessibilityFullScreenButtonAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitygrowareaattribute
declare const NSAccessibilityGrowAreaAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityhandlesattribute
declare const NSAccessibilityHandlesAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityheaderattribute
declare const NSAccessibilityHeaderAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityhelpattribute
declare const NSAccessibilityHelpAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityhiddenattribute
declare const NSAccessibilityHiddenAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityhorizontalscrollbarattribute
declare const NSAccessibilityHorizontalScrollBarAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityhorizontalunitdescriptionattribute
declare const NSAccessibilityHorizontalUnitDescriptionAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityhorizontalunitsattribute
declare const NSAccessibilityHorizontalUnitsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityidentifierattribute
declare const NSAccessibilityIdentifierAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityincrementbuttonattribute
declare const NSAccessibilityIncrementButtonAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityindexattribute
declare const NSAccessibilityIndexAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityinsertionpointlinenumberattribute
declare const NSAccessibilityInsertionPointLineNumberAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylabeluielementsattribute
declare const NSAccessibilityLabelUIElementsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylabelvalueattribute
declare const NSAccessibilityLabelValueAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylinkeduielementsattribute
declare const NSAccessibilityLinkedUIElementsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymainattribute
declare const NSAccessibilityMainAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymainwindowattribute
declare const NSAccessibilityMainWindowAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymarkergroupuielementattribute
declare const NSAccessibilityMarkerGroupUIElementAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymarkertypeattribute
declare const NSAccessibilityMarkerTypeAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymarkertypedescriptionattribute
declare const NSAccessibilityMarkerTypeDescriptionAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymarkeruielementsattribute
declare const NSAccessibilityMarkerUIElementsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymarkervaluesattribute
declare const NSAccessibilityMarkerValuesAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymattecontentuielementattribute
declare const NSAccessibilityMatteContentUIElementAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymatteholeattribute
declare const NSAccessibilityMatteHoleAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymaxvalueattribute
declare const NSAccessibilityMaxValueAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymenubarattribute
declare const NSAccessibilityMenuBarAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityminvalueattribute
declare const NSAccessibilityMinValueAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityminimizebuttonattribute
declare const NSAccessibilityMinimizeButtonAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityminimizedattribute
declare const NSAccessibilityMinimizedAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymodalattribute
declare const NSAccessibilityModalAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitynextcontentsattribute
declare const NSAccessibilityNextContentsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitynumberofcharactersattribute
declare const NSAccessibilityNumberOfCharactersAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityorderedbyrowattribute
declare const NSAccessibilityOrderedByRowAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityorientationattribute
declare const NSAccessibilityOrientationAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityoverflowbuttonattribute
declare const NSAccessibilityOverflowButtonAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityparentattribute
declare const NSAccessibilityParentAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityplaceholdervalueattribute
declare const NSAccessibilityPlaceholderValueAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitypositionattribute
declare const NSAccessibilityPositionAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitypreviouscontentsattribute
declare const NSAccessibilityPreviousContentsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityproxyattribute
declare const NSAccessibilityProxyAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityrequiredattribute
declare const NSAccessibilityRequiredAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityroleattribute
declare const NSAccessibilityRoleAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityroledescriptionattribute
declare const NSAccessibilityRoleDescriptionAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityrowcountattribute
declare const NSAccessibilityRowCountAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityrowheaderuielementsattribute
declare const NSAccessibilityRowHeaderUIElementsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityrowindexrangeattribute
declare const NSAccessibilityRowIndexRangeAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityrowsattribute
declare const NSAccessibilityRowsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysearchbuttonattribute
declare const NSAccessibilitySearchButtonAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysearchmenuattribute
declare const NSAccessibilitySearchMenuAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityselectedattribute
declare const NSAccessibilitySelectedAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityselectedcellsattribute
declare const NSAccessibilitySelectedCellsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityselectedchildrenattribute
declare const NSAccessibilitySelectedChildrenAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityselectedcolumnsattribute
declare const NSAccessibilitySelectedColumnsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityselectedrowsattribute
declare const NSAccessibilitySelectedRowsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityselectedtextattribute
declare const NSAccessibilitySelectedTextAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityselectedtextrangeattribute
declare const NSAccessibilitySelectedTextRangeAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityselectedtextrangesattribute
declare const NSAccessibilitySelectedTextRangesAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityservesastitleforuielementsattribute
declare const NSAccessibilityServesAsTitleForUIElementsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysharedcharacterrangeattribute
declare const NSAccessibilitySharedCharacterRangeAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysharedfocuselementsattribute
declare const NSAccessibilitySharedFocusElementsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysharedtextuielementsattribute
declare const NSAccessibilitySharedTextUIElementsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityshownmenuattribute
declare const NSAccessibilityShownMenuAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysizeattribute
declare const NSAccessibilitySizeAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysortdirectionattribute
declare const NSAccessibilitySortDirectionAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysplittersattribute
declare const NSAccessibilitySplittersAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysubroleattribute
declare const NSAccessibilitySubroleAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytabsattribute
declare const NSAccessibilityTabsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytitleattribute
declare const NSAccessibilityTitleAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytitleuielementattribute
declare const NSAccessibilityTitleUIElementAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytoolbarbuttonattribute
declare const NSAccessibilityToolbarButtonAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytopleveluielementattribute
declare const NSAccessibilityTopLevelUIElementAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityunitdescriptionattribute
declare const NSAccessibilityUnitDescriptionAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityunitsattribute
declare const NSAccessibilityUnitsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityurlattribute
declare const NSAccessibilityURLAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityvalueattribute
declare const NSAccessibilityValueAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityvaluedescriptionattribute
declare const NSAccessibilityValueDescriptionAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityverticalscrollbarattribute
declare const NSAccessibilityVerticalScrollBarAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityverticalunitdescriptionattribute
declare const NSAccessibilityVerticalUnitDescriptionAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityverticalunitsattribute
declare const NSAccessibilityVerticalUnitsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityvisiblecellsattribute
declare const NSAccessibilityVisibleCellsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityvisiblecharacterrangeattribute
declare const NSAccessibilityVisibleCharacterRangeAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityvisiblechildrenattribute
declare const NSAccessibilityVisibleChildrenAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityvisiblecolumnsattribute
declare const NSAccessibilityVisibleColumnsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityvisiblerowsattribute
declare const NSAccessibilityVisibleRowsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitywarningvalueattribute
declare const NSAccessibilityWarningValueAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitywindowattribute
declare const NSAccessibilityWindowAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitywindowsattribute
declare const NSAccessibilityWindowsAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityzoombuttonattribute
declare const NSAccessibilityZoomButtonAttribute: NSAccessibilityAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityfontfamilykey
declare const NSAccessibilityFontFamilyKey: NSAccessibilityFontAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityfontnamekey
declare const NSAccessibilityFontNameKey: NSAccessibilityFontAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityfontsizekey
declare const NSAccessibilityFontSizeKey: NSAccessibilityFontAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityvisiblenamekey
declare const NSAccessibilityVisibleNameKey: NSAccessibilityFontAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityunknownorientationvalue
declare const NSAccessibilityUnknownOrientationValue: NSAccessibilityOrientationValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityattributedstringforrangeparameterizedattribute
declare const NSAccessibilityAttributedStringForRangeParameterizedAttribute: NSAccessibilityParameterizedAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityboundsforrangeparameterizedattribute
declare const NSAccessibilityBoundsForRangeParameterizedAttribute: NSAccessibilityParameterizedAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycellforcolumnandrowparameterizedattribute
declare const NSAccessibilityCellForColumnAndRowParameterizedAttribute: NSAccessibilityParameterizedAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylayoutpointforscreenpointparameterizedattribute
declare const NSAccessibilityLayoutPointForScreenPointParameterizedAttribute: NSAccessibilityParameterizedAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylayoutsizeforscreensizeparameterizedattribute
declare const NSAccessibilityLayoutSizeForScreenSizeParameterizedAttribute: NSAccessibilityParameterizedAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylineforindexparameterizedattribute
declare const NSAccessibilityLineForIndexParameterizedAttribute: NSAccessibilityParameterizedAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityrangeforindexparameterizedattribute
declare const NSAccessibilityRangeForIndexParameterizedAttribute: NSAccessibilityParameterizedAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityrangeforlineparameterizedattribute
declare const NSAccessibilityRangeForLineParameterizedAttribute: NSAccessibilityParameterizedAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityrangeforpositionparameterizedattribute
declare const NSAccessibilityRangeForPositionParameterizedAttribute: NSAccessibilityParameterizedAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityrtfforrangeparameterizedattribute
declare const NSAccessibilityRTFForRangeParameterizedAttribute: NSAccessibilityParameterizedAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityscreenpointforlayoutpointparameterizedattribute
declare const NSAccessibilityScreenPointForLayoutPointParameterizedAttribute: NSAccessibilityParameterizedAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityscreensizeforlayoutsizeparameterizedattribute
declare const NSAccessibilityScreenSizeForLayoutSizeParameterizedAttribute: NSAccessibilityParameterizedAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitystringforrangeparameterizedattribute
declare const NSAccessibilityStringForRangeParameterizedAttribute: NSAccessibilityParameterizedAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitystylerangeforindexparameterizedattribute
declare const NSAccessibilityStyleRangeForIndexParameterizedAttribute: NSAccessibilityParameterizedAttributeName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityapplicationrole
declare const NSAccessibilityApplicationRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitybrowserrole
declare const NSAccessibilityBrowserRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitybusyindicatorrole
declare const NSAccessibilityBusyIndicatorRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitybuttonrole
declare const NSAccessibilityButtonRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycellrole
declare const NSAccessibilityCellRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycheckboxrole
declare const NSAccessibilityCheckBoxRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycolorwellrole
declare const NSAccessibilityColorWellRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycolumnrole
declare const NSAccessibilityColumnRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycomboboxrole
declare const NSAccessibilityComboBoxRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydisclosuretrianglerole
declare const NSAccessibilityDisclosureTriangleRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydrawerrole
declare const NSAccessibilityDrawerRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitygridrole
declare const NSAccessibilityGridRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitygrouprole
declare const NSAccessibilityGroupRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitygrowarearole
declare const NSAccessibilityGrowAreaRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityhandlerole
declare const NSAccessibilityHandleRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityhelptagrole
declare const NSAccessibilityHelpTagRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityimagerole
declare const NSAccessibilityImageRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityincrementorrole
declare const NSAccessibilityIncrementorRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylayoutarearole
declare const NSAccessibilityLayoutAreaRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylayoutitemrole
declare const NSAccessibilityLayoutItemRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylevelindicatorrole
declare const NSAccessibilityLevelIndicatorRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylinkrole
declare const NSAccessibilityLinkRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylistrole
declare const NSAccessibilityListRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymatterole
declare const NSAccessibilityMatteRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymenurole
declare const NSAccessibilityMenuRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymenubarrole
declare const NSAccessibilityMenuBarRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymenubaritemrole
declare const NSAccessibilityMenuBarItemRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymenubuttonrole
declare const NSAccessibilityMenuButtonRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymenuitemrole
declare const NSAccessibilityMenuItemRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityoutlinerole
declare const NSAccessibilityOutlineRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitypagerole
declare const NSAccessibilityPageRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitypopupbuttonrole
declare const NSAccessibilityPopUpButtonRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitypopoverrole
declare const NSAccessibilityPopoverRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityprogressindicatorrole
declare const NSAccessibilityProgressIndicatorRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityradiobuttonrole
declare const NSAccessibilityRadioButtonRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityradiogrouprole
declare const NSAccessibilityRadioGroupRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityrelevanceindicatorrole
declare const NSAccessibilityRelevanceIndicatorRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityrowrole
declare const NSAccessibilityRowRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityrulerrole
declare const NSAccessibilityRulerRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityrulermarkerrole
declare const NSAccessibilityRulerMarkerRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityscrollarearole
declare const NSAccessibilityScrollAreaRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityscrollbarrole
declare const NSAccessibilityScrollBarRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysheetrole
declare const NSAccessibilitySheetRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysliderrole
declare const NSAccessibilitySliderRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysplitgrouprole
declare const NSAccessibilitySplitGroupRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysplitterrole
declare const NSAccessibilitySplitterRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitystatictextrole
declare const NSAccessibilityStaticTextRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysystemwiderole
declare const NSAccessibilitySystemWideRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytabgrouprole
declare const NSAccessibilityTabGroupRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytablerole
declare const NSAccessibilityTableRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytextarearole
declare const NSAccessibilityTextAreaRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytextfieldrole
declare const NSAccessibilityTextFieldRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytoolbarrole
declare const NSAccessibilityToolbarRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityunknownrole
declare const NSAccessibilityUnknownRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityvalueindicatorrole
declare const NSAccessibilityValueIndicatorRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitywindowrole
declare const NSAccessibilityWindowRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityclosebuttonsubrole
declare const NSAccessibilityCloseButtonSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycollectionlistsubrole
declare const NSAccessibilityCollectionListSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycontentlistsubrole
declare const NSAccessibilityContentListSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydecrementarrowsubrole
declare const NSAccessibilityDecrementArrowSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydecrementpagesubrole
declare const NSAccessibilityDecrementPageSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydefinitionlistsubrole
declare const NSAccessibilityDefinitionListSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydescriptionlistsubrole
declare const NSAccessibilityDescriptionListSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydialogsubrole
declare const NSAccessibilityDialogSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityfloatingwindowsubrole
declare const NSAccessibilityFloatingWindowSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityfullscreenbuttonsubrole
declare const NSAccessibilityFullScreenButtonSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityincrementarrowsubrole
declare const NSAccessibilityIncrementArrowSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityincrementpagesubrole
declare const NSAccessibilityIncrementPageSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityminimizebuttonsubrole
declare const NSAccessibilityMinimizeButtonSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityoutlinerowsubrole
declare const NSAccessibilityOutlineRowSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityratingindicatorsubrole
declare const NSAccessibilityRatingIndicatorSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysearchfieldsubrole
declare const NSAccessibilitySearchFieldSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysectionlistsubrole
declare const NSAccessibilitySectionListSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysecuretextfieldsubrole
declare const NSAccessibilitySecureTextFieldSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysortbuttonsubrole
declare const NSAccessibilitySortButtonSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitystandardwindowsubrole
declare const NSAccessibilityStandardWindowSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityswitchsubrole
declare const NSAccessibilitySwitchSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysystemdialogsubrole
declare const NSAccessibilitySystemDialogSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysystemfloatingwindowsubrole
declare const NSAccessibilitySystemFloatingWindowSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytabbuttonsubrole
declare const NSAccessibilityTabButtonSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytablerowsubrole
declare const NSAccessibilityTableRowSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytextattachmentsubrole
declare const NSAccessibilityTextAttachmentSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytextlinksubrole
declare const NSAccessibilityTextLinkSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytimelinesubrole
declare const NSAccessibilityTimelineSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytogglesubrole
declare const NSAccessibilityToggleSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytoolbarbuttonsubrole
declare const NSAccessibilityToolbarButtonSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityunknownsubrole
declare const NSAccessibilityUnknownSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityzoombuttonsubrole
declare const NSAccessibilityZoomButtonSubrole: NSAccessibilitySubrole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycentertabstopmarkertypevalue
declare const NSAccessibilityCenterTabStopMarkerTypeValue: NSAccessibilityRulerMarkerTypeValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydecimaltabstopmarkertypevalue
declare const NSAccessibilityDecimalTabStopMarkerTypeValue: NSAccessibilityRulerMarkerTypeValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityfirstlineindentmarkertypevalue
declare const NSAccessibilityFirstLineIndentMarkerTypeValue: NSAccessibilityRulerMarkerTypeValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityheadindentmarkertypevalue
declare const NSAccessibilityHeadIndentMarkerTypeValue: NSAccessibilityRulerMarkerTypeValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylefttabstopmarkertypevalue
declare const NSAccessibilityLeftTabStopMarkerTypeValue: NSAccessibilityRulerMarkerTypeValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityrighttabstopmarkertypevalue
declare const NSAccessibilityRightTabStopMarkerTypeValue: NSAccessibilityRulerMarkerTypeValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytailindentmarkertypevalue
declare const NSAccessibilityTailIndentMarkerTypeValue: NSAccessibilityRulerMarkerTypeValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityunknownmarkertypevalue
declare const NSAccessibilityUnknownMarkerTypeValue: NSAccessibilityRulerMarkerTypeValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycentimetersunitvalue
declare const NSAccessibilityCentimetersUnitValue: NSAccessibilityRulerUnitValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityinchesunitvalue
declare const NSAccessibilityInchesUnitValue: NSAccessibilityRulerUnitValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitypicasunitvalue
declare const NSAccessibilityPicasUnitValue: NSAccessibilityRulerUnitValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitypointsunitvalue
declare const NSAccessibilityPointsUnitValue: NSAccessibilityRulerUnitValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityunknownunitvalue
declare const NSAccessibilityUnknownUnitValue: NSAccessibilityRulerUnitValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityascendingsortdirectionvalue
declare const NSAccessibilityAscendingSortDirectionValue: NSAccessibilitySortDirectionValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydescendingsortdirectionvalue
declare const NSAccessibilityDescendingSortDirectionValue: NSAccessibilitySortDirectionValue;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityunknownsortdirectionvalue
declare const NSAccessibilityUnknownSortDirectionValue: NSAccessibilitySortDirectionValue;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsimageloadstatus
  type NSImageLoadStatus = cocoascript.NSUInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsalphanonpremultipliedbitmapformat
declare const NSAlphaNonpremultipliedBitmapFormat: NSBitmapFormat;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsbitmapformat
  type NSBitmapFormat = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstiffcompression
  type NSTIFFCompression = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsbitmapimagereppropertykey
  type NSBitmapImageRepPropertyKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsimagereploadstatus
  type NSImageRepLoadStatus = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsbitmapimagefiletype
  type NSBitmapImageFileType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsgraphicscontextattributekey
  type NSGraphicsContextAttributeKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsgraphicscontextrepresentationformatname
  type NSGraphicsContextRepresentationFormatName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsimageinterpolation
  type NSImageInterpolation = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscolorrenderingintent
  type NSColorRenderingIntent = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsbezierpathelement
  type NSBezierPathElement = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nslinejoinstyle
  type NSLineJoinStyle = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nslinecapstyle
  type NSLineCapStyle = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindingrule
  type NSWindingRule = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfocusringplacement
  type NSFocusRingPlacement = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfocusringtype
  type NSFocusRingType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsgradientdrawingoptions
  type NSGradientDrawingOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsopenglcontextparameter
  type NSOpenGLContextParameter = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsopenglpixelformatattribute
  type NSOpenGLPixelFormatAttribute = number;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscolorsystemeffect
  type NSColorSystemEffect = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscolortype
  type NSColorType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscolorspacename
  type NSColorSpaceName = cocoascript.NSString;
}
// doc://com.apple.documentation/documentation/appkit/nswhite
declare const NSWhite: CGFloat;
// doc://com.apple.documentation/documentation/appkit/nslightgray
declare const NSLightGray: CGFloat;
// doc://com.apple.documentation/documentation/appkit/nsdarkgray
declare const NSDarkGray: CGFloat;
// doc://com.apple.documentation/documentation/appkit/nsblack
declare const NSBlack: CGFloat;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscolorlistname
  type NSColorListName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscolorspacemodel
  type NSColorSpaceModel = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsprintpaneljobstylehint
  type NSPrintPanelJobStyleHint = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsprintpaneloptions
  type NSPrintPanelOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsprintertypename
  type NSPrinterTypeName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsprinterpapername
  type NSPrinterPaperName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsprintertablestatus
  type NSPrinterTableStatus = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspaperorientation
  type NSPaperOrientation = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsprintingpaginationmode
  type NSPrintingPaginationMode = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsprintjobdispositionvalue
  type NSPrintJobDispositionValue = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsprintinfosettingkey
  type NSPrintInfoSettingKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsprintinfoattributekey
  type NSPrintInfoAttributeKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsprintingorientation
  type NSPrintingOrientation = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsprintrenderingquality
  type NSPrintRenderingQuality = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsprintingpageorder
  type NSPrintingPageOrder = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstextcheckingoptionkey
  type NSTextCheckingOptionKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscorrectionindicatortype
  type NSCorrectionIndicatorType = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscorrectionresponse
  type NSCorrectionResponse = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsspellcheckerdidchangeautomaticspellingcorrectionnotification
declare const NSSpellCheckerDidChangeAutomaticSpellingCorrectionNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsspellcheckerdidchangeautomatictextreplacementnotification
declare const NSSpellCheckerDidChangeAutomaticTextReplacementNotification: NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstextfieldbezelstyle
  type NSTextFieldBezelStyle = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsscrollelasticity
  type NSScrollElasticity = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsscrollviewfindbarposition
  type NSScrollViewFindBarPosition = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsscrollviewwillstartlivemagnifynotification
declare const NSScrollViewWillStartLiveMagnifyNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsscrollviewdidendlivemagnifynotification
declare const NSScrollViewDidEndLiveMagnifyNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsscrollviewwillstartlivescrollnotification
declare const NSScrollViewWillStartLiveScrollNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsscrollviewdidlivescrollnotification
declare const NSScrollViewDidLiveScrollNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsscrollviewdidendlivescrollnotification
declare const NSScrollViewDidEndLiveScrollNotification: NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstextmovement
  type NSTextMovement = cocoascript.NSInteger;
}
declare namespace cocoascript {
  /**
   * A protocol that a search field delegate can use to determine when a search started or ended.
   * doc://com.apple.documentation/documentation/appkit/nssearchfielddelegate
   */
  interface NSSearchFieldDelegate extends NSTextFieldDelegate {
    // doc://com.apple.documentation/documentation/appkit/nssearchfielddelegate/1535275-searchfielddidstartsearching
    searchFieldDidStartSearching(sender: NSSearchField):void;
    // doc://com.apple.documentation/documentation/appkit/nssearchfielddelegate/1529867-searchfielddidendsearching
    searchFieldDidEndSearching(sender: NSSearchField):void;
  }
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstextstorageeditedoptions
  type NSTextStorageEditedOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstypesetterbehavior
  type NSTypesetterBehavior = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsspellingstate
  type NSSpellingState = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstypesettercontrolcharacteraction
  type NSTypesetterControlCharacterAction = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstextblockdimension
  type NSTextBlockDimension = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstextblockvaluetype
  type NSTextBlockValueType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstextblocklayer
  type NSTextBlockLayer = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstextblockverticalalignment
  type NSTextBlockVerticalAlignment = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstexttabtype
  type NSTextTabType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstexttablelayoutalgorithm
  type NSTextTableLayoutAlgorithm = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstextlistmarkerformat
  type NSTextListMarkerFormat = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstextlistoptions
  type NSTextListOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstextcontenttype
  type NSTextContentType = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscharactercollection
  type NSCharacterCollection = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsmultibyteglyphpacking
  type NSMultibyteGlyphPacking = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstextinputsourceidentifier
  type NSTextInputSourceIdentifier = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontweight
  type NSFontWeight = cocoascript.CGFloat;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfonttextstyle
  type NSFontTextStyle = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfonttextstyleoptionkey
  type NSFontTextStyleOptionKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontaction
  type NSFontAction = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontdescriptorsystemdesign
  type NSFontDescriptorSystemDesign = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontdescriptorattributename
  type NSFontDescriptorAttributeName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontdescriptorfeaturekey
  type NSFontDescriptorFeatureKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontdescriptorvariationkey
  type NSFontDescriptorVariationKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontdescriptortraitkey
  type NSFontDescriptorTraitKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontassetrequestoptions
  type NSFontAssetRequestOptions = cocoascript.NSUInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsfontcollectiondidchangenotification
declare const NSFontCollectionDidChangeNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsfontcollectionactionkey
declare const NSFontCollectionActionKey: NSFontCollectionUserInfoKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontcollectionname
  type NSFontCollectionName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontcollectionvisibility
  type NSFontCollectionVisibility = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontcollectionmatchingoptionkey
  type NSFontCollectionMatchingOptionKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontcollectionuserinfokey
  type NSFontCollectionUserInfoKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontcollectionactiontypekey
  type NSFontCollectionActionTypeKey = cocoascript.NSString;
}
// doc://com.apple.documentation/documentation/appkit/nsmodalresponsestop
declare const NSModalResponseStop: NSModalResponse;
// doc://com.apple.documentation/documentation/appkit/nsmodalresponseabort
declare const NSModalResponseAbort: NSModalResponse;
declare namespace cocoascript {
  interface NSModalSession {
  }
}
// doc://com.apple.documentation/documentation/appkit/nsprintspooljob
declare const NSPrintSpoolJob: NSPrintJobDispositionValue;
// doc://com.apple.documentation/documentation/appkit/nsprintpreviewjob
declare const NSPrintPreviewJob: NSPrintJobDispositionValue;
// doc://com.apple.documentation/documentation/appkit/nsprintcanceljob
declare const NSPrintCancelJob: NSPrintJobDispositionValue;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsdrawerstate
  type NSDrawerState = cocoascript.NSUInteger;
}
// doc://com.apple.documentation/documentation/appkit/nspasteboardtypefindpanelsearchoptions
declare const NSPasteboardTypeFindPanelSearchOptions: NSPasteboardType;
// doc://com.apple.documentation/documentation/appkit/nsprintjobsavingurl
declare const NSPrintJobSavingURL: NSPrintInfoAttributeKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstoolbaritemvisibilitypriority
  type NSToolbarItemVisibilityPriority = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsleftmousedragged
declare const NSLeftMouseDragged: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nsrightmousedragged
declare const NSRightMouseDragged: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nsothermousedragged
declare const NSOtherMouseDragged: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nsmouseentered
declare const NSMouseEntered: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nsmouseexited
declare const NSMouseExited: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nsscrollwheel
declare const NSScrollWheel: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nscursorupdate
declare const NSCursorUpdate: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nskeydown
declare const NSKeyDown: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nskeyup
declare const NSKeyUp: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nsflagschanged
declare const NSFlagsChanged: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nstouchbaritemidentifiercandidatelist
declare const NSTouchBarItemIdentifierCandidateList: NSTouchBarItemIdentifier;
// doc://com.apple.documentation/documentation/appkit/nstouchbaritemidentifiercharacterpicker
declare const NSTouchBarItemIdentifierCharacterPicker: NSTouchBarItemIdentifier;
// doc://com.apple.documentation/documentation/appkit/nstouchbaritemidentifiertextformat
declare const NSTouchBarItemIdentifierTextFormat: NSTouchBarItemIdentifier;
// doc://com.apple.documentation/documentation/appkit/nstouchbaritemidentifiertextalignment
declare const NSTouchBarItemIdentifierTextAlignment: NSTouchBarItemIdentifier;
// doc://com.apple.documentation/documentation/appkit/nstouchbaritemidentifiertextcolorpicker
declare const NSTouchBarItemIdentifierTextColorPicker: NSTouchBarItemIdentifier;
// doc://com.apple.documentation/documentation/appkit/nstouchbaritemidentifiertextlist
declare const NSTouchBarItemIdentifierTextList: NSTouchBarItemIdentifier;
// doc://com.apple.documentation/documentation/appkit/nstouchbaritemidentifiertextstyle
declare const NSTouchBarItemIdentifierTextStyle: NSTouchBarItemIdentifier;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsslidertype
  type NSSliderType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstickmarkposition
  type NSTickMarkPosition = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindowlistoptions
  type NSWindowListOptions = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsapplicationocclusionstate
  type NSApplicationOcclusionState = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsaboutpaneloptionkey
  type NSAboutPanelOptionKey = cocoascript.NSString;
}
declare namespace cocoascript {
  /**
   * doc://com.apple.documentation/documentation/appkit/nscollectionviewprefetching
   */
  interface NSCollectionViewPrefetching extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewprefetching/2879295-collectionview
    collectionView_cancelPrefetchingForItemsAtIndexPaths(collectionView: NSCollectionView, indexPaths: NSIndexPath):void;
    // doc://com.apple.documentation/documentation/appkit/nscollectionviewprefetching/2879293-collectionview
    collectionView_prefetchItemsAtIndexPaths(collectionView: NSCollectionView, indexPaths: NSIndexPath):void;
  }
}
// doc://com.apple.documentation/documentation/appkit/nsworkspacedesktopimagescalingkey
declare const NSWorkspaceDesktopImageScalingKey: NSWorkspaceDesktopImageOptionKey;
// doc://com.apple.documentation/documentation/appkit/nsworkspacedesktopimageallowclippingkey
declare const NSWorkspaceDesktopImageAllowClippingKey: NSWorkspaceDesktopImageOptionKey;
// doc://com.apple.documentation/documentation/appkit/nsworkspacedesktopimagefillcolorkey
declare const NSWorkspaceDesktopImageFillColorKey: NSWorkspaceDesktopImageOptionKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsworkspacelaunchoptions
  type NSWorkspaceLaunchOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsworkspacelaunchconfigurationkey
  type NSWorkspaceLaunchConfigurationKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsworkspacefileoperationname
  type NSWorkspaceFileOperationName = cocoascript.NSString;
}
declare namespace cocoascript {
  /**
   * An object that gives you the ability to choose from system-provided tinting behaviors.
   * doc://com.apple.documentation/documentation/appkit/nstintconfiguration
   */
  interface NSTintConfiguration extends NSObject {
    // doc://com.apple.documentation/documentation/appkit/nstintconfiguration/3626823-tintconfigurationwithfixedcolor
    tintConfigurationWithFixedColor(color: NSColor):NSTintConfiguration;
    // doc://com.apple.documentation/documentation/appkit/nstintconfiguration/3626824-tintconfigurationwithpreferredco
    tintConfigurationWithPreferredColor(color: NSColor):NSTintConfiguration;
    // doc://com.apple.documentation/documentation/appkit/nstintconfiguration/3626818-adaptstouseraccentcolor
    adaptsToUserAccentColor(): BOOL;
    setAdaptsToUserAccentColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstintconfiguration/3626820-defaulttintconfiguration
    defaultTintConfiguration(): NSTintConfiguration;
    setDefaultTintConfiguration(): void;
    // doc://com.apple.documentation/documentation/appkit/nstintconfiguration/3626822-monochrometintconfiguration
    monochromeTintConfiguration(): NSTintConfiguration;
    setMonochromeTintConfiguration(): void;
    // doc://com.apple.documentation/documentation/appkit/nstintconfiguration/3626819-basetintcolor
    baseTintColor(): NSColor;
    setBaseTintColor(): void;
    // doc://com.apple.documentation/documentation/appkit/nstintconfiguration/3626821-equivalentcontenttintcolor
    equivalentContentTintColor(): NSColor;
    setEquivalentContentTintColor(): void;
    //
    alloc():NSTintConfiguration;
    //
    init():NSTintConfiguration;
  }
}

declare const NSTintConfiguration: cocoascript.NSTintConfiguration;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenameaddtoaperture
declare const NSSharingServiceNameAddToAperture: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenameaddtoiphoto
declare const NSSharingServiceNameAddToIPhoto: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenameaddtosafarireadinglist
declare const NSSharingServiceNameAddToSafariReadingList: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenamecloudsharing
declare const NSSharingServiceNameCloudSharing: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenamecomposeemail
declare const NSSharingServiceNameComposeEmail: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenamecomposemessage
declare const NSSharingServiceNameComposeMessage: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenamepostimageonflickr
declare const NSSharingServiceNamePostImageOnFlickr: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenamepostonfacebook
declare const NSSharingServiceNamePostOnFacebook: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenamepostonlinkedin
declare const NSSharingServiceNamePostOnLinkedIn: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenamepostonsinaweibo
declare const NSSharingServiceNamePostOnSinaWeibo: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenamepostontencentweibo
declare const NSSharingServiceNamePostOnTencentWeibo: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenamepostontwitter
declare const NSSharingServiceNamePostOnTwitter: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenamepostvideoontudou
declare const NSSharingServiceNamePostVideoOnTudou: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenamepostvideoonvimeo
declare const NSSharingServiceNamePostVideoOnVimeo: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenamepostvideoonyouku
declare const NSSharingServiceNamePostVideoOnYouku: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenamesendviaairdrop
declare const NSSharingServiceNameSendViaAirDrop: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenameuseasdesktoppicture
declare const NSSharingServiceNameUseAsDesktopPicture: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenameuseasfacebookprofileimage
declare const NSSharingServiceNameUseAsFacebookProfileImage: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenameuseaslinkedinprofileimage
declare const NSSharingServiceNameUseAsLinkedInProfileImage: NSSharingServiceName;
// doc://com.apple.documentation/documentation/appkit/nssharingservicenameuseastwitterprofileimage
declare const NSSharingServiceNameUseAsTwitterProfileImage: NSSharingServiceName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nssharingcontentscope
  type NSSharingContentScope = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nspasteboardtypeurl
declare const NSPasteboardTypeURL: NSPasteboardType;
// doc://com.apple.documentation/documentation/appkit/nspasteboardtypecolor
declare const NSPasteboardTypeColor: NSPasteboardType;
// doc://com.apple.documentation/documentation/appkit/nspasteboardtypefileurl
declare const NSPasteboardTypeFileURL: NSPasteboardType;
// doc://com.apple.documentation/documentation/appkit/nspasteboardtypefont
declare const NSPasteboardTypeFont: NSPasteboardType;
// doc://com.apple.documentation/documentation/appkit/nspasteboardtypehtml
declare const NSPasteboardTypeHTML: NSPasteboardType;
// doc://com.apple.documentation/documentation/appkit/nspasteboardtypemultipletextselection
declare const NSPasteboardTypeMultipleTextSelection: NSPasteboardType;
// doc://com.apple.documentation/documentation/appkit/nspasteboardtypepdf
declare const NSPasteboardTypePDF: NSPasteboardType;
// doc://com.apple.documentation/documentation/appkit/nspasteboardtypepng
declare const NSPasteboardTypePNG: NSPasteboardType;
// doc://com.apple.documentation/documentation/appkit/nspasteboardtypertf
declare const NSPasteboardTypeRTF: NSPasteboardType;
// doc://com.apple.documentation/documentation/appkit/nspasteboardtypertfd
declare const NSPasteboardTypeRTFD: NSPasteboardType;
// doc://com.apple.documentation/documentation/appkit/nspasteboardtyperuler
declare const NSPasteboardTypeRuler: NSPasteboardType;
// doc://com.apple.documentation/documentation/appkit/nspasteboardtypesound
declare const NSPasteboardTypeSound: NSPasteboardType;
// doc://com.apple.documentation/documentation/appkit/nspasteboardtypestring
declare const NSPasteboardTypeString: NSPasteboardType;
// doc://com.apple.documentation/documentation/appkit/nspasteboardtypetabulartext
declare const NSPasteboardTypeTabularText: NSPasteboardType;
// doc://com.apple.documentation/documentation/appkit/nspasteboardtypetextfinderoptions
declare const NSPasteboardTypeTextFinderOptions: NSPasteboardType;
// doc://com.apple.documentation/documentation/appkit/nspasteboardtypetiff
declare const NSPasteboardTypeTIFF: NSPasteboardType;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspasteboardtypefindpanelsearchoptionkey
  type NSPasteboardTypeFindPanelSearchOptionKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspasteboardtypetextfinderoptionkey
  type NSPasteboardTypeTextFinderOptionKey = cocoascript.NSString;
}
// doc://com.apple.documentation/documentation/appkit/nspasteboardurlreadingcontentsconformtotypeskey
declare const NSPasteboardURLReadingContentsConformToTypesKey: NSPasteboardReadingOptionKey;
// doc://com.apple.documentation/documentation/appkit/nspasteboardurlreadingfileurlsonlykey
declare const NSPasteboardURLReadingFileURLsOnlyKey: NSPasteboardReadingOptionKey;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstableviewdropoperation
  type NSTableViewDropOperation = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstableviewstyle
  type NSTableViewStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstableviewautosavename
  type NSTableViewAutosaveName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstableviewdraggingdestinationfeedbackstyle
  type NSTableViewDraggingDestinationFeedbackStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstableviewgridlinestyle
  type NSTableViewGridLineStyle = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstableviewcolumnautoresizingstyle
  type NSTableViewColumnAutoresizingStyle = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstableviewselectionhighlightstyle
  type NSTableViewSelectionHighlightStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstableviewanimationoptions
  type NSTableViewAnimationOptions = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstableviewrowsizestyle
  type NSTableViewRowSizeStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstablerowactionedge
  type NSTableRowActionEdge = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscollectionviewsupplementaryelementkind
  type NSCollectionViewSupplementaryElementKind = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscollectionviewdropoperation
  type NSCollectionViewDropOperation = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscollectionviewscrollposition
  type NSCollectionViewScrollPosition = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsbrowsercolumnsautosavename
  type NSBrowserColumnsAutosaveName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsbrowsercolumnresizingtype
  type NSBrowserColumnResizingType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsbrowserdropoperation
  type NSBrowserDropOperation = cocoascript.NSUInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsfullscreenmodeapplicationpresentationoptions
declare const NSFullScreenModeApplicationPresentationOptions: NSViewFullScreenModeOptionKey;
// doc://com.apple.documentation/documentation/appkit/nstabletpoint
declare const NSTabletPoint: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nstabletproximity
declare const NSTabletProximity: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nsviewnoinstrinsicmetric
declare const NSViewNoInstrinsicMetric: CGFloat;
// doc://com.apple.documentation/documentation/appkit/nsfullscreenmodeallscreens
declare const NSFullScreenModeAllScreens: NSViewFullScreenModeOptionKey;
// doc://com.apple.documentation/documentation/appkit/nsfullscreenmodesetting
declare const NSFullScreenModeSetting: NSViewFullScreenModeOptionKey;
// doc://com.apple.documentation/documentation/appkit/nsfullscreenmodewindowlevel
declare const NSFullScreenModeWindowLevel: NSViewFullScreenModeOptionKey;
// doc://com.apple.documentation/documentation/appkit/nsdefinitionpresentationtypekey
declare const NSDefinitionPresentationTypeKey: NSDefinitionOptionKey;
// doc://com.apple.documentation/documentation/appkit/nsdefinitionpresentationtypedictionaryapplication
declare const NSDefinitionPresentationTypeDictionaryApplication: NSDefinitionPresentationType;
// doc://com.apple.documentation/documentation/appkit/nsdefinitionpresentationtypeoverlay
declare const NSDefinitionPresentationTypeOverlay: NSDefinitionPresentationType;
// doc://com.apple.documentation/documentation/appkit/nsimagenameapplicationicon
declare const NSImageNameApplicationIcon: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameactiontemplate
declare const NSImageNameActionTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameaddtemplate
declare const NSImageNameAddTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameadvanced
declare const NSImageNameAdvanced: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamebluetoothtemplate
declare const NSImageNameBluetoothTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamebonjour
declare const NSImageNameBonjour: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamebookmarkstemplate
declare const NSImageNameBookmarksTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamecaution
declare const NSImageNameCaution: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamecolorpanel
declare const NSImageNameColorPanel: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamecolumnviewtemplate
declare const NSImageNameColumnViewTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamecomputer
declare const NSImageNameComputer: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamedotmac
declare const NSImageNameDotMac: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameenterfullscreentemplate
declare const NSImageNameEnterFullScreenTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameeveryone
declare const NSImageNameEveryone: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameexitfullscreentemplate
declare const NSImageNameExitFullScreenTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameflowviewtemplate
declare const NSImageNameFlowViewTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamefolder
declare const NSImageNameFolder: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamefolderburnable
declare const NSImageNameFolderBurnable: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamefoldersmart
declare const NSImageNameFolderSmart: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamefollowlinkfreestandingtemplate
declare const NSImageNameFollowLinkFreestandingTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamefontpanel
declare const NSImageNameFontPanel: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamegobacktemplate
declare const NSImageNameGoBackTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamegoforwardtemplate
declare const NSImageNameGoForwardTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamegolefttemplate
declare const NSImageNameGoLeftTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamegorighttemplate
declare const NSImageNameGoRightTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamehometemplate
declare const NSImageNameHomeTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameichattheatertemplate
declare const NSImageNameIChatTheaterTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameiconviewtemplate
declare const NSImageNameIconViewTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameinfo
declare const NSImageNameInfo: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameinvaliddatafreestandingtemplate
declare const NSImageNameInvalidDataFreestandingTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameleftfacingtriangletemplate
declare const NSImageNameLeftFacingTriangleTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamelistviewtemplate
declare const NSImageNameListViewTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamelocklockedtemplate
declare const NSImageNameLockLockedTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamelockunlockedtemplate
declare const NSImageNameLockUnlockedTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamemenumixedstatetemplate
declare const NSImageNameMenuMixedStateTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamemenuonstatetemplate
declare const NSImageNameMenuOnStateTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamemobileme
declare const NSImageNameMobileMe: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamemultipledocuments
declare const NSImageNameMultipleDocuments: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamenetwork
declare const NSImageNameNetwork: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamepathtemplate
declare const NSImageNamePathTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamepreferencesgeneral
declare const NSImageNamePreferencesGeneral: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamequicklooktemplate
declare const NSImageNameQuickLookTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamerefreshfreestandingtemplate
declare const NSImageNameRefreshFreestandingTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamerefreshtemplate
declare const NSImageNameRefreshTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameremovetemplate
declare const NSImageNameRemoveTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamerevealfreestandingtemplate
declare const NSImageNameRevealFreestandingTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamerightfacingtriangletemplate
declare const NSImageNameRightFacingTriangleTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamesharetemplate
declare const NSImageNameShareTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameslideshowtemplate
declare const NSImageNameSlideshowTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamesmartbadgetemplate
declare const NSImageNameSmartBadgeTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamestatusavailable
declare const NSImageNameStatusAvailable: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamestatusnone
declare const NSImageNameStatusNone: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamestatuspartiallyavailable
declare const NSImageNameStatusPartiallyAvailable: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamestatusunavailable
declare const NSImageNameStatusUnavailable: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamestopprogressfreestandingtemplate
declare const NSImageNameStopProgressFreestandingTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenamestopprogresstemplate
declare const NSImageNameStopProgressTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametouchbarremovetemplate
declare const NSImageNameTouchBarRemoveTemplate: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametrashempty
declare const NSImageNameTrashEmpty: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenametrashfull
declare const NSImageNameTrashFull: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameuser
declare const NSImageNameUser: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameuseraccounts
declare const NSImageNameUserAccounts: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameusergroup
declare const NSImageNameUserGroup: NSImageName;
// doc://com.apple.documentation/documentation/appkit/nsimagenameuserguest
declare const NSImageNameUserGuest: NSImageName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsimagesymbolscale
  type NSImageSymbolScale = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsimagehintctm
declare const NSImageHintCTM: NSImageHintKey;
// doc://com.apple.documentation/documentation/appkit/nsimagehintinterpolation
declare const NSImageHintInterpolation: NSImageHintKey;
// doc://com.apple.documentation/documentation/appkit/nsimagehintuserinterfacelayoutdirection
declare const NSImageHintUserInterfaceLayoutDirection: NSImageHintKey;
// doc://com.apple.documentation/documentation/appkit/nscompositesourceover
declare const NSCompositeSourceOver: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositeclear
declare const NSCompositeClear: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositecopy
declare const NSCompositeCopy: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositesourcein
declare const NSCompositeSourceIn: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositesourceout
declare const NSCompositeSourceOut: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositesourceatop
declare const NSCompositeSourceAtop: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositedestinationover
declare const NSCompositeDestinationOver: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositedestinationin
declare const NSCompositeDestinationIn: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositedestinationout
declare const NSCompositeDestinationOut: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositedestinationatop
declare const NSCompositeDestinationAtop: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositexor
declare const NSCompositeXOR: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositeplusdarker
declare const NSCompositePlusDarker: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositepluslighter
declare const NSCompositePlusLighter: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositemultiply
declare const NSCompositeMultiply: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositescreen
declare const NSCompositeScreen: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositeoverlay
declare const NSCompositeOverlay: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositedarken
declare const NSCompositeDarken: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositelighten
declare const NSCompositeLighten: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositecolordodge
declare const NSCompositeColorDodge: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositecolorburn
declare const NSCompositeColorBurn: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositesoftlight
declare const NSCompositeSoftLight: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositehardlight
declare const NSCompositeHardLight: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositedifference
declare const NSCompositeDifference: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositeexclusion
declare const NSCompositeExclusion: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositehue
declare const NSCompositeHue: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositesaturation
declare const NSCompositeSaturation: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositecolor
declare const NSCompositeColor: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositeluminosity
declare const NSCompositeLuminosity: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nscompositehighlight
declare const NSCompositeHighlight: NSCompositingOperation;
// doc://com.apple.documentation/documentation/appkit/nsleftmousedown
declare const NSLeftMouseDown: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nsregularcontrolsize
declare const NSRegularControlSize: NSControlSize;
// doc://com.apple.documentation/documentation/appkit/nssmallcontrolsize
declare const NSSmallControlSize: NSControlSize;
// doc://com.apple.documentation/documentation/appkit/nsminicontrolsize
declare const NSMiniControlSize: NSControlSize;
// doc://com.apple.documentation/documentation/appkit/nsbackgroundstyledark
declare const NSBackgroundStyleDark: NSBackgroundStyle;
// doc://com.apple.documentation/documentation/appkit/nsbackgroundstylelight
declare const NSBackgroundStyleLight: NSBackgroundStyle;
// doc://com.apple.documentation/documentation/appkit/nsoffstate
declare const NSOffState: NSControlStateValue;
// doc://com.apple.documentation/documentation/appkit/nsonstate
declare const NSOnState: NSControlStateValue;
// doc://com.apple.documentation/documentation/appkit/nsmixedstate
declare const NSMixedState: NSControlStateValue;
// doc://com.apple.documentation/documentation/appkit/nscontrolstatevaluemixed
declare const NSControlStateValueMixed: NSControlStateValue;
// doc://com.apple.documentation/documentation/appkit/nscontrolstatevalueoff
declare const NSControlStateValueOff: NSControlStateValue;
// doc://com.apple.documentation/documentation/appkit/nscontrolstatevalueon
declare const NSControlStateValueOn: NSControlStateValue;
// doc://com.apple.documentation/documentation/appkit/nsdraggingimagecomponentlabelkey
declare const NSDraggingImageComponentLabelKey: NSDraggingImageComponentKey;
// doc://com.apple.documentation/documentation/appkit/nsdraggingimagecomponenticonkey
declare const NSDraggingImageComponentIconKey: NSDraggingImageComponentKey;
// doc://com.apple.documentation/documentation/appkit/nsgridviewsizeforcontent
declare const NSGridViewSizeForContent: CGFloat;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsgridcellplacement
  type NSGridCellPlacement = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsgridrowalignment
  type NSGridRowAlignment = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nslayoutprioritydefaultlow
declare const NSLayoutPriorityDefaultLow: NSLayoutPriority;
// doc://com.apple.documentation/documentation/appkit/nslayoutprioritydragthatcannotresizewindow
declare const NSLayoutPriorityDragThatCannotResizeWindow: NSLayoutPriority;
// doc://com.apple.documentation/documentation/appkit/nsstackviewvisibilityprioritymusthold
declare const NSStackViewVisibilityPriorityMustHold: NSStackViewVisibilityPriority;
// doc://com.apple.documentation/documentation/appkit/nsstackviewvisibilityprioritydetachonlyifnecessary
declare const NSStackViewVisibilityPriorityDetachOnlyIfNecessary: NSStackViewVisibilityPriority;
// doc://com.apple.documentation/documentation/appkit/nsstackviewvisibilityprioritynotvisible
declare const NSStackViewVisibilityPriorityNotVisible: NSStackViewVisibilityPriority;
// doc://com.apple.documentation/documentation/appkit/nslayoutprioritydefaulthigh
declare const NSLayoutPriorityDefaultHigh: NSLayoutPriority;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsscrollarrowposition
  type NSScrollArrowPosition = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsscrollerstyle
  type NSScrollerStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsscrollerknobstyle
  type NSScrollerKnobStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsscrollerpart
  type NSScrollerPart = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsscrollerarrow
  type NSScrollerArrow = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsusablescrollerparts
  type NSUsableScrollerParts = cocoascript.NSUInteger;
}
// doc://com.apple.documentation/documentation/appkit/nspreferredscrollerstyledidchangenotification
declare const NSPreferredScrollerStyleDidChangeNotification: NSNotificationName;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsrulerviewunitname
  type NSRulerViewUnitName = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsrulerorientation
  type NSRulerOrientation = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscollectionviewdiffabledatasourceitemprovider
  type NSCollectionViewDiffableDataSourceItemProvider = any;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscollectionviewdiffabledatasourcesupplementaryviewprovider
  type NSCollectionViewDiffableDataSourceSupplementaryViewProvider = cocoascript.NSIndexPath;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscollectionviewitemhighlightstate
  type NSCollectionViewItemHighlightState = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nscollectionelementkindsectionheader
declare const NSCollectionElementKindSectionHeader: NSCollectionViewSupplementaryElementKind;
// doc://com.apple.documentation/documentation/appkit/nscollectionelementkindsectionfooter
declare const NSCollectionElementKindSectionFooter: NSCollectionViewSupplementaryElementKind;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscollectionviewscrolldirection
  type NSCollectionViewScrollDirection = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscollectionviewtransitionlayoutanimatedkey
  type NSCollectionViewTransitionLayoutAnimatedKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscollectionviewdecorationelementkind
  type NSCollectionViewDecorationElementKind = cocoascript.NSString;
}
// doc://com.apple.documentation/documentation/appkit/nscollectionelementkindinteritemgapindicator
declare const NSCollectionElementKindInterItemGapIndicator: NSCollectionViewSupplementaryElementKind;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscollectionelementcategory
  type NSCollectionElementCategory = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscollectionupdateaction
  type NSCollectionUpdateAction = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstableviewdiffabledatasourcecellprovider
  type NSTableViewDiffableDataSourceCellProvider = cocoascript.id;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstableviewdiffabledatasourcerowprovider
  type NSTableViewDiffableDataSourceRowProvider = cocoascript.id;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstableviewdiffabledatasourcesectionheaderviewprovider
  type NSTableViewDiffableDataSourceSectionHeaderViewProvider = cocoascript.id;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstableviewrowactionstyle
  type NSTableViewRowActionStyle = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsacceleratorbutton
declare const NSAcceleratorButton: NSButtonType;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsbezelstyle
  type NSBezelStyle = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsbuttontype
  type NSButtonType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsgradienttype
  type NSGradientType = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsdatepickerstyle
  type NSDatePickerStyle = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsdatepickermode
  type NSDatePickerMode = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsdatepickerelementflags
  type NSDatePickerElementFlags = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsimagealignment
  type NSImageAlignment = cocoascript.NSUInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsimageframestyle
  type NSImageFrameStyle = cocoascript.NSUInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsrelevancylevelindicatorstyle
declare const NSRelevancyLevelIndicatorStyle: NSLevelIndicatorStyle;
// doc://com.apple.documentation/documentation/appkit/nsratinglevelindicatorstyle
declare const NSRatingLevelIndicatorStyle: NSLevelIndicatorStyle;
// doc://com.apple.documentation/documentation/appkit/nsdiscretecapacitylevelindicatorstyle
declare const NSDiscreteCapacityLevelIndicatorStyle: NSLevelIndicatorStyle;
// doc://com.apple.documentation/documentation/appkit/nscontinuouscapacitylevelindicatorstyle
declare const NSContinuousCapacityLevelIndicatorStyle: NSLevelIndicatorStyle;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspathstyle
  type NSPathStyle = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspopuparrowposition
  type NSPopUpArrowPosition = cocoascript.NSUInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsprogressindicatorstylebar
declare const NSProgressIndicatorBarStyle: NSProgressIndicatorStyle;
// doc://com.apple.documentation/documentation/appkit/nsprogressindicatorstylespinning
declare const NSProgressIndicatorSpinningStyle: NSProgressIndicatorStyle;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsruleeditorpredicatepartkey
  type NSRuleEditorPredicatePartKey = cocoascript.NSString;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstextfinderaction
  type NSTextFinderAction = cocoascript.NSInteger;
}
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstextfindermatchingtype
  type NSTextFinderMatchingType = cocoascript.NSInteger;
}
// doc://com.apple.documentation/documentation/appkit/nssearchfieldclearrecentsmenuitemtag
declare const NSSearchFieldClearRecentsMenuItemTag: NSInteger;
// doc://com.apple.documentation/documentation/appkit/nssearchfieldnorecentsmenuitemtag
declare const NSSearchFieldNoRecentsMenuItemTag: NSInteger;
// doc://com.apple.documentation/documentation/appkit/nssearchfieldrecentsmenuitemtag
declare const NSSearchFieldRecentsMenuItemTag: NSInteger;
// doc://com.apple.documentation/documentation/appkit/nssearchfieldrecentstitlemenuitemtag
declare const NSSearchFieldRecentsTitleMenuItemTag: NSInteger;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nssearchfieldrecentsautosavename
  type NSSearchFieldRecentsAutosaveName = cocoascript.NSString;
}
// doc://com.apple.documentation/documentation/appkit/nsslideraccessorywidthdefault
declare const NSSliderAccessoryWidthDefault: NSSliderAccessoryWidth;
// doc://com.apple.documentation/documentation/appkit/nsslideraccessorywidthwide
declare const NSSliderAccessoryWidthWide: NSSliderAccessoryWidth;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nstokenstyle
  type NSTokenStyle = cocoascript.NSUInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsboxsecondary
declare const NSBoxSecondary: NSBoxType;
// doc://com.apple.documentation/documentation/appkit/nsboxoldstyle
declare const NSBoxOldStyle: NSBoxType;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nspagecontrollerobjectidentifier
  type NSPageControllerObjectIdentifier = cocoascript.NSString;
}
// doc://com.apple.documentation/documentation/appkit/nslayoutprioritydragthatcanresizewindow
declare const NSLayoutPriorityDragThatCanResizeWindow: NSLayoutPriority;
// doc://com.apple.documentation/documentation/appkit/nslayoutprioritywindowsizestayput
declare const NSLayoutPriorityWindowSizeStayPut: NSLayoutPriority;
// doc://com.apple.documentation/documentation/appkit/nslayoutpriorityfittingsizecompression
declare const NSLayoutPriorityFittingSizeCompression: NSLayoutPriority;
// doc://com.apple.documentation/documentation/appkit/nsappearancenameaqua
declare const NSAppearanceNameAqua: NSAppearanceName;
// doc://com.apple.documentation/documentation/appkit/nsappearancenamedarkaqua
declare const NSAppearanceNameDarkAqua: NSAppearanceName;
// doc://com.apple.documentation/documentation/appkit/nsappearancenamevibrantlight
declare const NSAppearanceNameVibrantLight: NSAppearanceName;
// doc://com.apple.documentation/documentation/appkit/nsappearancenamevibrantdark
declare const NSAppearanceNameVibrantDark: NSAppearanceName;
// doc://com.apple.documentation/documentation/appkit/nsappearancenameaccessibilityhighcontrastaqua
declare const NSAppearanceNameAccessibilityHighContrastAqua: NSAppearanceName;
// doc://com.apple.documentation/documentation/appkit/nsappearancenameaccessibilityhighcontrastdarkaqua
declare const NSAppearanceNameAccessibilityHighContrastDarkAqua: NSAppearanceName;
// doc://com.apple.documentation/documentation/appkit/nsappearancenameaccessibilityhighcontrastvibrantlight
declare const NSAppearanceNameAccessibilityHighContrastVibrantLight: NSAppearanceName;
// doc://com.apple.documentation/documentation/appkit/nsappearancenameaccessibilityhighcontrastvibrantdark
declare const NSAppearanceNameAccessibilityHighContrastVibrantDark: NSAppearanceName;
// doc://com.apple.documentation/documentation/appkit/nsappearancenamelightcontent
declare const NSAppearanceNameLightContent: NSAppearanceName;
// doc://com.apple.documentation/documentation/appkit/nsfullsizecontentviewwindowmask
declare const NSFullSizeContentViewWindowMask: NSWindowStyleMask;
// doc://com.apple.documentation/documentation/appkit/nsdockwindowlevel
declare const NSDockWindowLevel: NSWindowLevel;
// doc://com.apple.documentation/documentation/appkit/nsfloatingwindowlevel
declare const NSFloatingWindowLevel: NSWindowLevel;
// doc://com.apple.documentation/documentation/appkit/nsmainmenuwindowlevel
declare const NSMainMenuWindowLevel: NSWindowLevel;
// doc://com.apple.documentation/documentation/appkit/nsmodalpanelwindowlevel
declare const NSModalPanelWindowLevel: NSWindowLevel;
// doc://com.apple.documentation/documentation/appkit/nsnormalwindowlevel
declare const NSNormalWindowLevel: NSWindowLevel;
// doc://com.apple.documentation/documentation/appkit/nspopupmenuwindowlevel
declare const NSPopUpMenuWindowLevel: NSWindowLevel;
// doc://com.apple.documentation/documentation/appkit/nsscreensaverwindowlevel
declare const NSScreenSaverWindowLevel: NSWindowLevel;
// doc://com.apple.documentation/documentation/appkit/nsstatuswindowlevel
declare const NSStatusWindowLevel: NSWindowLevel;
// doc://com.apple.documentation/documentation/appkit/nssubmenuwindowlevel
declare const NSSubmenuWindowLevel: NSWindowLevel;
// doc://com.apple.documentation/documentation/appkit/nstornoffmenuwindowlevel
declare const NSTornOffMenuWindowLevel: NSWindowLevel;
// doc://com.apple.documentation/documentation/appkit/nstitledwindowmask
declare const NSTitledWindowMask: NSWindowStyleMask;
// doc://com.apple.documentation/documentation/appkit/nsborderlesswindowmask
declare const NSBorderlessWindowMask: NSWindowStyleMask;
// doc://com.apple.documentation/documentation/appkit/nsclosablewindowmask
declare const NSClosableWindowMask: NSWindowStyleMask;
// doc://com.apple.documentation/documentation/appkit/nsminiaturizablewindowmask
declare const NSMiniaturizableWindowMask: NSWindowStyleMask;
// doc://com.apple.documentation/documentation/appkit/nsresizablewindowmask
declare const NSResizableWindowMask: NSWindowStyleMask;
// doc://com.apple.documentation/documentation/appkit/nstexturedbackgroundwindowmask
declare const NSTexturedBackgroundWindowMask: NSWindowStyleMask;
// doc://com.apple.documentation/documentation/appkit/nsunifiedtitleandtoolbarwindowmask
declare const NSUnifiedTitleAndToolbarWindowMask: NSWindowStyleMask;
// doc://com.apple.documentation/documentation/appkit/nsfullscreenwindowmask
declare const NSFullScreenWindowMask: NSWindowStyleMask;
// doc://com.apple.documentation/documentation/appkit/nswindowfullscreenbutton
declare const NSWindowFullScreenButton: NSWindowButton;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nswindowbackinglocation
  type NSWindowBackingLocation = cocoascript.NSUInteger;
}
// doc://com.apple.documentation/documentation/appkit/nscriticalalertstyle
declare const NSCriticalAlertStyle: NSAlertStyle;
// doc://com.apple.documentation/documentation/appkit/nsalertfirstbuttonreturn
declare const NSAlertFirstButtonReturn: NSModalResponse;
// doc://com.apple.documentation/documentation/appkit/nsalertsecondbuttonreturn
declare const NSAlertSecondButtonReturn: NSModalResponse;
// doc://com.apple.documentation/documentation/appkit/nswarningalertstyle
declare const NSWarningAlertStyle: NSAlertStyle;
// doc://com.apple.documentation/documentation/appkit/nsinformationalalertstyle
declare const NSInformationalAlertStyle: NSAlertStyle;
// doc://com.apple.documentation/documentation/appkit/nsmodalresponseok
declare const NSModalResponseOK: NSModalResponse;
// doc://com.apple.documentation/documentation/appkit/nsmodalresponsecancel
declare const NSModalResponseCancel: NSModalResponse;
// doc://com.apple.documentation/documentation/appkit/nsmodalresponsecontinue
declare const NSModalResponseContinue: NSModalResponse;
// doc://com.apple.documentation/documentation/appkit/nsalertthirdbuttonreturn
declare const NSAlertThirdButtonReturn: NSModalResponse;
// doc://com.apple.documentation/documentation/appkit/nsdocmodalwindowmask
declare const NSDocModalWindowMask: NSWindowStyleMask;
// doc://com.apple.documentation/documentation/appkit/nsutilitywindowmask
declare const NSUtilityWindowMask: NSWindowStyleMask;
// doc://com.apple.documentation/documentation/appkit/nsnonactivatingpanelmask
declare const NSNonactivatingPanelMask: NSWindowStyleMask;
// doc://com.apple.documentation/documentation/appkit/nshudwindowmask
declare const NSHUDWindowMask: NSWindowStyleMask;
// doc://com.apple.documentation/documentation/appkit/nspopoverclosereasonstandard
declare const NSPopoverCloseReasonStandard: NSPopoverCloseReasonValue;
// doc://com.apple.documentation/documentation/appkit/nspopoverclosereasondetachtowindow
declare const NSPopoverCloseReasonDetachToWindow: NSPopoverCloseReasonValue;
// doc://com.apple.documentation/documentation/appkit/nsprintpanelaccessorysummaryitemnamekey
declare const NSPrintPanelAccessorySummaryItemNameKey: NSPrintPanelAccessorySummaryKey;
// doc://com.apple.documentation/documentation/appkit/nsprintpanelaccessorysummaryitemdescriptionkey
declare const NSPrintPanelAccessorySummaryItemDescriptionKey: NSPrintPanelAccessorySummaryKey;
// doc://com.apple.documentation/documentation/appkit/nsnomodecolorpanel
declare const NSNoModeColorPanel: NSColorPanelMode;
// doc://com.apple.documentation/documentation/appkit/nsgraymodecolorpanel
declare const NSGrayModeColorPanel: NSColorPanelMode;
// doc://com.apple.documentation/documentation/appkit/nsrgbmodecolorpanel
declare const NSRGBModeColorPanel: NSColorPanelMode;
// doc://com.apple.documentation/documentation/appkit/nscmykmodecolorpanel
declare const NSCMYKModeColorPanel: NSColorPanelMode;
// doc://com.apple.documentation/documentation/appkit/nshsbmodecolorpanel
declare const NSHSBModeColorPanel: NSColorPanelMode;
// doc://com.apple.documentation/documentation/appkit/nscustompalettemodecolorpanel
declare const NSCustomPaletteModeColorPanel: NSColorPanelMode;
// doc://com.apple.documentation/documentation/appkit/nscolorlistmodecolorpanel
declare const NSColorListModeColorPanel: NSColorPanelMode;
// doc://com.apple.documentation/documentation/appkit/nswheelmodecolorpanel
declare const NSWheelModeColorPanel: NSColorPanelMode;
// doc://com.apple.documentation/documentation/appkit/nscrayonmodecolorpanel
declare const NSCrayonModeColorPanel: NSColorPanelMode;
// doc://com.apple.documentation/documentation/appkit/nssoundpboardtype
declare const NSSoundPboardType: NSPasteboardType;
// doc://com.apple.documentation/documentation/appkit/nsvoiceidentifier
declare const NSVoiceIdentifier: NSVoiceAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsvoicename
declare const NSVoiceName: NSVoiceAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsvoiceage
declare const NSVoiceAge: NSVoiceAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsvoicedemotext
declare const NSVoiceDemoText: NSVoiceAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsvoicelocaleidentifier
declare const NSVoiceLocaleIdentifier: NSVoiceAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsvoicesupportedcharacters
declare const NSVoiceSupportedCharacters: NSVoiceAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsvoiceindividuallyspokencharacters
declare const NSVoiceIndividuallySpokenCharacters: NSVoiceAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechstatusproperty
declare const NSSpeechStatusProperty: NSSpeechPropertyKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechstatusoutputbusy
declare const NSSpeechStatusOutputBusy: NSSpeechStatusKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechstatusoutputpaused
declare const NSSpeechStatusOutputPaused: NSSpeechStatusKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechdictionaryentryspelling
declare const NSSpeechDictionaryEntrySpelling: NSSpeechDictionaryKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechdictionaryentryphonemes
declare const NSSpeechDictionaryEntryPhonemes: NSSpeechDictionaryKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechdictionaryabbreviations
declare const NSSpeechDictionaryAbbreviations: NSSpeechDictionaryKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechdictionarylocaleidentifier
declare const NSSpeechDictionaryLocaleIdentifier: NSSpeechDictionaryKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechdictionarymodificationdate
declare const NSSpeechDictionaryModificationDate: NSSpeechDictionaryKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechdictionarypronunciations
declare const NSSpeechDictionaryPronunciations: NSSpeechDictionaryKey;
// doc://com.apple.documentation/documentation/appkit/nsspeecherrorsproperty
declare const NSSpeechErrorsProperty: NSSpeechPropertyKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechinputmodeproperty
declare const NSSpeechInputModeProperty: NSSpeechPropertyKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechcharactermodeproperty
declare const NSSpeechCharacterModeProperty: NSSpeechPropertyKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechnumbermodeproperty
declare const NSSpeechNumberModeProperty: NSSpeechPropertyKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechrateproperty
declare const NSSpeechRateProperty: NSSpeechPropertyKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechpitchbaseproperty
declare const NSSpeechPitchBaseProperty: NSSpeechPropertyKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechpitchmodproperty
declare const NSSpeechPitchModProperty: NSSpeechPropertyKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechvolumeproperty
declare const NSSpeechVolumeProperty: NSSpeechPropertyKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizerinfoproperty
declare const NSSpeechSynthesizerInfoProperty: NSSpeechPropertyKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechrecentsyncproperty
declare const NSSpeechRecentSyncProperty: NSSpeechPropertyKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechphonemesymbolsproperty
declare const NSSpeechPhonemeSymbolsProperty: NSSpeechPropertyKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechcurrentvoiceproperty
declare const NSSpeechCurrentVoiceProperty: NSSpeechPropertyKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechcommanddelimiterproperty
declare const NSSpeechCommandDelimiterProperty: NSSpeechPropertyKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechresetproperty
declare const NSSpeechResetProperty: NSSpeechPropertyKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechoutputtofileurlproperty
declare const NSSpeechOutputToFileURLProperty: NSSpeechPropertyKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechcommandprefix
declare const NSSpeechCommandPrefix: NSSpeechCommandDelimiterKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechcommandsuffix
declare const NSSpeechCommandSuffix: NSSpeechCommandDelimiterKey;
// doc://com.apple.documentation/documentation/appkit/nsspeecherrorcount
declare const NSSpeechErrorCount: NSSpeechErrorKey;
// doc://com.apple.documentation/documentation/appkit/nsspeecherrornewestcharacteroffset
declare const NSSpeechErrorNewestCharacterOffset: NSSpeechErrorKey;
// doc://com.apple.documentation/documentation/appkit/nsspeecherrornewestcode
declare const NSSpeechErrorNewestCode: NSSpeechErrorKey;
// doc://com.apple.documentation/documentation/appkit/nsspeecherroroldestcharacteroffset
declare const NSSpeechErrorOldestCharacterOffset: NSSpeechErrorKey;
// doc://com.apple.documentation/documentation/appkit/nsspeecherroroldestcode
declare const NSSpeechErrorOldestCode: NSSpeechErrorKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechmodeliteral
declare const NSSpeechModeLiteral: NSSpeechMode;
// doc://com.apple.documentation/documentation/appkit/nsspeechmodenormal
declare const NSSpeechModeNormal: NSSpeechMode;
// doc://com.apple.documentation/documentation/appkit/nsspeechmodephoneme
declare const NSSpeechModePhoneme: NSSpeechMode;
// doc://com.apple.documentation/documentation/appkit/nsspeechmodetext
declare const NSSpeechModeText: NSSpeechMode;
// doc://com.apple.documentation/documentation/appkit/nsspeechphonemeinfoexample
declare const NSSpeechPhonemeInfoExample: NSSpeechPhonemeInfoKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechphonemeinfohiliteend
declare const NSSpeechPhonemeInfoHiliteEnd: NSSpeechPhonemeInfoKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechphonemeinfohilitestart
declare const NSSpeechPhonemeInfoHiliteStart: NSSpeechPhonemeInfoKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechphonemeinfoopcode
declare const NSSpeechPhonemeInfoOpcode: NSSpeechPhonemeInfoKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechphonemeinfosymbol
declare const NSSpeechPhonemeInfoSymbol: NSSpeechPhonemeInfoKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechstatusnumberofcharactersleft
declare const NSSpeechStatusNumberOfCharactersLeft: NSSpeechStatusKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechstatusphonemecode
declare const NSSpeechStatusPhonemeCode: NSSpeechStatusKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizerinfoidentifier
declare const NSSpeechSynthesizerInfoIdentifier: NSSpeechSynthesizerInfoKey;
// doc://com.apple.documentation/documentation/appkit/nsspeechsynthesizerinfoversion
declare const NSSpeechSynthesizerInfoVersion: NSSpeechSynthesizerInfoKey;
// doc://com.apple.documentation/documentation/appkit/nsvoicegenderneuter
declare const NSVoiceGenderNeuter: NSVoiceGenderName;
// doc://com.apple.documentation/documentation/appkit/nsvoicegenderfemale
declare const NSVoiceGenderFemale: NSVoiceGenderName;
// doc://com.apple.documentation/documentation/appkit/nsvoicegendermale
declare const NSVoiceGenderMale: NSVoiceGenderName;
// doc://com.apple.documentation/documentation/appkit/nsvoicelanguage
declare const NSVoiceLanguage: NSVoiceAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsawteventtype
declare const NSAWTEventType: NSEventSubtype;
// doc://com.apple.documentation/documentation/appkit/nsapplicationactivatedeventtype
declare const NSApplicationActivatedEventType: NSEventSubtype;
// doc://com.apple.documentation/documentation/appkit/nsapplicationdeactivatedeventtype
declare const NSApplicationDeactivatedEventType: NSEventSubtype;
// doc://com.apple.documentation/documentation/appkit/nsmouseeventsubtype
declare const NSMouseEventSubtype: NSEventSubtype;
// doc://com.apple.documentation/documentation/appkit/nspoweroffeventtype
declare const NSPowerOffEventType: NSEventSubtype;
// doc://com.apple.documentation/documentation/appkit/nsscreenchangedeventtype
declare const NSScreenChangedEventType: NSEventSubtype;
// doc://com.apple.documentation/documentation/appkit/nstoucheventsubtype
declare const NSTouchEventSubtype: NSEventSubtype;
// doc://com.apple.documentation/documentation/appkit/nswindowexposedeventtype
declare const NSWindowExposedEventType: NSEventSubtype;
// doc://com.apple.documentation/documentation/appkit/nswindowmovedeventtype
declare const NSWindowMovedEventType: NSEventSubtype;
// doc://com.apple.documentation/documentation/appkit/nsleftmouseup
declare const NSLeftMouseUp: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nsrightmousedown
declare const NSRightMouseDown: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nsrightmouseup
declare const NSRightMouseUp: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nsothermousedown
declare const NSOtherMouseDown: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nsothermouseup
declare const NSOtherMouseUp: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nsmousemoved
declare const NSMouseMoved: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nsappkitdefined
declare const NSAppKitDefined: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nssystemdefined
declare const NSSystemDefined: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nsapplicationdefined
declare const NSApplicationDefined: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nsperiodic
declare const NSPeriodic: NSEventType;
// doc://com.apple.documentation/documentation/appkit/nscursorpointingdevice
declare const NSCursorPointingDevice: NSPointingDeviceType;
// doc://com.apple.documentation/documentation/appkit/nseraserpointingdevice
declare const NSEraserPointingDevice: NSPointingDeviceType;
// doc://com.apple.documentation/documentation/appkit/nspenpointingdevice
declare const NSPenPointingDevice: NSPointingDeviceType;
// doc://com.apple.documentation/documentation/appkit/nsunknownpointingdevice
declare const NSUnknownPointingDevice: NSPointingDeviceType;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysortbuttonrole
declare const NSAccessibilitySortButtonRole: NSAccessibilityRole;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityannouncementrequestednotification
declare const NSAccessibilityAnnouncementRequestedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityapplicationactivatednotification
declare const NSAccessibilityApplicationActivatedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityapplicationdeactivatednotification
declare const NSAccessibilityApplicationDeactivatedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityapplicationhiddennotification
declare const NSAccessibilityApplicationHiddenNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityapplicationshownnotification
declare const NSAccessibilityApplicationShownNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycreatednotification
declare const NSAccessibilityCreatedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydrawercreatednotification
declare const NSAccessibilityDrawerCreatedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityfocuseduielementchangednotification
declare const NSAccessibilityFocusedUIElementChangedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityfocusedwindowchangednotification
declare const NSAccessibilityFocusedWindowChangedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityhelptagcreatednotification
declare const NSAccessibilityHelpTagCreatedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylayoutchangednotification
declare const NSAccessibilityLayoutChangedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymainwindowchangednotification
declare const NSAccessibilityMainWindowChangedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymovednotification
declare const NSAccessibilityMovedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityresizednotification
declare const NSAccessibilityResizedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityrowcollapsednotification
declare const NSAccessibilityRowCollapsedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityrowcountchangednotification
declare const NSAccessibilityRowCountChangedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityrowexpandednotification
declare const NSAccessibilityRowExpandedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityselectedcellschangednotification
declare const NSAccessibilitySelectedCellsChangedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityselectedchildrenchangednotification
declare const NSAccessibilitySelectedChildrenChangedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityselectedchildrenmovednotification
declare const NSAccessibilitySelectedChildrenMovedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityselectedcolumnschangednotification
declare const NSAccessibilitySelectedColumnsChangedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityselectedrowschangednotification
declare const NSAccessibilitySelectedRowsChangedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityselectedtextchangednotification
declare const NSAccessibilitySelectedTextChangedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysheetcreatednotification
declare const NSAccessibilitySheetCreatedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytitlechangednotification
declare const NSAccessibilityTitleChangedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityuielementdestroyednotification
declare const NSAccessibilityUIElementDestroyedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityunitschangednotification
declare const NSAccessibilityUnitsChangedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityvaluechangednotification
declare const NSAccessibilityValueChangedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitywindowcreatednotification
declare const NSAccessibilityWindowCreatedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitywindowdeminiaturizednotification
declare const NSAccessibilityWindowDeminiaturizedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitywindowminiaturizednotification
declare const NSAccessibilityWindowMiniaturizedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitywindowmovednotification
declare const NSAccessibilityWindowMovedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitywindowresizednotification
declare const NSAccessibilityWindowResizedNotification: NSAccessibilityNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycancelaction
declare const NSAccessibilityCancelAction: NSAccessibilityActionName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityconfirmaction
declare const NSAccessibilityConfirmAction: NSAccessibilityActionName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydecrementaction
declare const NSAccessibilityDecrementAction: NSAccessibilityActionName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitydeleteaction
declare const NSAccessibilityDeleteAction: NSAccessibilityActionName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityincrementaction
declare const NSAccessibilityIncrementAction: NSAccessibilityActionName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitypickaction
declare const NSAccessibilityPickAction: NSAccessibilityActionName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitypressaction
declare const NSAccessibilityPressAction: NSAccessibilityActionName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityraiseaction
declare const NSAccessibilityRaiseAction: NSAccessibilityActionName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityshowalternateuiaction
declare const NSAccessibilityShowAlternateUIAction: NSAccessibilityActionName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityshowdefaultuiaction
declare const NSAccessibilityShowDefaultUIAction: NSAccessibilityActionName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityshowmenuaction
declare const NSAccessibilityShowMenuAction: NSAccessibilityActionName;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymarkedmisspelledtextattribute
declare const NSAccessibilityMarkedMisspelledTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityattachmenttextattribute
declare const NSAccessibilityAttachmentTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityautocorrectedtextattribute
declare const NSAccessibilityAutocorrectedTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitybackgroundcolortextattribute
declare const NSAccessibilityBackgroundColorTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityforegroundcolortextattribute
declare const NSAccessibilityForegroundColorTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityunderlinecolortextattribute
declare const NSAccessibilityUnderlineColorTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitystrikethroughcolortextattribute
declare const NSAccessibilityStrikethroughColorTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityunderlinetextattribute
declare const NSAccessibilityUnderlineTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitysuperscripttextattribute
declare const NSAccessibilitySuperscriptTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitystrikethroughtextattribute
declare const NSAccessibilityStrikethroughTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityshadowtextattribute
declare const NSAccessibilityShadowTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylinktextattribute
declare const NSAccessibilityLinkTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitymisspelledtextattribute
declare const NSAccessibilityMisspelledTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityfonttextattribute
declare const NSAccessibilityFontTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsalphafirstbitmapformat
declare const NSAlphaFirstBitmapFormat: NSBitmapFormat;
// doc://com.apple.documentation/documentation/appkit/nsfloatingpointsamplesbitmapformat
declare const NSFloatingPointSamplesBitmapFormat: NSBitmapFormat;
// doc://com.apple.documentation/documentation/appkit/ns16bitlittleendianbitmapformat
declare const NS16BitLittleEndianBitmapFormat: NSBitmapFormat;
// doc://com.apple.documentation/documentation/appkit/ns32bitlittleendianbitmapformat
declare const NS32BitLittleEndianBitmapFormat: NSBitmapFormat;
// doc://com.apple.documentation/documentation/appkit/ns16bitbigendianbitmapformat
declare const NS16BitBigEndianBitmapFormat: NSBitmapFormat;
// doc://com.apple.documentation/documentation/appkit/ns32bitbigendianbitmapformat
declare const NS32BitBigEndianBitmapFormat: NSBitmapFormat;
// doc://com.apple.documentation/documentation/appkit/nsbmpfiletype
declare const NSBMPFileType: NSBitmapImageFileType;
// doc://com.apple.documentation/documentation/appkit/nsgiffiletype
declare const NSGIFFileType: NSBitmapImageFileType;
// doc://com.apple.documentation/documentation/appkit/nsjpegfiletype
declare const NSJPEGFileType: NSBitmapImageFileType;
// doc://com.apple.documentation/documentation/appkit/nspngfiletype
declare const NSPNGFileType: NSBitmapImageFileType;
// doc://com.apple.documentation/documentation/appkit/nstifffiletype
declare const NSTIFFFileType: NSBitmapImageFileType;
// doc://com.apple.documentation/documentation/appkit/nsjpeg2000filetype
declare const NSJPEG2000FileType: NSBitmapImageFileType;
// doc://com.apple.documentation/documentation/appkit/nsnonzerowindingrule
declare const NSNonZeroWindingRule: NSWindingRule;
// doc://com.apple.documentation/documentation/appkit/nsevenoddwindingrule
declare const NSEvenOddWindingRule: NSWindingRule;
// doc://com.apple.documentation/documentation/appkit/nsmiterlinejoinstyle
declare const NSMiterLineJoinStyle: NSLineJoinStyle;
// doc://com.apple.documentation/documentation/appkit/nscurvetobezierpathelement
declare const NSCurveToBezierPathElement: NSBezierPathElement;
// doc://com.apple.documentation/documentation/appkit/nsmovetobezierpathelement
declare const NSMoveToBezierPathElement: NSBezierPathElement;
// doc://com.apple.documentation/documentation/appkit/nslinetobezierpathelement
declare const NSLineToBezierPathElement: NSBezierPathElement;
// doc://com.apple.documentation/documentation/appkit/nsclosepathbezierpathelement
declare const NSClosePathBezierPathElement: NSBezierPathElement;
// doc://com.apple.documentation/documentation/appkit/nsroundlinejoinstyle
declare const NSRoundLineJoinStyle: NSLineJoinStyle;
// doc://com.apple.documentation/documentation/appkit/nsbevellinejoinstyle
declare const NSBevelLineJoinStyle: NSLineJoinStyle;
// doc://com.apple.documentation/documentation/appkit/nsbuttlinecapstyle
declare const NSButtLineCapStyle: NSLineCapStyle;
// doc://com.apple.documentation/documentation/appkit/nsroundlinecapstyle
declare const NSRoundLineCapStyle: NSLineCapStyle;
// doc://com.apple.documentation/documentation/appkit/nssquarelinecapstyle
declare const NSSquareLineCapStyle: NSLineCapStyle;
// doc://com.apple.documentation/documentation/appkit/nsopenglcpswapinterval
declare const NSOpenGLCPSwapInterval: NSOpenGLContextParameter;
// doc://com.apple.documentation/documentation/appkit/nsopenglcpsurfaceorder
declare const NSOpenGLCPSurfaceOrder: NSOpenGLContextParameter;
// doc://com.apple.documentation/documentation/appkit/nsopenglcpsurfaceopacity
declare const NSOpenGLCPSurfaceOpacity: NSOpenGLContextParameter;
// doc://com.apple.documentation/documentation/appkit/nsopenglcpsurfacebackingsize
declare const NSOpenGLCPSurfaceBackingSize: NSOpenGLContextParameter;
// doc://com.apple.documentation/documentation/appkit/nsopenglcpreclaimresources
declare const NSOpenGLCPReclaimResources: NSOpenGLContextParameter;
// doc://com.apple.documentation/documentation/appkit/nsopenglcpcurrentrendererid
declare const NSOpenGLCPCurrentRendererID: NSOpenGLContextParameter;
// doc://com.apple.documentation/documentation/appkit/nsopenglcpgpuvertexprocessing
declare const NSOpenGLCPGPUVertexProcessing: NSOpenGLContextParameter;
// doc://com.apple.documentation/documentation/appkit/nsopenglcpgpufragmentprocessing
declare const NSOpenGLCPGPUFragmentProcessing: NSOpenGLContextParameter;
// doc://com.apple.documentation/documentation/appkit/nsopenglcphasdrawable
declare const NSOpenGLCPHasDrawable: NSOpenGLContextParameter;
// doc://com.apple.documentation/documentation/appkit/nsopenglcpmpswapsinflight
declare const NSOpenGLCPMPSwapsInFlight: NSOpenGLContextParameter;
// doc://com.apple.documentation/documentation/appkit/nsopenglcpswaprectangle
declare const NSOpenGLCPSwapRectangle: NSOpenGLContextParameter;
// doc://com.apple.documentation/documentation/appkit/nsopenglcpswaprectangleenable
declare const NSOpenGLCPSwapRectangleEnable: NSOpenGLContextParameter;
// doc://com.apple.documentation/documentation/appkit/nsopenglcprasterizationenable
declare const NSOpenGLCPRasterizationEnable: NSOpenGLContextParameter;
// doc://com.apple.documentation/documentation/appkit/nsopenglcpstatevalidation
declare const NSOpenGLCPStateValidation: NSOpenGLContextParameter;
// doc://com.apple.documentation/documentation/appkit/nsopenglcpsurfacesurfacevolatile
declare const NSOpenGLCPSurfaceSurfaceVolatile: NSOpenGLContextParameter;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nscolorname
  type NSColorName = cocoascript.NSString;
}
// doc://com.apple.documentation/documentation/appkit/nsunknowncolorspacemodel
declare const NSUnknownColorSpaceModel: NSColorSpaceModel;
// doc://com.apple.documentation/documentation/appkit/nsgraycolorspacemodel
declare const NSGrayColorSpaceModel: NSColorSpaceModel;
// doc://com.apple.documentation/documentation/appkit/nsrgbcolorspacemodel
declare const NSRGBColorSpaceModel: NSColorSpaceModel;
// doc://com.apple.documentation/documentation/appkit/nscmykcolorspacemodel
declare const NSCMYKColorSpaceModel: NSColorSpaceModel;
// doc://com.apple.documentation/documentation/appkit/nslabcolorspacemodel
declare const NSLABColorSpaceModel: NSColorSpaceModel;
// doc://com.apple.documentation/documentation/appkit/nsdevicencolorspacemodel
declare const NSDeviceNColorSpaceModel: NSColorSpaceModel;
// doc://com.apple.documentation/documentation/appkit/nsindexedcolorspacemodel
declare const NSIndexedColorSpaceModel: NSColorSpaceModel;
// doc://com.apple.documentation/documentation/appkit/nspatterncolorspacemodel
declare const NSPatternColorSpaceModel: NSColorSpaceModel;
// doc://com.apple.documentation/documentation/appkit/nsprintphotojobstylehint
declare const NSPrintPhotoJobStyleHint: NSPrintPanelJobStyleHint;
// doc://com.apple.documentation/documentation/appkit/nsprintallpresetsjobstylehint
declare const NSPrintAllPresetsJobStyleHint: NSPrintPanelJobStyleHint;
// doc://com.apple.documentation/documentation/appkit/nsprintnopresetsjobstylehint
declare const NSPrintNoPresetsJobStyleHint: NSPrintPanelJobStyleHint;
// doc://com.apple.documentation/documentation/appkit/nsautopagination
declare const NSAutoPagination: NSPrintingPaginationMode;
// doc://com.apple.documentation/documentation/appkit/nsfitpagination
declare const NSFitPagination: NSPrintingPaginationMode;
// doc://com.apple.documentation/documentation/appkit/nsclippagination
declare const NSClipPagination: NSPrintingPaginationMode;
// doc://com.apple.documentation/documentation/appkit/nsprintpapername
declare const NSPrintPaperName: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintpapersize
declare const NSPrintPaperSize: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintorientation
declare const NSPrintOrientation: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintscalingfactor
declare const NSPrintScalingFactor: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintleftmargin
declare const NSPrintLeftMargin: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintrightmargin
declare const NSPrintRightMargin: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprinttopmargin
declare const NSPrintTopMargin: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintbottommargin
declare const NSPrintBottomMargin: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprinthorizontallycentered
declare const NSPrintHorizontallyCentered: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintverticallycentered
declare const NSPrintVerticallyCentered: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprinthorizontalpagination
declare const NSPrintHorizontalPagination: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintverticalpagination
declare const NSPrintVerticalPagination: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintallpages
declare const NSPrintAllPages: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintcopies
declare const NSPrintCopies: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintdetailederrorreporting
declare const NSPrintDetailedErrorReporting: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintfaxnumber
declare const NSPrintFaxNumber: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintfirstpage
declare const NSPrintFirstPage: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintheaderandfooter
declare const NSPrintHeaderAndFooter: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintjobdisposition
declare const NSPrintJobDisposition: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintjobsavingfilenameextensionhidden
declare const NSPrintJobSavingFileNameExtensionHidden: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintlastpage
declare const NSPrintLastPage: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintmustcollate
declare const NSPrintMustCollate: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintpagesacross
declare const NSPrintPagesAcross: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintpagesdown
declare const NSPrintPagesDown: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintprinter
declare const NSPrintPrinter: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintprintername
declare const NSPrintPrinterName: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintreversepageorder
declare const NSPrintReversePageOrder: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprintselectiononly
declare const NSPrintSelectionOnly: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nsprinttime
declare const NSPrintTime: NSPrintInfoAttributeKey;
// doc://com.apple.documentation/documentation/appkit/nslefttextalignment
declare const NSLeftTextAlignment: NSTextAlignment;
// doc://com.apple.documentation/documentation/appkit/nsrighttextalignment
declare const NSRightTextAlignment: NSTextAlignment;
// doc://com.apple.documentation/documentation/appkit/nscentertextalignment
declare const NSCenterTextAlignment: NSTextAlignment;
// doc://com.apple.documentation/documentation/appkit/nsjustifiedtextalignment
declare const NSJustifiedTextAlignment: NSTextAlignment;
// doc://com.apple.documentation/documentation/appkit/nsnaturaltextalignment
declare const NSNaturalTextAlignment: NSTextAlignment;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsglyphinscription
  type NSGlyphInscription = cocoascript.NSUInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitytextalignmentattribute
declare const NSAccessibilityTextAlignmentAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilityannotationtextattribute
declare const NSAccessibilityAnnotationTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitycustomtextattribute
declare const NSAccessibilityCustomTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylanguagetextattribute
declare const NSAccessibilityLanguageTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylistitemindextextattribute
declare const NSAccessibilityListItemIndexTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylistitemleveltextattribute
declare const NSAccessibilityListItemLevelTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nsaccessibilitylistitemprefixtextattribute
declare const NSAccessibilityListItemPrefixTextAttribute: NSAttributedStringKey;
// doc://com.apple.documentation/documentation/appkit/nstextlistmarkerbox
declare const NSTextListMarkerBox: NSTextListMarkerFormat;
// doc://com.apple.documentation/documentation/appkit/nstextlistmarkercheck
declare const NSTextListMarkerCheck: NSTextListMarkerFormat;
// doc://com.apple.documentation/documentation/appkit/nstextlistmarkercircle
declare const NSTextListMarkerCircle: NSTextListMarkerFormat;
// doc://com.apple.documentation/documentation/appkit/nstextlistmarkerdecimal
declare const NSTextListMarkerDecimal: NSTextListMarkerFormat;
// doc://com.apple.documentation/documentation/appkit/nstextlistmarkerdiamond
declare const NSTextListMarkerDiamond: NSTextListMarkerFormat;
// doc://com.apple.documentation/documentation/appkit/nstextlistmarkerdisc
declare const NSTextListMarkerDisc: NSTextListMarkerFormat;
// doc://com.apple.documentation/documentation/appkit/nstextlistmarkerhyphen
declare const NSTextListMarkerHyphen: NSTextListMarkerFormat;
// doc://com.apple.documentation/documentation/appkit/nstextlistmarkerlowercasealpha
declare const NSTextListMarkerLowercaseAlpha: NSTextListMarkerFormat;
// doc://com.apple.documentation/documentation/appkit/nstextlistmarkerlowercasehexadecimal
declare const NSTextListMarkerLowercaseHexadecimal: NSTextListMarkerFormat;
// doc://com.apple.documentation/documentation/appkit/nstextlistmarkerlowercaselatin
declare const NSTextListMarkerLowercaseLatin: NSTextListMarkerFormat;
// doc://com.apple.documentation/documentation/appkit/nstextlistmarkerlowercaseroman
declare const NSTextListMarkerLowercaseRoman: NSTextListMarkerFormat;
// doc://com.apple.documentation/documentation/appkit/nstextlistmarkeroctal
declare const NSTextListMarkerOctal: NSTextListMarkerFormat;
// doc://com.apple.documentation/documentation/appkit/nstextlistmarkersquare
declare const NSTextListMarkerSquare: NSTextListMarkerFormat;
// doc://com.apple.documentation/documentation/appkit/nstextlistmarkeruppercasealpha
declare const NSTextListMarkerUppercaseAlpha: NSTextListMarkerFormat;
// doc://com.apple.documentation/documentation/appkit/nstextlistmarkeruppercasehexadecimal
declare const NSTextListMarkerUppercaseHexadecimal: NSTextListMarkerFormat;
// doc://com.apple.documentation/documentation/appkit/nstextlistmarkeruppercaselatin
declare const NSTextListMarkerUppercaseLatin: NSTextListMarkerFormat;
// doc://com.apple.documentation/documentation/appkit/nstextlistmarkeruppercaseroman
declare const NSTextListMarkerUppercaseRoman: NSTextListMarkerFormat;
// doc://com.apple.documentation/documentation/appkit/nstextcontenttypeonetimecode
declare const NSTextContentTypeOneTimeCode: NSTextContentType;
// doc://com.apple.documentation/documentation/appkit/nstextcontenttypepassword
declare const NSTextContentTypePassword: NSTextContentType;
// doc://com.apple.documentation/documentation/appkit/nstextcontenttypeusername
declare const NSTextContentTypeUsername: NSTextContentType;
declare namespace cocoascript {
  // doc://com.apple.documentation/documentation/appkit/nsfontrenderingmode
  type NSFontRenderingMode = cocoascript.NSUInteger;
}
// doc://com.apple.documentation/documentation/appkit/nsfontweightultralight
declare const NSFontWeightUltraLight: NSFontWeight;
// doc://com.apple.documentation/documentation/appkit/nsfontweightthin
declare const NSFontWeightThin: NSFontWeight;
// doc://com.apple.documentation/documentation/appkit/nsfontweightlight
declare const NSFontWeightLight: NSFontWeight;
// doc://com.apple.documentation/documentation/appkit/nsfontweightregular
declare const NSFontWeightRegular: NSFontWeight;
// doc://com.apple.documentation/documentation/appkit/nsfontweightmedium
declare const NSFontWeightMedium: NSFontWeight;
// doc://com.apple.documentation/documentation/appkit/nsfontweightsemibold
declare const NSFontWeightSemibold: NSFontWeight;
// doc://com.apple.documentation/documentation/appkit/nsfontweightbold
declare const NSFontWeightBold: NSFontWeight;
// doc://com.apple.documentation/documentation/appkit/nsfontweightheavy
declare const NSFontWeightHeavy: NSFontWeight;
// doc://com.apple.documentation/documentation/appkit/nsfontweightblack
declare const NSFontWeightBlack: NSFontWeight;
// doc://com.apple.documentation/documentation/appkit/nsfonttextstylebody
declare const NSFontTextStyleBody: NSFontTextStyle;
// doc://com.apple.documentation/documentation/appkit/nsfonttextstylecallout
declare const NSFontTextStyleCallout: NSFontTextStyle;
// doc://com.apple.documentation/documentation/appkit/nsfonttextstylecaption1
declare const NSFontTextStyleCaption1: NSFontTextStyle;
// doc://com.apple.documentation/documentation/appkit/nsfonttextstylecaption2
declare const NSFontTextStyleCaption2: NSFontTextStyle;
// doc://com.apple.documentation/documentation/appkit/nsfonttextstylefootnote
declare const NSFontTextStyleFootnote: NSFontTextStyle;
// doc://com.apple.documentation/documentation/appkit/nsfonttextstyleheadline
declare const NSFontTextStyleHeadline: NSFontTextStyle;
// doc://com.apple.documentation/documentation/appkit/nsfonttextstylesubheadline
declare const NSFontTextStyleSubheadline: NSFontTextStyle;
// doc://com.apple.documentation/documentation/appkit/nsfonttextstylelargetitle
declare const NSFontTextStyleLargeTitle: NSFontTextStyle;
// doc://com.apple.documentation/documentation/appkit/nsfonttextstyletitle1
declare const NSFontTextStyleTitle1: NSFontTextStyle;
// doc://com.apple.documentation/documentation/appkit/nsfonttextstyletitle2
declare const NSFontTextStyleTitle2: NSFontTextStyle;
// doc://com.apple.documentation/documentation/appkit/nsfonttextstyletitle3
declare const NSFontTextStyleTitle3: NSFontTextStyle;
// doc://com.apple.documentation/documentation/appkit/nsfontidentitymatrix
declare const NSFontIdentityMatrix: CGFloat;
// doc://com.apple.documentation/documentation/appkit/nsfontdescriptorsystemdesigndefault
declare const NSFontDescriptorSystemDesignDefault: NSFontDescriptorSystemDesign;
// doc://com.apple.documentation/documentation/appkit/nsfontdescriptorsystemdesignmonospaced
declare const NSFontDescriptorSystemDesignMonospaced: NSFontDescriptorSystemDesign;
// doc://com.apple.documentation/documentation/appkit/nsfontdescriptorsystemdesignrounded
declare const NSFontDescriptorSystemDesignRounded: NSFontDescriptorSystemDesign;
// doc://com.apple.documentation/documentation/appkit/nsfontdescriptorsystemdesignserif
declare const NSFontDescriptorSystemDesignSerif: NSFontDescriptorSystemDesign;
// doc://com.apple.documentation/documentation/appkit/nsfontcollectionoldnamekey
declare const NSFontCollectionOldNameKey: NSFontCollectionUserInfoKey;
// doc://com.apple.documentation/documentation/appkit/nsfontcollectionnamekey
declare const NSFontCollectionNameKey: NSFontCollectionUserInfoKey;
// doc://com.apple.documentation/documentation/appkit/nsfontcollectionvisibilitykey
declare const NSFontCollectionVisibilityKey: NSFontCollectionUserInfoKey;
// doc://com.apple.documentation/documentation/appkit/nsfontcollectionallfonts
declare const NSFontCollectionAllFonts: NSFontCollectionName;
// doc://com.apple.documentation/documentation/appkit/nsfontcollectionuser
declare const NSFontCollectionUser: NSFontCollectionName;
// doc://com.apple.documentation/documentation/appkit/nsfontcollectionfavorites
declare const NSFontCollectionFavorites: NSFontCollectionName;
// doc://com.apple.documentation/documentation/appkit/nsfontcollectionrecentlyused
declare const NSFontCollectionRecentlyUsed: NSFontCollectionName;
// doc://com.apple.documentation/documentation/appkit/nsfontcollectionincludedisabledfontsoption
declare const NSFontCollectionIncludeDisabledFontsOption: NSFontCollectionMatchingOptionKey;
// doc://com.apple.documentation/documentation/appkit/nsfontcollectionremoveduplicatesoption
declare const NSFontCollectionRemoveDuplicatesOption: NSFontCollectionMatchingOptionKey;
// doc://com.apple.documentation/documentation/appkit/nsfontcollectiondisallowautoactivationoption
declare const NSFontCollectionDisallowAutoActivationOption: NSFontCollectionMatchingOptionKey;
// doc://com.apple.documentation/documentation/appkit/nsfontcollectionwasshown
declare const NSFontCollectionWasShown: NSFontCollectionActionTypeKey;
// doc://com.apple.documentation/documentation/appkit/nsfontcollectionwashidden
declare const NSFontCollectionWasHidden: NSFontCollectionActionTypeKey;
// doc://com.apple.documentation/documentation/appkit/nsfontcollectionwasrenamed
declare const NSFontCollectionWasRenamed: NSFontCollectionActionTypeKey;
// doc://com.apple.documentation/documentation/appkit/nstoolbaritemvisibilitypriorityhigh
declare const NSToolbarItemVisibilityPriorityHigh: NSToolbarItemVisibilityPriority;
// doc://com.apple.documentation/documentation/appkit/nstoolbaritemvisibilityprioritylow
declare const NSToolbarItemVisibilityPriorityLow: NSToolbarItemVisibilityPriority;
// doc://com.apple.documentation/documentation/appkit/nstoolbaritemvisibilityprioritystandard
declare const NSToolbarItemVisibilityPriorityStandard: NSToolbarItemVisibilityPriority;
// doc://com.apple.documentation/documentation/appkit/nstoolbaritemvisibilitypriorityuser
declare const NSToolbarItemVisibilityPriorityUser: NSToolbarItemVisibilityPriority;
// doc://com.apple.documentation/documentation/appkit/nsspellcheckerdidchangeautomaticcapitalizationnotification
declare const NSSpellCheckerDidChangeAutomaticCapitalizationNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsspellcheckerdidchangeautomaticdashsubstitutionnotification
declare const NSSpellCheckerDidChangeAutomaticDashSubstitutionNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsspellcheckerdidchangeautomaticperiodsubstitutionnotification
declare const NSSpellCheckerDidChangeAutomaticPeriodSubstitutionNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsspellcheckerdidchangeautomaticquotesubstitutionnotification
declare const NSSpellCheckerDidChangeAutomaticQuoteSubstitutionNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nsspellcheckerdidchangeautomatictextcompletionnotification
declare const NSSpellCheckerDidChangeAutomaticTextCompletionNotification: NSNotificationName;
// doc://com.apple.documentation/documentation/appkit/nslinearslider
declare const NSLinearSlider: NSSliderType;
// doc://com.apple.documentation/documentation/appkit/nscircularslider
declare const NSCircularSlider: NSSliderType;
// doc://com.apple.documentation/documentation/appkit/nstickmarkbelow
declare const NSTickMarkBelow: NSTickMarkPosition;
// doc://com.apple.documentation/documentation/appkit/nstickmarkabove
declare const NSTickMarkAbove: NSTickMarkPosition;
// doc://com.apple.documentation/documentation/appkit/nstickmarkleft
declare const NSTickMarkLeft: NSTickMarkPosition;
// doc://com.apple.documentation/documentation/appkit/nstickmarkright
declare const NSTickMarkRight: NSTickMarkPosition;
// doc://com.apple.documentation/documentation/appkit/nsaboutpaneloptionapplicationicon
declare const NSAboutPanelOptionApplicationIcon: NSAboutPanelOptionKey;
// doc://com.apple.documentation/documentation/appkit/nsaboutpaneloptionapplicationname
declare const NSAboutPanelOptionApplicationName: NSAboutPanelOptionKey;
// doc://com.apple.documentation/documentation/appkit/nsaboutpaneloptionapplicationversion
declare const NSAboutPanelOptionApplicationVersion: NSAboutPanelOptionKey;
// doc://com.apple.documentation/documentation/appkit/nsaboutpaneloptioncredits
declare const NSAboutPanelOptionCredits: NSAboutPanelOptionKey;
// doc://com.apple.documentation/documentation/appkit/nsaboutpaneloptionversion
declare const NSAboutPanelOptionVersion: NSAboutPanelOptionKey;
// doc://com.apple.documentation/documentation/appkit/nsworkspacelaunchconfigurationappleevent
declare const NSWorkspaceLaunchConfigurationAppleEvent: NSWorkspaceLaunchConfigurationKey;
// doc://com.apple.documentation/documentation/appkit/nsworkspacelaunchconfigurationarchitecture
declare const NSWorkspaceLaunchConfigurationArchitecture: NSWorkspaceLaunchConfigurationKey;
// doc://com.apple.documentation/documentation/appkit/nsworkspacelaunchconfigurationarguments
declare const NSWorkspaceLaunchConfigurationArguments: NSWorkspaceLaunchConfigurationKey;
// doc://com.apple.documentation/documentation/appkit/nsworkspacelaunchconfigurationenvironment
declare const NSWorkspaceLaunchConfigurationEnvironment: NSWorkspaceLaunchConfigurationKey;
// doc://com.apple.documentation/documentation/appkit/nstextfindercaseinsensitivekey
declare const NSTextFinderCaseInsensitiveKey: NSPasteboardTypeTextFinderOptionKey;
// doc://com.apple.documentation/documentation/appkit/nstextfindermatchingtypekey
declare const NSTextFinderMatchingTypeKey: NSPasteboardTypeTextFinderOptionKey;
// doc://com.apple.documentation/documentation/appkit/nstableviewrowviewkey
declare const NSTableViewRowViewKey: NSUserInterfaceItemIdentifier;
// doc://com.apple.documentation/documentation/appkit/nsoutlineviewdisclosurebuttonkey
declare const NSOutlineViewDisclosureButtonKey: NSUserInterfaceItemIdentifier;
// doc://com.apple.documentation/documentation/appkit/nsoutlineviewshowhidebuttonkey
declare const NSOutlineViewShowHideButtonKey: NSUserInterfaceItemIdentifier;
// doc://com.apple.documentation/documentation/appkit/nsrulerviewunitcentimeters
declare const NSRulerViewUnitCentimeters: NSRulerViewUnitName;
// doc://com.apple.documentation/documentation/appkit/nsrulerviewunitinches
declare const NSRulerViewUnitInches: NSRulerViewUnitName;
// doc://com.apple.documentation/documentation/appkit/nsrulerviewunitpicas
declare const NSRulerViewUnitPicas: NSRulerViewUnitName;
// doc://com.apple.documentation/documentation/appkit/nsrulerviewunitpoints
declare const NSRulerViewUnitPoints: NSRulerViewUnitName;
// doc://com.apple.documentation/documentation/appkit/nsmomentarylightbutton
declare const NSMomentaryLightButton: NSButtonType;
// doc://com.apple.documentation/documentation/appkit/nsswitchbutton
declare const NSSwitchButton: NSButtonType;
// doc://com.apple.documentation/documentation/appkit/nsradiobutton
declare const NSRadioButton: NSButtonType;
// doc://com.apple.documentation/documentation/appkit/nsroundedbezelstyle
declare const NSRoundedBezelStyle: NSBezelStyle;
// doc://com.apple.documentation/documentation/appkit/nsregularsquarebezelstyle
declare const NSRegularSquareBezelStyle: NSBezelStyle;
// doc://com.apple.documentation/documentation/appkit/nsthicksquarebezelstyle
declare const NSThickSquareBezelStyle: NSBezelStyle;
// doc://com.apple.documentation/documentation/appkit/nsthickersquarebezelstyle
declare const NSThickerSquareBezelStyle: NSBezelStyle;
// doc://com.apple.documentation/documentation/appkit/nsdisclosurebezelstyle
declare const NSDisclosureBezelStyle: NSBezelStyle;
// doc://com.apple.documentation/documentation/appkit/nsshadowlesssquarebezelstyle
declare const NSShadowlessSquareBezelStyle: NSBezelStyle;
// doc://com.apple.documentation/documentation/appkit/nscircularbezelstyle
declare const NSCircularBezelStyle: NSBezelStyle;
// doc://com.apple.documentation/documentation/appkit/nstexturedsquarebezelstyle
declare const NSTexturedSquareBezelStyle: NSBezelStyle;
// doc://com.apple.documentation/documentation/appkit/nshelpbuttonbezelstyle
declare const NSHelpButtonBezelStyle: NSBezelStyle;
// doc://com.apple.documentation/documentation/appkit/nssmallsquarebezelstyle
declare const NSSmallSquareBezelStyle: NSBezelStyle;
// doc://com.apple.documentation/documentation/appkit/nstexturedroundedbezelstyle
declare const NSTexturedRoundedBezelStyle: NSBezelStyle;
// doc://com.apple.documentation/documentation/appkit/nsroundrectbezelstyle
declare const NSRoundRectBezelStyle: NSBezelStyle;
// doc://com.apple.documentation/documentation/appkit/nsrecessedbezelstyle
declare const NSRecessedBezelStyle: NSBezelStyle;
// doc://com.apple.documentation/documentation/appkit/nsinlinebezelstyle
declare const NSInlineBezelStyle: NSBezelStyle;
// doc://com.apple.documentation/documentation/appkit/nssmalliconbuttonbezelstyle
declare const NSSmallIconButtonBezelStyle: NSBezelStyle;
// doc://com.apple.documentation/documentation/appkit/nsroundeddisclosurebezelstyle
declare const NSRoundedDisclosureBezelStyle: NSBezelStyle;
// doc://com.apple.documentation/documentation/appkit/nspushonpushoffbutton
declare const NSPushOnPushOffButton: NSButtonType;
// doc://com.apple.documentation/documentation/appkit/nstogglebutton
declare const NSToggleButton: NSButtonType;
// doc://com.apple.documentation/documentation/appkit/nsmomentarychangebutton
declare const NSMomentaryChangeButton: NSButtonType;
// doc://com.apple.documentation/documentation/appkit/nsonoffbutton
declare const NSOnOffButton: NSButtonType;
// doc://com.apple.documentation/documentation/appkit/nsmomentarypushinbutton
declare const NSMomentaryPushInButton: NSButtonType;
// doc://com.apple.documentation/documentation/appkit/nsmomentarypushbutton
declare const NSMomentaryPushButton: NSButtonType;
// doc://com.apple.documentation/documentation/appkit/nsmomentarylight
declare const NSMomentaryLight: NSButtonType;
// doc://com.apple.documentation/documentation/appkit/nsrangedatemode
declare const NSRangeDateMode: NSDatePickerMode;
// doc://com.apple.documentation/documentation/appkit/nstextfieldandstepperdatepickerstyle
declare const NSTextFieldAndStepperDatePickerStyle: NSDatePickerStyle;
// doc://com.apple.documentation/documentation/appkit/nsclockandcalendardatepickerstyle
declare const NSClockAndCalendarDatePickerStyle: NSDatePickerStyle;
// doc://com.apple.documentation/documentation/appkit/nstextfielddatepickerstyle
declare const NSTextFieldDatePickerStyle: NSDatePickerStyle;
// doc://com.apple.documentation/documentation/appkit/nssingledatemode
declare const NSSingleDateMode: NSDatePickerMode;
// doc://com.apple.documentation/documentation/appkit/nshourminutedatepickerelementflag
declare const NSHourMinuteDatePickerElementFlag: NSDatePickerElementFlags;
// doc://com.apple.documentation/documentation/appkit/nshourminuteseconddatepickerelementflag
declare const NSHourMinuteSecondDatePickerElementFlag: NSDatePickerElementFlags;
// doc://com.apple.documentation/documentation/appkit/nstimezonedatepickerelementflag
declare const NSTimeZoneDatePickerElementFlag: NSDatePickerElementFlags;
// doc://com.apple.documentation/documentation/appkit/nsyearmonthdatepickerelementflag
declare const NSYearMonthDatePickerElementFlag: NSDatePickerElementFlags;
// doc://com.apple.documentation/documentation/appkit/nsyearmonthdaydatepickerelementflag
declare const NSYearMonthDayDatePickerElementFlag: NSDatePickerElementFlags;
// doc://com.apple.documentation/documentation/appkit/nseradatepickerelementflag
declare const NSEraDatePickerElementFlag: NSDatePickerElementFlags;
// doc://com.apple.documentation/documentation/appkit/nsruleeditorpredicatecomparisonmodifier
declare const NSRuleEditorPredicateComparisonModifier: NSRuleEditorPredicatePartKey;
// doc://com.apple.documentation/documentation/appkit/nsruleeditorpredicatecompoundtype
declare const NSRuleEditorPredicateCompoundType: NSRuleEditorPredicatePartKey;
// doc://com.apple.documentation/documentation/appkit/nsruleeditorpredicatecustomselector
declare const NSRuleEditorPredicateCustomSelector: NSRuleEditorPredicatePartKey;
// doc://com.apple.documentation/documentation/appkit/nsruleeditorpredicateleftexpression
declare const NSRuleEditorPredicateLeftExpression: NSRuleEditorPredicatePartKey;
// doc://com.apple.documentation/documentation/appkit/nsruleeditorpredicateoperatortype
declare const NSRuleEditorPredicateOperatorType: NSRuleEditorPredicatePartKey;
// doc://com.apple.documentation/documentation/appkit/nsruleeditorpredicateoptions
declare const NSRuleEditorPredicateOptions: NSRuleEditorPredicatePartKey;
// doc://com.apple.documentation/documentation/appkit/nsruleeditorpredicaterightexpression
declare const NSRuleEditorPredicateRightExpression: NSRuleEditorPredicatePartKey;
// doc://com.apple.documentation/documentation/appkit/nsdefaulttokenstyle
declare const NSDefaultTokenStyle: NSTokenStyle;
// doc://com.apple.documentation/documentation/appkit/nsplaintexttokenstyle
declare const NSPlainTextTokenStyle: NSTokenStyle;
// doc://com.apple.documentation/documentation/appkit/nsroundedtokenstyle
declare const NSRoundedTokenStyle: NSTokenStyle;
