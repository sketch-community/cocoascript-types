{
  "abstract": [
    {
      "type": "text",
      "text": "Clips a tensor’s values to a maximum global Euclidean norm."
    }
  ],
  "documentVersion": 0,
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.documentation/documentation/accelerate",
        "doc://com.apple.documentation/documentation/accelerate/bnns"
      ]
    ]
  },
  "identifier": {
    "url": "doc://com.apple.documentation/documentation/accelerate/3746599-bnnsclipbyglobalnorm",
    "interfaceLanguage": "occ"
  },
  "legacy_identifier": 3746599,
  "kind": "symbol",
  "metadata": {
    "title": "BNNSClipByGlobalNorm",
    "role": "symbol",
    "roleHeading": "Function",
    "modules": [
      {
        "name": "Accelerate"
      }
    ],
    "platforms": [
      {
        "name": "iOS",
        "introducedAt": "15.0",
        "current": "15.2"
      },
      {
        "name": "iPadOS",
        "introducedAt": "15.0",
        "current": "15.2"
      },
      {
        "name": "macOS",
        "introducedAt": "12.0",
        "current": "12.1"
      },
      {
        "name": "Mac Catalyst",
        "introducedAt": "15.0",
        "current": "15.2"
      },
      {
        "name": "tvOS",
        "introducedAt": "15.0",
        "current": "15.2"
      },
      {
        "name": "watchOS",
        "introducedAt": "8.0",
        "current": "8.3"
      }
    ],
    "externalID": "c:@F@BNNSClipByGlobalNorm",
    "symbolKind": "func"
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ],
      "paths": [
        "documentation/accelerate/3746599-bnnsclipbyglobalnorm"
      ]
    },
    {
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ],
      "paths": [
        "documentation/accelerate/3746599-bnnsclipbyglobalnorm"
      ]
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/accelerate": {
      "title": "Accelerate",
      "identifier": "doc://com.apple.documentation/documentation/accelerate",
      "url": "/documentation/accelerate",
      "type": "topic",
      "kind": "symbol",
      "role": "collection"
    },
    "doc://com.apple.documentation/documentation/accelerate/bnns": {
      "title": "BNNS",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/bnns",
      "url": "/documentation/accelerate/bnns",
      "type": "topic",
      "kind": "article",
      "role": "collectionGroup"
    },
    "doc://com.apple.documentation/documentation/accelerate/3746599-bnnsclipbyglobalnorm#3761076": {
      "title": "Listing 1",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/3746599-bnnsclipbyglobalnorm#3761076",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/3746599-bnnsclipbyglobalnorm#3761076"
    },
    "doc://com.apple.documentation/documentation/accelerate/bnnsndarraydescriptor": {
      "title": "BNNSNDArrayDescriptor",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/bnnsndarraydescriptor",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/bnnsndarraydescriptor"
    },
    "doc://com.apple.documentation/documentation/kernel/size_t": {
      "title": "size_t",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/kernel/size_t",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/kernel/size_t"
    },
    "doc://com.apple.documentation/documentation/accelerate/3746601-bnnsclipbyvalue": {
      "title": "BNNSClipByValue",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/3746601-bnnsclipbyvalue",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/3746601-bnnsclipbyvalue",
      "abstract": [
        {
          "type": "text",
          "text": "Clips a tensor’s values to the specified minimum and maximum values."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/accelerate/3746600-bnnsclipbynorm": {
      "title": "BNNSClipByNorm",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/3746600-bnnsclipbynorm",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/3746600-bnnsclipbynorm",
      "abstract": [
        {
          "type": "text",
          "text": "Clips a tensor’s values to a maximum Euclidean norm."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/accelerate/3746599-bnnsclipbyglobalnorm": {
      "title": "BNNSClipByGlobalNorm",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/3746599-bnnsclipbyglobalnorm",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/3746599-bnnsclipbyglobalnorm",
      "abstract": [
        {
          "type": "text",
          "text": "Clips a tensor’s values to a maximum global Euclidean norm."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "url": "/documentation/technologies",
      "kind": "technologies",
      "title": "Technologies"
    }
  },
  "seeAlsoSections": [
    {
      "identifiers": [
        "doc://com.apple.documentation/documentation/accelerate/3746601-bnnsclipbyvalue",
        "doc://com.apple.documentation/documentation/accelerate/3746600-bnnsclipbynorm"
      ],
      "title": "Clipping Functions",
      "generated": true
    }
  ],
  "primaryContentSections": [
    {
      "kind": "declarations",
      "declarations": [
        {
          "languages": [
            "occ"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "int"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "BNNSClipByGlobalNorm"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@T@BNNSNDArrayDescriptor",
              "identifier": "doc://com.apple.documentation/documentation/accelerate/bnnsndarraydescriptor",
              "text": "BNNSNDArrayDescriptor"
            },
            {
              "kind": "text",
              "text": " * "
            },
            {
              "kind": "keyword",
              "text": "_Nonnull"
            },
            {
              "kind": "text",
              "text": " *dest, "
            },
            {
              "kind": "keyword",
              "text": "const"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@T@BNNSNDArrayDescriptor",
              "identifier": "doc://com.apple.documentation/documentation/accelerate/bnnsndarraydescriptor",
              "text": "BNNSNDArrayDescriptor"
            },
            {
              "kind": "text",
              "text": " * "
            },
            {
              "kind": "keyword",
              "text": "_Nonnull"
            },
            {
              "kind": "text",
              "text": " *src, "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@T@size_t",
              "identifier": "doc://com.apple.documentation/documentation/kernel/size_t",
              "text": "size_t"
            },
            {
              "kind": "text",
              "text": " count, "
            },
            {
              "kind": "keyword",
              "text": "float"
            },
            {
              "kind": "text",
              "text": " max_norm, "
            },
            {
              "kind": "keyword",
              "text": "float"
            },
            {
              "kind": "text",
              "text": " use_norm);"
            }
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "macOS",
            "Mac Catalyst",
            "tvOS",
            "watchOS"
          ]
        }
      ]
    },
    {
      "kind": "parameters",
      "languages": [
        "occ"
      ],
      "parameters": [
        {
          "name": "dest",
          "content": [
            {
              "type": "paragraph",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "An array of output descriptors."
                }
              ]
            }
          ]
        },
        {
          "name": "src",
          "content": [
            {
              "type": "paragraph",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "An array of input descriptors."
                }
              ]
            }
          ]
        },
        {
          "name": "count",
          "content": [
            {
              "type": "paragraph",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "The number of input and output descriptors."
                }
              ]
            }
          ]
        },
        {
          "name": "max_norm",
          "content": [
            {
              "type": "paragraph",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "The maximum global Euclidean norm."
                }
              ]
            }
          ]
        },
        {
          "name": "use_norm",
          "content": [
            {
              "type": "paragraph",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "An optional value for a known global Euclidean norm. Set to "
                },
                {
                  "type": "codeVoice",
                  "code": "0"
                },
                {
                  "type": "text",
                  "text": " to specify that the function computes the norm from the input descriptors."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "kind": "content",
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Use this function to clip the values in an array of input tensors to a maximum Euclidean norm. If you know the global norm of the input tensors, pass this value as the "
            },
            {
              "type": "codeVoice",
              "code": "use_norm"
            },
            {
              "type": "text",
              "text": ". Otherwise, pass "
            },
            {
              "type": "codeVoice",
              "code": "0"
            },
            {
              "type": "text",
              "text": " to specify that the function calculates the norm."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The Euclidean norm is the square root of the sum of squares of the two tensors. The following code clips the Euclidean norm of two input tensors to half of the global Euclidean norm:"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "static func clipToGlobalNorm() {",
            "    ",
            "    let inputOneData = UnsafeMutableBufferPointer<Float>.allocate(capacity: 4)",
            "    _ = inputOneData.initialize(from: [1, 2, 3, 4])",
            "    let inputOneDescriptor = BNNSNDArrayDescriptor(flags: BNNSNDArrayFlags(0),",
            "                                                   layout: BNNSDataLayoutVector,",
            "                                                   size: (4, 0, 0, 0, 0, 0, 0, 0),",
            "                                                   stride: (0, 0, 0, 0, 0, 0, 0, 0),",
            "                                                   data: inputOneData.baseAddress!,",
            "                                                   data_type: BNNSDataType.float,",
            "                                                   table_data: nil,",
            "                                                   table_data_type: BNNSDataType.float,",
            "                                                   data_scale: 1, data_bias: 0)",
            "    ",
            "    let inputTwoData = UnsafeMutableBufferPointer<Float>.allocate(capacity: 4)",
            "    _ = inputTwoData.initialize(from: [5, 6, 7, 8])",
            "    let inputTwoDescriptor = BNNSNDArrayDescriptor(flags: BNNSNDArrayFlags(0),",
            "                                                   layout: BNNSDataLayoutVector,",
            "                                                   size: (4, 0, 0, 0, 0, 0, 0, 0),",
            "                                                   stride: (0, 0, 0, 0, 0, 0, 0, 0),",
            "                                                   data: inputTwoData.baseAddress!,",
            "                                                   data_type: BNNSDataType.float,",
            "                                                   table_data: nil,",
            "                                                   table_data_type: BNNSDataType.float,",
            "                                                   data_scale: 1, data_bias: 0)",
            "    ",
            "    let outputOneData = UnsafeMutableBufferPointer<Float>.allocate(capacity: 4)",
            "    let outputOneDescriptor = BNNSNDArrayDescriptor(flags: BNNSNDArrayFlags(0),",
            "                                                    layout: BNNSDataLayoutVector,",
            "                                                    size: (4, 0, 0, 0, 0, 0, 0, 0),",
            "                                                    stride: (0, 0, 0, 0, 0, 0, 0, 0),",
            "                                                    data: outputOneData.baseAddress!,",
            "                                                    data_type: BNNSDataType.float,",
            "                                                    table_data: nil,",
            "                                                    table_data_type: BNNSDataType.float,",
            "                                                    data_scale: 1, data_bias: 0)",
            "    ",
            "    let outputTwoData = UnsafeMutableBufferPointer<Float>.allocate(capacity: 4)",
            "    let outputTwoDescriptor = BNNSNDArrayDescriptor(flags: BNNSNDArrayFlags(0),",
            "                                                    layout: BNNSDataLayoutVector,",
            "                                                    size: (4, 0, 0, 0, 0, 0, 0, 0),",
            "                                                    stride: (0, 0, 0, 0, 0, 0, 0, 0),",
            "                                                    data: outputTwoData.baseAddress!,",
            "                                                    data_type: BNNSDataType.float,",
            "                                                    table_data: nil,",
            "                                                    table_data_type: BNNSDataType.float,",
            "                                                    data_scale: 1, data_bias: 0)",
            "    ",
            "    let inputs = [inputOneDescriptor, inputTwoDescriptor]",
            "    var inputsPointers: [UnsafePointer<BNNSNDArrayDescriptor>] = inputs.map { input in",
            "        var descriptor = input",
            "        ",
            "        let inputPtr = UnsafeMutablePointer<BNNSNDArrayDescriptor>.allocate(capacity: 1)",
            "        inputPtr.initialize(from: &descriptor, count: 1)",
            "        ",
            "        return UnsafePointer(inputPtr)",
            "    }",
            "    ",
            "    let outputs = [outputOneDescriptor, outputTwoDescriptor]",
            "    var outputsPointers: [UnsafeMutablePointer<BNNSNDArrayDescriptor>] = outputs.map { output in",
            "        var descriptor = output",
            "        ",
            "        let outputPtr = UnsafeMutablePointer<BNNSNDArrayDescriptor>.allocate(capacity: 1)",
            "        outputPtr.initialize(from: &descriptor, count: 1)",
            "        ",
            "        return outputPtr",
            "    }",
            "    ",
            "    BNNSClipByGlobalNorm(&outputsPointers,",
            "                         &inputsPointers,",
            "                         2,",
            "                         0.5 * 14.2828568570857,",
            "                         0)",
            "    ",
            "    // Prints: `[0.5, 1.0, 1.5, 2.0]`",
            "    print(Array(outputOneData))",
            "    ",
            "    // Prints: `[2.5, 3.0, 3.5, 4.0]`",
            "    print(Array(outputTwoData))",
            "    ",
            "    inputOneData.deallocate()",
            "    inputTwoData.deallocate()",
            "    outputOneData.deallocate()",
            "    outputTwoData.deallocate()",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3761076",
            "title": "Listing 1"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "On return, "
            },
            {
              "type": "codeVoice",
              "code": "outputOne"
            },
            {
              "type": "text",
              "text": " contains the values "
            },
            {
              "type": "codeVoice",
              "code": "[0.5, 1.0, 1.5, 2.0]"
            },
            {
              "type": "text",
              "text": ", and "
            },
            {
              "type": "codeVoice",
              "code": "outputTwo"
            },
            {
              "type": "text",
              "text": " contains the values "
            },
            {
              "type": "codeVoice",
              "code": "[2.5, 3.0, 3.5, 4.0]"
            },
            {
              "type": "text",
              "text": "."
            }
          ]
        }
      ]
    }
  ],
  "legalNotices": {
    "copyright": "Copyright &copy; 2021 Apple Inc. All rights reserved.",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy"
  }
}