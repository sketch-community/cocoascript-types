{
  "abstract": [
    {
      "type": "text",
      "text": "Use Accelerateâ€™s multiple-signal fast Fourier transform (FFT) functions to transform multiple signals with a single function call."
    }
  ],
  "documentVersion": 0,
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.documentation/documentation/accelerate"
      ]
    ]
  },
  "identifier": {
    "url": "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals",
    "interfaceLanguage": "occ"
  },
  "legacy_identifier": 3698262,
  "kind": "article",
  "metadata": {
    "title": "Performing Fourier Transforms on Multiple Signals",
    "role": "article",
    "roleHeading": "Article",
    "modules": [
      {
        "name": "Accelerate"
      }
    ]
  },
  "schemaVersion": {
    "major": 1,
    "minor": 0,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ],
      "paths": [
        "documentation/accelerate/performing_fourier_transforms_on_multiple_signals"
      ]
    },
    {
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ],
      "paths": [
        "documentation/accelerate/performing_fourier_transforms_on_multiple_signals"
      ]
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/accelerate": {
      "title": "Accelerate",
      "identifier": "doc://com.apple.documentation/documentation/accelerate",
      "url": "/documentation/accelerate",
      "type": "topic",
      "kind": "symbol",
      "role": "collection"
    },
    "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698255": {
      "title": "Listing 1",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698255",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698255"
    },
    "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698257": {
      "title": "Listing 1",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698257",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698257"
    },
    "link-media-3706066": {
      "identifier": "link-media-3706066",
      "type": "link",
      "title": "Figure 1",
      "url": "/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3706066"
    },
    "media-3706066": {
      "identifier": "media-3706066",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x"
          ],
          "size": {
            "width": 680,
            "height": 375
          },
          "url": "https://docs-assets.developer.apple.com/published/f3364f910e/rendered2x-1607422585.png"
        }
      ],
      "alt": "A diagram showing four composite sine waves each represented by 256 elements. The four sine waves are concatenated together to form a single multiple-signal collection that contains 1024 elements.",
      "title": "Figure 1"
    },
    "doc://com.apple.documentation/documentation/kernel/1579975-vdsp_ctoz": {
      "title": "vDSP_ctoz",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/kernel/1579975-vdsp_ctoz",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/kernel/1579975-vdsp_ctoz"
    },
    "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698265": {
      "title": "Listing 2",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698265",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698265"
    },
    "doc://com.apple.documentation/documentation/accelerate/1449883-vdsp_fftm_zrip": {
      "title": "vDSP_fftm_zrip",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/1449883-vdsp_fftm_zrip",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/1449883-vdsp_fftm_zrip"
    },
    "doc://com.apple.documentation/documentation/accelerate/dspsplitcomplex": {
      "title": "DSPSplitComplex",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/dspsplitcomplex",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/dspsplitcomplex"
    },
    "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698259": {
      "title": "Listing 3",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698259",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698259"
    },
    "doc://com.apple.documentation/documentation/accelerate/vdsp/3241114-squaremagnitudes": {
      "title": "squareMagnitudes(_:result:)",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/vdsp/3241114-squaremagnitudes",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/vdsp/3241114-squaremagnitudes"
    },
    "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698263": {
      "title": "Listing 4",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698263",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698263"
    },
    "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698261": {
      "title": "Listing 5",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698261",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698261"
    },
    "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698267": {
      "title": "Listing 7",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698267",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698267"
    },
    "link-media-3706065": {
      "identifier": "link-media-3706065",
      "type": "link",
      "title": "Figure 2",
      "url": "/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3706065"
    },
    "media-3706065": {
      "identifier": "media-3706065",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x"
          ],
          "size": {
            "width": 680,
            "height": 377
          },
          "url": "https://docs-assets.developer.apple.com/published/f60196196d/rendered2x-1607422592.png"
        }
      ],
      "alt": "A diagram showing four composite, complex sine waves each represented by 256 elements. The four sine waves are concatenated together to form a single multiple-signal collection that contains 1024 complex elements.",
      "title": "Figure 2"
    },
    "doc://com.apple.documentation/documentation/accelerate/1450798-vdsp_fftm_zip": {
      "title": "vDSP_fftm_zip",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/1450798-vdsp_fftm_zip",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/1450798-vdsp_fftm_zip"
    },
    "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698269": {
      "title": "Listing 8",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698269",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698269"
    },
    "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698268": {
      "title": "Listing 9",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698268",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698268"
    },
    "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698270": {
      "title": "Listing 10",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698270",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/performing_fourier_transforms_on_multiple_signals#3698270"
    },
    "doc://com.apple.documentation/documentation/accelerate/finding_the_component_frequencies_in_a_composite_sine_wave": {
      "title": "Finding the Component Frequencies in a Composite Sine Wave",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/finding_the_component_frequencies_in_a_composite_sine_wave",
      "kind": "article",
      "role": "article",
      "url": "/documentation/accelerate/finding_the_component_frequencies_in_a_composite_sine_wave",
      "abstract": [
        {
          "type": "text",
          "text": "Use 1D fast Fourier transform to compute the frequency components of a signal."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_interleaved-complex_data": {
      "title": "Performing Fourier Transforms on Interleaved-Complex Data",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_interleaved-complex_data",
      "kind": "article",
      "role": "article",
      "url": "/documentation/accelerate/performing_fourier_transforms_on_interleaved-complex_data",
      "abstract": [
        {
          "type": "text",
          "text": "Optimize fast Fourier transform (FFT) performance with vDSPâ€™s fixed-length interleaved FFT routines."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/accelerate/using_windowing_with_discrete_fourier_transforms": {
      "title": "Using Windowing with Discrete Fourier Transforms",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/using_windowing_with_discrete_fourier_transforms",
      "kind": "article",
      "role": "article",
      "url": "/documentation/accelerate/using_windowing_with_discrete_fourier_transforms",
      "abstract": [
        {
          "type": "text",
          "text": "Multiply signal data by window sequence values to reduce spectral leakage."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/accelerate/signal_extraction_from_noise": {
      "title": "Signal Extraction from Noise",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/signal_extraction_from_noise",
      "kind": "article",
      "role": "sampleCode",
      "url": "/documentation/accelerate/signal_extraction_from_noise",
      "abstract": [
        {
          "type": "text",
          "text": "Use Accelerateâ€™s discrete cosine transform to remove noise from a signal."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals": {
      "title": "Performing Fourier Transforms on Multiple Signals",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_multiple_signals",
      "kind": "article",
      "role": "article",
      "url": "/documentation/accelerate/performing_fourier_transforms_on_multiple_signals",
      "abstract": [
        {
          "type": "text",
          "text": "Use Accelerateâ€™s multiple-signal fast Fourier transform (FFT) functions to transform multiple signals with a single function call."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/accelerate/halftone_descreening_with_2d_fast_fourier_transform": {
      "title": "Halftone Descreening with 2D Fast Fourier Transform",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/halftone_descreening_with_2d_fast_fourier_transform",
      "kind": "article",
      "role": "sampleCode",
      "url": "/documentation/accelerate/halftone_descreening_with_2d_fast_fourier_transform",
      "abstract": [
        {
          "type": "text",
          "text": "Reduce or remove periodic artifacts from images."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms": {
      "title": "Fast Fourier Transforms",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms",
      "kind": "article",
      "role": "collectionGroup",
      "url": "/documentation/accelerate/fast_fourier_transforms",
      "abstract": [
        {
          "type": "text",
          "text": "Transform vectors and matrices of temporal and spatial domain complex values to the frequency domain, and vice versa."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/accelerate/discrete_fourier_transforms": {
      "title": "Discrete Fourier Transforms",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/discrete_fourier_transforms",
      "kind": "article",
      "role": "collectionGroup",
      "url": "/documentation/accelerate/discrete_fourier_transforms",
      "abstract": [
        {
          "type": "text",
          "text": "Transform vectors of temporal and spatial domain complex values to the frequency domain, and vice versa."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/accelerate/discrete_cosine_transforms": {
      "title": "Discrete Cosine Transforms",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/discrete_cosine_transforms",
      "kind": "article",
      "role": "collectionGroup",
      "url": "/documentation/accelerate/discrete_cosine_transforms",
      "abstract": [
        {
          "type": "text",
          "text": "Transform vectors of temporal and spatial domain real values to the frequency domain, and vice versa."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "url": "/documentation/technologies",
      "kind": "technologies",
      "title": "Technologies"
    }
  },
  "seeAlsoSections": [
    {
      "identifiers": [
        "doc://com.apple.documentation/documentation/accelerate/finding_the_component_frequencies_in_a_composite_sine_wave",
        "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_interleaved-complex_data",
        "doc://com.apple.documentation/documentation/accelerate/using_windowing_with_discrete_fourier_transforms",
        "doc://com.apple.documentation/documentation/accelerate/signal_extraction_from_noise",
        "doc://com.apple.documentation/documentation/accelerate/halftone_descreening_with_2d_fast_fourier_transform",
        "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms",
        "doc://com.apple.documentation/documentation/accelerate/discrete_fourier_transforms",
        "doc://com.apple.documentation/documentation/accelerate/discrete_cosine_transforms"
      ],
      "title": "Fourier and Cosine Transforms",
      "generated": true
    }
  ],
  "primaryContentSections": [
    {
      "kind": "content",
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "vDSP provides functions for performing fast Fourier transforms (FFTs) on multiple signals with a single function call. Transforming multiple signals is suited to processing stereo audio data or data thatâ€™s aquired from multiple sources."
            }
          ]
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Create a Composite Sine Wave",
          "anchor": "3698258"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The examples in this article use the following function to create an array with values that represent a composite sine wave:"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "/// Returns an array that contains a composite sine wave from the ",
            "/// specified frequency-amplitude pairs.",
            "static func makeCompositeSineWave(from frequencyAmplitudePairs: [(f: Float,",
            "                                                                  a: Float)],",
            "                                  count: Int) -> [Float] {",
            "",
            "",
            "    return [Float](unsafeUninitializedCapacity: count) {",
            "        buffer, initializedCount in",
            "        ",
            "        /// Fill the buffer with zeros.",
            "        vDSP.fill(&buffer, with: 0)",
            "        /// Create a reusable array to store the sine wave for each iteration.",
            "        var iterationValues = [Float](repeating: 0, count: count)",
            "        ",
            "        for frequencyAmplitudePair in frequencyAmplitudePairs {",
            "            /// Fill the working array with a ramp in the range `0 ..< frequency`.",
            "            vDSP.formRamp(withInitialValue: 0,",
            "                          increment: frequencyAmplitudePair.f / Float(count / 2),",
            "                          result: &iterationValues)",
            "            /// Compute `sin(x * .pi)` for each element.",
            "            vForce.sinPi(iterationValues, result: &iterationValues)",
            "            if frequencyAmplitudePair.a != 1 {",
            "                /// Mulitply each element by the specified amplitude.",
            "                vDSP.multiply(frequencyAmplitudePair.a, iterationValues,",
            "                              result: &iterationValues)",
            "            }",
            "            /// Add this sine wave iteration to the composite sine wave accumulator.",
            "            vDSP.add(iterationValues, buffer, result: &buffer)",
            "        }",
            "        ",
            "        initializedCount = count",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3698255",
            "title": "Listing 1"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": []
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Perform FFT on Multiple Real Signals",
          "anchor": "3698264"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The vDSP multiple-signal FFT functions accept multiple signals concatenated together. The following code creates a single 1024 element array from four separate composite sine waves:"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "let realValuesCount = 256",
            "",
            "let signal: [Float] = {",
            "    let signal0 = makeCompositeSineWave(from: [(f: 1, a: 1),",
            "                                               (f: 5, a: 0.2)],",
            "                                        count: realValuesCount)",
            "    ",
            "    let signal1 = makeCompositeSineWave(from: [(f: 5, a: 1),",
            "                                               (f: 7, a: 0.3)],",
            "                                        count: realValuesCount)",
            "    ",
            "    let signal2 = makeCompositeSineWave(from: [(f: 3, a: 1),",
            "                                               (f: 9, a: 0.6)],",
            "                                        count: realValuesCount)",
            "    ",
            "    let signal3 = makeCompositeSineWave(from: [(f: 7, a: 1),",
            "                                               (f: 2, a: 0.15)],",
            "                                        count: realValuesCount)",
            "    ",
            "    return signal0 + signal1 + signal2 + signal3",
            "}()"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3698257",
            "title": "Listing 1"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The following image is a visualization of the values in "
            },
            {
              "type": "codeVoice",
              "code": "signal"
            },
            {
              "type": "text",
              "text": ":"
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "image",
              "identifier": "media-3706066",
              "metadata": {
                "anchor": "3706066",
                "title": "Figure 1"
              }
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The vDSP FFT and DFT functions work with data in split-complex format. Split-complex format stores the real and imaginary parts of complex numbers in the corresponding elements of two separate arrays. "
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Use the "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/kernel/1579975-vdsp_ctoz"
            },
            {
              "type": "text",
              "text": " function to convert the real values in the signal array to split-complex format. The "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/kernel/1579975-vdsp_ctoz"
            },
            {
              "type": "text",
              "text": " function transforms the real values so that the real array contains even elements, and the imaginary array contains odd elements."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "let complexValuesCount = signal.count / 2",
            "",
            "var complexReals = [Float]()",
            "var complexImaginaries = [Float]()",
            "",
            "signal.withUnsafeBytes { signalPtr in",
            "    complexReals = [Float](unsafeUninitializedCapacity: complexValuesCount) {",
            "        realBuffer, realInitializedCount in",
            "        complexImaginaries = [Float](unsafeUninitializedCapacity: complexValuesCount) {",
            "            imagBuffer, imagInitializedCount in",
            "            var splitComplex = DSPSplitComplex(realp: realBuffer.baseAddress!,",
            "                                               imagp: imagBuffer.baseAddress!)",
            "            ",
            "            vDSP_ctoz([DSPComplex](signalPtr.bindMemory(to: DSPComplex.self)), 2,",
            "                      &splitComplex, 1,",
            "                      vDSP_Length(complexValuesCount))",
            "            ",
            "            imagInitializedCount = complexValuesCount",
            "        }",
            "        realInitializedCount = complexValuesCount",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3698265",
            "title": "Listing 2"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/1449883-vdsp_fftm_zrip"
            },
            {
              "type": "text",
              "text": " function performs the FFT. Create a "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/dspsplitcomplex"
            },
            {
              "type": "text",
              "text": " structure that acts as a mediatory between the real and imaginary arrays and the FFT function. The third parameter to "
            },
            {
              "type": "reference",
              "isActive": false,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/1449883-vdsp_fftm_zrip"
            },
            {
              "type": "text",
              "text": " (the stride between the individual signals) is measured in complex elements."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "let signalCount = 4",
            "",
            "complexReals.withUnsafeMutableBufferPointer { realPtr in",
            "    complexImaginaries.withUnsafeMutableBufferPointer { imagPtr in",
            "        var splitComplex = DSPSplitComplex(realp: realPtr.baseAddress!,",
            "                                           imagp: imagPtr.baseAddress!)",
            "        ",
            "        let log2n = vDSP_Length(log2(Float(realValuesCount)))",
            "        if let fft = vDSP_create_fftsetup(log2n, FFTRadix(kFFTRadix2)) {",
            "            ",
            "            vDSP_fftm_zrip(fft,",
            "                           &splitComplex, 1,",
            "                           vDSP_Stride(realValuesCount / 2),",
            "                           log2n,",
            "                           vDSP_Length(signalCount),",
            "                           FFTDirection(kFFTDirection_Forward))",
            "",
            "            vDSP_destroy_fftsetup(fft)",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3698259",
            "title": "Listing 3"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "On return, "
            },
            {
              "type": "codeVoice",
              "code": "complexReals"
            },
            {
              "type": "text",
              "text": " and "
            },
            {
              "type": "codeVoice",
              "code": "complexImaginaries"
            },
            {
              "type": "text",
              "text": " contain the frequency-domain representation of the four real signals. Call "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/vdsp/3241114-squaremagnitudes"
            },
            {
              "type": "text",
              "text": " to compute the energy at each frequency."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "let magnitudes = [Float](unsafeUninitializedCapacity: complexValuesCount) {",
            "    buffer, initializedCount in",
            "    complexReals.withUnsafeMutableBufferPointer { realPtr in",
            "        complexImaginaries.withUnsafeMutableBufferPointer { imagPtr in",
            "            ",
            "            let splitComplex = DSPSplitComplex(realp: realPtr.baseAddress!,",
            "                                               imagp: imagPtr.baseAddress!)",
            "            ",
            "            vDSP.squareMagnitudes(splitComplex,",
            "                                  result: &buffer)",
            "        }",
            "    }",
            "    ",
            "    initializedCount = complexValuesCount",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3698263",
            "title": "Listing 4"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Use the magnitudes information to calculate the component frequencies of each of the four signals. The offset of each nonzero magnitude represents the frequency, and the value represents the energy."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "for i in 0 ..< signalCount {",
            "    let start = i * (realValuesCount / 2)",
            "    let end = start + (realValuesCount / 2) - 1",
            "    ",
            "    let signalMagnitudes = magnitudes[start ..< end]",
            "    ",
            "    let components = signalMagnitudes.enumerated().filter {",
            "        $0.element > sqrt(.ulpOfOne)",
            "    }",
            "",
            "    // Prints",
            "    //  [(offset: 1, element: 65536.0), (offset: 5, element: 2621.4412)]",
            "    //  [(offset: 5, element: 65536.016), (offset: 7, element: 5898.24)]",
            "    //  [(offset: 3, element: 65536.0), (offset: 9, element: 23592.96)]",
            "    //  [(offset: 2, element: 1474.56), (offset: 7, element: 65536.0)]    ",
            "    print(components)",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3698261",
            "title": "Listing 5"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": []
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Perform FFT on Multiple Complex Signals",
          "anchor": "3698266"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "A complex signal contains two real signals, one in the real parts and one in the imaginary parts. The following code creates two 1024-element arrays that contain the real and imaginary parts of four 256-element complex signals:"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "let complexValuesCount = 256",
            "",
            "var realSignal: [Float] = {",
            "    let signal0 = makeCompositeSineWave(from: [(f: 1, a: 1)],",
            "                                        count: complexValuesCount)",
            "    ",
            "    let signal1 = makeCompositeSineWave(from: [(f: 5, a: 1)],",
            "                                        count: complexValuesCount)",
            "    ",
            "    let signal2 = makeCompositeSineWave(from: [(f: 3, a: 1)],",
            "                                        count: complexValuesCount)",
            "    ",
            "    let signal3 = makeCompositeSineWave(from: [(f: 7, a: 1)],",
            "                                        count: complexValuesCount)",
            "    ",
            "    return signal0 + signal1 + signal2 + signal3",
            "}()",
            "",
            "var imaginarySignal: [Float] = {",
            "    let signal0 = makeCompositeSineWave(from: [(f: 5, a: 0.2)],",
            "                                        count: complexValuesCount)",
            "    ",
            "    let signal1 = makeCompositeSineWave(from: [(f: 7, a: 0.3)],",
            "                                        count: complexValuesCount)",
            "    ",
            "    let signal2 = makeCompositeSineWave(from: [(f: 9, a: 0.6)],",
            "                                        count: complexValuesCount)",
            "    ",
            "    let signal3 = makeCompositeSineWave(from: [(f: 2, a: 0.15)],",
            "                                        count: complexValuesCount)",
            "    ",
            "    return signal0 + signal1 + signal2 + signal3",
            "}()"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3698267",
            "title": "Listing 7"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The following image is a visualization of the values in "
            },
            {
              "type": "codeVoice",
              "code": "realSignal"
            },
            {
              "type": "text",
              "text": " as a solid line and the values in "
            },
            {
              "type": "codeVoice",
              "code": "imaginarySignal"
            },
            {
              "type": "text",
              "text": " as a dashed line:"
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "image",
              "identifier": "media-3706065",
              "metadata": {
                "anchor": "3706065",
                "title": "Figure 2"
              }
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/1450798-vdsp_fftm_zip"
            },
            {
              "type": "text",
              "text": " function performs the FFT in-place on the real and imaginary arrays."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "let signalCount = 4",
            "",
            "realSignal.withUnsafeMutableBufferPointer { realPtr in",
            "    imaginarySignal.withUnsafeMutableBufferPointer { imagPtr in",
            "        var splitComplex = DSPSplitComplex(realp: realPtr.baseAddress!,",
            "                                           imagp: imagPtr.baseAddress!)",
            "        ",
            "        let log2n = vDSP_Length(log2(Float(complexValuesCount)))",
            "        if let fft = vDSP_create_fftsetup(log2n, FFTRadix(kFFTRadix2)) {",
            "            ",
            "            vDSP_fftm_zip(fft,",
            "                          &splitComplex, 1,",
            "                          vDSP_Stride(complexValuesCount),",
            "                          log2n,",
            "                          vDSP_Length(signalCount),",
            "                          FFTDirection(kFFTDirection_Forward))",
            "",
            "            vDSP_destroy_fftsetup(fft)",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3698269",
            "title": "Listing 8"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "On return, "
            },
            {
              "type": "codeVoice",
              "code": "realSignal"
            },
            {
              "type": "text",
              "text": " and "
            },
            {
              "type": "codeVoice",
              "code": "imaginarySignal"
            },
            {
              "type": "text",
              "text": " contain the frequency-domain representation of the four complex signals. Call "
            },
            {
              "type": "reference",
              "isActive": false,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/vdsp/3241114-squaremagnitudes"
            },
            {
              "type": "text",
              "text": " to compute the energy at each frequency."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "let magnitudesCount = complexValuesCount * signalCount",
            "let magnitudes = [Float](unsafeUninitializedCapacity: magnitudesCount) {",
            "    buffer, initializedCount in",
            "    realSignal.withUnsafeMutableBufferPointer { realPtr in",
            "        imaginarySignal.withUnsafeMutableBufferPointer { imagPtr in",
            "            ",
            "            let splitComplex = DSPSplitComplex(realp: realPtr.baseAddress!,",
            "                                               imagp: imagPtr.baseAddress!)",
            "            ",
            "            vDSP.squareMagnitudes(splitComplex,",
            "                                  result: &buffer)",
            "        }",
            "    }",
            "    ",
            "    initializedCount = magnitudesCount",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3698268",
            "title": "Listing 9"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Use the magnitudes information to calculate the component frequencies of each of the four signals. The offset of each nonzero magnitude represents the frequency, and the value represents the energy."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "for i in 0 ..< signalCount {",
            "    let start = i * (complexValuesCount)",
            "    let end = start + (complexValuesCount / 2) - 1",
            "    ",
            "    let signalMagnitudes = magnitudes[start ..< end]",
            "    ",
            "    let components = signalMagnitudes.enumerated().filter {",
            "        $0.element > sqrt(.ulpOfOne)",
            "    }",
            "    ",
            "    // Prints",
            "    // [(offset: 1, element: 16384.0), (offset: 5, element: 655.3602)]",
            "    // [(offset: 5, element: 16384.0), (offset: 7, element: 1474.56)]",
            "    // [(offset: 3, element: 16384.0), (offset: 9, element: 5898.24)]",
            "    // [(offset: 2, element: 368.64), (offset: 7, element: 16384.0)]",
            "    print(components)",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3698270",
            "title": "Listing 10"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": []
        }
      ]
    }
  ],
  "legalNotices": {
    "copyright": "Copyright &copy; 2020 Apple Inc. All rights reserved.",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy"
  }
}