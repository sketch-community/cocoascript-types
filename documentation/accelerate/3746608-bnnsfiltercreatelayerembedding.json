{
  "abstract": [
    {
      "type": "text",
      "text": "Returns a new embedding layer."
    }
  ],
  "documentVersion": 0,
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.documentation/documentation/accelerate",
        "doc://com.apple.documentation/documentation/accelerate/bnns"
      ]
    ]
  },
  "identifier": {
    "url": "doc://com.apple.documentation/documentation/accelerate/3746608-bnnsfiltercreatelayerembedding",
    "interfaceLanguage": "occ"
  },
  "legacy_identifier": 3746608,
  "kind": "symbol",
  "metadata": {
    "title": "BNNSFilterCreateLayerEmbedding",
    "role": "symbol",
    "roleHeading": "Function",
    "modules": [
      {
        "name": "Accelerate"
      }
    ],
    "platforms": [
      {
        "name": "iOS",
        "introducedAt": "15.0",
        "current": "15.2"
      },
      {
        "name": "iPadOS",
        "introducedAt": "15.0",
        "current": "15.2"
      },
      {
        "name": "macOS",
        "introducedAt": "12.0",
        "current": "12.1"
      },
      {
        "name": "Mac Catalyst",
        "introducedAt": "15.0",
        "current": "15.2"
      },
      {
        "name": "tvOS",
        "introducedAt": "15.0",
        "current": "15.2"
      },
      {
        "name": "watchOS",
        "introducedAt": "8.0",
        "current": "8.3"
      }
    ],
    "externalID": "c:@F@BNNSFilterCreateLayerEmbedding",
    "symbolKind": "func"
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ],
      "paths": [
        "documentation/accelerate/3746608-bnnsfiltercreatelayerembedding"
      ]
    },
    {
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ],
      "paths": [
        "documentation/accelerate/3746608-bnnsfiltercreatelayerembedding"
      ]
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/accelerate": {
      "title": "Accelerate",
      "identifier": "doc://com.apple.documentation/documentation/accelerate",
      "url": "/documentation/accelerate",
      "type": "topic",
      "kind": "symbol",
      "role": "collection"
    },
    "doc://com.apple.documentation/documentation/accelerate/bnns": {
      "title": "BNNS",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/bnns",
      "url": "/documentation/accelerate/bnns",
      "type": "topic",
      "kind": "article",
      "role": "collectionGroup"
    },
    "doc://com.apple.documentation/documentation/accelerate/bnnslayerparametersembedding": {
      "title": "BNNSLayerParametersEmbedding",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/bnnslayerparametersembedding",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/bnnslayerparametersembedding",
      "abstract": [
        {
          "type": "text",
          "text": "A structure that contains the parameters of an embedding layer."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/accelerate/3746608-bnnsfiltercreatelayerembedding#3761089": {
      "title": "Listing 1",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/3746608-bnnsfiltercreatelayerembedding#3761089",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/3746608-bnnsfiltercreatelayerembedding#3761089"
    },
    "doc://com.apple.documentation/documentation/accelerate/3746608-bnnsfiltercreatelayerembedding#3761087": {
      "title": "Listing 2",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/3746608-bnnsfiltercreatelayerembedding#3761087",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/3746608-bnnsfiltercreatelayerembedding#3761087"
    },
    "doc://com.apple.documentation/documentation/accelerate/bnnsfilterparameters": {
      "title": "BNNSFilterParameters",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/bnnsfilterparameters",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/bnnsfilterparameters"
    },
    "doc://com.apple.documentation/documentation/accelerate/3746608-bnnsfiltercreatelayerembedding": {
      "title": "BNNSFilterCreateLayerEmbedding",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/3746608-bnnsfiltercreatelayerembedding",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/3746608-bnnsfiltercreatelayerembedding",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a new embedding layer."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "url": "/documentation/technologies",
      "kind": "technologies",
      "title": "Technologies"
    }
  },
  "seeAlsoSections": [
    {
      "identifiers": [
        "doc://com.apple.documentation/documentation/accelerate/bnnslayerparametersembedding"
      ],
      "title": "Embedding Layers",
      "generated": true
    }
  ],
  "primaryContentSections": [
    {
      "kind": "declarations",
      "declarations": [
        {
          "languages": [
            "occ"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "void"
            },
            {
              "kind": "text",
              "text": " * "
            },
            {
              "kind": "identifier",
              "text": "BNNSFilterCreateLayerEmbedding"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "keyword",
              "text": "const"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@T@BNNSLayerParametersEmbedding",
              "identifier": "doc://com.apple.documentation/documentation/accelerate/bnnslayerparametersembedding",
              "text": "BNNSLayerParametersEmbedding"
            },
            {
              "kind": "text",
              "text": " *layer_params, "
            },
            {
              "kind": "keyword",
              "text": "const"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@T@BNNSFilterParameters",
              "identifier": "doc://com.apple.documentation/documentation/accelerate/bnnsfilterparameters",
              "text": "BNNSFilterParameters"
            },
            {
              "kind": "text",
              "text": " *filter_params);"
            }
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "macOS",
            "Mac Catalyst",
            "tvOS",
            "watchOS"
          ]
        }
      ]
    },
    {
      "kind": "parameters",
      "languages": [
        "occ"
      ],
      "parameters": [
        {
          "name": "layer_params",
          "content": [
            {
              "type": "paragraph",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "The layer parameters."
                }
              ]
            }
          ]
        },
        {
          "name": "filter_params",
          "content": [
            {
              "type": "paragraph",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "The filter runtime parameters."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "kind": "content",
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Use this function in conjunction with "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/bnnslayerparametersembedding"
            },
            {
              "type": "text",
              "text": " to create an embedding layer that accesses dictionary items based on the integer indices that the input tensor defines."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "For example, the following code shows how to access three dictionary items at indices "
            },
            {
              "type": "codeVoice",
              "code": "1"
            },
            {
              "type": "text",
              "text": ", "
            },
            {
              "type": "codeVoice",
              "code": "5"
            },
            {
              "type": "text",
              "text": ", and "
            },
            {
              "type": "codeVoice",
              "code": "2"
            },
            {
              "type": "text",
              "text": ". The dictionary contains seven items that are five-element vectors. Therefore, the indices descriptor has the shape "
            },
            {
              "type": "codeVoice",
              "code": "(3)"
            },
            {
              "type": "text",
              "text": ", the dictionary descriptor has the shape "
            },
            {
              "type": "codeVoice",
              "code": "(5, 7)"
            },
            {
              "type": "text",
              "text": ", and the output descriptor has the shape "
            },
            {
              "type": "codeVoice",
              "code": "(5, 3)"
            },
            {
              "type": "text",
              "text": "."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "static func embeddingLayer() {",
            "    ",
            "    let indicesData = UnsafeMutableBufferPointer<Int8>.allocate(capacity: 3)",
            "    _ = indicesData.initialize(from: [1, 5, 2])",
            "    let indicesDescriptor = BNNSNDArrayDescriptor(flags: BNNSNDArrayFlags(0),",
            "                                                  layout: BNNSDataLayoutVector,",
            "                                                  size: (3, 0, 0, 0, 0, 0, 0, 0),",
            "                                                  stride: (0, 0, 0, 0, 0, 0, 0, 0),",
            "                                                  data: indicesData.baseAddress!,",
            "                                                  data_type: BNNSDataType.int8,",
            "                                                  table_data: nil,",
            "                                                  table_data_type: BNNSDataType.int8,",
            "                                                  data_scale: 1, data_bias: 0)",
            "    ",
            "    let dictionaryItemSize = 5",
            "    let dictionaryItemCount = 7",
            "    let dictionaryData = UnsafeMutableBufferPointer<Float>.allocate(capacity: dictionaryItemSize * dictionaryItemCount)",
            "    _ = dictionaryData.initialize(from: [01, 02, 03, 04, 05,",
            "                                         11, 12, 13, 14, 15,",
            "                                         21, 22, 23, 24, 25,",
            "                                         31, 32, 33, 34, 35,",
            "                                         41, 42, 43, 44, 45,",
            "                                         51, 52, 53, 54, 55,",
            "                                         61, 62, 63, 64, 65])",
            "    let dictionaryDescriptor = BNNSNDArrayDescriptor(flags: BNNSNDArrayFlags(0),",
            "                                                     layout: BNNSDataLayout2DLastMajor,",
            "                                                     size: (dictionaryItemSize, dictionaryItemCount,",
            "                                                            0, 0, 0, 0, 0, 0),",
            "                                                     stride: (0, 0, 0, 0, 0, 0, 0, 0),",
            "                                                     data: dictionaryData.baseAddress!,",
            "                                                     data_type: BNNSDataType.float,",
            "                                                     table_data: nil,",
            "                                                     table_data_type: BNNSDataType.float,",
            "                                                     data_scale: 1, data_bias: 0)",
            "    ",
            "    let outputData = UnsafeMutableBufferPointer<Float>.allocate(capacity: dictionaryItemSize * indicesData.count)",
            "    let outputDescriptor = BNNSNDArrayDescriptor(flags: BNNSNDArrayFlags(0),",
            "                                                 layout: BNNSDataLayout2DLastMajor,",
            "                                                 size: (dictionaryItemSize, indicesData.count,",
            "                                                        0, 0, 0, 0, 0, 0),",
            "                                                 stride: (0, 0, 0, 0, 0, 0, 0, 0),",
            "                                                 data: outputData.baseAddress!,",
            "                                                 data_type: BNNSDataType.float,",
            "                                                 table_data: nil,",
            "                                                 table_data_type: BNNSDataType.float,",
            "                                                 data_scale: 1, data_bias: 0)",
            "    ",
            "    var parameters = BNNSLayerParametersEmbedding(flags: BNNSEmbeddingFlags(rawValue: 0),",
            "                                                  i_desc: indicesDescriptor,",
            "                                                  o_desc: outputDescriptor,",
            "                                                  dictionary: dictionaryDescriptor,",
            "                                                  padding_idx: 0,",
            "                                                  max_norm: 0,",
            "                                                  norm_type: 0)",
            "    ",
            "    let embeddingLayer = BNNSFilterCreateLayerEmbedding(&parameters, nil)",
            "    ",
            "    BNNSFilterApply(embeddingLayer,",
            "                    indicesDescriptor.data!,",
            "                    outputDescriptor.data!)",
            "    ",
            "    // Prints:",
            "    // [11.0, 12.0, 13.0, 14.0, 15.0,",
            "    //  51.0, 52.0, 53.0, 54.0, 55.0,",
            "    //  21.0, 22.0, 23.0, 24.0, 25.0]",
            "    print(Array(outputData))",
            "    ",
            "    indicesData.deallocate()",
            "    dictionaryData.deallocate()",
            "    outputData.deallocate()",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3761089",
            "title": "Listing 1"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The embedding layer supports clipping to a maximum norm. The following code accesses the second and third items from a dictionary that contains three 2 x 3 matrices. The code initializes the embedding layer with a maximum norm that is the infinity-norm of the first dictionary item."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "static func embeddingLayerClipByNorm() {",
            "    let indicesData = UnsafeMutableBufferPointer<Int8>.allocate(capacity: 2)",
            "    _ = indicesData.initialize(from: [1, 2])",
            "    let indicesDescriptor = BNNSNDArrayDescriptor(flags: BNNSNDArrayFlags(0),",
            "                                                  layout: BNNSDataLayoutVector,",
            "                                                  size: (2, 0, 0, 0, 0, 0, 0, 0),",
            "                                                  stride: (0, 0, 0, 0, 0, 0, 0, 0),",
            "                                                  data: indicesData.baseAddress!,",
            "                                                  data_type: BNNSDataType.int8,",
            "                                                  table_data: nil,",
            "                                                  table_data_type: BNNSDataType.float,",
            "                                                  data_scale: 1, data_bias: 0)",
            "    ",
            "    let dictionaryItemRowCount = 2",
            "    let dictionaryItemColumnCount = 3",
            "    let dictionaryItemCount = 3",
            "    let dictionaryElementCount = dictionaryItemRowCount * dictionaryItemColumnCount * dictionaryItemCount",
            "    let dictionaryData = UnsafeMutableBufferPointer<Float>.allocate(capacity: dictionaryElementCount)",
            "    _ = dictionaryData.initialize(from: [0.1, 0.2, 0.3,",
            "                                         0.4, 0.5, 0.6,",
            "                                       ",
            "                                         1, 3, 5,",
            "                                         2, 4, 6,",
            "                                         ",
            "                                         60, 50, 40,",
            "                                         30, 20, 10])",
            "    let dictionaryDescriptor = BNNSNDArrayDescriptor(flags: BNNSNDArrayFlags(0),",
            "                                                     layout: BNNSDataLayout3DLastMajor,",
            "                                                     size: (dictionaryItemRowCount,",
            "                                                            dictionaryItemColumnCount,",
            "                                                            dictionaryItemCount, 0, 0, 0, 0, 0),",
            "                                                     stride: (0, 0, 0, 0, 0, 0, 0, 0),",
            "                                                     data: dictionaryData.baseAddress!,",
            "                                                     data_type: BNNSDataType.float,",
            "                                                     table_data: nil,",
            "                                                     table_data_type: BNNSDataType.float,",
            "                                                     data_scale: 1, data_bias: 0)",
            "    ",
            "    let outputElementCount = dictionaryItemRowCount * dictionaryItemColumnCount * indicesData.count",
            "    let outputData = UnsafeMutableBufferPointer<Float>.allocate(capacity: outputElementCount)",
            "    let outputDescriptor = BNNSNDArrayDescriptor(flags: BNNSNDArrayFlags(0),",
            "                                                 layout: BNNSDataLayout3DLastMajor,",
            "                                                 size: (dictionaryItemRowCount,",
            "                                                        dictionaryItemColumnCount,",
            "                                                        indicesData.count, 0, 0, 0, 0, 0),",
            "                                                 stride: (0, 0, 0, 0, 0, 0, 0, 0),",
            "                                                 data: outputData.baseAddress!,",
            "                                                 data_type: BNNSDataType.float,",
            "                                                 table_data: nil,",
            "                                                 table_data_type: BNNSDataType.float,",
            "                                                 data_scale: 1, data_bias: 0)",
            "    ",
            "    var parameters = BNNSLayerParametersEmbedding(flags: BNNSEmbeddingFlags(rawValue: 0),",
            "                                                  i_desc: indicesDescriptor,",
            "                                                  o_desc: outputDescriptor,",
            "                                                  dictionary: dictionaryDescriptor,",
            "                                                  padding_idx: 0,",
            "                                                  max_norm: 0.6,",
            "                                                  norm_type: .infinity)",
            "    ",
            "    let embeddingLayer = BNNSFilterCreateLayerEmbedding(&parameters, nil)",
            "    ",
            "    BNNSFilterApply(embeddingLayer,",
            "                    indicesDescriptor.data!,",
            "                    outputDescriptor.data!)",
            "    ",
            "    // Prints:",
            "    //     [0.1, 0.3, 0.5,",
            "    //      0.2, 0.4, 0.6,",
            "    //",
            "    //      0.6, 0.5, 0.4,",
            "    //      0.3, 0.2, 0.1]",
            "    print(Array(outputData))",
            "    ",
            "    indicesData.deallocate()",
            "    dictionaryData.deallocate()",
            "    outputData.deallocate()",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3761087",
            "title": "Listing 2"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": []
        }
      ]
    }
  ],
  "legalNotices": {
    "copyright": "Copyright &copy; 2021 Apple Inc. All rights reserved.",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy"
  }
}