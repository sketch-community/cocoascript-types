{
  "abstract": [
    {
      "type": "text",
      "text": "Learn how vDSP packs frequency-domain data produced by Fourier transform routines."
    }
  ],
  "documentVersion": 0,
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.documentation/documentation/accelerate",
        "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms"
      ],
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.documentation/documentation/accelerate",
        "doc://com.apple.documentation/documentation/accelerate/vdsp",
        "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms"
      ]
    ]
  },
  "identifier": {
    "url": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms",
    "interfaceLanguage": "occ"
  },
  "legacy_identifier": 3694762,
  "kind": "article",
  "metadata": {
    "title": "Data Packing for Fourier Transforms",
    "role": "article",
    "roleHeading": "Article",
    "modules": [
      {
        "name": "Accelerate"
      }
    ]
  },
  "schemaVersion": {
    "major": 1,
    "minor": 0,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ],
      "paths": [
        "documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms",
        "documentation/accelerate/vdsp/fast_fourier_transforms/data_packing_for_fourier_transforms"
      ]
    },
    {
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ],
      "paths": [
        "documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms",
        "documentation/accelerate/vdsp/fast_fourier_transforms/data_packing_for_fourier_transforms"
      ]
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/accelerate": {
      "title": "Accelerate",
      "identifier": "doc://com.apple.documentation/documentation/accelerate",
      "url": "/documentation/accelerate",
      "type": "topic",
      "kind": "symbol",
      "role": "collection"
    },
    "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms": {
      "title": "Fast Fourier Transforms",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms",
      "url": "/documentation/accelerate/fast_fourier_transforms",
      "type": "topic",
      "kind": "article",
      "role": "collectionGroup"
    },
    "doc://com.apple.documentation/documentation/accelerate/vdsp": {
      "title": "vDSP",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/vdsp",
      "url": "/documentation/accelerate/vdsp",
      "type": "topic",
      "kind": "article",
      "role": "collectionGroup"
    },
    "doc://com.apple.documentation/documentation/accelerate/1450388-vdsp_ctoz": {
      "title": "vDSP_ctoz",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/1450388-vdsp_ctoz",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/1450388-vdsp_ctoz"
    },
    "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3694761": {
      "title": "Listing 1",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3694761",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3694761"
    },
    "link-media-3705864": {
      "identifier": "link-media-3705864",
      "type": "link",
      "title": "Figure 1",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3705864"
    },
    "media-3705864": {
      "identifier": "media-3705864",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x"
          ],
          "size": {
            "width": 370,
            "height": 142
          },
          "url": "https://docs-assets.developer.apple.com/published/8d581dbe9e/rendered2x-1607335601.png"
        }
      ],
      "alt": "Diagram showing an array of eight real elements converted to an array of four split-complex elements. The conversion stores the split-complex elements across an array of real parts and an array of complex parts.",
      "title": "Figure 1"
    },
    "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3696652": {
      "title": "Listing 1",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3696652",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3696652"
    },
    "link-media-3696650": {
      "identifier": "link-media-3696650",
      "type": "link",
      "title": "Figure 1",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3696650"
    },
    "media-3696650": {
      "identifier": "media-3696650",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x"
          ],
          "size": {
            "width": 680,
            "height": 325
          },
          "url": "https://docs-assets.developer.apple.com/published/fa90759dc2/rendered2x-1603985440.png"
        }
      ],
      "alt": "Illustration of a composite sine wave.",
      "title": "Figure 1"
    },
    "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3694768": {
      "title": "Listing 3",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3694768",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3694768"
    },
    "doc://com.apple.documentation/documentation/accelerate/1450150-vdsp_fft_zrip": {
      "title": "vDSP_fft_zrip",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/1450150-vdsp_fft_zrip",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/1450150-vdsp_fft_zrip"
    },
    "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3694765": {
      "title": "Listing 4",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3694765",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3694765"
    },
    "doc://com.apple.documentation/documentation/accelerate/1449739-vdsp_dft_zrop_createsetup": {
      "title": "vDSP_DFT_zrop_CreateSetup",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/1449739-vdsp_dft_zrop_createsetup",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/1449739-vdsp_dft_zrop_createsetup"
    },
    "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695356": {
      "title": "Listing 5",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695356",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695356"
    },
    "link-media-3705871": {
      "identifier": "link-media-3705871",
      "type": "link",
      "title": "Figure 3",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3705871"
    },
    "media-3705871": {
      "identifier": "media-3705871",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x"
          ],
          "size": {
            "width": 465,
            "height": 191
          },
          "url": "https://docs-assets.developer.apple.com/published/a76b4b3dd8/rendered2x-1607339762.png"
        }
      ],
      "alt": "Diagram showing the result of a forward Fourier transform before and after data packing.",
      "title": "Figure 3"
    },
    "link-media-3705868": {
      "identifier": "link-media-3705868",
      "type": "link",
      "title": "Figure 4",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3705868"
    },
    "media-3705868": {
      "identifier": "media-3705868",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x"
          ],
          "size": {
            "width": 607,
            "height": 373
          },
          "url": "https://docs-assets.developer.apple.com/published/c46b282e66/rendered2x-1607339773.png"
        }
      ],
      "alt": "Stacked diagram showing a composite sine wave before and after forward Fourier transform. The time-domain sine wave is illustrated as a line, and the frequency-domain representation is illustrated as two arrays that form the split-complex values.",
      "title": "Figure 4"
    },
    "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3696654": {
      "title": "Listing 1",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3696654",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3696654"
    },
    "link-media-3705866": {
      "identifier": "link-media-3705866",
      "type": "link",
      "title": "Figure 1",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3705866"
    },
    "media-3705866": {
      "identifier": "media-3705866",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x"
          ],
          "size": {
            "width": 380,
            "height": 144
          },
          "url": "https://docs-assets.developer.apple.com/published/739960a537/rendered2x-1607339756.png"
        }
      ],
      "alt": "Diagram showing an array of four interleaved-complex elements converted to an array of four split-complex elements. The conversion stores the split-complex elements across an array of real parts and an array of complex parts.",
      "title": "Figure 1"
    },
    "link-media-3704699": {
      "identifier": "link-media-3704699",
      "type": "link",
      "title": "Figure 1",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3704699"
    },
    "media-3704699": {
      "identifier": "media-3704699",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x"
          ],
          "size": {
            "width": 680,
            "height": 560
          },
          "url": "https://docs-assets.developer.apple.com/published/0c8a4cf17b/rendered2x-1607076663.png"
        }
      ],
      "alt": "Three stacked images of a complex signal. The top and middle images show the signal from the top view and side view respectively and render as composite sine waves. The bottom view show the signal in 3D and renders the signal as a distorted helix.",
      "title": "Figure 1"
    },
    "doc://com.apple.documentation/documentation/accelerate/1450061-vdsp_dft_zop_createsetup": {
      "title": "vDSP_DFT_zop_CreateSetup",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/1450061-vdsp_dft_zop_createsetup",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/1450061-vdsp_dft_zop_createsetup"
    },
    "doc://com.apple.documentation/documentation/accelerate/1450224-vdsp_fft_zip": {
      "title": "vDSP_fft_zip",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/1450224-vdsp_fft_zip",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/1450224-vdsp_fft_zip"
    },
    "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695931": {
      "title": "Listing 1",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695931",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695931"
    },
    "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695932": {
      "title": "Listing 2",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695932",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695932"
    },
    "link-media-3705870": {
      "identifier": "link-media-3705870",
      "type": "link",
      "title": "Figure 2",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3705870"
    },
    "media-3705870": {
      "identifier": "media-3705870",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x"
          ],
          "size": {
            "width": 522,
            "height": 307
          },
          "url": "https://docs-assets.developer.apple.com/published/c63fc6d9d7/rendered2x-1607339767.png"
        }
      ],
      "alt": "Stacked diagram showing a complex signal before and after forward Fourier transform. The time-domain signal is illustrated as two line graphs, and the frequency-domain representation is illustrated as two arrays that store the split-complex values.",
      "title": "Figure 2"
    },
    "link-media-3705867": {
      "identifier": "link-media-3705867",
      "type": "link",
      "title": "Figure 1",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3705867"
    },
    "media-3705867": {
      "identifier": "media-3705867",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x"
          ],
          "size": {
            "width": 680,
            "height": 198
          },
          "url": "https://docs-assets.developer.apple.com/published/2668fed8fe/rendered2x-1607339783.png"
        }
      ],
      "alt": "Two pairs of images that show image data before and after forward Fourier transform. The first pair of images shows a grid of 32 times 32 dots for the spatial-domain representation that corresponds to a single star-like highlight in the top-left of the frequency-domain representation. The second pair of images shows a grid of 128 times 128 dots for the spatial-domain representation that corresponds to a single star-like highlight in the center of the frequency-domain representation ",
      "title": "Figure 1"
    },
    "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695325": {
      "title": "Listing 1",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695325",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695325"
    },
    "doc://com.apple.documentation/documentation/accelerate/1450116-vdsp_fft2d_zrip": {
      "title": "vDSP_fft2d_zrip",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/1450116-vdsp_fft2d_zrip",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/1450116-vdsp_fft2d_zrip"
    },
    "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695324": {
      "title": "Listing 2",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695324",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695324"
    },
    "link-media-3705869": {
      "identifier": "link-media-3705869",
      "type": "link",
      "title": "Figure 2",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3705869"
    },
    "media-3705869": {
      "identifier": "media-3705869",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x"
          ],
          "size": {
            "width": 680,
            "height": 237
          },
          "url": "https://docs-assets.developer.apple.com/published/831b3801d9/rendered2x-1607339778.png"
        }
      ],
      "alt": "Flow diagram showing a matrix of 8 times 8 real pixels forward Fourier transformed with eight horizontal passes. The intermediate result is forward Fourier transformed with two vertical real passes and six vertical complex passes.",
      "title": "Figure 2"
    },
    "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695399": {
      "title": "Perform Fourier Transform on 1D Complex Data",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695399",
      "kind": "article",
      "role": "subsection",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695399"
    },
    "link-media-3696140": {
      "identifier": "link-media-3696140",
      "type": "link",
      "title": "Figure 1",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3696140"
    },
    "media-3696140": {
      "identifier": "media-3696140",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x"
          ],
          "size": {
            "width": 680,
            "height": 339
          },
          "url": "https://docs-assets.developer.apple.com/published/d925711d6c/rendered2x-1603825688.png"
        }
      ],
      "alt": "Pair of images that shows image data before and after forward Fourier transform. The spatial-domain image contains a matrix 16 times 16 yellow dots and a matrix of 64 times 64 blue dots. The frequency-domain representation contains two star-like highlights.",
      "title": "Figure 1"
    },
    "doc://com.apple.documentation/documentation/accelerate/1450430-vdsp_fft2d_zip": {
      "title": "vDSP_fft2d_zip",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/1450430-vdsp_fft2d_zip",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/accelerate/1450430-vdsp_fft2d_zip"
    },
    "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3696222": {
      "title": "Listing 1",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3696222",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3696222"
    },
    "link-media-3696221": {
      "identifier": "link-media-3696221",
      "type": "link",
      "title": "Figure 2",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3696221"
    },
    "media-3696221": {
      "identifier": "media-3696221",
      "type": "image",
      "variants": [
        {
          "traits": [
            "2x"
          ],
          "size": {
            "width": 320,
            "height": 320
          },
          "url": "https://docs-assets.developer.apple.com/published/c5c4b7f367/rendered2x-1603881175.png"
        }
      ],
      "alt": "Image of the frequency-domain representation of the matrix 16 times 16 yellow dots and a matrix of 64 times 64 blue dots. The top-left quadrant represents the positive frequencies and contains two star-like highlights. The other three quadrants represent negative frequencies and are grayed out.",
      "title": "Figure 2"
    },
    "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695949": {
      "title": "Table 1",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695949",
      "kind": "article",
      "role": "table",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695949"
    },
    "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695950": {
      "title": "Listing 1",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695950",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695950"
    },
    "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms": {
      "title": "Data Packing for Fourier Transforms",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms",
      "kind": "article",
      "role": "article",
      "url": "/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms",
      "abstract": [
        {
          "type": "text",
          "text": "Learn how vDSP packs frequency-domain data produced by Fourier transform routines."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_interleaved-complex_data": {
      "title": "Performing Fourier Transforms on Interleaved-Complex Data",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_interleaved-complex_data",
      "kind": "article",
      "role": "article",
      "url": "/documentation/accelerate/performing_fourier_transforms_on_interleaved-complex_data",
      "abstract": [
        {
          "type": "text",
          "text": "Optimize fast Fourier transform (FFT) performance with vDSP’s fixed-length interleaved FFT routines."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/accelerate/finding_the_component_frequencies_in_a_composite_sine_wave": {
      "title": "Finding the Component Frequencies in a Composite Sine Wave",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/finding_the_component_frequencies_in_a_composite_sine_wave",
      "kind": "article",
      "role": "article",
      "url": "/documentation/accelerate/finding_the_component_frequencies_in_a_composite_sine_wave",
      "abstract": [
        {
          "type": "text",
          "text": "Use 1D fast Fourier transform to compute the frequency components of a signal."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/accelerate/halftone_descreening_with_2d_fast_fourier_transform": {
      "title": "Halftone Descreening with 2D Fast Fourier Transform",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/accelerate/halftone_descreening_with_2d_fast_fourier_transform",
      "kind": "article",
      "role": "sampleCode",
      "url": "/documentation/accelerate/halftone_descreening_with_2d_fast_fourier_transform",
      "abstract": [
        {
          "type": "text",
          "text": "Reduce or remove periodic artifacts from images."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "url": "/documentation/technologies",
      "kind": "technologies",
      "title": "Technologies"
    }
  },
  "seeAlsoSections": [
    {
      "identifiers": [
        "doc://com.apple.documentation/documentation/accelerate/performing_fourier_transforms_on_interleaved-complex_data",
        "doc://com.apple.documentation/documentation/accelerate/finding_the_component_frequencies_in_a_composite_sine_wave",
        "doc://com.apple.documentation/documentation/accelerate/halftone_descreening_with_2d_fast_fourier_transform"
      ],
      "title": "Essentials",
      "generated": true
    }
  ],
  "primaryContentSections": [
    {
      "kind": "content",
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "vDSP’s real-to-complex fast Fourier transform (FFT) and discrete Fourier transform (DFT) functions write their output in a special packed format to conserve memory. The code samples below explain how to format source data for and interpret the results from the vDSP Fourier transform functions."
            }
          ]
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Convert Real Values to the Split-Complex Format",
          "anchor": "3694763"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The vDSP FFT and DFT functions work with data in split-complex format. Split-complex format separates the real and imaginary parts of complex numbers into two separate arrays. Given an array, "
            },
            {
              "type": "codeVoice",
              "code": "signal"
            },
            {
              "type": "text",
              "text": ", that contains real values, the following code converts the values to split-complex format. Use "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/1450388-vdsp_ctoz"
            },
            {
              "type": "text",
              "text": " to populate the split collections "
            },
            {
              "type": "codeVoice",
              "code": "complexReals"
            },
            {
              "type": "text",
              "text": " and "
            },
            {
              "type": "codeVoice",
              "code": "complexImaginaries"
            },
            {
              "type": "text",
              "text": " with the real values from "
            },
            {
              "type": "codeVoice",
              "code": "signal"
            },
            {
              "type": "text",
              "text": ":"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "let signal: [Float] = [0, 1, 2, 3, 4, 5, 6, 7]",
            "let complexValuesCount = signal.count / 2",
            "",
            "var complexReals = [Float]()",
            "var complexImaginaries = [Float]()",
            "",
            "signal.withUnsafeBytes { signalPtr in",
            "    complexReals = [Float](unsafeUninitializedCapacity: complexValuesCount) {",
            "        realBuffer, realInitializedCount in",
            "        ",
            "        complexImaginaries = [Float](unsafeUninitializedCapacity: complexValuesCount) {",
            "            imagBuffer, imagInitializedCount in",
            "            ",
            "            var splitComplex = DSPSplitComplex(realp: realBuffer.baseAddress!,",
            "                                               imagp: imagBuffer.baseAddress!)",
            "            ",
            "            vDSP_ctoz([DSPComplex](signalPtr.bindMemory(to: DSPComplex.self)), 2,",
            "                      &splitComplex, 1,",
            "                      vDSP_Length(complexValuesCount))",
            "            ",
            "            imagInitializedCount = complexValuesCount",
            "        }",
            "        realInitializedCount = complexValuesCount",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3694761",
            "title": "Listing 1"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "On return, "
            },
            {
              "type": "codeVoice",
              "code": "complexReals"
            },
            {
              "type": "text",
              "text": " contains the values "
            },
            {
              "type": "codeVoice",
              "code": "[0.0, 2.0, 4.0, 6.0]"
            },
            {
              "type": "text",
              "text": ", and "
            },
            {
              "type": "codeVoice",
              "code": "complexImaginaries"
            },
            {
              "type": "text",
              "text": " contains the values "
            },
            {
              "type": "codeVoice",
              "code": "[1.0, 3.0, 5.0, 7.0]"
            },
            {
              "type": "text",
              "text": ". The following illustrates how "
            },
            {
              "type": "reference",
              "isActive": false,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/1450388-vdsp_ctoz"
            },
            {
              "type": "text",
              "text": " converts the real values to the even-odd split configuration:"
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "image",
              "identifier": "media-3705864",
              "metadata": {
                "anchor": "3705864",
                "title": "Figure 1"
              }
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": []
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Create a Composite Sine Wave",
          "anchor": "3696651"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "All of these examples use the following function to fill an array with values that represent a composite sine wave:"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "/// Returns an array that contains a composite sine wave from the specified frequency-amplitude pairs.",
            "static func makeCompositeSineWave(from frequencyAmplitudePairs: [(f: Float,",
            "                                                                  a: Float)],",
            "                                  count: Int) -> [Float] {",
            "",
            "    return [Float](unsafeUninitializedCapacity: count) {",
            "        buffer, initializedCount in",
            "        ",
            "        /// Fill the buffer with zeros.",
            "        vDSP.fill(&buffer, with: 0)",
            "        /// Create a reusable array that the function uses to calculate the ",
            "        /// sine wave for each iteration.",
            "        var iterationValues = [Float](repeating: 0, count: count)",
            "        ",
            "        for frequencyAmplitudePair in frequencyAmplitudePairs {",
            "            /// Fill the working array with a ramp in the range `0 ..< frequency`.",
            "            vDSP.formRamp(withInitialValue: 0,",
            "                          increment: frequencyAmplitudePair.f / Float(count / 2),",
            "                          result: &iterationValues)",
            "            /// Compute `sin(x * .pi)` for each element.",
            "            vForce.sinPi(iterationValues, result: &iterationValues)",
            "            if frequencyAmplitudePair.a != 1 {",
            "                /// Mulitply each element by the specified amplitude.",
            "                vDSP.multiply(frequencyAmplitudePair.a, iterationValues,",
            "                              result: &iterationValues)",
            "            }",
            "            /// Add this sine wave iteration to the composite sine wave accumulator.",
            "            vDSP.add(iterationValues, buffer, result: &buffer)",
            "        }",
            "        ",
            "        initializedCount = count",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3696652",
            "title": "Listing 1"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The following figure visualizes the values of a 1024 element array returned by "
            },
            {
              "type": "codeVoice",
              "code": "makeCompositeSineWave()"
            },
            {
              "type": "text",
              "text": " with the frequency-amplitude pairs"
            },
            {
              "type": "codeVoice",
              "code": " [(f: 2, a: 1.5), (f: 8, a: 1.0)]:"
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "image",
              "identifier": "media-3696650",
              "metadata": {
                "anchor": "3696650",
                "title": "Figure 1"
              }
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "codeVoice",
              "code": ""
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "codeVoice",
              "code": ""
            }
          ]
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Perform Fourier Transform on 1D Real Data in Split-Complex Format",
          "anchor": "3694764"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The following code populates the real "
            },
            {
              "type": "codeVoice",
              "code": "signal"
            },
            {
              "type": "text",
              "text": " array with a composite of four sine waves and creates empty arrays for the complex values:"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "let realValuesCount = 32",
            "let signal: [Float] = makeCompositeSineWave(from: [(f: 1, a: 1),",
            "                                                   (f: 5, a: 1),",
            "                                                   (f: 10, a: 1),",
            "                                                   (f: 15, a: 1)],",
            "                                            count: realValuesCount)",
            "",
            "let complexValuesCount = realValuesCount / 2",
            "var complexReals = [Float](repeating: 0,",
            "                           count: complexValuesCount)",
            "var complexImaginaries = [Float](repeating: 0,",
            "                                 count: complexValuesCount)"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3694768",
            "title": "Listing 3"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Use "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/1450150-vdsp_fft_zrip"
            },
            {
              "type": "text",
              "text": " to perform an in-place fast Fourier transform (FFT) on the real values. In this example, the "
            },
            {
              "type": "reference",
              "isActive": false,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/1450388-vdsp_ctoz"
            },
            {
              "type": "text",
              "text": " function uses a "
            },
            {
              "type": "codeVoice",
              "code": "DSPSplitComplex"
            },
            {
              "type": "text",
              "text": " structure as an intermediatory to populate the "
            },
            {
              "type": "codeVoice",
              "code": "complexReals"
            },
            {
              "type": "text",
              "text": " and "
            },
            {
              "type": "codeVoice",
              "code": "complexImaginaries"
            },
            {
              "type": "text",
              "text": " arrays."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "signal.withUnsafeBytes { signalPtr in",
            "    complexReals.withUnsafeMutableBufferPointer { realPtr in",
            "        complexImaginaries.withUnsafeMutableBufferPointer { imagPtr in",
            "            var splitComplex = DSPSplitComplex(realp: realPtr.baseAddress!,",
            "                                               imagp: imagPtr.baseAddress!)",
            "            ",
            "            vDSP_ctoz([DSPComplex](signalPtr.bindMemory(to: DSPComplex.self)), 2,",
            "                      &splitComplex, 1,",
            "                      vDSP_Length(complexValuesCount))",
            "            ",
            "            let log2n = vDSP_Length(log2(Float(realValuesCount)))",
            "            if let fft = vDSP_create_fftsetup(log2n, FFTRadix(kFFTRadix2)) {",
            "                vDSP_fft_zrip(fft,",
            "                              &splitComplex, 1,",
            "                              log2n,",
            "                              FFTDirection(kFFTDirection_Forward))",
            "                ",
            "                vDSP_destroy_fftsetup(fft)",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3694765",
            "title": "Listing 4"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Alternatively, use "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/1449739-vdsp_dft_zrop_createsetup"
            },
            {
              "type": "text",
              "text": " to create an object that performs a discrete Fourier transform on the real values:"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "signal.withUnsafeBytes { signalPtr in",
            "    complexReals.withUnsafeMutableBufferPointer { realPtr in",
            "        complexImaginaries.withUnsafeMutableBufferPointer { imagPtr in",
            "            var splitComplex = DSPSplitComplex(realp: realPtr.baseAddress!,",
            "                                               imagp: imagPtr.baseAddress!)",
            "            ",
            "            vDSP_ctoz([DSPComplex](signalPtr.bindMemory(to: DSPComplex.self)), 2,",
            "                      &splitComplex, 1,",
            "                      vDSP_Length(complexValuesCount))",
            "",
            "            if let dft = vDSP_DFT_zrop_CreateSetup(nil,",
            "                                                   vDSP_Length(realValuesCount),",
            "                                                   .FORWARD) {",
            "                vDSP_DFT_Execute(dft,",
            "                                 realPtr.baseAddress!, imagPtr.baseAddress!,",
            "                                 realPtr.baseAddress!, imagPtr.baseAddress!)",
            "                vDSP_DFT_DestroySetup(dft)",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3695356",
            "title": "Listing 5"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The result of a forward Fourier transform on "
            },
            {
              "type": "codeVoice",
              "code": "n"
            },
            {
              "type": "text",
              "text": " real values is "
            },
            {
              "type": "codeVoice",
              "code": "n"
            },
            {
              "type": "text",
              "text": " complex values:"
            }
          ]
        },
        {
          "type": "unorderedList",
          "items": [
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "Complex element "
                    },
                    {
                      "type": "codeVoice",
                      "code": "0"
                    },
                    {
                      "type": "text",
                      "text": " contains the DC component (equal to the sum of the time domain values) in its real part and zero in its imaginary part."
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "Complex elements "
                    },
                    {
                      "type": "codeVoice",
                      "code": "1"
                    },
                    {
                      "type": "text",
                      "text": " through "
                    },
                    {
                      "type": "codeVoice",
                      "code": "n/2"
                    },
                    {
                      "type": "text",
                      "text": " contain the complex frequency-domain values."
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "Complex element "
                    },
                    {
                      "type": "codeVoice",
                      "code": "n/2 + 1"
                    },
                    {
                      "type": "text",
                      "text": " contains the Nyquist component (the cosine component coefficient at the Nyquist frequency) in its real part and zero in its imaginary part."
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "The remaining complex elements contain the complex conjugates of the complex frequency-domain values."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "vDSP exploits the zeros in the DC and Nyquist elements and the symmetry of the complex conjugates. The Fourier transform routines represent the frequency-domain data in "
            },
            {
              "type": "codeVoice",
              "code": "n/2"
            },
            {
              "type": "text",
              "text": " complex values. They achieve this by placing the real Nyquist component in the imaginary part of the DC element and omitting the complex conjugates:"
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "image",
              "identifier": "media-3705871",
              "metadata": {
                "anchor": "3705871",
                "title": "Figure 3"
              }
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The following figure illustrates the frequency-domain result from performing a forward transform on the signal data that contains the four composite sine waves."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "image",
              "identifier": "media-3705868",
              "metadata": {
                "anchor": "3705868",
                "title": "Figure 4"
              }
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The indices of the nonzero elements in the frequency-domain data are the sine wave frequencies in the original time-domain signal: "
            },
            {
              "type": "codeVoice",
              "code": "1"
            },
            {
              "type": "text",
              "text": " , "
            },
            {
              "type": "codeVoice",
              "code": "5"
            },
            {
              "type": "text",
              "text": ", "
            },
            {
              "type": "codeVoice",
              "code": "10"
            },
            {
              "type": "text",
              "text": ", and "
            },
            {
              "type": "codeVoice",
              "code": "15"
            },
            {
              "type": "text",
              "text": "."
            }
          ]
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Convert Interleaved-Complex to the Split-Complex Format",
          "anchor": "3696653"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Given an array, "
            },
            {
              "type": "codeVoice",
              "code": "interleavedComplex"
            },
            {
              "type": "text",
              "text": ", that contains interleaved complex compex values, the following code converts the values to split-complex format. Use "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/1450388-vdsp_ctoz"
            },
            {
              "type": "text",
              "text": " to populate the split collections "
            },
            {
              "type": "codeVoice",
              "code": "complexReals"
            },
            {
              "type": "text",
              "text": " and "
            },
            {
              "type": "codeVoice",
              "code": "complexImaginaries"
            },
            {
              "type": "text",
              "text": " with the complex values from "
            },
            {
              "type": "codeVoice",
              "code": "interleavedComplex"
            },
            {
              "type": "text",
              "text": ":"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "let interleavedComplex: [DSPComplex] = [DSPComplex(real: 0, imag: 1),",
            "                                        DSPComplex(real: 2, imag: 3),",
            "                                        DSPComplex(real: 4, imag: 5),",
            "                                        DSPComplex(real: 6, imag: 6)]",
            "",
            "let count = interleavedComplex.count",
            "",
            "var complexImaginaries = [Float]()",
            "var complexReals = [Float](unsafeUninitializedCapacity: count) {",
            "    realBuffer, realInitializedCount in",
            "    ",
            "    complexImaginaries = [Float](unsafeUninitializedCapacity: count) {",
            "        imagBuffer, imagInitializedCount in",
            "        ",
            "        var splitComplex = DSPSplitComplex(realp: realBuffer.baseAddress!,",
            "                                           imagp: imagBuffer.baseAddress!)",
            "        ",
            "        vDSP_ctoz(interleavedComplex, 2,",
            "                  &splitComplex, 1,",
            "                  vDSP_Length(count))",
            "",
            "        imagInitializedCount = count",
            "    }",
            "    ",
            "    realInitializedCount = count",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3696654",
            "title": "Listing 1"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "On return, "
            },
            {
              "type": "codeVoice",
              "code": "complexReals"
            },
            {
              "type": "text",
              "text": " contains the values "
            },
            {
              "type": "codeVoice",
              "code": "[0.0, 2.0, 4.0, 6.0]"
            },
            {
              "type": "text",
              "text": ", and "
            },
            {
              "type": "codeVoice",
              "code": "complexImaginaries"
            },
            {
              "type": "text",
              "text": " contains the values ["
            },
            {
              "type": "codeVoice",
              "code": "1.0, 3.0, 5.0, 7.0]"
            },
            {
              "type": "text",
              "text": ". The following illustrates how "
            },
            {
              "type": "codeVoice",
              "code": "vDSP_ctoz(_:_:_:_:_:)"
            },
            {
              "type": "text",
              "text": " converts the interleaved values to the even-odd split configuration:"
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "image",
              "identifier": "media-3705866",
              "metadata": {
                "anchor": "3705866",
                "title": "Figure 1"
              }
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": []
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Perform Fourier Transform on 1D Complex Data",
          "anchor": "3695399"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The following figure shows a representation of time-domain complex data. The real part and imaginary part contain distinct composite sine waves:"
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "image",
              "identifier": "media-3704699",
              "metadata": {
                "anchor": "3704699",
                "title": "Figure 1"
              }
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Use "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/1450061-vdsp_dft_zop_createsetup"
            },
            {
              "type": "text",
              "text": " to create a DFT object for a complex transform, or call "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/1450224-vdsp_fft_zip"
            },
            {
              "type": "text",
              "text": " to perform a complex FFT in-place. The following code creates a complex signal and performs a forward DFT:"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "let complexValuesCount = 16",
            "",
            "let realFrequencyAmplitudePairs: [(f: Float, a: Float)] = [(3, 1), (5, 0.2)]",
            "var complexReals = makeCompositeSineWave(from: realFrequencyAmplitudePairs,",
            "                                         count: complexValuesCount)",
            "",
            "let imaginaryFrequencyAmplitudePairs: [(f: Float, a: Float)] = [(4, 1), (7, 0.25)]",
            "var complexImaginaries = makeCompositeSineWave(from: imaginaryFrequencyAmplitudePairs,",
            "                                               count: complexValuesCount)",
            "",
            "if let dft = vDSP_DFT_zop_CreateSetup(nil,",
            "                                      vDSP_Length(complexValuesCount),",
            "                                      .FORWARD) {",
            "    ",
            "    vDSP_DFT_Execute(dft,",
            "                     complexReals,",
            "                     complexImaginaries,",
            "                     &complexReals,",
            "                     &complexImaginaries)",
            "    ",
            "    vDSP_DFT_DestroySetup(dft)",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3695931",
            "title": "Listing 1"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "On return, "
            },
            {
              "type": "codeVoice",
              "code": "complexReals"
            },
            {
              "type": "text",
              "text": " and "
            },
            {
              "type": "codeVoice",
              "code": "complexImaginaries"
            },
            {
              "type": "text",
              "text": " contain the following values:"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "Reals:",
            "[ 0.0, 0.0, 0.0,  8.0,  8.0,  1.6,  0.0,  2.0, 0.0,  2.0, 0.0, 1.6,  8.0, 8.0,  0.0, 0.0 ]",
            "Imaginaries:",
            "[ 0.0, 0.0, 0.0, -8.0, -0.0, -1.6, -0.0, -0.0, 0.0, -0.0, 0.0, 1.6, -0.0, 8.0, -0.0, -0.0]"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3695932",
            "title": "Listing 2"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The indices of the nonzero magnitudes indicate the component frequencies: "
            },
            {
              "type": "codeVoice",
              "code": "3"
            },
            {
              "type": "text",
              "text": ", "
            },
            {
              "type": "codeVoice",
              "code": "4"
            },
            {
              "type": "text",
              "text": ", "
            },
            {
              "type": "codeVoice",
              "code": "5"
            },
            {
              "type": "text",
              "text": ", and "
            },
            {
              "type": "codeVoice",
              "code": "7"
            },
            {
              "type": "text",
              "text": "."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The following figure shows the layout of the frequencydomain data. The DC and Nyquist components contain real and imaginary parts. The elements "
            },
            {
              "type": "codeVoice",
              "code": "0"
            },
            {
              "type": "text",
              "text": " to "
            },
            {
              "type": "codeVoice",
              "code": "n/2 -1"
            },
            {
              "type": "text",
              "text": " contain the positive frequncy values, and the elements "
            },
            {
              "type": "codeVoice",
              "code": "n/2 + "
            },
            {
              "type": "text",
              "text": "1 to "
            },
            {
              "type": "codeVoice",
              "code": "n - 1"
            },
            {
              "type": "text",
              "text": " contain the negative frequency values."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "image",
              "identifier": "media-3705870",
              "metadata": {
                "anchor": "3705870",
                "title": "Figure 2"
              }
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": []
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Perform Fourier Transform on 2D Real Data",
          "anchor": "3695322"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "vDSP provides routines for you can use to compute the FFT of 2D real data such as single-channel images. The following figure shows the original, spatial-domain representations of grids of dots with their frequency-domain counterparts:"
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "image",
              "identifier": "media-3705867",
              "metadata": {
                "anchor": "3705867",
                "title": "Figure 1"
              }
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Use "
            },
            {
              "type": "reference",
              "isActive": false,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/1450388-vdsp_ctoz"
            },
            {
              "type": "text",
              "text": " to convert real spatial-domain values, for example, pixel intensities, to complex values. The real part of each complex value contains the even pixels values, and the imaginary part of each complex value contains the odd pixel values. The following shows the code required to define the width and height of the matrix of complex values for a 512 x 512 real matrix:"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "let realDimension = 512",
            "let complexValuesWidth = realDimension / 2",
            "let complexValuesHeight = realDimension"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3695325",
            "title": "Listing 1"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Use "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/1450116-vdsp_fft2d_zrip"
            },
            {
              "type": "text",
              "text": " to perform the forward FFT in-place. In this example, "
            },
            {
              "type": "codeVoice",
              "code": "imageData"
            },
            {
              "type": "text",
              "text": " is an array that contains "
            },
            {
              "type": "codeVoice",
              "code": "realDimension * realDimension"
            },
            {
              "type": "text",
              "text": " real pixel values."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "let complexElementCount = complexValuesWidth * complexValuesHeight",
            "var complexReals = [Float]()",
            "var complexImaginaries = [Float]()",
            "",
            "imageData.withUnsafeBytes { imageDataPtr in",
            "    complexReals = [Float](unsafeUninitializedCapacity: complexElementCount) {",
            "        realBuffer, realInitializedCount in",
            "        complexImaginaries = [Float](unsafeUninitializedCapacity: complexElementCount) {",
            "            imagBuffer, imagInitializedCount in",
            "            ",
            "            var splitComplex = DSPSplitComplex(",
            "                realp: realBuffer.baseAddress!,",
            "                imagp: imagBuffer.baseAddress!)",
            "            ",
            "            vDSP_ctoz([DSPComplex](imageDataPtr.bindMemory(to: DSPComplex.self)), 2,",
            "                      &splitComplex, 1,",
            "                      vDSP_Length(complexValuesWidth * complexValuesHeight))",
            "            ",
            "            // The binary logarithm of `max(rowCount, columnCount)`.",
            "            let countLog2n = vDSP_Length(log2(Float(realDimension)))",
            "            if let fft = vDSP_create_fftsetup(countLog2n, FFTRadix(kFFTRadix2)) {",
            "       ",
            "                let dimensionLog2n = vDSP_Length(log2(Float(realDimension)))",
            "                vDSP_fft2d_zrip(fft, &splitComplex,",
            "                                1, 0,",
            "                                dimensionLog2n, dimensionLog2n,",
            "                                FFTDirection(kFFTDirection_Forward))",
            "                ",
            "                vDSP_destroy_fftsetup(fft)",
            "            }",
            "",
            "            imagInitializedCount = complexElementCount",
            "        }",
            "        realInitializedCount = complexElementCount",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3695324",
            "title": "Listing 2"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The 2D FFT operates on real data by first transforming each row. This transform generates real values — the DC and Nyquist component of each row — in the first two elements of each row. The second pass of the transform computes the FFT for each column. The first two columns contain real values and vDSP uses the real transform routines. Subsequent columns contain complex values and vDSP uses the complex transform routines."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "image",
              "identifier": "media-3705869",
              "metadata": {
                "anchor": "3705869",
                "title": "Figure 2"
              }
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "As explained in "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/fast_fourier_transforms/data_packing_for_fourier_transforms#3695399"
            },
            {
              "type": "text",
              "text": " above, the complex elements "
            },
            {
              "type": "codeVoice",
              "code": "n/2 + "
            },
            {
              "type": "text",
              "text": "1 to "
            },
            {
              "type": "codeVoice",
              "code": "n - 1"
            },
            {
              "type": "text",
              "text": " contain the negative frequency values. This means that the for tasks such as visualizing the frequency-domain representation of 2D real data, you may be able to discard the bottom "
            },
            {
              "type": "codeVoice",
              "code": "n/2"
            },
            {
              "type": "text",
              "text": " rows."
            }
          ]
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Perform Fourier Transform on 2D Complex Data",
          "anchor": "3696136"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "vDSP provides functions for performing Fourier transforms on 2D complex data, such as two-channel images. The following shows the spatial-domain representation of 2D complex data with low-frequency data in the red and green channels, and high-frequency data in the blue channel. The frequency-domain representation shows the magnitude of the complex values."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "image",
              "identifier": "media-3696140",
              "metadata": {
                "anchor": "3696140",
                "title": "Figure 1"
              }
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Use "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/accelerate/1450430-vdsp_fft2d_zip"
            },
            {
              "type": "text",
              "text": " to perform a complex FFT on 2D complex data."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "let complexDimension = 512",
            "     ",
            "var complexReals = [Float](repeating: 0,",
            "                           count: complexDimension * complexDimension)",
            "var complexImaginaries = [Float](repeating: 0,",
            "                                 count: complexDimension * complexDimension)",
            "",
            "// Populate `complexReals` and `complexImaginaries` with 2D complex data.",
            " ",
            "complexReals.withUnsafeMutableBufferPointer { realPtr in",
            "    complexImaginaries.withUnsafeMutableBufferPointer { imagPtr in",
            "        ",
            "        var splitComplex = DSPSplitComplex(",
            "            realp: realPtr.baseAddress!,",
            "            imagp: imagPtr.baseAddress!)",
            "        ",
            "        // The binary logarithm of `max(rowCount, columnCount)`.",
            "        let countLog2n = vDSP_Length(log2(Float(complexDimension)))",
            "        if let fft = vDSP_create_fftsetup(countLog2n, FFTRadix(kFFTRadix2)) {",
            "            ",
            "            // The binary logarithm of the width or height of the 2D matrix.",
            "            let dimensionLog2n = vDSP_Length(log2(Float(complexDimension)))",
            "            vDSP_fft2d_zip(fft, &splitComplex,",
            "                           1, 0,",
            "                           dimensionLog2n, dimensionLog2n,",
            "                           FFTDirection(kFFTDirection_Forward))",
            "            ",
            "            vDSP_destroy_fftsetup(fft)",
            "        }",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3696222",
            "title": "Listing 1"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "On return, "
            },
            {
              "type": "codeVoice",
              "code": "complexReals"
            },
            {
              "type": "text",
              "text": " and "
            },
            {
              "type": "codeVoice",
              "code": "complexImaginaries"
            },
            {
              "type": "text",
              "text": " contain the frequency-domain representation of the complex data. Because both the horizontal pass and the vertical pass are complex FFTs, the right "
            },
            {
              "type": "codeVoice",
              "code": "n/2"
            },
            {
              "type": "text",
              "text": " columns and the bottom "
            },
            {
              "type": "codeVoice",
              "code": "n/2"
            },
            {
              "type": "text",
              "text": " rows contain the negative frequencies:"
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "image",
              "identifier": "media-3696221",
              "metadata": {
                "anchor": "3696221",
                "title": "Figure 2"
              }
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": []
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Scale Time- and Frequency-Domain Data",
          "anchor": "3695951"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "To provide the best execution performance, vDSP’s Fourier routines don’t scale transform results. The following table summarizes the scaling factor for the vDSP FFT and DFT operations:"
            }
          ]
        },
        {
          "type": "table",
          "header": "both",
          "rows": [
            [
              [
                {
                  "type": "paragraph",
                  "inlineContent": []
                }
              ],
              [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "1D"
                    }
                  ]
                }
              ],
              [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "2D"
                    }
                  ]
                }
              ]
            ],
            [
              [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "Real forward transform"
                    }
                  ]
                }
              ],
              [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "2"
                    }
                  ]
                }
              ],
              [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "2"
                    }
                  ]
                }
              ]
            ],
            [
              [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "Real inverse transform"
                    }
                  ]
                }
              ],
              [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "Number of real elements"
                    }
                  ]
                }
              ],
              [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "Number of real elements (rows x columns)"
                    }
                  ]
                }
              ]
            ],
            [
              [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "Complex forward transform"
                    }
                  ]
                }
              ],
              [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "1"
                    }
                  ]
                }
              ],
              [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "1"
                    }
                  ]
                }
              ]
            ],
            [
              [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "Complex inverse transform"
                    }
                  ]
                }
              ],
              [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "Number of complex elements"
                    }
                  ]
                }
              ],
              [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "Number of complex elements (rows x columns)"
                    }
                  ]
                }
              ]
            ]
          ],
          "metadata": {
            "anchor": "3695949",
            "title": "Table 1"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "For example, the following code performs a forward transform and an inverse transform on 8 real elements. The code multiplies the frequency domain data by "
            },
            {
              "type": "codeVoice",
              "code": "1/2"
            },
            {
              "type": "text",
              "text": ", and the time-domain data by "
            },
            {
              "type": "codeVoice",
              "code": "1/n"
            },
            {
              "type": "text",
              "text": ". The result is identical to the original data:"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "let realValuesCount = 8",
            "",
            "// The result of `vDSP_ctoz` on `[0, 1, 2, 3, 4, 5, 6, 7]`.",
            "var complexReals: [Float] = [0, 2, 4, 6]",
            "var complexImaginaries: [Float] = [1, 3, 5, 7]",
            "",
            "// Perform forward transform.",
            "if let dft = vDSP_DFT_zrop_CreateSetup(nil,",
            "                                       vDSP_Length(realValuesCount),",
            "                                       .FORWARD) {",
            "    vDSP_DFT_Execute(dft,",
            "                     complexReals, complexImaginaries,",
            "                     &complexReals, &complexImaginaries)",
            "    ",
            "    vDSP_DFT_DestroySetup(dft)",
            "}",
            "",
            "// Apply real forward scaling factor (2).",
            "vDSP.multiply(1 / 2, complexReals, result: &complexReals)",
            "vDSP.multiply(1 / 2, complexImaginaries, result: &complexImaginaries)",
            "",
            "// Perform inverse transform.",
            "if let dft = vDSP_DFT_zrop_CreateSetup(nil,",
            "                                       vDSP_Length(realValuesCount),",
            "                                       .INVERSE) {",
            "    vDSP_DFT_Execute(dft,",
            "                     complexReals, complexImaginaries,",
            "                     &complexReals, &complexImaginaries)",
            "    ",
            "    vDSP_DFT_DestroySetup(dft)",
            "}",
            "",
            "// Apply real inverse scaling factor (n).",
            "vDSP.multiply(1 / Float(realValuesCount), complexReals, result: &complexReals)",
            "vDSP.multiply(1 / Float(realValuesCount), complexImaginaries, result: &complexImaginaries)",
            "",
            "print(complexReals) // Prints \"[0.0, 2.0, 4.0, 6.0]\".",
            "print(complexImaginaries) // Prints \"[1.0, 3.0, 5.0, 7.0]\"."
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3695950",
            "title": "Listing 1"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": []
        }
      ]
    }
  ],
  "legalNotices": {
    "copyright": "Copyright &copy; 2020 Apple Inc. All rights reserved.",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy"
  }
}