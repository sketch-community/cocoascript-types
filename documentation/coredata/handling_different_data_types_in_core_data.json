{
  "abstract": [
    {
      "type": "text",
      "text": "Create, store, and present records for a variety of data types."
    }
  ],
  "documentVersion": 0,
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.documentation/documentation/coredata"
      ]
    ]
  },
  "identifier": {
    "url": "doc://com.apple.documentation/documentation/coredata/handling_different_data_types_in_core_data",
    "interfaceLanguage": "occ"
  },
  "legacy_identifier": 3525040,
  "kind": "article",
  "metadata": {
    "title": "Handling Different Data Types in Core Data",
    "role": "sampleCode",
    "roleHeading": "Sample Code",
    "modules": [
      {
        "name": "Core Data"
      }
    ],
    "platforms": [
      {
        "name": "iOS",
        "introducedAt": "13.2",
        "current": "15.2"
      },
      {
        "name": "iPadOS",
        "introducedAt": "13.2",
        "current": "15.2"
      },
      {
        "name": "Xcode",
        "introducedAt": "11.4",
        "current": "13.2"
      },
      {
        "name": "Mac Catalyst",
        "introducedAt": "13.0",
        "current": "15.2"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ],
      "paths": [
        "documentation/coredata/handling_different_data_types_in_core_data"
      ]
    },
    {
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ],
      "paths": [
        "documentation/coredata/handling_different_data_types_in_core_data"
      ]
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/coredata": {
      "title": "Core Data",
      "identifier": "doc://com.apple.documentation/documentation/coredata",
      "url": "/documentation/coredata",
      "type": "topic",
      "kind": "symbol",
      "role": "collection"
    },
    "doc://com.apple.documentation/documentation/coredata/handling_different_data_types_in_core_data#3582159": {
      "title": "Listing 1",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/coredata/handling_different_data_types_in_core_data#3582159",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/coredata/handling_different_data_types_in_core_data#3582159"
    },
    "doc://com.apple.documentation/documentation/coredata/handling_different_data_types_in_core_data#3582160": {
      "title": "Listing 2",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/coredata/handling_different_data_types_in_core_data#3582160",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/coredata/handling_different_data_types_in_core_data#3582160"
    },
    "doc://com.apple.documentation/documentation/swift/cocoa_design_patterns/using_key-value_observing_in_swift": {
      "title": "Using Key-Value Observing in Swift",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/swift/cocoa_design_patterns/using_key-value_observing_in_swift",
      "kind": "article",
      "role": "article",
      "url": "/documentation/swift/cocoa_design_patterns/using_key-value_observing_in_swift"
    },
    "doc://com.apple.documentation/documentation/coredata/handling_different_data_types_in_core_data#3582161": {
      "title": "Listing 3",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/coredata/handling_different_data_types_in_core_data#3582161",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/coredata/handling_different_data_types_in_core_data#3582161"
    },
    "doc://com.apple.documentation/documentation/coredata/handling_different_data_types_in_core_data#3582163": {
      "title": "Listing 4",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/coredata/handling_different_data_types_in_core_data#3582163",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/coredata/handling_different_data_types_in_core_data#3582163"
    },
    "doc://com.apple.documentation/documentation/coredata/handling_different_data_types_in_core_data#3582165": {
      "title": "Listing 5",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/coredata/handling_different_data_types_in_core_data#3582165",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/coredata/handling_different_data_types_in_core_data#3582165"
    },
    "doc://com.apple.documentation/documentation/coredata/handling_different_data_types_in_core_data#3582168": {
      "title": "Listing 6",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/coredata/handling_different_data_types_in_core_data#3582168",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/coredata/handling_different_data_types_in_core_data#3582168"
    },
    "doc://com.apple.documentation/documentation/coredata/handling_different_data_types_in_core_data#3582169": {
      "title": "Listing 7",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/coredata/handling_different_data_types_in_core_data#3582169",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/coredata/handling_different_data_types_in_core_data#3582169"
    },
    "doc://com.apple.documentation/documentation/coredata/creating_a_core_data_model": {
      "title": "Creating a Core Data Model",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/coredata/creating_a_core_data_model",
      "kind": "article",
      "role": "article",
      "url": "/documentation/coredata/creating_a_core_data_model",
      "abstract": [
        {
          "type": "text",
          "text": "Define your app’s object structure with a data model file."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/coredata/setting_up_a_core_data_stack": {
      "title": "Setting Up a Core Data Stack",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/coredata/setting_up_a_core_data_stack",
      "kind": "article",
      "role": "article",
      "url": "/documentation/coredata/setting_up_a_core_data_stack",
      "abstract": [
        {
          "type": "text",
          "text": "Set up the classes that manage and persist your app’s objects."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/coredata/core_data_stack": {
      "title": "Core Data Stack",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/coredata/core_data_stack",
      "kind": "article",
      "role": "collectionGroup",
      "url": "/documentation/coredata/core_data_stack",
      "abstract": [
        {
          "type": "text",
          "text": "Manage and persist your app’s model layer."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/coredata/handling_different_data_types_in_core_data": {
      "title": "Handling Different Data Types in Core Data",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/coredata/handling_different_data_types_in_core_data",
      "kind": "article",
      "role": "sampleCode",
      "url": "/documentation/coredata/handling_different_data_types_in_core_data",
      "abstract": [
        {
          "type": "text",
          "text": "Create, store, and present records for a variety of data types."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/coredata/linking_data_between_two_core_data_stores": {
      "title": "Linking Data Between Two Core Data Stores",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/coredata/linking_data_between_two_core_data_stores",
      "kind": "article",
      "role": "sampleCode",
      "url": "/documentation/coredata/linking_data_between_two_core_data_stores",
      "abstract": [
        {
          "type": "text",
          "text": "Organize data in two different stores and implement a link between them."
        }
      ]
    },
    "https://docs-assets.developer.apple.com/published/cab5552988/HandlingDifferentDataTypesInCoreData.zip": {
      "type": "download",
      "identifier": "https://docs-assets.developer.apple.com/published/cab5552988/HandlingDifferentDataTypesInCoreData.zip",
      "checksum": "04cd43eee680c77167928bf71041bee515d08fd02bfb6759e3ebda85cd350efb3692c86610ce2ba67ffcd0053c329c168c6028d20519bb7921374c9f7609b46f",
      "url": "https://docs-assets.developer.apple.com/published/cab5552988/HandlingDifferentDataTypesInCoreData.zip"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "url": "/documentation/technologies",
      "kind": "technologies",
      "title": "Technologies"
    }
  },
  "sampleCodeDownload": {
    "action": {
      "overridingTitle": "Download",
      "type": "reference",
      "isActive": true,
      "identifier": "https://docs-assets.developer.apple.com/published/cab5552988/HandlingDifferentDataTypesInCoreData.zip"
    }
  },
  "seeAlsoSections": [
    {
      "identifiers": [
        "doc://com.apple.documentation/documentation/coredata/creating_a_core_data_model",
        "doc://com.apple.documentation/documentation/coredata/setting_up_a_core_data_stack",
        "doc://com.apple.documentation/documentation/coredata/core_data_stack",
        "doc://com.apple.documentation/documentation/coredata/linking_data_between_two_core_data_stores"
      ],
      "title": "Essentials",
      "generated": true
    }
  ],
  "primaryContentSections": [
    {
      "kind": "content",
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Many apps need to persist and present different kinds of information. Core Data provides different attributes, including those common for all databases, such as "
            },
            {
              "type": "codeVoice",
              "code": "Date"
            },
            {
              "type": "text",
              "text": " or "
            },
            {
              "type": "codeVoice",
              "code": "Decimal"
            },
            {
              "type": "text",
              "text": " type, and non-standard attributes handled with "
            },
            {
              "type": "codeVoice",
              "code": "Transformable"
            },
            {
              "type": "text",
              "text": " type. It also provides "
            },
            {
              "type": "codeVoice",
              "code": "Transient"
            },
            {
              "type": "text",
              "text": " and "
            },
            {
              "type": "codeVoice",
              "code": "Derived"
            },
            {
              "type": "text",
              "text": " attributes so apps can derive one piece of data from the other."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "This sample shows how to handle all these data types, by creating and presenting a set of book records. After you launch it, this sample automatically generates the records if they don’t already exist, and shows them in a list. The records are grouped by their published month and can be searched with their canonical form of title."
            }
          ]
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Derive a Non-Persistent Value Using a Transient Attribute",
          "anchor": "3582172"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "A "
            },
            {
              "type": "codeVoice",
              "code": "Transient"
            },
            {
              "type": "text",
              "text": " attribute is derived from one or multiple stored attributes in the same entity. As its name implies, a "
            },
            {
              "type": "codeVoice",
              "code": "Transient"
            },
            {
              "type": "text",
              "text": " attribute isn’t persisted to the store, so an app can use it to provide a new attribute based on the stored ones, without consuming extra storage space."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "To make an attribute "
            },
            {
              "type": "codeVoice",
              "code": "Transient"
            },
            {
              "type": "text",
              "text": ", select the Core Data model in Xcode Project Navigator, navigate to the Core Data entity, select the attribute in the attributes list, and check the "
            },
            {
              "type": "codeVoice",
              "code": "Transient"
            },
            {
              "type": "text",
              "text": " box in the Data Model Inspector."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "In this sample, "
            },
            {
              "type": "codeVoice",
              "code": "publishMonthID"
            },
            {
              "type": "text",
              "text": " is a "
            },
            {
              "type": "codeVoice",
              "code": "Transient"
            },
            {
              "type": "text",
              "text": " attribute derived from "
            },
            {
              "type": "codeVoice",
              "code": "publishDate"
            },
            {
              "type": "text",
              "text": ". To implement the derivation, this sample provides a custom accessor for "
            },
            {
              "type": "codeVoice",
              "code": "publishDate"
            },
            {
              "type": "text",
              "text": " and "
            },
            {
              "type": "codeVoice",
              "code": "publishMonthID"
            },
            {
              "type": "text",
              "text": ". The "
            },
            {
              "type": "codeVoice",
              "code": "setter"
            },
            {
              "type": "text",
              "text": " method of "
            },
            {
              "type": "codeVoice",
              "code": "publishDate"
            },
            {
              "type": "text",
              "text": " nullifies "
            },
            {
              "type": "codeVoice",
              "code": "primitivePublishMonthID"
            },
            {
              "type": "text",
              "text": ", which allows the "
            },
            {
              "type": "codeVoice",
              "code": "getter"
            },
            {
              "type": "text",
              "text": " method of "
            },
            {
              "type": "codeVoice",
              "code": "publishMonthID"
            },
            {
              "type": "text",
              "text": " to recalculate the value based on the current "
            },
            {
              "type": "codeVoice",
              "code": "publishDate"
            },
            {
              "type": "text",
              "text": "."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "@objc public var publishDate: Date? {",
            "    get {",
            "        willAccessValue(forKey: Name.publishDate)",
            "        defer { didAccessValue(forKey: Name.publishDate) }",
            "        return primitivePublishDate",
            "    }",
            "    set {",
            "        willChangeValue(forKey: Name.publishDate)",
            "        defer { didChangeValue(forKey: Name.publishDate) }",
            "        primitivePublishDate = newValue",
            "        primitivePublishMonthID = nil",
            "    }",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3582159",
            "title": "Listing 1"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The "
            },
            {
              "type": "codeVoice",
              "code": "getter"
            },
            {
              "type": "text",
              "text": " method of "
            },
            {
              "type": "codeVoice",
              "code": "publishMonthID"
            },
            {
              "type": "text",
              "text": " recalculates the value if "
            },
            {
              "type": "codeVoice",
              "code": "primitivePublishMonthID"
            },
            {
              "type": "text",
              "text": " is nil."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "@objc public var publishMonthID: String? {",
            "    willAccessValue(forKey: Name.publishMonthID)",
            "    defer { didAccessValue(forKey: Name.publishMonthID) }",
            "    ",
            "    guard primitivePublishMonthID == nil, let date = primitivePublishDate else {",
            "        return primitivePublishMonthID",
            "    }",
            "    let calendar = Calendar(identifier: .gregorian)",
            "    let components = calendar.dateComponents([.year, .month], from: date)",
            "    if let year = components.year, let month = components.month {",
            "        primitivePublishMonthID = \"\\(year * 1000 + month)\"",
            "    }",
            "    return primitivePublishMonthID",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3582160",
            "title": "Listing 2"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "With these two methods, "
            },
            {
              "type": "codeVoice",
              "code": "publishMonthID"
            },
            {
              "type": "text",
              "text": " is associated with "
            },
            {
              "type": "codeVoice",
              "code": "publishDate"
            },
            {
              "type": "text",
              "text": " and always stays current."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "In the case where "
            },
            {
              "type": "codeVoice",
              "code": "publishMonthID"
            },
            {
              "type": "text",
              "text": " is "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/swift/cocoa_design_patterns/using_key-value_observing_in_swift"
            },
            {
              "type": "text",
              "text": ", the following code ensures that the observations are triggered when "
            },
            {
              "type": "codeVoice",
              "code": "publishDate"
            },
            {
              "type": "text",
              "text": " changes."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "class func keyPathsForValuesAffectingPublishMonthID() -> Set<String> {",
            "    return [Name.publishDate]",
            "}"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3582161",
            "title": "Listing 3"
          }
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Derive One Value From Another Using a Derived Attribute",
          "anchor": "3582173"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "This sample uses a "
            },
            {
              "type": "codeVoice",
              "code": "Derived"
            },
            {
              "type": "text",
              "text": " attribute, "
            },
            {
              "type": "codeVoice",
              "code": "canonicalTitle"
            },
            {
              "type": "text",
              "text": ", to support searching the canonical form of book titles. "
            },
            {
              "type": "codeVoice",
              "code": "canonicalTitle"
            },
            {
              "type": "text",
              "text": " is configured as the canonical form of  "
            },
            {
              "type": "codeVoice",
              "code": "title"
            },
            {
              "type": "text",
              "text": " by setting the following expression as the value of the "
            },
            {
              "type": "codeVoice",
              "code": "Derivation"
            },
            {
              "type": "text",
              "text": " field shown Xcode’s Data Model Inspector."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "canonical:(title)"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3582163",
            "title": "Listing 4"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "codeVoice",
              "code": "Derived"
            },
            {
              "type": "text",
              "text": " attributes are used in cases where performance is more critical than storage space. In this sample, the app gets the same result by setting up a predicate with  "
            },
            {
              "type": "codeVoice",
              "code": "CONTAINS[cd]"
            },
            {
              "type": "text",
              "text": " ( where "
            },
            {
              "type": "codeVoice",
              "code": "cd"
            },
            {
              "type": "text",
              "text": " means case- and diacritic-insensitive ) to search "
            },
            {
              "type": "codeVoice",
              "code": "title"
            },
            {
              "type": "text",
              "text": " directly. By searching "
            },
            {
              "type": "codeVoice",
              "code": "canonicalTitle"
            },
            {
              "type": "text",
              "text": " which is persisted, the app performs more quickly because it doesn’t need to do diacritic-insensitive comparison for every book title."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "codeVoice",
              "code": "Derived"
            },
            {
              "type": "text",
              "text": " attributes are only updated when the user saves the managed context. Concretely, "
            },
            {
              "type": "codeVoice",
              "code": "canonicalTitle"
            },
            {
              "type": "text",
              "text": " won’t change if the sample app changes the "
            },
            {
              "type": "codeVoice",
              "code": "title"
            },
            {
              "type": "text",
              "text": " attribute without saving it."
            }
          ]
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Configure and Implement a Non-Standard Data Type",
          "anchor": "3582174"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "codeVoice",
              "code": "Transformable"
            },
            {
              "type": "text",
              "text": " attributes store objects with a non-standard type, or a type that isn’t in the attribute type list in Xcode’s Data Model Inspector. To implement a "
            },
            {
              "type": "codeVoice",
              "code": "Transformable"
            },
            {
              "type": "text",
              "text": " attribute, configure it by setting its type to "
            },
            {
              "type": "codeVoice",
              "code": "Transformable"
            },
            {
              "type": "text",
              "text": " and specifying the transformer and custom class name in Data Model Inspector, then register a transformer with code before an app loads its Core Data stack."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "// Register the transformer at the very beginning.",
            "// .colorToDataTransformer is a name defined with an NSValueTransformerName extension.",
            "ValueTransformer.setValueTransformer(ColorToDataTransformer(), forName: .colorToDataTransformer)"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3582165",
            "title": "Listing 5"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Core Data requires the transformer be "
            },
            {
              "type": "codeVoice",
              "code": "NSSecureUnarchiveFromData"
            },
            {
              "type": "text",
              "text": " or its subclass, and that its "
            },
            {
              "type": "codeVoice",
              "code": "transformedValue(_:)"
            },
            {
              "type": "text",
              "text": " method converts a "
            },
            {
              "type": "codeVoice",
              "code": "Data"
            },
            {
              "type": "text",
              "text": " object to an instance of the custom class specified in Data Model Inspector and that "
            },
            {
              "type": "codeVoice",
              "code": "reverseTransformedValue(_:)"
            },
            {
              "type": "text",
              "text": " does the opposite – converts an instance of the custom class to a "
            },
            {
              "type": "codeVoice",
              "code": "Data"
            },
            {
              "type": "text",
              "text": " object."
            }
          ]
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Store and Present a Date Type",
          "anchor": "3582175"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "In a Core Data store, a "
            },
            {
              "type": "codeVoice",
              "code": "Date"
            },
            {
              "type": "text",
              "text": " attribute is a "
            },
            {
              "type": "codeVoice",
              "code": "double"
            },
            {
              "type": "text",
              "text": " value that represents a number of seconds since 1970. Using a variety of calendars, time zones, and locales, an app can convert a "
            },
            {
              "type": "codeVoice",
              "code": "Date"
            },
            {
              "type": "text",
              "text": " value to different date strings, or convert a date string to different "
            },
            {
              "type": "codeVoice",
              "code": "Date"
            },
            {
              "type": "text",
              "text": " values. When parsing a date string, configure the "
            },
            {
              "type": "codeVoice",
              "code": "DateFormatter"
            },
            {
              "type": "text",
              "text": " with the right calendar, time zone, and locale. Typically, if the string is generated by the current user, the user-perceived calendar, time zone, and locale will be the current system ones, so an app can use a default "
            },
            {
              "type": "codeVoice",
              "code": "DateFormatter"
            },
            {
              "type": "text",
              "text": " instance. In other cases, configure "
            },
            {
              "type": "codeVoice",
              "code": "DateFormatter"
            },
            {
              "type": "text",
              "text": " in the same way the app generated the string."
            }
          ]
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Store and Present a Decimal Type",
          "anchor": "3582176"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "This sample uses a "
            },
            {
              "type": "codeVoice",
              "code": "Decimal"
            },
            {
              "type": "text",
              "text": " attribute to represent the book price, which is then mapped to a variable of "
            },
            {
              "type": "codeVoice",
              "code": "NSDecimalNumber"
            },
            {
              "type": "text",
              "text": " type. "
            },
            {
              "type": "codeVoice",
              "code": "NSDecimalNumber"
            },
            {
              "type": "text",
              "text": " has a convenient method to process a currency value."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "newBook.price = NSDecimalNumber(mantissa: value, exponent: -2, isNegative: false)"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3582168",
            "title": "Listing 6"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "codeVoice",
              "code": "NSDecimalNumber"
            },
            {
              "type": "text",
              "text": " also provides a convenient way to present a value with locale in mind."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "cell.price.text = book.price?.description(withLocale: Locale.current)"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3582169",
            "title": "Listing 7"
          }
        }
      ]
    }
  ],
  "legalNotices": {
    "copyright": "Copyright &copy; 2021 Apple Inc. All rights reserved.",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy"
  }
}