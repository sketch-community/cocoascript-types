{
  "abstract": [
    {
      "type": "text",
      "text": "Sorts the collection in place, using the given predicate as the comparison between elements."
    }
  ],
  "documentVersion": 0,
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.documentation/documentation/foundation",
        "doc://com.apple.documentation/documentation/foundation/numbers_data_and_basic_values",
        "doc://com.apple.documentation/documentation/foundation/data"
      ]
    ]
  },
  "identifier": {
    "url": "doc://com.apple.documentation/documentation/foundation/data/2292856-sort",
    "interfaceLanguage": "swift"
  },
  "legacy_identifier": 2292856,
  "kind": "symbol",
  "metadata": {
    "title": "sort(by:)",
    "role": "symbol",
    "roleHeading": "Instance Method",
    "modules": [
      {
        "name": "Foundation"
      }
    ],
    "platforms": [
      {
        "name": "iOS",
        "introducedAt": "7.0",
        "current": "14.3"
      },
      {
        "name": "macOS",
        "introducedAt": "10.9",
        "current": "11.1"
      },
      {
        "name": "Mac Catalyst",
        "introducedAt": "13.0",
        "current": "14.3"
      },
      {
        "name": "tvOS",
        "introducedAt": "9.0",
        "current": "14.3"
      },
      {
        "name": "watchOS",
        "introducedAt": "2.0",
        "current": "7.2"
      },
      {
        "name": "Xcode",
        "introducedAt": "8.0",
        "current": "12.3"
      }
    ],
    "externalID": "s:SMsSkRzrlE4sort2byySb7ElementSTQz_ADtKXE_tKF::SYNTHESIZED::s:10Foundation4DataV",
    "symbolKind": "structm",
    "fragments": [
      {
        "kind": "text",
        "text": "func "
      },
      {
        "kind": "identifier",
        "text": "sort"
      },
      {
        "kind": "text",
        "text": "("
      },
      {
        "kind": "identifier",
        "text": "by"
      },
      {
        "kind": "text",
        "text": ": (UInt8, UInt8) -> Bool)"
      }
    ]
  },
  "schemaVersion": {
    "major": 1,
    "minor": 0,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ],
      "paths": [
        "documentation/foundation/data/2292856-sort"
      ]
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/foundation": {
      "title": "Foundation",
      "identifier": "doc://com.apple.documentation/documentation/foundation",
      "url": "/documentation/foundation",
      "type": "topic",
      "kind": "symbol",
      "role": "collection"
    },
    "doc://com.apple.documentation/documentation/foundation/numbers_data_and_basic_values": {
      "title": "Numbers, Data, and Basic Values",
      "identifier": "doc://com.apple.documentation/documentation/foundation/numbers_data_and_basic_values",
      "url": "/documentation/foundation/numbers_data_and_basic_values",
      "type": "topic",
      "kind": "article",
      "role": "collectionGroup"
    },
    "doc://com.apple.documentation/documentation/foundation/data": {
      "title": "Data",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/foundation/data",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/foundation/data",
      "abstract": [
        {
          "type": "text",
          "text": "A byte buffer in memory."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/foundation/data/2292856-sort#2844540": {
      "title": "Listing 1",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/foundation/data/2292856-sort#2844540",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/foundation/data/2292856-sort#2844540"
    },
    "doc://com.apple.documentation/documentation/foundation/data/2292856-sort#2844541": {
      "title": "Listing 2",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/foundation/data/2292856-sort#2844541",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/foundation/data/2292856-sort#2844541"
    },
    "doc://com.apple.documentation/documentation/swift/uint8": {
      "title": "UInt8",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/swift/uint8",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/swift/uint8"
    },
    "doc://com.apple.documentation/documentation/swift/bool": {
      "title": "Bool",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/swift/bool",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/swift/bool"
    },
    "doc://com.apple.documentation/documentation/foundation/data/2292856-sort": {
      "title": "sort(by:)",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/foundation/data/2292856-sort",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/foundation/data/2292856-sort",
      "abstract": [
        {
          "type": "text",
          "text": "Sorts the collection in place, using the given predicate as the comparison between elements."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "sort"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "by"
        },
        {
          "kind": "text",
          "text": ": (UInt8, UInt8) -> Bool)"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/foundation/data/1779722-sorted": {
      "title": "sorted()",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/foundation/data/1779722-sorted",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/foundation/data/1779722-sorted",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the elements of the sequence, sorted."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "sorted"
        },
        {
          "kind": "text",
          "text": "() -> [UInt8]"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/foundation/data/2293440-sorted": {
      "title": "sorted(by:)",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/foundation/data/2293440-sorted",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/foundation/data/2293440-sorted",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "sorted"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "by"
        },
        {
          "kind": "text",
          "text": ": (UInt8, UInt8) -> Bool) -> [UInt8]"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/foundation/data/1780245-reversed": {
      "title": "reversed()",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/foundation/data/1780245-reversed",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/foundation/data/1780245-reversed",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a view presenting the elements of the collection in reverse order."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "reversed"
        },
        {
          "kind": "text",
          "text": "() -> ReversedCollection<Data>"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "url": "/documentation/technologies",
      "kind": "technologies",
      "title": "Technologies"
    }
  },
  "seeAlsoSections": [
    {
      "identifiers": [
        "doc://com.apple.documentation/documentation/foundation/data/1779722-sorted",
        "doc://com.apple.documentation/documentation/foundation/data/2293440-sorted",
        "doc://com.apple.documentation/documentation/foundation/data/1780245-reversed"
      ],
      "title": "Sorting Bytes",
      "generated": true
    }
  ],
  "primaryContentSections": [
    {
      "kind": "declarations",
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "mutating"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "func"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "sort"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "externalParam",
              "text": "by"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "areInIncreasingOrder"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s5UInt8V",
              "identifier": "doc://com.apple.documentation/documentation/swift/uint8",
              "text": "UInt8"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:s5UInt8V",
              "identifier": "doc://com.apple.documentation/documentation/swift/uint8",
              "text": "UInt8"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "keyword",
              "text": "throws"
            },
            {
              "kind": "text",
              "text": " -> "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Sb",
              "identifier": "doc://com.apple.documentation/documentation/swift/bool",
              "text": "Bool"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "keyword",
              "text": "rethrows"
            }
          ],
          "platforms": [
            "iOS",
            "macOS",
            "Mac Catalyst",
            "tvOS",
            "watchOS"
          ]
        }
      ]
    },
    {
      "kind": "parameters",
      "languages": [
        "swift"
      ],
      "parameters": [
        {
          "name": "areInIncreasingOrder",
          "content": [
            {
              "type": "paragraph",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "A predicate that returns "
                },
                {
                  "type": "codeVoice",
                  "code": "true"
                },
                {
                  "type": "text",
                  "text": " if its first argument should be ordered before its second argument; otherwise, "
                },
                {
                  "type": "codeVoice",
                  "code": "false"
                },
                {
                  "type": "text",
                  "text": ". If "
                },
                {
                  "type": "codeVoice",
                  "code": "areInIncreasingOrder"
                },
                {
                  "type": "text",
                  "text": " throws an error during the sort, the elements may be in a different order, but none will be lost."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "kind": "content",
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "When you want to sort a collection of elements that don’t conform to the "
            },
            {
              "type": "codeVoice",
              "code": "Comparable"
            },
            {
              "type": "text",
              "text": " protocol, pass a closure to this method that returns "
            },
            {
              "type": "codeVoice",
              "code": "true"
            },
            {
              "type": "text",
              "text": " when the first element should be ordered before the second."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "In the following example, the closure provides an ordering for an array of a custom enumeration that describes an HTTP response. The predicate orders errors before successes and sorts the error responses by their error code."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "enum HTTPResponse {",
            "    case ok",
            "    case error(Int)",
            "}",
            "",
            "var responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]",
            "responses.sort {",
            "    switch ($0, $1) {",
            "    // Order errors by code",
            "    case let (.error(aCode), .error(bCode)):",
            "        return aCode < bCode",
            "",
            "    // All successes are equivalent, so none is before any other",
            "    case (.ok, .ok): return false",
            "",
            "    // Order errors before successes",
            "    case (.error, .ok): return true",
            "    case (.ok, .error): return false",
            "    }",
            "}",
            "print(responses)",
            "// Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\""
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "2844540",
            "title": "Listing 1"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Alternatively, use this method to sort a collection of elements that do conform to "
            },
            {
              "type": "codeVoice",
              "code": "Comparable"
            },
            {
              "type": "text",
              "text": " when you want the sort to be descending instead of ascending. Pass the greater-than operator ("
            },
            {
              "type": "codeVoice",
              "code": ">"
            },
            {
              "type": "text",
              "text": ") operator as the predicate."
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "var students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]",
            "students.sort(by: >)",
            "print(students)",
            "// Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\""
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "2844541",
            "title": "Listing 2"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "codeVoice",
              "code": "areInIncreasingOrder"
            },
            {
              "type": "text",
              "text": " must be a "
            },
            {
              "type": "emphasis",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "strict weak ordering"
                }
              ]
            },
            {
              "type": "text",
              "text": " over the elements. That is, for any elements "
            },
            {
              "type": "codeVoice",
              "code": "a"
            },
            {
              "type": "text",
              "text": ", "
            },
            {
              "type": "codeVoice",
              "code": "b"
            },
            {
              "type": "text",
              "text": ", and "
            },
            {
              "type": "codeVoice",
              "code": "c"
            },
            {
              "type": "text",
              "text": ", the following conditions must hold:"
            }
          ]
        },
        {
          "type": "unorderedList",
          "items": [
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "codeVoice",
                      "code": "areInIncreasingOrder(a, a)"
                    },
                    {
                      "type": "text",
                      "text": " is always "
                    },
                    {
                      "type": "codeVoice",
                      "code": "false"
                    },
                    {
                      "type": "text",
                      "text": ". (Irreflexivity)"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "If "
                    },
                    {
                      "type": "codeVoice",
                      "code": "areInIncreasingOrder(a, b)"
                    },
                    {
                      "type": "text",
                      "text": " and "
                    },
                    {
                      "type": "codeVoice",
                      "code": "areInIncreasingOrder(b, c)"
                    },
                    {
                      "type": "text",
                      "text": " are both "
                    },
                    {
                      "type": "codeVoice",
                      "code": "true"
                    },
                    {
                      "type": "text",
                      "text": ", then "
                    },
                    {
                      "type": "codeVoice",
                      "code": "areInIncreasingOrder(a, c)"
                    },
                    {
                      "type": "text",
                      "text": " is also "
                    },
                    {
                      "type": "codeVoice",
                      "code": "true"
                    },
                    {
                      "type": "text",
                      "text": ". (Transitive comparability)"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "Two elements are "
                    },
                    {
                      "type": "emphasis",
                      "inlineContent": [
                        {
                          "type": "text",
                          "text": "incomparable"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " if neither is ordered before the other according to the predicate. If "
                    },
                    {
                      "type": "codeVoice",
                      "code": "a"
                    },
                    {
                      "type": "text",
                      "text": " and "
                    },
                    {
                      "type": "codeVoice",
                      "code": "b"
                    },
                    {
                      "type": "text",
                      "text": " are incomparable, and "
                    },
                    {
                      "type": "codeVoice",
                      "code": "b"
                    },
                    {
                      "type": "text",
                      "text": " and "
                    },
                    {
                      "type": "codeVoice",
                      "code": "c"
                    },
                    {
                      "type": "text",
                      "text": " are incomparable, then "
                    },
                    {
                      "type": "codeVoice",
                      "code": "a"
                    },
                    {
                      "type": "text",
                      "text": " and "
                    },
                    {
                      "type": "codeVoice",
                      "code": "c"
                    },
                    {
                      "type": "text",
                      "text": " are also incomparable. (Transitive incomparability)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The sorting algorithm is not guaranteed to be stable. A stable sort preserves the relative order of elements for which "
            },
            {
              "type": "codeVoice",
              "code": "areInIncreasingOrder"
            },
            {
              "type": "text",
              "text": " does not establish an order."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Complexity: O("
            },
            {
              "type": "emphasis",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "n"
                }
              ]
            },
            {
              "type": "text",
              "text": " log "
            },
            {
              "type": "emphasis",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "n"
                }
              ]
            },
            {
              "type": "text",
              "text": "), where "
            },
            {
              "type": "emphasis",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "n"
                }
              ]
            },
            {
              "type": "text",
              "text": " is the length of the collection."
            }
          ]
        }
      ]
    }
  ],
  "legalNotices": {
    "copyright": "Copyright &copy; 2020 Apple Inc. All rights reserved.",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy"
  }
}