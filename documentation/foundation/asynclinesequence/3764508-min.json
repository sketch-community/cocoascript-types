{
  "abstract": [
    {
      "type": "text",
      "text": "Returns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
    }
  ],
  "documentVersion": 0,
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.documentation/documentation/foundation",
        "doc://com.apple.documentation/documentation/foundation/file_system",
        "doc://com.apple.documentation/documentation/foundation/filehandle",
        "doc://com.apple.documentation/documentation/foundation/filehandle/asyncbytes",
        "doc://com.apple.documentation/documentation/foundation/asynclinesequence"
      ],
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.documentation/documentation/foundation",
        "doc://com.apple.documentation/documentation/foundation/url_loading_system",
        "doc://com.apple.documentation/documentation/foundation/urlsession",
        "doc://com.apple.documentation/documentation/foundation/urlsession/asyncbytes",
        "doc://com.apple.documentation/documentation/foundation/asynclinesequence"
      ],
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.documentation/documentation/swift",
        "doc://com.apple.documentation/documentation/swift/swift_standard_library",
        "doc://com.apple.documentation/documentation/swift/swift_standard_library/concurrency",
        "doc://com.apple.documentation/documentation/swift/asyncsequence",
        "doc://com.apple.documentation/documentation/foundation/asynclinesequence"
      ]
    ]
  },
  "identifier": {
    "url": "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764508-min",
    "interfaceLanguage": "swift"
  },
  "legacy_identifier": 3764508,
  "kind": "symbol",
  "metadata": {
    "title": "min(by:)",
    "role": "symbol",
    "roleHeading": "Instance Method",
    "modules": [
      {
        "name": "Foundation"
      }
    ],
    "platforms": [
      {
        "name": "iOS",
        "introducedAt": "13.0",
        "current": "15.2"
      },
      {
        "name": "iPadOS",
        "introducedAt": "13.0",
        "current": "15.2"
      },
      {
        "name": "macOS",
        "introducedAt": "10.15",
        "current": "12.1"
      },
      {
        "name": "Mac Catalyst",
        "introducedAt": "15.0",
        "current": "15.2"
      },
      {
        "name": "tvOS",
        "introducedAt": "13.0",
        "current": "15.2"
      },
      {
        "name": "watchOS",
        "introducedAt": "6.0",
        "current": "8.3"
      },
      {
        "name": "Xcode",
        "introducedAt": "13.0",
        "current": "13.2"
      }
    ],
    "externalID": "s:Sci12_ConcurrencyE3min2by7ElementQzSgSbAE_AEtYaKXE_tYaKF::SYNTHESIZED::s:10Foundation17AsyncLineSequenceV",
    "parent": {
      "title": "AsyncLineSequence"
    },
    "symbolKind": "structm",
    "fragments": [
      {
        "kind": "text",
        "text": "func "
      },
      {
        "kind": "identifier",
        "text": "min"
      },
      {
        "kind": "text",
        "text": "("
      },
      {
        "kind": "identifier",
        "text": "by"
      },
      {
        "kind": "text",
        "text": ": (String, String) -> Bool) -> String?"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ],
      "paths": [
        "documentation/foundation/asynclinesequence/3764508-min"
      ]
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/foundation": {
      "title": "Foundation",
      "identifier": "doc://com.apple.documentation/documentation/foundation",
      "url": "/documentation/foundation",
      "type": "topic",
      "kind": "symbol",
      "role": "collection"
    },
    "doc://com.apple.documentation/documentation/foundation/file_system": {
      "title": "File System",
      "identifier": "doc://com.apple.documentation/documentation/foundation/file_system",
      "url": "/documentation/foundation/file_system",
      "type": "topic",
      "kind": "article",
      "role": "collectionGroup"
    },
    "doc://com.apple.documentation/documentation/foundation/filehandle": {
      "title": "FileHandle",
      "identifier": "doc://com.apple.documentation/documentation/foundation/filehandle",
      "url": "/documentation/foundation/filehandle",
      "type": "topic",
      "kind": "symbol",
      "role": "symbol"
    },
    "doc://com.apple.documentation/documentation/foundation/filehandle/asyncbytes": {
      "title": "AsyncBytes",
      "identifier": "doc://com.apple.documentation/documentation/foundation/filehandle/asyncbytes",
      "url": "/documentation/foundation/filehandle/asyncbytes",
      "type": "topic",
      "kind": "symbol",
      "role": "symbol"
    },
    "doc://com.apple.documentation/documentation/foundation/asynclinesequence": {
      "title": "AsyncLineSequence",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/foundation/asynclinesequence",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/foundation/asynclinesequence",
      "abstract": [
        {
          "type": "text",
          "text": "An asychronous sequence of lines of text."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/foundation/url_loading_system": {
      "title": "URL Loading System",
      "identifier": "doc://com.apple.documentation/documentation/foundation/url_loading_system",
      "url": "/documentation/foundation/url_loading_system",
      "type": "topic",
      "kind": "article",
      "role": "collectionGroup"
    },
    "doc://com.apple.documentation/documentation/foundation/urlsession": {
      "title": "URLSession",
      "identifier": "doc://com.apple.documentation/documentation/foundation/urlsession",
      "url": "/documentation/foundation/urlsession",
      "type": "topic",
      "kind": "symbol",
      "role": "symbol"
    },
    "doc://com.apple.documentation/documentation/foundation/urlsession/asyncbytes": {
      "title": "AsyncBytes",
      "identifier": "doc://com.apple.documentation/documentation/foundation/urlsession/asyncbytes",
      "url": "/documentation/foundation/urlsession/asyncbytes",
      "type": "topic",
      "kind": "symbol",
      "role": "symbol"
    },
    "doc://com.apple.documentation/documentation/swift": {
      "title": "Swift",
      "identifier": "doc://com.apple.documentation/documentation/swift",
      "url": "/documentation/swift",
      "type": "topic",
      "kind": "symbol",
      "role": "collection"
    },
    "doc://com.apple.documentation/documentation/swift/swift_standard_library": {
      "title": "Swift Standard Library",
      "identifier": "doc://com.apple.documentation/documentation/swift/swift_standard_library",
      "url": "/documentation/swift/swift_standard_library",
      "type": "topic",
      "kind": "article",
      "role": "collectionGroup"
    },
    "doc://com.apple.documentation/documentation/swift/swift_standard_library/concurrency": {
      "title": "Concurrency",
      "identifier": "doc://com.apple.documentation/documentation/swift/swift_standard_library/concurrency",
      "url": "/documentation/swift/swift_standard_library/concurrency",
      "type": "topic",
      "kind": "article",
      "role": "collectionGroup"
    },
    "doc://com.apple.documentation/documentation/swift/asyncsequence": {
      "title": "AsyncSequence",
      "identifier": "doc://com.apple.documentation/documentation/swift/asyncsequence",
      "url": "/documentation/swift/asyncsequence",
      "type": "topic",
      "kind": "symbol",
      "role": "symbol"
    },
    "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764508-min#3839690": {
      "title": "Listing 1",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764508-min#3839690",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/foundation/asynclinesequence/3764508-min#3839690"
    },
    "doc://com.apple.documentation/documentation/swift/string": {
      "title": "String",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/swift/string",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/swift/string"
    },
    "doc://com.apple.documentation/documentation/swift/bool": {
      "title": "Bool",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/swift/bool",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/swift/bool"
    },
    "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764494-contains": {
      "title": "contains(_:)",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764494-contains",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/foundation/asynclinesequence/3764494-contains",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a Boolean value that indicates whether the asynchronous sequence contains the given element."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "contains"
        },
        {
          "kind": "text",
          "text": "(String) -> Bool"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764495-contains": {
      "title": "contains(where:)",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764495-contains",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/foundation/asynclinesequence/3764495-contains",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "contains"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "where"
        },
        {
          "kind": "text",
          "text": ": (String) -> Bool) -> Bool"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764491-allsatisfy": {
      "title": "allSatisfy(_:)",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764491-allsatisfy",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/foundation/asynclinesequence/3764491-allsatisfy",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfies the given predicate."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "allSatisfy"
        },
        {
          "kind": "text",
          "text": "((String) -> Bool) -> Bool"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764499-first": {
      "title": "first(where:)",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764499-first",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/foundation/asynclinesequence/3764499-first",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the first element of the sequence that satisfies the given predicate."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "first"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "where"
        },
        {
          "kind": "text",
          "text": ": (String) -> Bool) -> String?"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764507-min": {
      "title": "min()",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764507-min",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/foundation/asynclinesequence/3764507-min",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the minimum element in an asynchronous sequence of comparable elements."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "() -> String?"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764508-min": {
      "title": "min(by:)",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764508-min",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/foundation/asynclinesequence/3764508-min",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "by"
        },
        {
          "kind": "text",
          "text": ": (String, String) -> Bool) -> String?"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764505-max": {
      "title": "max()",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764505-max",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/foundation/asynclinesequence/3764505-max",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the maximum element in an asynchronous sequence of comparable elements."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "() -> String?"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764506-max": {
      "title": "max(by:)",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764506-max",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/foundation/asynclinesequence/3764506-max",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "by"
        },
        {
          "kind": "text",
          "text": ": (String, String) -> Bool) -> String?"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "url": "/documentation/technologies",
      "kind": "technologies",
      "title": "Technologies"
    }
  },
  "diffAvailability": {
    "minor": {
      "change": "modified",
      "platform": "Xcode",
      "versions": [
        "13.1",
        "13.2 beta 1"
      ]
    },
    "major": {
      "change": "modified",
      "platform": "Xcode",
      "versions": [
        "13.0",
        "13.2 beta 1"
      ]
    }
  },
  "seeAlsoSections": [
    {
      "identifiers": [
        "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764494-contains",
        "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764495-contains",
        "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764491-allsatisfy",
        "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764499-first",
        "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764507-min",
        "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764505-max",
        "doc://com.apple.documentation/documentation/foundation/asynclinesequence/3764506-max"
      ],
      "title": "Finding Elements",
      "generated": true
    }
  ],
  "primaryContentSections": [
    {
      "kind": "declarations",
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "@warn_unqualified_access"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "func"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "min"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "externalParam",
              "text": "by"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "areInIncreasingOrder"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:SS",
              "identifier": "doc://com.apple.documentation/documentation/swift/string",
              "text": "String"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:SS",
              "identifier": "doc://com.apple.documentation/documentation/swift/string",
              "text": "String"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "keyword",
              "text": "async"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "throws"
            },
            {
              "kind": "text",
              "text": " -> "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:Sb",
              "identifier": "doc://com.apple.documentation/documentation/swift/bool",
              "text": "Bool"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "keyword",
              "text": "async"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "keyword",
              "text": "rethrows"
            },
            {
              "kind": "text",
              "text": " -> "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:SS",
              "identifier": "doc://com.apple.documentation/documentation/swift/string",
              "text": "String"
            },
            {
              "kind": "text",
              "text": "?"
            }
          ],
          "platforms": [
            "iOS",
            "iPadOS",
            "macOS",
            "Mac Catalyst",
            "tvOS",
            "watchOS"
          ]
        }
      ]
    },
    {
      "kind": "parameters",
      "languages": [
        "swift"
      ],
      "parameters": [
        {
          "name": "areInIncreasingOrder",
          "content": [
            {
              "type": "paragraph",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "A predicate that returns "
                },
                {
                  "type": "codeVoice",
                  "code": "true"
                },
                {
                  "type": "text",
                  "text": " if its first argument should be ordered before its second argument; otherwise, "
                },
                {
                  "type": "codeVoice",
                  "code": "false"
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "kind": "content",
      "content": [
        {
          "anchor": "return_value",
          "level": 2,
          "text": "Return Value",
          "type": "heading"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The sequence’s minimum element, according to "
            },
            {
              "type": "codeVoice",
              "code": "areInIncreasingOrder"
            },
            {
              "type": "text",
              "text": ". If the sequence has no elements, returns "
            },
            {
              "type": "codeVoice",
              "code": "nil"
            },
            {
              "type": "text",
              "text": "."
            }
          ]
        }
      ]
    },
    {
      "kind": "content",
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Use this method when the asynchronous sequence’s values don’t conform to "
            },
            {
              "type": "codeVoice",
              "code": "Comparable"
            },
            {
              "type": "text",
              "text": ", or when you want to apply a custom ordering to the sequence."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The predicate must be a "
            },
            {
              "type": "emphasis",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "strict weak ordering"
                }
              ]
            },
            {
              "type": "text",
              "text": " over the elements. That is, for any elements "
            },
            {
              "type": "codeVoice",
              "code": "a"
            },
            {
              "type": "text",
              "text": ", "
            },
            {
              "type": "codeVoice",
              "code": "b"
            },
            {
              "type": "text",
              "text": ", and "
            },
            {
              "type": "codeVoice",
              "code": "c"
            },
            {
              "type": "text",
              "text": ", the following conditions must hold:"
            }
          ]
        },
        {
          "type": "unorderedList",
          "items": [
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "codeVoice",
                      "code": "areInIncreasingOrder(a, a)"
                    },
                    {
                      "type": "text",
                      "text": " is always "
                    },
                    {
                      "type": "codeVoice",
                      "code": "false"
                    },
                    {
                      "type": "text",
                      "text": ". (Irreflexivity)"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "If "
                    },
                    {
                      "type": "codeVoice",
                      "code": "areInIncreasingOrder(a, b)"
                    },
                    {
                      "type": "text",
                      "text": " and "
                    },
                    {
                      "type": "codeVoice",
                      "code": "areInIncreasingOrder(b, c)"
                    },
                    {
                      "type": "text",
                      "text": " are both "
                    },
                    {
                      "type": "codeVoice",
                      "code": "true"
                    },
                    {
                      "type": "text",
                      "text": ", then "
                    },
                    {
                      "type": "codeVoice",
                      "code": "areInIncreasingOrder(a, c)"
                    },
                    {
                      "type": "text",
                      "text": " is also "
                    },
                    {
                      "type": "codeVoice",
                      "code": "true"
                    },
                    {
                      "type": "text",
                      "text": ". (Transitive comparability)"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "text",
                      "text": "Two elements are "
                    },
                    {
                      "type": "emphasis",
                      "inlineContent": [
                        {
                          "type": "text",
                          "text": "incomparable"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " if neither is ordered before the other according to the predicate. If "
                    },
                    {
                      "type": "codeVoice",
                      "code": "a"
                    },
                    {
                      "type": "text",
                      "text": " and "
                    },
                    {
                      "type": "codeVoice",
                      "code": "b"
                    },
                    {
                      "type": "text",
                      "text": " are incomparable, and "
                    },
                    {
                      "type": "codeVoice",
                      "code": "b"
                    },
                    {
                      "type": "text",
                      "text": " and "
                    },
                    {
                      "type": "codeVoice",
                      "code": "c"
                    },
                    {
                      "type": "text",
                      "text": " are incomparable, then "
                    },
                    {
                      "type": "codeVoice",
                      "code": "a"
                    },
                    {
                      "type": "text",
                      "text": " and "
                    },
                    {
                      "type": "codeVoice",
                      "code": "c"
                    },
                    {
                      "type": "text",
                      "text": " are also incomparable. (Transitive incomparability)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The following example uses an enumeration of playing cards ranks, "
            },
            {
              "type": "codeVoice",
              "code": "Rank"
            },
            {
              "type": "text",
              "text": ", which ranges from "
            },
            {
              "type": "codeVoice",
              "code": "ace"
            },
            {
              "type": "text",
              "text": " (low) to "
            },
            {
              "type": "codeVoice",
              "code": "king"
            },
            {
              "type": "text",
              "text": " (high). An asynchronous sequence called "
            },
            {
              "type": "codeVoice",
              "code": "RankCounter"
            },
            {
              "type": "text",
              "text": " produces all elements of the array. The predicate provided to the "
            },
            {
              "type": "codeVoice",
              "code": "min(by:)"
            },
            {
              "type": "text",
              "text": " method sorts ranks based on their "
            },
            {
              "type": "codeVoice",
              "code": "rawValue"
            },
            {
              "type": "text",
              "text": ":"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "enum Rank: Int {",
            "    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king",
            "}",
            "",
            "let min = await RankCounter()",
            "    .min { $0.rawValue < $1.rawValue }",
            "print(min ?? \"none\")",
            "// Prints: ace"
          ],
          "syntax": "swift",
          "metadata": {
            "anchor": "3839690",
            "title": "Listing 1"
          }
        }
      ]
    }
  ],
  "legalNotices": {
    "copyright": "Copyright &copy; 2021 Apple Inc. All rights reserved.",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy"
  }
}