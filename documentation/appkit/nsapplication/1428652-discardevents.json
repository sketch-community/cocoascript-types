{
  "abstract": [
    {
      "type": "text",
      "text": "Removes all events matching the given mask and generated before the specified event."
    }
  ],
  "documentVersion": 0,
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.documentation/documentation/appkit",
        "doc://com.apple.documentation/documentation/appkit/app_and_environment",
        "doc://com.apple.documentation/documentation/appkit/nsapplication"
      ]
    ]
  },
  "identifier": {
    "url": "doc://com.apple.documentation/documentation/appkit/nsapplication/1428652-discardevents",
    "interfaceLanguage": "swift"
  },
  "legacy_identifier": 1428652,
  "kind": "symbol",
  "metadata": {
    "title": "discardEvents(matching:before:)",
    "role": "symbol",
    "roleHeading": "Instance Method",
    "modules": [
      {
        "name": "AppKit"
      }
    ],
    "platforms": [
      {
        "name": "macOS",
        "introducedAt": "10.0",
        "current": "11.1"
      }
    ],
    "externalID": "c:objc(cs)NSApplication(im)discardEventsMatchingMask:beforeEvent:",
    "symbolKind": "instm",
    "fragments": [
      {
        "kind": "text",
        "text": "func "
      },
      {
        "kind": "identifier",
        "text": "discardEvents"
      },
      {
        "kind": "text",
        "text": "("
      },
      {
        "kind": "identifier",
        "text": "matching"
      },
      {
        "kind": "text",
        "text": ": NSEvent.EventTypeMask, "
      },
      {
        "kind": "identifier",
        "text": "before"
      },
      {
        "kind": "text",
        "text": ": NSEvent?)"
      }
    ]
  },
  "schemaVersion": {
    "major": 1,
    "minor": 0,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ],
      "paths": [
        "documentation/appkit/nsapplication/1428652-discardeventsmatchingmask"
      ]
    },
    {
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ],
      "paths": [
        "documentation/appkit/nsapplication/1428652-discardevents"
      ]
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/appkit": {
      "title": "AppKit",
      "identifier": "doc://com.apple.documentation/documentation/appkit",
      "url": "/documentation/appkit",
      "type": "topic",
      "kind": "symbol",
      "role": "collection"
    },
    "doc://com.apple.documentation/documentation/appkit/app_and_environment": {
      "title": "App and Environment",
      "identifier": "doc://com.apple.documentation/documentation/appkit/app_and_environment",
      "url": "/documentation/appkit/app_and_environment",
      "type": "topic",
      "kind": "article",
      "role": "collectionGroup"
    },
    "doc://com.apple.documentation/documentation/appkit/nsapplication": {
      "title": "NSApplication",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/appkit/nsapplication",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/appkit/nsapplication",
      "abstract": [
        {
          "type": "text",
          "text": "An object that manages an app’s main event loop and resources used by all of that app’s objects."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/appkit/nsevent": {
      "title": "NSEvent",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/appkit/nsevent",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/appkit/nsevent"
    },
    "doc://com.apple.documentation/documentation/appkit/nswindow": {
      "title": "NSWindow",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/appkit/nswindow",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/appkit/nswindow"
    },
    "doc://com.apple.documentation/documentation/appkit/nsapplication/1428485-nextevent": {
      "title": "nextEvent(matching:until:inMode:dequeue:)",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/appkit/nsapplication/1428485-nextevent",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/appkit/nsapplication/1428485-nextevent",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the next event matching a given mask, or "
        },
        {
          "type": "codeVoice",
          "code": "nil"
        },
        {
          "type": "text",
          "text": " if no such event is found before a specified expiration date."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "nextEvent"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "matching"
        },
        {
          "kind": "text",
          "text": ": NSEvent.EventTypeMask, "
        },
        {
          "kind": "identifier",
          "text": "until"
        },
        {
          "kind": "text",
          "text": ": Date?, "
        },
        {
          "kind": "identifier",
          "text": "inMode"
        },
        {
          "kind": "text",
          "text": ": RunLoop.Mode, "
        },
        {
          "kind": "identifier",
          "text": "dequeue"
        },
        {
          "kind": "text",
          "text": ": Bool) -> NSEvent?"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/appkit/nsevent/eventtypemask": {
      "title": "NSEvent.EventTypeMask",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/appkit/nsevent/eventtypemask",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/appkit/nsevent/eventtypemask"
    },
    "doc://com.apple.documentation/documentation/appkit/nsapplication/1428652-discardevents": {
      "title": "discardEvents(matching:before:)",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/appkit/nsapplication/1428652-discardevents",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/appkit/nsapplication/1428652-discardevents",
      "abstract": [
        {
          "type": "text",
          "text": "Removes all events matching the given mask and generated before the specified event."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "discardEvents"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "identifier",
          "text": "matching"
        },
        {
          "kind": "text",
          "text": ": NSEvent.EventTypeMask, "
        },
        {
          "kind": "identifier",
          "text": "before"
        },
        {
          "kind": "text",
          "text": ": NSEvent?)"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/appkit/nsapplication/1428668-currentevent": {
      "title": "currentEvent",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/appkit/nsapplication/1428668-currentevent",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/appkit/nsapplication/1428668-currentevent",
      "abstract": [
        {
          "type": "text",
          "text": "The last event object that the app retrieved from the event queue."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "var "
        },
        {
          "kind": "identifier",
          "text": "currentEvent"
        },
        {
          "kind": "text",
          "text": ": NSEvent?"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/appkit/nsapplication/1428759-isrunning": {
      "title": "isRunning",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/appkit/nsapplication/1428759-isrunning",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/appkit/nsapplication/1428759-isrunning",
      "abstract": [
        {
          "type": "text",
          "text": "A Boolean value indicating whether the main event loop is running."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "var "
        },
        {
          "kind": "identifier",
          "text": "isRunning"
        },
        {
          "kind": "text",
          "text": ": Bool"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/appkit/nsapplication/1428631-run": {
      "title": "run()",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/appkit/nsapplication/1428631-run",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/appkit/nsapplication/1428631-run",
      "abstract": [
        {
          "type": "text",
          "text": "Starts the main event loop."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "run"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/appkit/nsapplication/1428771-finishlaunching": {
      "title": "finishLaunching()",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/appkit/nsapplication/1428771-finishlaunching",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/appkit/nsapplication/1428771-finishlaunching",
      "abstract": [
        {
          "type": "text",
          "text": "Activates the app, opens any files specified by the "
        },
        {
          "type": "codeVoice",
          "code": "NSOpen"
        },
        {
          "type": "text",
          "text": " user default, and unhighlights the app’s icon."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "finishLaunching"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/appkit/nsapplication/1428473-stop": {
      "title": "stop(_:)",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/appkit/nsapplication/1428473-stop",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/appkit/nsapplication/1428473-stop",
      "abstract": [
        {
          "type": "text",
          "text": "Stops the main event loop."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "stop"
        },
        {
          "kind": "text",
          "text": "(Any?)"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/appkit/nsapplication/1428359-sendevent": {
      "title": "sendEvent(_:)",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/appkit/nsapplication/1428359-sendevent",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/appkit/nsapplication/1428359-sendevent",
      "abstract": [
        {
          "type": "text",
          "text": "Dispatches an event to other objects."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "sendEvent"
        },
        {
          "kind": "text",
          "text": "(NSEvent)"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/appkit/nsapplication/1428710-postevent": {
      "title": "postEvent(_:atStart:)",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/appkit/nsapplication/1428710-postevent",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/appkit/nsapplication/1428710-postevent",
      "abstract": [
        {
          "type": "text",
          "text": "Adds a given event to the receiver’s event queue."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "func "
        },
        {
          "kind": "identifier",
          "text": "postEvent"
        },
        {
          "kind": "text",
          "text": "(NSEvent, "
        },
        {
          "kind": "identifier",
          "text": "atStart"
        },
        {
          "kind": "text",
          "text": ": Bool)"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/foundation/runloop/mode/1428765-eventtracking": {
      "title": "eventTracking",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/foundation/runloop/mode/1428765-eventtracking",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/foundation/runloop/mode/1428765-eventtracking",
      "abstract": [
        {
          "type": "text",
          "text": "A run loop should be set to this mode when tracking events modally, such as a mouse-dragging loop."
        }
      ],
      "fragments": [
        {
          "kind": "text",
          "text": "static let "
        },
        {
          "kind": "identifier",
          "text": "eventTracking"
        },
        {
          "kind": "text",
          "text": ": RunLoop.Mode"
        }
      ]
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "url": "/documentation/technologies",
      "kind": "technologies",
      "title": "Technologies"
    }
  },
  "seeAlsoSections": [
    {
      "identifiers": [
        "doc://com.apple.documentation/documentation/appkit/nsapplication/1428485-nextevent",
        "doc://com.apple.documentation/documentation/appkit/nsapplication/1428668-currentevent",
        "doc://com.apple.documentation/documentation/appkit/nsapplication/1428759-isrunning",
        "doc://com.apple.documentation/documentation/appkit/nsapplication/1428631-run",
        "doc://com.apple.documentation/documentation/appkit/nsapplication/1428771-finishlaunching",
        "doc://com.apple.documentation/documentation/appkit/nsapplication/1428473-stop",
        "doc://com.apple.documentation/documentation/appkit/nsapplication/1428359-sendevent",
        "doc://com.apple.documentation/documentation/appkit/nsapplication/1428710-postevent",
        "doc://com.apple.documentation/documentation/foundation/runloop/mode/1428765-eventtracking"
      ],
      "title": "Managing the Event Loop",
      "generated": true
    }
  ],
  "primaryContentSections": [
    {
      "kind": "declarations",
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "tokens": [
            {
              "kind": "keyword",
              "text": "func"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "discardEvents"
            },
            {
              "kind": "text",
              "text": "("
            },
            {
              "kind": "externalParam",
              "text": "matching"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "mask"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:objc(cs)NSEvent",
              "identifier": "doc://com.apple.documentation/documentation/appkit/nsevent",
              "text": "NSEvent"
            },
            {
              "kind": "text",
              "text": "."
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:@E@NSEventMask",
              "identifier": "doc://com.apple.documentation/documentation/appkit/nsevent/eventtypemask",
              "text": "EventTypeMask"
            },
            {
              "kind": "text",
              "text": ", "
            },
            {
              "kind": "externalParam",
              "text": "before"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "internalParam",
              "text": "lastEvent"
            },
            {
              "kind": "text",
              "text": ": "
            },
            {
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:objc(cs)NSEvent",
              "identifier": "doc://com.apple.documentation/documentation/appkit/nsevent",
              "text": "NSEvent"
            },
            {
              "kind": "text",
              "text": "?"
            },
            {
              "kind": "text",
              "text": ")"
            }
          ],
          "platforms": [
            "macOS"
          ]
        }
      ]
    },
    {
      "kind": "parameters",
      "languages": [
        "swift"
      ],
      "parameters": [
        {
          "name": "mask",
          "content": [
            {
              "type": "paragraph",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "Contains one or more flags indicating the types of events to discard. The constants section of the "
                },
                {
                  "type": "reference",
                  "isActive": true,
                  "identifier": "doc://com.apple.documentation/documentation/appkit/nsevent"
                },
                {
                  "type": "text",
                  "text": " class defines the constants you can add together to create this mask. The discussion section also lists some of the constants that are typically used."
                }
              ]
            }
          ]
        },
        {
          "name": "lastEvent",
          "content": [
            {
              "type": "paragraph",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "A marker event that you use to indicate which events should be discarded. Events that occurred before this event are discarded but those that occurred after it are not."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "kind": "content",
      "content": [
        {
          "anchor": "discussion",
          "level": 2,
          "text": "Discussion",
          "type": "heading"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Use this method to ignore any events that occurred before a specific event. For example, suppose your app has a tracking loop that you exit when the user releases the mouse button. You could use this method, specifying "
            },
            {
              "type": "codeVoice",
              "code": "NSAnyEventMask"
            },
            {
              "type": "text",
              "text": " as the mask argument and the ending mouse-up event as the "
            },
            {
              "type": "codeVoice",
              "code": "lastEvent"
            },
            {
              "type": "text",
              "text": " argument, to discard all events that occurred while you were tracking mouse movements in your loop. Passing the mouse-up event as "
            },
            {
              "type": "codeVoice",
              "code": "lastEvent"
            },
            {
              "type": "text",
              "text": " ensures that any events that might have occurred after the mouse-up event (that is, that appear in the queue after the mouse-up event) aren’t discarded."
            }
          ]
        },
        {
          "type": "aside",
          "content": [
            {
              "type": "paragraph",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "Typically, you send this message to an "
                },
                {
                  "type": "reference",
                  "isActive": true,
                  "identifier": "doc://com.apple.documentation/documentation/appkit/nswindow"
                },
                {
                  "type": "text",
                  "text": " object, rather than to the app object. Discarding events for a window clears out all of the events for that window only, leaving events for other windows in place. "
                }
              ]
            }
          ],
          "style": "note",
          "name": "Note"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "For the "
            },
            {
              "type": "codeVoice",
              "code": "mask"
            },
            {
              "type": "text",
              "text": " parameter, you can add together event type constants such as the following:"
            }
          ]
        },
        {
          "type": "unorderedList",
          "items": [
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "codeVoice",
                      "code": "NSLeftMouseDownMask"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "codeVoice",
                      "code": "NSLeftMouseUpMask"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "codeVoice",
                      "code": "NSRightMouseDownMask"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "codeVoice",
                      "code": "NSRightMouseUpMask"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "codeVoice",
                      "code": "NSMouseMovedMask"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "codeVoice",
                      "code": "NSLeftMouseDraggedMask"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "codeVoice",
                      "code": "NSRightMouseDraggedMask"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "codeVoice",
                      "code": "NSMouseEnteredMask"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "codeVoice",
                      "code": "NSMouseExitedMask"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "codeVoice",
                      "code": "NSKeyDownMask"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "codeVoice",
                      "code": "NSKeyUpMask"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "codeVoice",
                      "code": "NSFlagsChangedMask"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "codeVoice",
                      "code": "NSPeriodicMask"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "codeVoice",
                      "code": "NSCursorUpdateMask"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "codeVoice",
                      "code": "NSAnyEventMask"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "This method can also be called in subthreads. Events posted in subthreads bubble up in the main thread event queue."
            }
          ]
        }
      ]
    }
  ],
  "legalNotices": {
    "copyright": "Copyright &copy; 2020 Apple Inc. All rights reserved.",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy"
  }
}