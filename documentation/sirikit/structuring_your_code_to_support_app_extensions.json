{
  "abstract": [
    {
      "type": "text",
      "text": "Move your back-end services to a private framework so your app and app extensions can use them."
    }
  ],
  "documentVersion": 0,
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.documentation/documentation/sirikit"
      ]
    ]
  },
  "identifier": {
    "url": "doc://com.apple.documentation/documentation/sirikit/structuring_your_code_to_support_app_extensions",
    "interfaceLanguage": "occ"
  },
  "legacy_identifier": 2864027,
  "kind": "article",
  "metadata": {
    "title": "Structuring Your Code to Support App Extensions",
    "role": "article",
    "roleHeading": "Article",
    "modules": [
      {
        "name": "Intents"
      },
      {
        "name": "IntentsUI"
      }
    ]
  },
  "schemaVersion": {
    "major": 1,
    "minor": 0,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ],
      "paths": [
        "documentation/sirikit/structuring_your_code_to_support_app_extensions"
      ]
    },
    {
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ],
      "paths": [
        "documentation/sirikit/structuring_your_code_to_support_app_extensions"
      ]
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/sirikit": {
      "title": "SiriKit",
      "identifier": "doc://com.apple.documentation/documentation/sirikit",
      "url": "/documentation/sirikit",
      "type": "topic",
      "kind": "symbol",
      "role": "collection"
    },
    "doc://com.apple.documentation/documentation/sirikit/creating_an_intents_app_extension": {
      "title": "Creating an Intents App Extension",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/sirikit/creating_an_intents_app_extension",
      "kind": "article",
      "role": "article",
      "url": "/documentation/sirikit/creating_an_intents_app_extension",
      "abstract": [
        {
          "type": "text",
          "text": "Add and configure an Intents app extension in your Xcode project."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/sirikit/structuring_your_code_to_support_app_extensions": {
      "title": "Structuring Your Code to Support App Extensions",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/sirikit/structuring_your_code_to_support_app_extensions",
      "kind": "article",
      "role": "article",
      "url": "/documentation/sirikit/structuring_your_code_to_support_app_extensions",
      "abstract": [
        {
          "type": "text",
          "text": "Move your back-end services to a private framework so your app and app extensions can use them."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/sirikit/dispatching_intents_to_handler_objects": {
      "title": "Dispatching Intents to Handler Objects",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/sirikit/dispatching_intents_to_handler_objects",
      "kind": "article",
      "role": "article",
      "url": "/documentation/sirikit/dispatching_intents_to_handler_objects",
      "abstract": [
        {
          "type": "text",
          "text": "Provide SiriKit with an object capable of handling a given intent."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/sirikit/resolving_and_handling_intents": {
      "title": "Resolving and Handling Intents",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/sirikit/resolving_and_handling_intents",
      "kind": "article",
      "role": "article",
      "url": "/documentation/sirikit/resolving_and_handling_intents",
      "abstract": [
        {
          "type": "text",
          "text": "Resolve, confirm, and handle user requests for your app’s services."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/sirikit/inintenthandlerproviding": {
      "title": "INIntentHandlerProviding",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/sirikit/inintenthandlerproviding",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/sirikit/inintenthandlerproviding",
      "abstract": [
        {
          "type": "text",
          "text": "The interface for dispatching intents to the custom objects that handle those intents. "
        }
      ]
    },
    "doc://com.apple.documentation/documentation/sirikit/intents_and_related_classes": {
      "title": "Intents and Related Classes",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/sirikit/intents_and_related_classes",
      "kind": "article",
      "role": "collectionGroup",
      "url": "/documentation/sirikit/intents_and_related_classes",
      "abstract": [
        {
          "type": "text",
          "text": "Learn about the classes you use to build your Intents extension."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/sirikit/providing_hands-free_app_control_with_intents": {
      "title": "Providing Hands-Free App Control with Intents",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/sirikit/providing_hands-free_app_control_with_intents",
      "kind": "article",
      "role": "sampleCode",
      "url": "/documentation/sirikit/providing_hands-free_app_control_with_intents",
      "abstract": [
        {
          "type": "text",
          "text": "Resolve, confirm, and handle intents without an extension."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "url": "/documentation/technologies",
      "kind": "technologies",
      "title": "Technologies"
    }
  },
  "seeAlsoSections": [
    {
      "identifiers": [
        "doc://com.apple.documentation/documentation/sirikit/creating_an_intents_app_extension",
        "doc://com.apple.documentation/documentation/sirikit/dispatching_intents_to_handler_objects",
        "doc://com.apple.documentation/documentation/sirikit/resolving_and_handling_intents",
        "doc://com.apple.documentation/documentation/sirikit/inintenthandlerproviding",
        "doc://com.apple.documentation/documentation/sirikit/intents_and_related_classes",
        "doc://com.apple.documentation/documentation/sirikit/providing_hands-free_app_control_with_intents"
      ],
      "title": "Siri Intents",
      "generated": true
    }
  ],
  "primaryContentSections": [
    {
      "kind": "content",
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "An app extension is an agent that acts on behalf of your app, vending services or providing information to the system when asked. Because they extend your app’s behavior, app extensions often need access to the same back-end services and data that your app uses. "
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "If your app and app extension share services, consider structuring your code in the following way: "
            }
          ]
        },
        {
          "type": "unorderedList",
          "items": [
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "strong",
                      "inlineContent": [
                        {
                          "type": "text",
                          "text": "Implement your core services in a private shared framework."
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " A private shared framework lets you place the code for accessing your services in one code module and use that code from multiple targets. Shared frameworks minimize the size of both executables and make testing easier by ensuring that each executable uses the same code path. "
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "strong",
                      "inlineContent": [
                        {
                          "type": "text",
                          "text": "Use a shared container to store common resources."
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " Put relevant images and data files into a shared container so your app and app extension can use them. You enable shared container support in the Capabilities tab of each target."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": []
        }
      ]
    }
  ],
  "legalNotices": {
    "copyright": "Copyright &copy; 2020 Apple Inc. All rights reserved.",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy"
  }
}