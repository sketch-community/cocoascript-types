{
  "abstract": [
    {
      "type": "text",
      "text": "Create and evaluate digital signatures to establish the validity of code or data."
    }
  ],
  "documentVersion": 0,
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.documentation/documentation/security",
        "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services",
        "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys"
      ]
    ]
  },
  "identifier": {
    "url": "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying",
    "interfaceLanguage": "occ"
  },
  "legacy_identifier": 2864124,
  "kind": "article",
  "metadata": {
    "title": "Signing and Verifying",
    "role": "article",
    "roleHeading": "Article",
    "modules": [
      {
        "name": "Security"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  },
  "sections": [],
  "variants": [
    {
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ],
      "paths": [
        "documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying"
      ]
    },
    {
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ],
      "paths": [
        "documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying"
      ]
    }
  ],
  "references": {
    "doc://com.apple.documentation/documentation/security": {
      "title": "Security",
      "identifier": "doc://com.apple.documentation/documentation/security",
      "url": "/documentation/security",
      "type": "topic",
      "kind": "symbol",
      "role": "collection"
    },
    "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services": {
      "title": "Certificate, Key, and Trust Services",
      "identifier": "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services",
      "url": "/documentation/security/certificate_key_and_trust_services",
      "type": "topic",
      "kind": "article",
      "role": "collectionGroup"
    },
    "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys": {
      "title": "Keys",
      "identifier": "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys",
      "url": "/documentation/security/certificate_key_and_trust_services/keys",
      "type": "topic",
      "kind": "article",
      "role": "collectionGroup"
    },
    "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys/getting_an_existing_key": {
      "title": "Getting an Existing Key",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys/getting_an_existing_key",
      "kind": "article",
      "role": "article",
      "url": "/documentation/security/certificate_key_and_trust_services/keys/getting_an_existing_key"
    },
    "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying#2933741": {
      "title": "Listing 1",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying#2933741",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying#2933741"
    },
    "doc://com.apple.documentation/documentation/security/kseckeyalgorithmrsasignaturedigestpkcs1v15sha512": {
      "title": "kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/security/kseckeyalgorithmrsasignaturedigestpkcs1v15sha512",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/security/kseckeyalgorithmrsasignaturedigestpkcs1v15sha512"
    },
    "doc://com.apple.documentation/documentation/security/kseckeyalgorithmecdsasignaturemessagex962sha512": {
      "title": "kSecKeyAlgorithmECDSASignatureMessageX962SHA512",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/security/kseckeyalgorithmecdsasignaturemessagex962sha512",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/security/kseckeyalgorithmecdsasignaturemessagex962sha512"
    },
    "doc://com.apple.documentation/documentation/security/1644057-seckeyisalgorithmsupported": {
      "title": "SecKeyIsAlgorithmSupported",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/security/1644057-seckeyisalgorithmsupported",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/security/1644057-seckeyisalgorithmsupported"
    },
    "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying#2933746": {
      "title": "Listing 2",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying#2933746",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying#2933746"
    },
    "doc://com.apple.documentation/documentation/security/ksecattrcansign": {
      "title": "kSecAttrCanSign",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/security/ksecattrcansign",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/security/ksecattrcansign"
    },
    "doc://com.apple.documentation/documentation/objectivec/no": {
      "title": "NO",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/objectivec/no",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/objectivec/no"
    },
    "doc://com.apple.documentation/documentation/security/1643916-seckeycreatesignature": {
      "title": "SecKeyCreateSignature",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/security/1643916-seckeycreatesignature",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/security/1643916-seckeycreatesignature",
      "abstract": [
        {
          "type": "text",
          "text": "Creates the cryptographic signature for a block of data using a private key and specified algorithm."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying#2933742": {
      "title": "Listing 3",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying#2933742",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying#2933742"
    },
    "doc://com.apple.documentation/documentation/corefoundation/cferrorref": {
      "title": "CFErrorRef",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/corefoundation/cferrorref",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/corefoundation/cferrorref"
    },
    "doc://com.apple.documentation/documentation/swift/unmanaged/1539754-takeretainedvalue": {
      "title": "takeRetainedValue()",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/swift/unmanaged/1539754-takeretainedvalue",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/swift/unmanaged/1539754-takeretainedvalue"
    },
    "doc://com.apple.documentation/documentation/swift/error": {
      "title": "Error",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/swift/error",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/swift/error"
    },
    "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying#2933744": {
      "title": "Listing 4",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying#2933744",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying#2933744"
    },
    "doc://com.apple.documentation/documentation/security/1643715-seckeyverifysignature": {
      "title": "SecKeyVerifySignature",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/security/1643715-seckeyverifysignature",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/security/1643715-seckeyverifysignature",
      "abstract": [
        {
          "type": "text",
          "text": "Verifies the cryptographic signature of a block of data using a public key and specified algorithm."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying#2933745": {
      "title": "Listing 5",
      "type": "section",
      "identifier": "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying#2933745",
      "kind": "article",
      "role": "codeListing",
      "url": "/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying#2933745"
    },
    "doc://com.apple.documentation/documentation/objectivec/yes": {
      "title": "YES",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/objectivec/yes",
      "kind": "symbol",
      "role": "symbol",
      "url": "/documentation/objectivec/yes"
    },
    "devLink-1734079": {
      "identifier": "devLink-1734079",
      "type": "link",
      "title": "Code Signing Guide",
      "url": "https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005929"
    },
    "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying": {
      "title": "Signing and Verifying",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying",
      "kind": "article",
      "role": "article",
      "url": "/documentation/security/certificate_key_and_trust_services/keys/signing_and_verifying",
      "abstract": [
        {
          "type": "text",
          "text": "Create and evaluate digital signatures to establish the validity of code or data."
        }
      ]
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "url": "/documentation/technologies",
      "kind": "technologies",
      "title": "Technologies"
    }
  },
  "seeAlsoSections": [
    {
      "identifiers": [
        "doc://com.apple.documentation/documentation/security/1643916-seckeycreatesignature",
        "doc://com.apple.documentation/documentation/security/1643715-seckeyverifysignature"
      ],
      "title": "Digital Signatures",
      "generated": true
    }
  ],
  "primaryContentSections": [
    {
      "kind": "content",
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "You create a cryptographic signature on a block of data by first creating a hash of the data and then encrypting this digest with your private key. A recipient uses your public key to decrypt the signature, while independently re-creating the hash of the original data. If the decrypted hash and the computed one match, the recipient can be sure the data is from the owner of the private key that corresponds to the public key. "
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Often, you sign a block of data as a side effect of performing some other operation. For example, as a final step in distributing your app, Xcode signs the code on your behalf using one of your cryptographic identities (see "
            },
            {
              "type": "link",
              "title": "Code Signing Guide",
              "destination": "https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005929"
            },
            {
              "type": "text",
              "text": "). When you want to sign or verify a block of data in your app, you use functions provided by the certificate, key, and trust services API."
            }
          ]
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Get Your Private Key",
          "anchor": "2933739"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Begin by getting your private key, as described in "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys/getting_an_existing_key"
            },
            {
              "type": "text",
              "text": ", either from the keychain or from an identity (which itself probably resides in the keychain). Then, select one of the signing algorithms. For example:"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "SecKeyRef privateKey = <# a key #>;  // E.g., from the keychain",
            "SecKeyAlgorithm algorithm = kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512;"
          ],
          "syntax": "occ",
          "metadata": {
            "anchor": "2933741",
            "title": "Listing 1"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "This algorithm indicates that the signing function should first create an SHA-512 digest of the input data and then use RSA encryption with PKCS#1 padding. But you can choose different options, along a number of dimensions:"
            }
          ]
        },
        {
          "type": "unorderedList",
          "items": [
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "strong",
                      "inlineContent": [
                        {
                          "type": "text",
                          "text": "Digest vs. message."
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " If you already have a digest of the data, you can use one of the "
                    },
                    {
                      "type": "codeVoice",
                      "code": "Digest"
                    },
                    {
                      "type": "text",
                      "text": " algorithms. For example, the above algorithm might become "
                    },
                    {
                      "type": "reference",
                      "isActive": true,
                      "identifier": "doc://com.apple.documentation/documentation/security/kseckeyalgorithmrsasignaturedigestpkcs1v15sha512"
                    },
                    {
                      "type": "text",
                      "text": ". If you do this, be sure that the actual hashing matches the named hashing algorithm."
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    {
                      "type": "strong",
                      "inlineContent": [
                        {
                          "type": "text",
                          "text": "Digital signature algorithm type."
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "text": " If you have elliptic curve keys instead of RSA, you can use an Elliptic Curve Digital Signature Algorithm (ECDSA). For example, the above algorithm might become "
                    },
                    {
                      "type": "reference",
                      "isActive": true,
                      "identifier": "doc://com.apple.documentation/documentation/security/kseckeyalgorithmecdsasignaturemessagex962sha512"
                    },
                    {
                      "type": "text",
                      "text": "."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "With a key and an algorithm selected, you can test the compatibility of these with the signing operation using the "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/security/1644057-seckeyisalgorithmsupported"
            },
            {
              "type": "text",
              "text": " function:"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "BOOL canSign = SecKeyIsAlgorithmSupported(privateKey,",
            "                                          kSecKeyOperationTypeSign,",
            "                                          algorithm);"
          ],
          "syntax": "occ",
          "metadata": {
            "anchor": "2933746",
            "title": "Listing 2"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "This function might return "
            },
            {
              "type": "reference",
              "isActive": false,
              "identifier": "doc://com.apple.documentation/documentation/objectivec/no"
            },
            {
              "type": "text",
              "text": ", for example, if the key’s "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/security/ksecattrcansign"
            },
            {
              "type": "text",
              "text": " attribute is set to "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/objectivec/no"
            },
            {
              "type": "text",
              "text": ". This situation might happen if you used a public key instead of a private one (despite the variable name). Similarly, if you attempt to use an RSA key with one of the ECDSA algorithms, the check fails."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Finally, you can create the signature with a call to the "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/security/1643916-seckeycreatesignature"
            },
            {
              "type": "text",
              "text": " function:"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "NSData* data2sign = <# some data #>;",
            "NSData* signature = nil;",
            "if (canSign) {",
            "    CFErrorRef error = NULL;",
            "    signature = (NSData*)CFBridgingRelease(       // ARC takes ownership",
            "                     SecKeyCreateSignature(privateKey,",
            "                                           algorithm,",
            "                                           (__bridge CFDataRef)data2sign,",
            "                                           &error));",
            "    if (!signature) {",
            "        NSError *err = CFBridgingRelease(error);  // ARC takes ownership",
            "        // Handle the error. . .",
            "    }",
            "}",
            ""
          ],
          "syntax": "occ",
          "metadata": {
            "anchor": "2933742",
            "title": "Listing 3"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "If something goes wrong, the function returns a "
            },
            {
              "type": "codeVoice",
              "code": "nil"
            },
            {
              "type": "text",
              "text": " signature and populates the error reference with a "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/corefoundation/cferrorref"
            },
            {
              "type": "text",
              "text": " object that explains the failure. In Objective-C, you transfer management of the error object, if it exists, to Automatic Reference Counting (ARC). In Swift, you transfer control of this unmanaged object’s memory to the system with a call to "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/swift/unmanaged/1539754-takeretainedvalue"
            },
            {
              "type": "text",
              "text": " and recast as an "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/swift/error"
            },
            {
              "type": "text",
              "text": "."
            }
          ]
        },
        {
          "level": 3,
          "type": "heading",
          "text": "Transmit the Data",
          "anchor": "2933740"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "After you successfully generate a signature, you transmit the data and signature to any interested party. Using your public key, the recipient then verifies the signature by performing a set of operations that resemble the signing process. As the receiver, you first retrieve the public key, possibly from a certificate, as described in "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/security/certificate_key_and_trust_services/keys/getting_an_existing_key"
            },
            {
              "type": "text",
              "text": ". Then, using the same algorithm as was used for signing, you test that the key and algorithm are mutually compatible with the verification operation:"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "SecKeyRef publicKey = <# a key #>;  // E.g., from a cert",
            "BOOL canVerify = SecKeyIsAlgorithmSupported(publicKey,",
            "                                            kSecKeyOperationTypeVerify,",
            "                                            algorithm);"
          ],
          "syntax": "occ",
          "metadata": {
            "anchor": "2933744",
            "title": "Listing 4"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/security/1644057-seckeyisalgorithmsupported"
            },
            {
              "type": "text",
              "text": " function returns "
            },
            {
              "type": "reference",
              "isActive": false,
              "identifier": "doc://com.apple.documentation/documentation/objectivec/no"
            },
            {
              "type": "text",
              "text": " if you use the wrong kind of key for the operation or algorithm. You then conduct the verification with a call to the "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "doc://com.apple.documentation/documentation/security/1643715-seckeyverifysignature"
            },
            {
              "type": "text",
              "text": " function:"
            }
          ]
        },
        {
          "type": "codeListing",
          "code": [
            "BOOL result = NO;",
            "if (canVerify) {",
            "    CFErrorRef error = NULL;",
            "    result = SecKeyVerifySignature(publicKey,",
            "                                   algorithm,",
            "                                   (__bridge CFDataRef)data2sign,",
            "                                   (__bridge CFDataRef)signature,",
            "                                   &error);",
            "    if (!result) {",
            "        NSError *err = CFBridgingRelease(error);  // ARC takes ownership",
            "        // Handle the error. . .",
            "    }",
            "}",
            ""
          ],
          "syntax": "occ",
          "metadata": {
            "anchor": "2933745",
            "title": "Listing 5"
          }
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "If the call succeeds and the signature and data are intact, the return value is "
            },
            {
              "type": "reference",
              "isActive": false,
              "identifier": "doc://com.apple.documentation/documentation/objectivec/yes"
            },
            {
              "type": "text",
              "text": ". If the function returns "
            },
            {
              "type": "reference",
              "isActive": false,
              "identifier": "doc://com.apple.documentation/documentation/objectivec/no"
            },
            {
              "type": "text",
              "text": ", either the data or signature has been altered, the public key doesn’t match the private key, or some other error has occurred. Handle the error and transfer error object ownership to the system as needed."
            }
          ]
        }
      ]
    }
  ],
  "legalNotices": {
    "copyright": "Copyright &copy; 2021 Apple Inc. All rights reserved.",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy"
  }
}